
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000025bc  00002650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  00800136  00800136  00002686  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003d3f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e122  00000000  00000000  00004601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039e3  00000000  00000000  00012723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000057fb  00000000  00000000  00016106  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000155c  00000000  00000000  0001b904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004930  00000000  00000000  0001ce60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000087c0  00000000  00000000  00021790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a98  00000000  00000000  00029f50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	ea c2       	rjmp	.+1492   	; 0x632 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 3f 09 01 81 02 95 3f     .u...&...?.....?
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	04 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	ec eb       	ldi	r30, 0xBC	; 188
     2fc:	f5 e2       	ldi	r31, 0x25	; 37
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a1 35       	cpi	r26, 0x51	; 81
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	9e d0       	rcall	.+316    	; 0x458 <main>
				break;
     31c:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <SetupHardware>:
     322:	cf 93       	push	r28
				break;
     324:	df 93       	push	r29

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	84 b7       	in	r24, 0x34	; 52
     328:	87 7f       	andi	r24, 0xF7	; 247
     32a:	84 bf       	out	0x34, r24	; 52

				if (ParserData->UsingReportIDs)
     32c:	28 e1       	ldi	r18, 0x18	; 24
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	20 93 60 00 	sts	0x0060, r18
     336:	10 92 60 00 	sts	0x0060, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25
     344:	80 93 cc 00 	sts	0x00CC, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	ca ec       	ldi	r28, 0xCA	; 202

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	d0 e0       	ldi	r29, 0x00	; 0
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	98 83       	st	Y, r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	a8 ec       	ldi	r26, 0xC8	; 200
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	8c 93       	st	X, r24
     358:	e9 ec       	ldi	r30, 0xC9	; 201
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	20 83       	st	Z, r18
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	53 9a       	sbi	0x0a, 3	; 10
     360:	5a 9a       	sbi	0x0b, 2	; 11
     362:	5b 9a       	sbi	0x0b, 3	; 11
     364:	10 82       	st	Z, r1
     366:	1c 92       	st	X, r1
     368:	18 82       	st	Y, r1
     36a:	98 83       	st	Y, r25
     36c:	8c 93       	st	X, r24
     36e:	88 e9       	ldi	r24, 0x98	; 152
     370:	80 83       	st	Z, r24
     372:	5b 98       	cbi	0x0b, 3	; 11
     374:	8a b1       	in	r24, 0x0a	; 10
     376:	80 63       	ori	r24, 0x30	; 48

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	8a b9       	out	0x0a, r24	; 10
     37a:	8b b1       	in	r24, 0x0b	; 11
     37c:	80 63       	ori	r24, 0x30	; 48
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	8b b9       	out	0x0b, r24	; 11
     380:	0e 94 84 0c 	call	0x1908	; 0x1908 <USB_Init>
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	85 bd       	out	0x25, r24	; 37
     388:	5f 9a       	sbi	0x0b, 7	; 11
     38a:	57 9a       	sbi	0x0a, 7	; 10
     38c:	20 9a       	sbi	0x04, 0	; 4
     38e:	22 98       	cbi	0x04, 2	; 4
     390:	2a 9a       	sbi	0x05, 2	; 5
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <selectMode>:
     398:	20 91 36 01 	lds	r18, 0x0136
     39c:	80 91 24 01 	lds	r24, 0x0124
     3a0:	90 91 25 01 	lds	r25, 0x0125
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	a0 91 26 01 	lds	r26, 0x0126
     3a8:	b0 91 27 01 	lds	r27, 0x0127
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	a1 05       	cpc	r26, r1
     3b0:	b1 05       	cpc	r27, r1
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <selectMode+0x2a>
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	81 15       	cp	r24, r1
     3b6:	32 ec       	ldi	r19, 0xC2	; 194
     3b8:	93 07       	cpc	r25, r19
     3ba:	31 e0       	ldi	r19, 0x01	; 1
     3bc:	a3 07       	cpc	r26, r19

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	b1 05       	cpc	r27, r1
     3c0:	21 f4       	brne	.+8      	; 0x3ca <selectMode+0x32>
     3c2:	1a 9b       	sbis	0x03, 2	; 3
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <selectMode+0x32>
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <selectMode+0x40>
     3ca:	01 97       	sbiw	r24, 0x01	; 1
				break;
     3cc:	a1 05       	cpc	r26, r1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	b1 05       	cpc	r27, r1
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <selectMode+0x3e>
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <selectMode+0x40>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 36 01 	sts	0x0136, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3dc:	80 91 36 01 	lds	r24, 0x0136
     3e0:	28 17       	cp	r18, r24
     3e2:	c9 f1       	breq	.+114    	; 0x456 <selectMode+0xbe>
     3e4:	23 30       	cpi	r18, 0x03	; 3
     3e6:	11 f0       	breq	.+4      	; 0x3ec <selectMode+0x54>
     3e8:	21 11       	cpse	r18, r1
     3ea:	12 c0       	rjmp	.+36     	; 0x410 <selectMode+0x78>
     3ec:	e7 e3       	ldi	r30, 0x37	; 55
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	9f b7       	in	r25, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	80 81       	ld	r24, Z
     3f6:	80 78       	andi	r24, 0x80	; 128
     3f8:	80 68       	ori	r24, 0x80	; 128
				break;
     3fa:	80 83       	st	Z, r24
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	9f bf       	out	0x3f, r25	; 63
     400:	80 91 43 01 	lds	r24, 0x0143
     404:	80 7f       	andi	r24, 0xF0	; 240
     406:	80 93 43 01 	sts	0x0143, r24

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	8b b1       	in	r24, 0x0b	; 11
     40c:	80 63       	ori	r24, 0x30	; 48
     40e:	8b b9       	out	0x0b, r24	; 11
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	80 91 36 01 	lds	r24, 0x0136
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	49 f4       	brne	.+18     	; 0x42a <selectMode+0x92>
     418:	80 91 10 02 	lds	r24, 0x0210
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	80 68       	ori	r24, 0x80	; 128
     41e:	8f 7b       	andi	r24, 0xBF	; 191
     420:	80 93 10 02 	sts	0x0210, r24
     424:	10 92 c4 01 	sts	0x01C4, r1

					while (CurrCollectionPath->Parent != NULL)
     428:	08 95       	ret
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	f4 d1       	rcall	.+1000   	; 0x814 <flushHID>
     42c:	80 91 36 01 	lds	r24, 0x0136
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	89 f4       	brne	.+34     	; 0x456 <selectMode+0xbe>
     434:	10 92 3a 01 	sts	0x013A, r1
     438:	10 92 39 01 	sts	0x0139, r1
     43c:	10 92 3c 01 	sts	0x013C, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	10 92 3b 01 	sts	0x013B, r1
     444:	10 92 3e 01 	sts	0x013E, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	10 92 3d 01 	sts	0x013D, r1
     44c:	8b b1       	in	r24, 0x0b	; 11
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	80 63       	ori	r24, 0x30	; 48
     450:	8b b9       	out	0x0b, r24	; 11
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	22 98       	cbi	0x04, 2	; 4
     454:	2a 9a       	sbi	0x05, 2	; 5
     456:	08 95       	ret

00000458 <main>:
     458:	10 92 36 01 	sts	0x0136, r1
     45c:	4a e0       	ldi	r20, 0x0A	; 10
     45e:	50 e0       	ldi	r21, 0x00	; 0

				if (UsageListSize)
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 d5 12 	call	0x25aa	; 0x25aa <memset>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46c:	5a df       	rcall	.-332    	; 0x322 <SetupHardware>
     46e:	78 94       	sei
     470:	07 e3       	ldi	r16, 0x37	; 55
     472:	11 e0       	ldi	r17, 0x01	; 1
     474:	91 df       	rcall	.-222    	; 0x398 <selectMode>
     476:	80 91 36 01 	lds	r24, 0x0136
     47a:	83 30       	cpi	r24, 0x03	; 3
     47c:	11 f4       	brne	.+4      	; 0x482 <main+0x2a>
     47e:	b1 d5       	rcall	.+2914   	; 0xfe2 <avrisp>

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	c1 c0       	rjmp	.+386    	; 0x604 <main+0x1ac>
     482:	80 e1       	ldi	r24, 0x10	; 16
					  UsageList[i - 1] = UsageList[i];
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <CDC_Device_ReceiveByte>
     48a:	97 fd       	sbrc	r25, 7

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <main+0x4e>
     48e:	5c 98       	cbi	0x0b, 4	; 11
     490:	90 91 43 01 	lds	r25, 0x0143
     494:	9c 60       	ori	r25, 0x0C	; 12
     496:	90 93 43 01 	sts	0x0143, r25
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     49a:	90 91 c8 00 	lds	r25, 0x00C8
     49e:	95 ff       	sbrs	r25, 5
     4a0:	fc cf       	rjmp	.-8      	; 0x49a <main+0x42>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	80 93 ce 00 	sts	0x00CE, r24
     4a6:	9f b7       	in	r25, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	80 91 37 01 	lds	r24, 0x0137
     4ae:	88 0f       	add	r24, r24
     4b0:	88 0b       	sbc	r24, r24
     4b2:	20 91 38 01 	lds	r18, 0x0138
     4b6:	82 23       	and	r24, r18
     4b8:	9f bf       	out	0x3f, r25	; 63
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	19 f4       	brne	.+6      	; 0x4c6 <main+0x6e>
     4c0:	a8 99       	sbic	0x15, 0	; 21
     4c2:	5a c0       	rjmp	.+180    	; 0x578 <main+0x120>
     4c4:	9f c0       	rjmp	.+318    	; 0x604 <main+0x1ac>
     4c6:	5d 98       	cbi	0x0b, 5	; 11
     4c8:	20 91 43 01 	lds	r18, 0x0143
     4cc:	23 60       	ori	r18, 0x03	; 3
     4ce:	20 93 43 01 	sts	0x0143, r18
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d2:	20 91 11 01 	lds	r18, 0x0111
     4d6:	2f 70       	andi	r18, 0x0F	; 15
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	20 93 e9 00 	sts	0x00E9, r18
     4dc:	20 91 e8 00 	lds	r18, 0x00E8
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	20 ff       	sbrs	r18, 0
     4e2:	ee cf       	rjmp	.-36     	; 0x4c0 <main+0x68>
     4e4:	80 34       	cpi	r24, 0x40	; 64
     4e6:	91 05       	cpc	r25, r1
     4e8:	10 f0       	brcs	.+4      	; 0x4ee <main+0x96>
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	f8 2e       	mov	r15, r24
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	3e c0       	rjmp	.+124    	; 0x572 <main+0x11a>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	80 91 36 01 	lds	r24, 0x0136
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	39 f0       	breq	.+14     	; 0x50c <main+0xb4>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	f8 01       	movw	r30, r16
     500:	2f b7       	in	r18, 0x3f	; 63
     502:	f8 94       	cli
     504:	a0 81       	ld	r26, Z

					if (UsageListSize)
     506:	a7 fd       	sbrc	r26, 7
     508:	1d c0       	rjmp	.+58     	; 0x544 <main+0xec>
     50a:	1f c0       	rjmp	.+62     	; 0x54a <main+0xf2>
     50c:	8f b7       	in	r24, 0x3f	; 63
     50e:	f8 94       	cli
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	e0 91 37 01 	lds	r30, 0x0137
     514:	e7 ff       	sbrs	r30, 7
     516:	04 c0       	rjmp	.+8      	; 0x520 <main+0xc8>
     518:	90 91 38 01 	lds	r25, 0x0138
     51c:	91 11       	cpse	r25, r1
     51e:	04 c0       	rjmp	.+8      	; 0x528 <main+0xd0>
     520:	8f bf       	out	0x3f, r24	; 63
     522:	6f ef       	ldi	r22, 0xFF	; 255
     524:	7f ef       	ldi	r23, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	07 c0       	rjmp	.+14     	; 0x536 <main+0xde>
     528:	e9 1b       	sub	r30, r25
						  UsageList[i - 1] = UsageList[i];
     52a:	ef 77       	andi	r30, 0x7F	; 127
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ea 5c       	subi	r30, 0xCA	; 202
     530:	fe 4f       	sbci	r31, 0xFE	; 254

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	66 85       	ldd	r22, Z+14	; 0x0e
     534:	8f bf       	out	0x3f, r24	; 63
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <CDC_Device_SendByte>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	88 23       	and	r24, r24
     540:	f1 f2       	breq	.-68     	; 0x4fe <main+0xa6>
     542:	be cf       	rjmp	.-132    	; 0x4c0 <main+0x68>
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	91 11       	cpse	r25, r1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	04 c0       	rjmp	.+8      	; 0x552 <main+0xfa>
     54a:	2f bf       	out	0x3f, r18	; 63
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	0a c0       	rjmp	.+20     	; 0x566 <main+0x10e>
     552:	a9 1b       	sub	r26, r25
     554:	af 77       	andi	r26, 0x7F	; 127
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	aa 5c       	subi	r26, 0xCA	; 202
     55a:	be 4f       	sbci	r27, 0xFE	; 254
     55c:	1e 96       	adiw	r26, 0x0e	; 14
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	8c 91       	ld	r24, X
     560:	91 50       	subi	r25, 0x01	; 1
     562:	91 83       	std	Z+1, r25	; 0x01
     564:	2f bf       	out	0x3f, r18	; 63
     566:	20 91 36 01 	lds	r18, 0x0136
     56a:	22 30       	cpi	r18, 0x02	; 2
     56c:	09 f4       	brne	.+2      	; 0x570 <main+0x118>
     56e:	ad d1       	rcall	.+858    	; 0x8ca <checkNHPProtocol>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	21 96       	adiw	r28, 0x01	; 1
     572:	fc 12       	cpse	r15, r28
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	c0 cf       	rjmp	.-128    	; 0x4f6 <main+0x9e>
     576:	a4 cf       	rjmp	.-184    	; 0x4c0 <main+0x68>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	a8 9a       	sbi	0x15, 0	; 21
     57a:	90 91 43 01 	lds	r25, 0x0143
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57e:	89 2f       	mov	r24, r25
     580:	83 70       	andi	r24, 0x03	; 3
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	61 f1       	breq	.+88     	; 0x5dc <main+0x184>
     584:	81 50       	subi	r24, 0x01	; 1

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	83 70       	andi	r24, 0x03	; 3
     588:	9c 7f       	andi	r25, 0xFC	; 252
     58a:	98 2b       	or	r25, r24
     58c:	90 93 43 01 	sts	0x0143, r25
     590:	81 11       	cpse	r24, r1
     592:	24 c0       	rjmp	.+72     	; 0x5dc <main+0x184>
     594:	80 91 36 01 	lds	r24, 0x0136
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	f9 f4       	brne	.+62     	; 0x5da <main+0x182>
     59c:	6c d1       	rcall	.+728    	; 0x876 <checkNHPControlAddressError>
     59e:	90 91 10 02 	lds	r25, 0x0210

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	89 2f       	mov	r24, r25
     5a4:	86 95       	lsr	r24
     5a6:	86 95       	lsr	r24
     5a8:	86 95       	lsr	r24
     5aa:	97 ff       	sbrs	r25, 7
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <main+0x15c>
     5ae:	87 70       	andi	r24, 0x07	; 7
     5b0:	60 e0       	ldi	r22, 0x00	; 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <main+0x162>
     5b4:	68 2f       	mov	r22, r24
     5b6:	67 70       	andi	r22, 0x07	; 7
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	96 ff       	sbrs	r25, 6
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <main+0x16a>
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <main+0x16e>
     5c2:	66 23       	and	r22, r22
     5c4:	21 f0       	breq	.+8      	; 0x5ce <main+0x176>
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	8b 5e       	subi	r24, 0xEB	; 235
     5ca:	9d 4f       	sbci	r25, 0xFD	; 253
     5cc:	3f d1       	rcall	.+638    	; 0x84c <writeToCDC>
     5ce:	80 91 10 02 	lds	r24, 0x0210
     5d2:	80 68       	ori	r24, 0x80	; 128
     5d4:	8f 7b       	andi	r24, 0xBF	; 191
     5d6:	80 93 10 02 	sts	0x0210, r24
     5da:	5d 9a       	sbi	0x0b, 5	; 11
     5dc:	90 91 43 01 	lds	r25, 0x0143
     5e0:	89 2f       	mov	r24, r25
     5e2:	8c 70       	andi	r24, 0x0C	; 12
     5e4:	79 f0       	breq	.+30     	; 0x604 <main+0x1ac>
     5e6:	89 2f       	mov	r24, r25
     5e8:	86 95       	lsr	r24
     5ea:	86 95       	lsr	r24
     5ec:	8d 5f       	subi	r24, 0xFD	; 253
     5ee:	83 70       	andi	r24, 0x03	; 3
     5f0:	28 2f       	mov	r18, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	22 0f       	add	r18, r18
     5f4:	22 0f       	add	r18, r18
     5f6:	93 7f       	andi	r25, 0xF3	; 243
     5f8:	92 2b       	or	r25, r18
					  return HID_PARSE_InsufficientReportItems;
     5fa:	90 93 43 01 	sts	0x0143, r25

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	81 11       	cpse	r24, r1
     600:	01 c0       	rjmp	.+2      	; 0x604 <main+0x1ac>
     602:	5c 9a       	sbi	0x0b, 4	; 11
     604:	80 e1       	ldi	r24, 0x10	; 16
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <CDC_Device_USBTask>
     60c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <USB_USBTask>
     610:	31 cf       	rjmp	.-414    	; 0x474 <main+0x1c>

00000612 <EVENT_USB_Device_Connect>:
     612:	08 95       	ret

00000614 <EVENT_USB_Device_Disconnect>:
     614:	08 95       	ret

00000616 <EVENT_USB_Device_ConfigurationChanged>:
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 c4 11 	call	0x2388	; 0x2388 <HID_Device_ConfigureEndpoints>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	80 e1       	ldi	r24, 0x10	; 16
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <CDC_Device_ConfigureEndpoints>
     626:	e2 ee       	ldi	r30, 0xE2	; 226
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	84 60       	ori	r24, 0x04	; 4
     62e:	80 83       	st	Z, r24
     630:	08 95       	ret

00000632 <__vector_23>:
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
     648:	ef 93       	push	r30
     64a:	ff 93       	push	r31
     64c:	80 91 ce 00 	lds	r24, 0x00CE
     650:	90 91 36 01 	lds	r25, 0x0136
     654:	93 30       	cpi	r25, 0x03	; 3
     656:	01 f1       	breq	.+64     	; 0x698 <__vector_23+0x66>
     658:	90 91 48 02 	lds	r25, 0x0248
     65c:	94 30       	cpi	r25, 0x04	; 4
     65e:	e1 f4       	brne	.+56     	; 0x698 <__vector_23+0x66>
     660:	e7 e3       	ldi	r30, 0x37	; 55
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	2f b7       	in	r18, 0x3f	; 63
     666:	f8 94       	cli
     668:	90 81       	ld	r25, Z
     66a:	97 ff       	sbrs	r25, 7
     66c:	14 c0       	rjmp	.+40     	; 0x696 <__vector_23+0x64>
     66e:	31 81       	ldd	r19, Z+1	; 0x01
     670:	30 38       	cpi	r19, 0x80	; 128
     672:	09 f4       	brne	.+2      	; 0x676 <__vector_23+0x44>
     674:	10 c0       	rjmp	.+32     	; 0x696 <__vector_23+0x64>
     676:	9f 77       	andi	r25, 0x7F	; 127
     678:	a9 2f       	mov	r26, r25
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	aa 5c       	subi	r26, 0xCA	; 202
					  ParserData->TotalReportItems++;
     67e:	be 4f       	sbci	r27, 0xFE	; 254
     680:	1e 96       	adiw	r26, 0x0e	; 14
     682:	8c 93       	st	X, r24
     684:	9f 5f       	subi	r25, 0xFF	; 255
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	9f 77       	andi	r25, 0x7F	; 127
     688:	80 81       	ld	r24, Z
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	80 78       	andi	r24, 0x80	; 128
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	89 2b       	or	r24, r25
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	80 83       	st	Z, r24
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	81 83       	std	Z+1, r24	; 0x01
     696:	2f bf       	out	0x3f, r18	; 63
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <EVENT_USB_Device_ControlRequest>:
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <CDC_Device_ProcessControlRequest>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6ba:	80 e0       	ldi	r24, 0x00	; 0

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0c 94 8d 10 	jmp	0x211a	; 0x211a <HID_Device_ProcessControlRequest>

000006c2 <EVENT_USB_Device_StartOfFrame>:
     6c2:	80 91 0e 01 	lds	r24, 0x010E
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	90 91 0f 01 	lds	r25, 0x010F
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <EVENT_USB_Device_StartOfFrame+0x16>
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	90 93 0f 01 	sts	0x010F, r25
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d4:	80 93 0e 01 	sts	0x010E, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	08 95       	ret

000006da <CALLBACK_USB_GetDescriptor>:
     6da:	29 2f       	mov	r18, r25
     6dc:	33 27       	eor	r19, r19
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	23 30       	cpi	r18, 0x03	; 3
     6e0:	31 05       	cpc	r19, r1
     6e2:	b1 f0       	breq	.+44     	; 0x710 <CALLBACK_USB_GetDescriptor+0x36>
     6e4:	4c f4       	brge	.+18     	; 0x6f8 <CALLBACK_USB_GetDescriptor+0x1e>
     6e6:	21 30       	cpi	r18, 0x01	; 1
     6e8:	31 05       	cpc	r19, r1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <CALLBACK_USB_GetDescriptor+0x14>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	39 c0       	rjmp	.+114    	; 0x760 <CALLBACK_USB_GetDescriptor+0x86>
     6ee:	22 30       	cpi	r18, 0x02	; 2
     6f0:	31 05       	cpc	r19, r1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <CALLBACK_USB_GetDescriptor+0x1c>
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	3a c0       	rjmp	.+116    	; 0x76a <CALLBACK_USB_GetDescriptor+0x90>
     6f6:	07 c0       	rjmp	.+14     	; 0x706 <CALLBACK_USB_GetDescriptor+0x2c>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	21 32       	cpi	r18, 0x21	; 33
     6fa:	31 05       	cpc	r19, r1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	39 f1       	breq	.+78     	; 0x74c <CALLBACK_USB_GetDescriptor+0x72>
     6fe:	22 32       	cpi	r18, 0x22	; 34
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	31 05       	cpc	r19, r1
     702:	49 f1       	breq	.+82     	; 0x756 <CALLBACK_USB_GetDescriptor+0x7c>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	32 c0       	rjmp	.+100    	; 0x76a <CALLBACK_USB_GetDescriptor+0x90>
     706:	ef e5       	ldi	r30, 0x5F	; 95

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	8e eb       	ldi	r24, 0xBE	; 190
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	31 c0       	rjmp	.+98     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	99 27       	eor	r25, r25
     712:	81 30       	cpi	r24, 0x01	; 1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	91 05       	cpc	r25, r1
     716:	61 f0       	breq	.+24     	; 0x730 <CALLBACK_USB_GetDescriptor+0x56>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	91 05       	cpc	r25, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	81 f0       	breq	.+32     	; 0x73e <CALLBACK_USB_GetDescriptor+0x64>
     71e:	89 2b       	or	r24, r25
     720:	21 f5       	brne	.+72     	; 0x76a <CALLBACK_USB_GetDescriptor+0x90>
     722:	ea eb       	ldi	r30, 0xBA	; 186
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	e4 91       	lpm	r30, Z+
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	8a eb       	ldi	r24, 0xBA	; 186
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	21 c0       	rjmp	.+66     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
     730:	e6 ea       	ldi	r30, 0xA6	; 166
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	e4 91       	lpm	r30, Z+
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	86 ea       	ldi	r24, 0xA6	; 166
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	1a c0       	rjmp	.+52     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
     73e:	e4 e7       	ldi	r30, 0x74	; 116
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	e4 91       	lpm	r30, Z+
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	84 e7       	ldi	r24, 0x74	; 116
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	13 c0       	rjmp	.+38     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
     74c:	e9 e0       	ldi	r30, 0x09	; 9
     74e:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     750:	8d e0       	ldi	r24, 0x0D	; 13
     752:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     754:	0e c0       	rjmp	.+28     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     756:	e8 eb       	ldi	r30, 0xB8	; 184
     758:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     75a:	8f e2       	ldi	r24, 0x2F	; 47
     75c:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     75e:	09 c0       	rjmp	.+18     	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     760:	e2 e1       	ldi	r30, 0x12	; 18
     762:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     764:	8d e1       	ldi	r24, 0x1D	; 29
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	04 c0       	rjmp	.+8      	; 0x772 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     76a:	e0 e0       	ldi	r30, 0x00	; 0
     76c:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     772:	da 01       	movw	r26, r20
     774:	8d 93       	st	X+, r24
     776:	9c 93       	st	X, r25
	return Size;
}
     778:	cf 01       	movw	r24, r30
     77a:	08 95       	ret

0000077c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	7b 01       	movw	r14, r22
     78a:	c9 01       	movw	r24, r18
     78c:	e8 01       	movw	r28, r16
	// only send report if there is actually a new report
	if (ram.HID.ID && ram.HID.length == ram.HID.recvlength){
     78e:	e0 91 c4 01 	lds	r30, 0x01C4
     792:	ee 23       	and	r30, r30
     794:	29 f1       	breq	.+74     	; 0x7e0 <CALLBACK_HID_Device_CreateHIDReport+0x64>
     796:	40 91 c5 01 	lds	r20, 0x01C5
     79a:	20 91 c6 01 	lds	r18, 0x01C6
     79e:	42 13       	cpse	r20, r18
     7a0:	1f c0       	rjmp	.+62     	; 0x7e0 <CALLBACK_HID_Device_CreateHIDReport+0x64>
		// set a general and specific flag that a report was made, ignore rawHID
		if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     7a2:	e3 30       	cpi	r30, 0x03	; 3
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <CALLBACK_HID_Device_CreateHIDReport+0x38>
			ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     7a6:	51 e0       	ldi	r21, 0x01	; 1
     7a8:	50 93 06 02 	sts	0x0206, r21
			ram.HID.isEmpty[ram.HID.ID] = true;
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ea 5f       	subi	r30, 0xFA	; 250
     7b0:	fd 4f       	sbci	r31, 0xFD	; 253
     7b2:	50 83       	st	Z, r21
		}

		//write report and reset ID
		memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     7b4:	e7 ec       	ldi	r30, 0xC7	; 199
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	bf 01       	movw	r22, r30
     7bc:	0e 94 cc 12 	call	0x2598	; 0x2598 <memcpy>
		*ReportID = ram.HID.ID;
     7c0:	80 91 c4 01 	lds	r24, 0x01C4
     7c4:	f7 01       	movw	r30, r14
     7c6:	80 83       	st	Z, r24
		*ReportSize = ram.HID.length;
     7c8:	80 91 c5 01 	lds	r24, 0x01C5
     7cc:	88 83       	st	Y, r24
     7ce:	19 82       	std	Y+1, r1	; 0x01
		ram.HID.ID = 0;
     7d0:	10 92 c4 01 	sts	0x01C4, r1
		ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     7d4:	10 92 c6 01 	sts	0x01C6, r1
		ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     7d8:	10 92 c5 01 	sts	0x01C5, r1

		// always return true, because we cannot compare with >1 report due to ram limit
		// this will forcewrite the report every time
		return true;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <CALLBACK_HID_Device_CreateHIDReport+0x66>
	}
	else return false;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	08 95       	ret

000007f0 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     7f6:	63 30       	cpi	r22, 0x03	; 3
     7f8:	51 f4       	brne	.+20     	; 0x80e <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     7fa:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     7fc:	20 91 43 01 	lds	r18, 0x0143
     800:	2c 60       	ori	r18, 0x0C	; 12
     802:	20 93 43 01 	sts	0x0143, r18

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     806:	b8 01       	movw	r22, r16
	}
}
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     80c:	1e c6       	rjmp	.+3132   	; 0x144a <Serial_SendData>
     80e:	1f 91       	pop	r17
	}
}
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <flushHID>:
	}
	// clear the flag that >0 reports were set
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void flushHID(void){
     814:	04 c0       	rjmp	.+8      	; 0x81e <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     81e:	80 91 c4 01 	lds	r24, 0x01C4
     822:	88 23       	and	r24, r24
     824:	31 f0       	breq	.+12     	; 0x832 <flushHID+0x1e>
     826:	90 91 c5 01 	lds	r25, 0x01C5
     82a:	80 91 c6 01 	lds	r24, 0x01C6
     82e:	98 17       	cp	r25, r24
     830:	91 f3       	breq	.-28     	; 0x816 <flushHID+0x2>
     832:	08 95       	ret

00000834 <getHIDReportLength>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

uint8_t getHIDReportLength(uint8_t ID){
     834:	e0 91 c4 01 	lds	r30, 0x01C4
     838:	e1 50       	subi	r30, 0x01	; 1
     83a:	e9 30       	cpi	r30, 0x09	; 9
     83c:	28 f4       	brcc	.+10     	; 0x848 <getHIDReportLength+0x14>
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	e5 5d       	subi	r30, 0xD5	; 213
     842:	fe 4f       	sbci	r31, 0xFE	; 254
     844:	80 81       	ld	r24, Z
     846:	08 95       	ret
	// Get the length of the report
	switch (ram.HID.ID){
     848:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     84a:	08 95       	ret

0000084c <writeToCDC>:


void writeToCDC(uint8_t buffer[], uint8_t length){
     84c:	46 2f       	mov	r20, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     84e:	20 91 11 01 	lds	r18, 0x0111
     852:	2f 70       	andi	r18, 0x0F	; 15
     854:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     858:	20 91 e8 00 	lds	r18, 0x00E8
	//CDC_Device_USBTask(&VirtualSerial_CDC_Interface);

	// Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
	// until it completes as there is a chance nothing is listening and a lengthy timeout could occur
	Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);
	while (!Endpoint_IsINReady());
     85c:	20 ff       	sbrs	r18, 0
     85e:	fc cf       	rjmp	.-8      	; 0x858 <writeToCDC+0xc>

	// Try to send the next bytes to the host, abort if DTR isnt set to not block serial reading
	bool CurrentDTRState = (VirtualSerial_CDC_Interface.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     860:	20 91 20 01 	lds	r18, 0x0120
	if (CurrentDTRState)
     864:	20 ff       	sbrs	r18, 0
     866:	06 c0       	rjmp	.+12     	; 0x874 <writeToCDC+0x28>
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	bc 01       	movw	r22, r24
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <CDC_Device_SendData>
     874:	08 95       	ret

00000876 <checkNHPControlAddressError>:
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}

void checkNHPControlAddressError(void){
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <checkNHPControlAddressError+0x6>
     87c:	00 d0       	rcall	.+0      	; 0x87e <checkNHPControlAddressError+0x8>
     87e:	00 d0       	rcall	.+0      	; 0x880 <checkNHPControlAddressError+0xa>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     884:	60 91 c4 01 	lds	r22, 0x01C4
     888:	66 23       	and	r22, r22
     88a:	79 f0       	breq	.+30     	; 0x8aa <checkNHPControlAddressError+0x34>
     88c:	80 91 c6 01 	lds	r24, 0x01C6
     890:	81 11       	cpse	r24, r1
     892:	0b c0       	rjmp	.+22     	; 0x8aa <checkNHPControlAddressError+0x34>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	71 60       	ori	r23, 0x01	; 1
     898:	ae 01       	movw	r20, r28
     89a:	4f 5f       	subi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	2b d5       	rcall	.+2646   	; 0x12f8 <NHPwriteChecksum>
     8a2:	68 2f       	mov	r22, r24

		// Writes the NHP read buffer with the given length
		// If host is not listening it will discard all bytes to not block any HID reading
		writeToCDC(buff, length);
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	d1 df       	rcall	.-94     	; 0x84c <writeToCDC>
     8aa:	b4 df       	rcall	.-152    	; 0x814 <flushHID>
     8ac:	10 92 c4 01 	sts	0x01C4, r1
	}
	// bug in 1.6 - 1.7.2 found
	flushHID();
     8b0:	10 92 c6 01 	sts	0x01C6, r1

	// reset any pending HID reports
	ram.HID.ID = 0;
     8b4:	10 92 c5 01 	sts	0x01C5, r1
	ram.HID.recvlength = 0; // just to be sure
     8b8:	26 96       	adiw	r28, 0x06	; 6
	ram.HID.length = 0; // just to be sure
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
}
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <checkNHPProtocol>:
	if (CurrentDTRState)
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     8ca:	cf 93       	push	r28

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     8cc:	60 e1       	ldi	r22, 0x10	; 16
     8ce:	72 e0       	ldi	r23, 0x02	; 2
     8d0:	f0 d4       	rcall	.+2528   	; 0x12b2 <NHPreadChecksum>
     8d2:	c8 2f       	mov	r28, r24
     8d4:	88 23       	and	r24, r24

	if (address == 0)
     8d6:	09 f4       	brne	.+2      	; 0x8da <checkNHPProtocol+0x10>
     8d8:	75 c0       	rjmp	.+234    	; 0x9c4 <checkNHPProtocol+0xfa>
     8da:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     8dc:	19 c0       	rjmp	.+50     	; 0x910 <checkNHPProtocol+0x46>
     8de:	cb df       	rcall	.-106    	; 0x876 <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     8e0:	80 91 10 02 	lds	r24, 0x0210

		// ignore command
		uint8_t length = ram.NHP.readlength;
     8e4:	68 2f       	mov	r22, r24
     8e6:	66 95       	lsr	r22
     8e8:	66 95       	lsr	r22
     8ea:	66 95       	lsr	r22
     8ec:	67 70       	andi	r22, 0x07	; 7
     8ee:	86 ff       	sbrs	r24, 6
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <checkNHPProtocol+0x34>
		if (ram.NHP.leadError && address == NHP_COMMAND){
     8f2:	cf 3f       	cpi	r28, 0xFF	; 255
     8f4:	21 f4       	brne	.+8      	; 0x8fe <checkNHPProtocol+0x34>
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	8f 7b       	andi	r24, 0xBF	; 191
			length ++;
     8fa:	80 93 10 02 	sts	0x0210, r24
			ram.NHP.leadError = false;
     8fe:	85 e1       	ldi	r24, 0x15	; 21
     900:	92 e0       	ldi	r25, 0x02	; 2
		}

		// error while reading, write down current buffer
		writeToCDC(ram.NHP.readbuffer, length);
     902:	a4 df       	rcall	.-184    	; 0x84c <writeToCDC>
     904:	80 91 10 02 	lds	r24, 0x0210
     908:	80 68       	ori	r24, 0x80	; 128
		//for (int i = 0; i < length; i++)
		//	RingBuffer_Insert(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer[i]);

		// reset buffer. Tell the timeout function that this part is written down
		ram.NHP.reset = true;
     90a:	80 93 10 02 	sts	0x0210, r24
     90e:	5a c0       	rjmp	.+180    	; 0x9c4 <checkNHPProtocol+0xfa>
     910:	81 df       	rcall	.-254    	; 0x814 <flushHID>
     912:	c1 30       	cpi	r28, 0x01	; 1
		return;
     914:	c9 f4       	brne	.+50     	; 0x948 <checkNHPProtocol+0x7e>
	}

	// we have a pending HID report, flush it first
	flushHID();
     916:	80 91 12 02 	lds	r24, 0x0212

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	a9 f4       	brne	.+42     	; 0x948 <checkNHPProtocol+0x7e>
     91e:	ab df       	rcall	.-170    	; 0x876 <checkNHPControlAddressError>
     920:	80 91 11 02 	lds	r24, 0x0211
     924:	80 93 c4 01 	sts	0x01C4, r24
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     928:	10 92 c6 01 	sts	0x01C6, r1

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     92c:	9f e3       	ldi	r25, 0x3F	; 63
     92e:	e7 ec       	ldi	r30, 0xC7	; 199
     930:	f1 e0       	ldi	r31, 0x01	; 1
		ram.HID.recvlength = 0;
     932:	df 01       	movw	r26, r30
     934:	1d 92       	st	X+, r1
		memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));
     936:	9a 95       	dec	r25
     938:	e9 f7       	brne	.-6      	; 0x934 <checkNHPProtocol+0x6a>
     93a:	7c df       	rcall	.-264    	; 0x834 <getHIDReportLength>
     93c:	80 93 c5 01 	sts	0x01C5, r24
     940:	81 11       	cpse	r24, r1
     942:	40 c0       	rjmp	.+128    	; 0x9c4 <checkNHPProtocol+0xfa>

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     944:	cf 91       	pop	r28
     946:	97 cf       	rjmp	.-210    	; 0x876 <checkNHPControlAddressError>
     948:	80 91 c4 01 	lds	r24, 0x01C4

		// error, write down this wrong ID report
		if (!ram.HID.length)
     94c:	88 23       	and	r24, r24
     94e:	79 f1       	breq	.+94     	; 0x9ae <checkNHPProtocol+0xe4>
		checkNHPControlAddressError();

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}
     950:	60 91 c6 01 	lds	r22, 0x01C6
		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);

		// error, write down this wrong ID report
		if (!ram.HID.length)
			checkNHPControlAddressError();
     954:	46 2f       	mov	r20, r22
		// The Protocol received a valid signal with inverse checksum
		// Do not write the buff in the loop above or below, filter it out at the end
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	8c 2f       	mov	r24, r28
     95a:	99 27       	eor	r25, r25
     95c:	87 fd       	sbrc	r24, 7
     95e:	90 95       	com	r25
     960:	9a 01       	movw	r18, r20
     962:	2e 5f       	subi	r18, 0xFE	; 254
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	35 95       	asr	r19
     968:	27 95       	ror	r18
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	82 17       	cp	r24, r18
     970:	93 07       	cpc	r25, r19
     972:	e9 f4       	brne	.+58     	; 0x9ae <checkNHPProtocol+0xe4>
     974:	fa 01       	movw	r30, r20
     976:	e9 53       	subi	r30, 0x39	; 57
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	80 91 11 02 	lds	r24, 0x0211
     97e:	80 83       	st	Z, r24
     980:	e6 2f       	mov	r30, r22
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     982:	ef 5f       	subi	r30, 0xFF	; 255
     984:	e0 93 c6 01 	sts	0x01C6, r30
     988:	80 91 c5 01 	lds	r24, 0x01C5
     98c:	8e 17       	cp	r24, r30
     98e:	49 f0       	breq	.+18     	; 0x9a2 <checkNHPProtocol+0xd8>
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	e9 53       	subi	r30, 0x39	; 57
     994:	fe 4f       	sbci	r31, 0xFE	; 254

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     996:	90 91 12 02 	lds	r25, 0x0212
     99a:	90 83       	st	Z, r25
     99c:	6e 5f       	subi	r22, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     99e:	60 93 c6 01 	sts	0x01C6, r22
     9a2:	90 91 c6 01 	lds	r25, 0x01C6
     9a6:	89 13       	cpse	r24, r25
     9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <checkNHPProtocol+0xfa>
     9aa:	cf 91       	pop	r28
     9ac:	33 cf       	rjmp	.-410    	; 0x814 <flushHID>
     9ae:	63 df       	rcall	.-314    	; 0x876 <checkNHPControlAddressError>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     9b0:	60 91 10 02 	lds	r22, 0x0210
     9b4:	66 95       	lsr	r22
     9b6:	66 95       	lsr	r22
		checkNHPControlAddressError();

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}
     9b8:	66 95       	lsr	r22
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
			flushHID();
     9ba:	67 70       	andi	r22, 0x07	; 7
     9bc:	85 e1       	ldi	r24, 0x15	; 21

	// we received a corrupt data packet
	else{
		// check if previous reading was a valid Control Address and write it down
		// if not discard the bytes because we assume it is corrupted data
		checkNHPControlAddressError();
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	cf 91       	pop	r28

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
     9c2:	44 cf       	rjmp	.-376    	; 0x84c <writeToCDC>
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <LEDs_TurnOnLEDs>:
     9c8:	9b b1       	in	r25, 0x0b	; 11
     9ca:	80 95       	com	r24
     9cc:	89 23       	and	r24, r25
     9ce:	8b b9       	out	0x0b, r24	; 11
     9d0:	08 95       	ret

000009d2 <sendCDCbyte>:

}

void sendCDCbyte(uint8_t b){
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     9d2:	68 2f       	mov	r22, r24
     9d4:	80 e1       	ldi	r24, 0x10	; 16
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <CDC_Device_SendByte>
     9dc:	88 23       	and	r24, r24
     9de:	e9 f0       	breq	.+58     	; 0xa1a <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <CDC_Device_USBTask>
		USB_USBTask();
     9e8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     9ec:	80 e1       	ldi	r24, 0x10	; 16
     9ee:	ec df       	rcall	.-40     	; 0x9c8 <LEDs_TurnOnLEDs>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f2:	81 ee       	ldi	r24, 0xE1	; 225
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <sendCDCbyte+0x24>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <sendCDCbyte+0x2e>
     a00:	00 00       	nop
     a02:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     a04:	e1 df       	rcall	.-62     	; 0x9c8 <LEDs_TurnOnLEDs>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	81 ee       	ldi	r24, 0xE1	; 225
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	21 50       	subi	r18, 0x01	; 1
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <sendCDCbyte+0x3a>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <sendCDCbyte+0x44>
     a16:	00 00       	nop
     a18:	e9 cf       	rjmp	.-46     	; 0x9ec <sendCDCbyte+0x1a>
     a1a:	08 95       	ret

00000a1c <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     a1c:	80 e1       	ldi	r24, 0x10	; 16
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     a24:	97 fd       	sbrc	r25, 7
     a26:	fa cf       	rjmp	.-12     	; 0xa1c <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     a28:	08 95       	ret

00000a2a <fill>:

void fill(int n) {
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	7c 01       	movw	r14, r24
     a38:	04 e4       	ldi	r16, 0x44	; 68
     a3a:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <fill+0x22>
		ram.ispBuffer[x] = getch();
     a42:	ec df       	rcall	.-40     	; 0xa1c <getch>
     a44:	f8 01       	movw	r30, r16
     a46:	81 93       	st	Z+, r24
     a48:	8f 01       	movw	r16, r30
     a4a:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     a4c:	ce 15       	cp	r28, r14
     a4e:	df 05       	cpc	r29, r15
     a50:	c4 f3       	brlt	.-16     	; 0xa42 <fill+0x18>
     a52:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     a60:	90 91 50 01 	lds	r25, 0x0150
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	20 91 51 01 	lds	r18, 0x0151
     a6a:	82 0f       	add	r24, r18
     a6c:	91 1d       	adc	r25, r1
     a6e:	90 93 40 01 	sts	0x0140, r25
     a72:	80 93 3f 01 	sts	0x013F, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     a76:	90 91 52 01 	lds	r25, 0x0152
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	20 91 53 01 	lds	r18, 0x0153
     a80:	82 0f       	add	r24, r18
     a82:	91 1d       	adc	r25, r1
     a84:	90 93 42 01 	sts	0x0142, r25
     a88:	80 93 41 01 	sts	0x0141, r24
     a8c:	08 95       	ret

00000a8e <breply>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void breply(uint8_t b) {
     a8e:	cf 93       	push	r28
     a90:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     a92:	c4 df       	rcall	.-120    	; 0xa1c <getch>
     a94:	80 32       	cpi	r24, 0x20	; 32
     a96:	39 f4       	brne	.+14     	; 0xaa6 <breply+0x18>
     a98:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     a9a:	9b df       	rcall	.-202    	; 0x9d2 <sendCDCbyte>
     a9c:	8c 2f       	mov	r24, r28
     a9e:	99 df       	rcall	.-206    	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(b);
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	cf 91       	pop	r28
     aa4:	96 cf       	rjmp	.-212    	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     aa6:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     aa8:	94 df       	rcall	.-216    	; 0x9d2 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     aaa:	80 91 39 01 	lds	r24, 0x0139
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     aae:	90 91 3a 01 	lds	r25, 0x013A
     ab2:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     ab4:	90 93 3a 01 	sts	0x013A, r25
     ab8:	80 93 39 01 	sts	0x0139, r24
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <get_parameters>:
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}

void get_parameters(uint8_t c) {
     ac0:	81 38       	cpi	r24, 0x81	; 129
     ac2:	59 f0       	breq	.+22     	; 0xada <get_parameters+0x1a>
     ac4:	18 f4       	brcc	.+6      	; 0xacc <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     ac6:	80 38       	cpi	r24, 0x80	; 128
     ac8:	71 f4       	brne	.+28     	; 0xae6 <get_parameters+0x26>
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <get_parameters+0x16>
     acc:	82 38       	cpi	r24, 0x82	; 130
     ace:	39 f0       	breq	.+14     	; 0xade <get_parameters+0x1e>
     ad0:	83 39       	cpi	r24, 0x93	; 147
     ad2:	49 f4       	brne	.+18     	; 0xae6 <get_parameters+0x26>
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <get_parameters+0x22>
}

void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	07 c0       	rjmp	.+14     	; 0xae8 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     ade:	82 e1       	ldi	r24, 0x12	; 18
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     ae2:	83 e5       	ldi	r24, 0x53	; 83
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <get_parameters+0x28>
		break;
	default:
		breply(0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	d2 cf       	rjmp	.-92     	; 0xa8e <breply>

00000aea <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     aea:	98 df       	rcall	.-208    	; 0xa1c <getch>
     aec:	80 32       	cpi	r24, 0x20	; 32
     aee:	21 f4       	brne	.+8      	; 0xaf8 <replyOK+0xe>
     af0:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     af2:	6f df       	rcall	.-290    	; 0x9d2 <sendCDCbyte>
     af4:	80 e1       	ldi	r24, 0x10	; 16
     af6:	6d cf       	rjmp	.-294    	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     af8:	80 e2       	ldi	r24, 0x20	; 32
     afa:	66 df       	rcall	.-308    	; 0x9c8 <LEDs_TurnOnLEDs>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     afe:	80 e7       	ldi	r24, 0x70	; 112
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <replyOK+0x18>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <replyOK+0x22>
     b0c:	00 00       	nop
     b0e:	5d 9a       	sbi	0x0b, 5	; 11
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	80 e7       	ldi	r24, 0x70	; 112
     b14:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	80 40       	sbci	r24, 0x00	; 0
     b1a:	90 40       	sbci	r25, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <replyOK+0x2c>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <replyOK+0x36>
     b20:	00 00       	nop
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	51 df       	rcall	.-350    	; 0x9c8 <LEDs_TurnOnLEDs>
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	90 40       	sbci	r25, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <replyOK+0x42>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <replyOK+0x4c>
     b36:	00 00       	nop
     b38:	5d 9a       	sbi	0x0b, 5	; 11
     b3a:	85 e1       	ldi	r24, 0x15	; 21
     b3c:	4a df       	rcall	.-364    	; 0x9d2 <sendCDCbyte>
     b3e:	80 91 39 01 	lds	r24, 0x0139
     b42:	90 91 3a 01 	lds	r25, 0x013A
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	90 93 3a 01 	sts	0x013A, r25
		ram.isp.error++;
     b4c:	80 93 39 01 	sts	0x0139, r24
     b50:	08 95       	ret

00000b52 <spi_init>:
	DDRB |= (1 << AVR_MOSI); // OUTPUT
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = 1;
}

void spi_init(void) {
     b52:	83 e5       	ldi	r24, 0x53	; 83
     b54:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     b56:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	08 95       	ret

00000b5c <spi_wait>:
	sei();
#endif
	return reply;
}

void spi_wait(void) {
     b5c:	0d b4       	in	r0, 0x2d	; 45
     b5e:	07 fe       	sbrs	r0, 7
     b60:	fd cf       	rjmp	.-6      	; 0xb5c <spi_wait>
	do {
	} while (!(SPSR & (1 << SPIF)));
}
     b62:	08 95       	ret

00000b64 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     b64:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     b66:	fa df       	rcall	.-12     	; 0xb5c <spi_wait>
     b68:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     b6a:	08 95       	ret

00000b6c <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <spi_transaction+0x6>
     b72:	1f 92       	push	r1
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     b78:	2b 83       	std	Y+3, r18	; 0x03
     b7a:	4a 83       	std	Y+2, r20	; 0x02
     b7c:	69 83       	std	Y+1, r22	; 0x01
     b7e:	f2 df       	rcall	.-28     	; 0xb64 <spi_send>
     b80:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     b82:	86 2f       	mov	r24, r22
     b84:	ef df       	rcall	.-34     	; 0xb64 <spi_send>
     b86:	4a 81       	ldd	r20, Y+2	; 0x02
     b88:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     b8a:	ec df       	rcall	.-40     	; 0xb64 <spi_send>
     b8c:	2b 81       	ldd	r18, Y+3	; 0x03
     b8e:	82 2f       	mov	r24, r18
     b90:	0f 90       	pop	r0
	return spi_send(d);
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	e4 cf       	rjmp	.-56     	; 0xb64 <spi_send>

00000b9c <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     b9c:	da df       	rcall	.-76     	; 0xb52 <spi_init>
     b9e:	24 9a       	sbi	0x04, 4	; 4
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     ba0:	2c 9a       	sbi	0x05, 4	; 5

void start_pmode(void) {
	spi_init();
	// following delays may not work on all targets...
	DDRB |= (1 << AVR_SS); // OUTPUT
	PORTB |= (1 << AVR_SS); // HIGH
     ba2:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << AVR_SCK); // OUTPUT
     ba4:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1 << AVR_SCK); // LOW
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	80 e7       	ldi	r24, 0x70	; 112
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <start_pmode+0x10>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <start_pmode+0x1a>
     bb6:	00 00       	nop
     bb8:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);
	PORTB &= ~(1 << AVR_SS); // LOW
     bba:	2f ef       	ldi	r18, 0xFF	; 255
     bbc:	80 e7       	ldi	r24, 0x70	; 112
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	21 50       	subi	r18, 0x01	; 1
     bc2:	80 40       	sbci	r24, 0x00	; 0
     bc4:	90 40       	sbci	r25, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <start_pmode+0x24>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <start_pmode+0x2e>
     bca:	00 00       	nop
     bcc:	23 98       	cbi	0x04, 3	; 4
	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	DDRB &= ~(1 << AVR_MISO); // INPUT
     bce:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << AVR_MOSI); // OUTPUT
     bd0:	20 e0       	ldi	r18, 0x00	; 0
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	63 e5       	ldi	r22, 0x53	; 83
     bd6:	8c ea       	ldi	r24, 0xAC	; 172
     bd8:	c9 df       	rcall	.-110    	; 0xb6c <spi_transaction>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
	ram.isp.pmode = 1;
     bde:	90 93 3c 01 	sts	0x013C, r25
     be2:	80 93 3b 01 	sts	0x013B, r24
     be6:	08 95       	ret

00000be8 <flash_read>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t flash_read(uint8_t hilo, int addr) {
     be8:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     bea:	88 0f       	add	r24, r24
     bec:	88 0f       	add	r24, r24
     bee:	88 0f       	add	r24, r24
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	67 2f       	mov	r22, r23
     bf4:	80 5e       	subi	r24, 0xE0	; 224
     bf6:	ba cf       	rjmp	.-140    	; 0xb6c <spi_transaction>

00000bf8 <flash_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     c02:	c0 e0       	ldi	r28, 0x00	; 0
     c04:	d0 e0       	ldi	r29, 0x00	; 0
     c06:	19 c0       	rjmp	.+50     	; 0xc3a <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     c08:	60 91 3d 01 	lds	r22, 0x013D
     c0c:	70 91 3e 01 	lds	r23, 0x013E
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	ea df       	rcall	.-44     	; 0xbe8 <flash_read>
     c14:	de de       	rcall	.-580    	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(low);
     c16:	60 91 3d 01 	lds	r22, 0x013D
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     c1a:	70 91 3e 01 	lds	r23, 0x013E
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	e3 df       	rcall	.-58     	; 0xbe8 <flash_read>
     c22:	d7 de       	rcall	.-594    	; 0x9d2 <sendCDCbyte>
     c24:	20 91 3d 01 	lds	r18, 0x013D
		sendCDCbyte(high);
     c28:	30 91 3e 01 	lds	r19, 0x013E
		ram.isp._addr++;
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	30 93 3e 01 	sts	0x013E, r19
     c34:	20 93 3d 01 	sts	0x013D, r18
     c38:	22 96       	adiw	r28, 0x02	; 2
     c3a:	c0 17       	cp	r28, r16
     c3c:	d1 07       	cpc	r29, r17
     c3e:	24 f3       	brlt	.-56     	; 0xc08 <flash_read_page+0x10>
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <universal>:

void universal(void) {
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	ec de       	rcall	.-552    	; 0xa2a <fill>
     c52:	20 91 47 01 	lds	r18, 0x0147
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
     c56:	40 91 46 01 	lds	r20, 0x0146
     c5a:	60 91 45 01 	lds	r22, 0x0145
     c5e:	80 91 44 01 	lds	r24, 0x0144
     c62:	84 df       	rcall	.-248    	; 0xb6c <spi_transaction>
     c64:	14 cf       	rjmp	.-472    	; 0xa8e <breply>

00000c66 <read_signature>:
	breply(ch);
}

void read_signature(void) {
     c66:	da de       	rcall	.-588    	; 0xa1c <getch>
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     c68:	80 32       	cpi	r24, 0x20	; 32
     c6a:	59 f0       	breq	.+22     	; 0xc82 <read_signature+0x1c>
     c6c:	80 91 39 01 	lds	r24, 0x0139
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     c70:	90 91 3a 01 	lds	r25, 0x013A
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	90 93 3a 01 	sts	0x013A, r25
     c7a:	80 93 39 01 	sts	0x0139, r24
     c7e:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     c80:	15 c0       	rjmp	.+42     	; 0xcac <read_signature+0x46>
     c82:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     c84:	a6 de       	rcall	.-692    	; 0x9d2 <sendCDCbyte>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	6e df       	rcall	.-292    	; 0xb6c <spi_transaction>
     c90:	a0 de       	rcall	.-704    	; 0x9d2 <sendCDCbyte>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     c9a:	68 df       	rcall	.-304    	; 0xb6c <spi_transaction>
     c9c:	9a de       	rcall	.-716    	; 0x9d2 <sendCDCbyte>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	42 e0       	ldi	r20, 0x02	; 2
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     ca6:	62 df       	rcall	.-316    	; 0xb6c <spi_transaction>
     ca8:	94 de       	rcall	.-728    	; 0x9d2 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	92 ce       	rjmp	.-732    	; 0x9d2 <sendCDCbyte>

00000cae <end_pmode>:
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void end_pmode(void) {
     cae:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     cb0:	22 98       	cbi	0x04, 2	; 4

	// Hardwaresetup to turn off the HID function with shorting the MOSI pin with GND next to it
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP
     cb2:	22 9a       	sbi	0x04, 2	; 4

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
     cb4:	21 98       	cbi	0x04, 1	; 4
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     cb6:	24 98       	cbi	0x04, 4	; 4
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SS); // INPUT
	ram.isp.pmode = 0;
     cb8:	10 92 3c 01 	sts	0x013C, r1
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
     cbc:	10 92 3b 01 	sts	0x013B, r1
     cc0:	08 95       	ret

00000cc2 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	d8 2f       	mov	r29, r24
     cd4:	c9 2f       	mov	r28, r25
     cd6:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     cd8:	cb 01       	movw	r24, r22
     cda:	a7 de       	rcall	.-690    	; 0xa2a <fill>
     cdc:	5d 9a       	sbi	0x0b, 5	; 11
     cde:	84 e4       	ldi	r24, 0x44	; 68
     ce0:	c8 2e       	mov	r12, r24
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	d8 2e       	mov	r13, r24
     ce6:	0d 2f       	mov	r16, r29
     ce8:	1c 2f       	mov	r17, r28
     cea:	e8 01       	movw	r28, r16
     cec:	11 c0       	rjmp	.+34     	; 0xd10 <write_eeprom_chunk+0x4e>
     cee:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
     cf0:	21 91       	ld	r18, Z+
     cf2:	6f 01       	movw	r12, r30
     cf4:	4c 2f       	mov	r20, r28
     cf6:	6d 2f       	mov	r22, r29
     cf8:	80 ec       	ldi	r24, 0xC0	; 192
     cfa:	38 df       	rcall	.-400    	; 0xb6c <spi_transaction>
     cfc:	ff e7       	ldi	r31, 0x7F	; 127
     cfe:	22 e3       	ldi	r18, 0x32	; 50
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	f1 50       	subi	r31, 0x01	; 1
     d04:	20 40       	sbci	r18, 0x00	; 0
     d06:	80 40       	sbci	r24, 0x00	; 0
     d08:	e1 f7       	brne	.-8      	; 0xd02 <write_eeprom_chunk+0x40>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <write_eeprom_chunk+0x4a>
     d0c:	00 00       	nop
     d0e:	21 96       	adiw	r28, 0x01	; 1
     d10:	ce 01       	movw	r24, r28
     d12:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     d14:	91 0b       	sbc	r25, r17
     d16:	8e 15       	cp	r24, r14
     d18:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
     d1a:	4c f3       	brlt	.-46     	; 0xcee <write_eeprom_chunk+0x2c>
     d1c:	80 e2       	ldi	r24, 0x20	; 32
     d1e:	54 de       	rcall	.-856    	; 0x9c8 <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
     d20:	80 e1       	ldi	r24, 0x10	; 16
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
	return STK_OK;
}
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	08 95       	ret

00000d34 <write_eeprom>:
	}
}


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d3c:	c0 91 3d 01 	lds	r28, 0x013D
     d40:	d0 91 3e 01 	lds	r29, 0x013E
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
     d44:	20 91 41 01 	lds	r18, 0x0141
     d48:	30 91 42 01 	lds	r19, 0x0142
     d4c:	28 17       	cp	r18, r24
     d4e:	39 07       	cpc	r19, r25
     d50:	24 f0       	brlt	.+8      	; 0xd5a <write_eeprom+0x26>


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d52:	cc 0f       	add	r28, r28
     d54:	dd 1f       	adc	r29, r29
     d56:	8c 01       	movw	r16, r24
     d58:	12 c0       	rjmp	.+36     	; 0xd7e <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
     d5a:	80 91 39 01 	lds	r24, 0x0139
     d5e:	90 91 3a 01 	lds	r25, 0x013A
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	90 93 3a 01 	sts	0x013A, r25
     d68:	80 93 39 01 	sts	0x0139, r24
		return STK_FAILED;
     d6c:	81 e1       	ldi	r24, 0x11	; 17
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
     d70:	60 e2       	ldi	r22, 0x20	; 32
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	ce 01       	movw	r24, r28
     d76:	a5 df       	rcall	.-182    	; 0xcc2 <write_eeprom_chunk>
     d78:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
     d7a:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
     d7c:	11 09       	sbc	r17, r1
     d7e:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
     d80:	11 05       	cpc	r17, r1
     d82:	b4 f7       	brge	.-20     	; 0xd70 <write_eeprom+0x3c>
     d84:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
     d86:	ce 01       	movw	r24, r28
     d88:	9c df       	rcall	.-200    	; 0xcc2 <write_eeprom_chunk>
     d8a:	80 e1       	ldi	r24, 0x10	; 16
     d8c:	df 91       	pop	r29
	return STK_OK;
     d8e:	cf 91       	pop	r28
}
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <eeprom_read_page>:
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     da4:	00 91 3d 01 	lds	r16, 0x013D
     da8:	10 91 3e 01 	lds	r17, 0x013E
     dac:	00 0f       	add	r16, r16
     dae:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     db0:	e8 01       	movw	r28, r16
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	4c 2f       	mov	r20, r28
     db8:	6d 2f       	mov	r22, r29
     dba:	80 ea       	ldi	r24, 0xA0	; 160
     dbc:	d7 de       	rcall	.-594    	; 0xb6c <spi_transaction>
     dbe:	09 de       	rcall	.-1006   	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(ee);
     dc0:	21 96       	adiw	r28, 0x01	; 1
     dc2:	ce 01       	movw	r24, r28
     dc4:	80 1b       	sub	r24, r16
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     dc6:	91 0b       	sbc	r25, r17
     dc8:	8e 15       	cp	r24, r14
     dca:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     dcc:	9c f3       	brlt	.-26     	; 0xdb4 <eeprom_read_page+0x1e>
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	08 95       	ret

00000dde <read_page>:
	//LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     de4:	1b de       	rcall	.-970    	; 0xa1c <getch>
     de6:	d8 2f       	mov	r29, r24
     de8:	19 de       	rcall	.-974    	; 0xa1c <getch>
	length += getch();
     dea:	c8 2f       	mov	r28, r24
     dec:	17 de       	rcall	.-978    	; 0xa1c <getch>
     dee:	18 2f       	mov	r17, r24
	char memtype = getch();
     df0:	15 de       	rcall	.-982    	; 0xa1c <getch>
     df2:	80 32       	cpi	r24, 0x20	; 32
     df4:	59 f0       	breq	.+22     	; 0xe0c <read_page+0x2e>
	if (CRC_EOP != getch()) {
     df6:	80 91 39 01 	lds	r24, 0x0139
     dfa:	90 91 3a 01 	lds	r25, 0x013A
		ram.isp.error++;
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	90 93 3a 01 	sts	0x013A, r25
     e04:	80 93 39 01 	sts	0x0139, r24
     e08:	85 e1       	ldi	r24, 0x15	; 21
     e0a:	13 c0       	rjmp	.+38     	; 0xe32 <read_page+0x54>
     e0c:	3d 2f       	mov	r19, r29
     e0e:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     e10:	c9 01       	movw	r24, r18
     e12:	8c 0f       	add	r24, r28
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     e14:	91 1d       	adc	r25, r1
     e16:	ec 01       	movw	r28, r24
	length += getch();
     e18:	84 e1       	ldi	r24, 0x14	; 20
     e1a:	db dd       	rcall	.-1098   	; 0x9d2 <sendCDCbyte>
     e1c:	16 34       	cpi	r17, 0x46	; 70
     e1e:	19 f4       	brne	.+6      	; 0xe26 <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e20:	ce 01       	movw	r24, r28
     e22:	ea de       	rcall	.-556    	; 0xbf8 <flash_read_page>
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
     e26:	15 34       	cpi	r17, 0x45	; 69
     e28:	19 f4       	brne	.+6      	; 0xe30 <read_page+0x52>
     e2a:	ce 01       	movw	r24, r28
     e2c:	b4 df       	rcall	.-152    	; 0xd96 <eeprom_read_page>
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <read_page+0x54>
     e30:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	cc cd       	rjmp	.-1128   	; 0x9d2 <sendCDCbyte>

00000e3a <commit>:
	}
	commit(page);
	return STK_OK;
}

void commit(int addr) {
     e3a:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
     e3c:	20 e0       	ldi	r18, 0x00	; 0
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
     e3e:	48 2f       	mov	r20, r24
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
     e40:	69 2f       	mov	r22, r25
     e42:	8c e4       	ldi	r24, 0x4C	; 76
     e44:	93 de       	rcall	.-730    	; 0xb6c <spi_transaction>
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
     e46:	2f ef       	ldi	r18, 0xFF	; 255
     e48:	86 e7       	ldi	r24, 0x76	; 118
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	80 40       	sbci	r24, 0x00	; 0
     e50:	90 40       	sbci	r25, 0x00	; 0
     e52:	e1 f7       	brne	.-8      	; 0xe4c <commit+0x12>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <commit+0x1c>
     e56:	00 00       	nop
     e58:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
     e5a:	b6 cd       	rjmp	.-1172   	; 0x9c8 <LEDs_TurnOnLEDs>

00000e5c <current_page>:
}

int current_page(void) {
     e5c:	80 91 3f 01 	lds	r24, 0x013F
     e60:	90 91 40 01 	lds	r25, 0x0140
     e64:	20 91 3d 01 	lds	r18, 0x013D
     e68:	30 91 3e 01 	lds	r19, 0x013E
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	91 05       	cpc	r25, r1
     e70:	11 f4       	brne	.+4      	; 0xe76 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     e72:	20 7f       	andi	r18, 0xF0	; 240
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     e76:	80 34       	cpi	r24, 0x40	; 64
     e78:	91 05       	cpc	r25, r1
     e7a:	11 f4       	brne	.+4      	; 0xe80 <current_page+0x24>
     e7c:	20 7e       	andi	r18, 0xE0	; 224
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     e80:	80 38       	cpi	r24, 0x80	; 128
     e82:	91 05       	cpc	r25, r1
     e84:	11 f4       	brne	.+4      	; 0xe8a <current_page+0x2e>
     e86:	20 7c       	andi	r18, 0xC0	; 192
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     e8a:	81 15       	cp	r24, r1
     e8c:	91 40       	sbci	r25, 0x01	; 1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <current_page+0x36>
     e90:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     e92:	c9 01       	movw	r24, r18
     e94:	08 95       	ret

00000e96 <flash>:

void flash(uint8_t hilo, int addr, uint8_t data) {
     e96:	96 2f       	mov	r25, r22
     e98:	67 2f       	mov	r22, r23
     e9a:	24 2f       	mov	r18, r20
	spi_transaction(0x40 + 8 * hilo,
     e9c:	88 0f       	add	r24, r24
     e9e:	88 0f       	add	r24, r24
     ea0:	88 0f       	add	r24, r24
     ea2:	49 2f       	mov	r20, r25
     ea4:	80 5c       	subi	r24, 0xC0	; 192
     ea6:	62 ce       	rjmp	.-828    	; 0xb6c <spi_transaction>

00000ea8 <write_flash_pages>:
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	6c 01       	movw	r12, r24
	int x = 0;
	int page = current_page();
     eba:	d0 df       	rcall	.-96     	; 0xe5c <current_page>
     ebc:	8c 01       	movw	r16, r24
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
	int x = 0;
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
     ec2:	29 c0       	rjmp	.+82     	; 0xf16 <write_flash_pages+0x6e>
	int page = current_page();
	while (x < length) {
     ec4:	cb df       	rcall	.-106    	; 0xe5c <current_page>
		if (page != current_page()) {
     ec6:	08 17       	cp	r16, r24
     ec8:	19 07       	cpc	r17, r25
     eca:	21 f0       	breq	.+8      	; 0xed4 <write_flash_pages+0x2c>
     ecc:	c8 01       	movw	r24, r16
     ece:	b5 df       	rcall	.-150    	; 0xe3a <commit>
			commit(page);
     ed0:	c5 df       	rcall	.-118    	; 0xe5c <current_page>
     ed2:	8c 01       	movw	r16, r24
     ed4:	46 e3       	ldi	r20, 0x36	; 54
			page = current_page();
     ed6:	e4 2e       	mov	r14, r20
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	f4 2e       	mov	r15, r20
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     edc:	ec 0e       	add	r14, r28
     ede:	fd 1e       	adc	r15, r29
     ee0:	60 91 3d 01 	lds	r22, 0x013D
     ee4:	70 91 3e 01 	lds	r23, 0x013E
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
     ee8:	f7 01       	movw	r30, r14
     eea:	46 85       	ldd	r20, Z+14	; 0x0e
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	d3 df       	rcall	.-90     	; 0xe96 <flash>
     ef0:	22 96       	adiw	r28, 0x02	; 2
     ef2:	60 91 3d 01 	lds	r22, 0x013D
     ef6:	70 91 3e 01 	lds	r23, 0x013E
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
     efa:	f7 01       	movw	r30, r14
     efc:	47 85       	ldd	r20, Z+15	; 0x0f
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	ca df       	rcall	.-108    	; 0xe96 <flash>
     f02:	20 91 3d 01 	lds	r18, 0x013D
     f06:	30 91 3e 01 	lds	r19, 0x013E
     f0a:	2f 5f       	subi	r18, 0xFF	; 255
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
		ram.isp._addr++;
     f0e:	30 93 3e 01 	sts	0x013E, r19
     f12:	20 93 3d 01 	sts	0x013D, r18
     f16:	cc 15       	cp	r28, r12
     f18:	dd 05       	cpc	r29, r13
     f1a:	a4 f2       	brlt	.-88     	; 0xec4 <write_flash_pages+0x1c>
     f1c:	c8 01       	movw	r24, r16
     f1e:	8d df       	rcall	.-230    	; 0xe3a <commit>
     f20:	80 e1       	ldi	r24, 0x10	; 16
}

uint8_t write_flash_pages(int length) {
	int x = 0;
	int page = current_page();
	while (x < length) {
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
	return STK_OK;
}
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	08 95       	ret

00000f34 <write_flash>:
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}

void write_flash(int length) {
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ec 01       	movw	r28, r24
	// TODO compare with ada <--
	fill(length);
     f3a:	77 dd       	rcall	.-1298   	; 0xa2a <fill>
     f3c:	6f dd       	rcall	.-1314   	; 0xa1c <getch>
	if (CRC_EOP == getch()) {
     f3e:	80 32       	cpi	r24, 0x20	; 32
     f40:	29 f4       	brne	.+10     	; 0xf4c <write_flash+0x18>
     f42:	84 e1       	ldi	r24, 0x14	; 20
     f44:	46 dd       	rcall	.-1396   	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(STK_INSYNC);
     f46:	ce 01       	movw	r24, r28
     f48:	af df       	rcall	.-162    	; 0xea8 <write_flash_pages>
     f4a:	0a c0       	rjmp	.+20     	; 0xf60 <write_flash+0x2c>
		sendCDCbyte(write_flash_pages(length));
     f4c:	80 91 39 01 	lds	r24, 0x0139
     f50:	90 91 3a 01 	lds	r25, 0x013A
	}
	else {
		ram.isp.error++;
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	90 93 3a 01 	sts	0x013A, r25
     f5a:	80 93 39 01 	sts	0x0139, r24
     f5e:	85 e1       	ldi	r24, 0x15	; 21
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	36 cd       	rjmp	.-1428   	; 0x9d2 <sendCDCbyte>

00000f66 <program_page>:
		sendCDCbyte(STK_NOSYNC);
     f66:	cf 93       	push	r28
	}
}
     f68:	df 93       	push	r29
	} while (!(SPSR & (1 << SPIF)));
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f6a:	58 dd       	rcall	.-1360   	; 0xa1c <getch>
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(write_flash_pages(length));
	}
	else {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
     f6c:	d8 2f       	mov	r29, r24
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	c8 2f       	mov	r28, r24
     f72:	54 dd       	rcall	.-1368   	; 0xa1c <getch>
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
	length += getch();
     f74:	c8 0f       	add	r28, r24
     f76:	d1 1d       	adc	r29, r1
     f78:	c1 30       	cpi	r28, 0x01	; 1
     f7a:	81 e0       	ldi	r24, 0x01	; 1

	// added from ada <--
	if (length > 256) {
     f7c:	d8 07       	cpc	r29, r24
     f7e:	64 f0       	brlt	.+24     	; 0xf98 <program_page+0x32>
     f80:	81 e1       	ldi	r24, 0x11	; 17
     f82:	27 dd       	rcall	.-1458   	; 0x9d2 <sendCDCbyte>
		sendCDCbyte(STK_FAILED);
     f84:	80 91 39 01 	lds	r24, 0x0139
     f88:	90 91 3a 01 	lds	r25, 0x013A
		ram.isp.error++;
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 3a 01 	sts	0x013A, r25
     f92:	80 93 39 01 	sts	0x0139, r24
     f96:	22 c0       	rjmp	.+68     	; 0xfdc <program_page+0x76>
     f98:	41 dd       	rcall	.-1406   	; 0xa1c <getch>
     f9a:	86 34       	cpi	r24, 0x46	; 70
		return;
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <program_page+0x40>
	}

	// todo compare with ada <--

	char memtype = getch();
     f9e:	ce 01       	movw	r24, r28
     fa0:	df 91       	pop	r29
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
     fa2:	cf 91       	pop	r28
     fa4:	c7 cf       	rjmp	.-114    	; 0xf34 <write_flash>
		write_flash(length);
     fa6:	85 34       	cpi	r24, 0x45	; 69
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <program_page+0x6e>
     faa:	ce 01       	movw	r24, r28
	// todo compare with ada <--

	char memtype = getch();
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
		write_flash(length);
     fac:	c3 de       	rcall	.-634    	; 0xd34 <write_eeprom>
     fae:	c8 2f       	mov	r28, r24
		return;
	}
	if (memtype == 'E') {
     fb0:	35 dd       	rcall	.-1430   	; 0xa1c <getch>
     fb2:	80 32       	cpi	r24, 0x20	; 32
		result = (char)write_eeprom(length);
     fb4:	21 f4       	brne	.+8      	; 0xfbe <program_page+0x58>
     fb6:	84 e1       	ldi	r24, 0x14	; 20
     fb8:	0c dd       	rcall	.-1512   	; 0x9d2 <sendCDCbyte>
     fba:	8c 2f       	mov	r24, r28
		if (CRC_EOP == getch()) {
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <program_page+0x70>
     fbe:	80 91 39 01 	lds	r24, 0x0139
     fc2:	90 91 3a 01 	lds	r25, 0x013A
			sendCDCbyte(STK_INSYNC);
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 3a 01 	sts	0x013A, r25
			sendCDCbyte(result);
     fcc:	80 93 39 01 	sts	0x0139, r24
		}
		else {
			ram.isp.error++;
     fd0:	85 e1       	ldi	r24, 0x15	; 21
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <program_page+0x70>
     fd4:	81 e1       	ldi	r24, 0x11	; 17
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	fb cc       	rjmp	.-1546   	; 0x9d2 <sendCDCbyte>
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
			sendCDCbyte(STK_NOSYNC);
     fe0:	08 95       	ret

00000fe2 <avrisp>:

//================================================================================
// AVRISP
//================================================================================

void avrisp(void){
     fe2:	cf 93       	push	r28
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
     fe4:	df 93       	push	r29
	return;
}
     fe6:	80 91 3b 01 	lds	r24, 0x013B
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
     fea:	90 91 3c 01 	lds	r25, 0x013C
	return;
}
     fee:	89 2b       	or	r24, r25
     ff0:	19 f0       	breq	.+6      	; 0xff8 <avrisp+0x16>
// AVRISP
//================================================================================

void avrisp(void){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
     ff2:	80 e2       	ldi	r24, 0x20	; 32
     ff4:	e9 dc       	rcall	.-1582   	; 0x9c8 <LEDs_TurnOnLEDs>
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <avrisp+0x18>
     ff8:	5d 9a       	sbi	0x0b, 5	; 11
     ffa:	80 91 39 01 	lds	r24, 0x0139
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
     ffe:	90 91 3a 01 	lds	r25, 0x013A
    1002:	89 2b       	or	r24, r25
    1004:	19 f0       	breq	.+6      	; 0x100c <avrisp+0x2a>
    1006:	80 e1       	ldi	r24, 0x10	; 16
    1008:	df dc       	rcall	.-1602   	; 0x9c8 <LEDs_TurnOnLEDs>
    100a:	01 c0       	rjmp	.+2      	; 0x100e <avrisp+0x2c>
    100c:	5c 9a       	sbi	0x0b, 4	; 11
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	91 e0       	ldi	r25, 0x01	; 1
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1012:	a4 d7       	rcall	.+3912   	; 0x1f5c <CDC_Device_ReceiveByte>
    1014:	97 fd       	sbrc	r25, 7
    1016:	ae c0       	rjmp	.+348    	; 0x1174 <avrisp+0x192>
    1018:	81 35       	cpi	r24, 0x51	; 81
	if (!(ReceivedByte < 0)){
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <avrisp+0x3e>
		switch (ReceivedByte) {
    101e:	85 c0       	rjmp	.+266    	; 0x112a <avrisp+0x148>
    1020:	e4 f4       	brge	.+56     	; 0x105a <avrisp+0x78>
    1022:	81 34       	cpi	r24, 0x41	; 65
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <avrisp+0x48>
    1028:	52 c0       	rjmp	.+164    	; 0x10ce <avrisp+0xec>
    102a:	54 f4       	brge	.+20     	; 0x1040 <avrisp+0x5e>
    102c:	80 33       	cpi	r24, 0x30	; 48
    102e:	91 05       	cpc	r25, r1
    1030:	99 f1       	breq	.+102    	; 0x1098 <avrisp+0xb6>
    1032:	81 33       	cpi	r24, 0x31	; 49
    1034:	91 05       	cpc	r25, r1
    1036:	a9 f1       	breq	.+106    	; 0x10a2 <avrisp+0xc0>
    1038:	80 97       	sbiw	r24, 0x20	; 32
    103a:	09 f0       	breq	.+2      	; 0x103e <avrisp+0x5c>
    103c:	89 c0       	rjmp	.+274    	; 0x1150 <avrisp+0x16e>
    103e:	7e c0       	rjmp	.+252    	; 0x113c <avrisp+0x15a>
    1040:	85 34       	cpi	r24, 0x45	; 69
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <avrisp+0x66>
    1046:	4e c0       	rjmp	.+156    	; 0x10e4 <avrisp+0x102>
    1048:	80 35       	cpi	r24, 0x50	; 80
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <avrisp+0x6e>
    104e:	4e c0       	rjmp	.+156    	; 0x10ec <avrisp+0x10a>
    1050:	82 34       	cpi	r24, 0x42	; 66
    1052:	91 05       	cpc	r25, r1
    1054:	09 f0       	breq	.+2      	; 0x1058 <avrisp+0x76>
    1056:	7c c0       	rjmp	.+248    	; 0x1150 <avrisp+0x16e>
    1058:	3e c0       	rjmp	.+124    	; 0x10d6 <avrisp+0xf4>
    105a:	81 36       	cpi	r24, 0x61	; 97
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <avrisp+0x80>
    1060:	59 c0       	rjmp	.+178    	; 0x1114 <avrisp+0x132>
    1062:	6c f4       	brge	.+26     	; 0x107e <avrisp+0x9c>
    1064:	86 35       	cpi	r24, 0x56	; 86
    1066:	91 05       	cpc	r25, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <avrisp+0x8a>
    106a:	5c c0       	rjmp	.+184    	; 0x1124 <avrisp+0x142>
    106c:	80 36       	cpi	r24, 0x60	; 96
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <avrisp+0x92>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <avrisp+0x130>
    1074:	85 35       	cpi	r24, 0x55	; 85
    1076:	91 05       	cpc	r25, r1
    1078:	09 f0       	breq	.+2      	; 0x107c <avrisp+0x9a>
    107a:	6a c0       	rjmp	.+212    	; 0x1150 <avrisp+0x16e>
    107c:	39 c0       	rjmp	.+114    	; 0x10f0 <avrisp+0x10e>
    107e:	84 37       	cpi	r24, 0x74	; 116
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <avrisp+0xa4>
    1084:	4c c0       	rjmp	.+152    	; 0x111e <avrisp+0x13c>
    1086:	85 37       	cpi	r24, 0x75	; 117
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <avrisp+0xac>
    108c:	54 c0       	rjmp	.+168    	; 0x1136 <avrisp+0x154>
    108e:	84 36       	cpi	r24, 0x64	; 100
    1090:	91 05       	cpc	r25, r1
    1092:	09 f0       	breq	.+2      	; 0x1096 <avrisp+0xb4>
    1094:	5d c0       	rjmp	.+186    	; 0x1150 <avrisp+0x16e>
    1096:	40 c0       	rjmp	.+128    	; 0x1118 <avrisp+0x136>
    1098:	10 92 3a 01 	sts	0x013A, r1
    109c:	10 92 39 01 	sts	0x0139, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    10a0:	1e c0       	rjmp	.+60     	; 0x10de <avrisp+0xfc>
    10a2:	bc dc       	rcall	.-1672   	; 0xa1c <getch>
    10a4:	80 32       	cpi	r24, 0x20	; 32
    10a6:	09 f0       	breq	.+2      	; 0x10aa <avrisp+0xc8>
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    10a8:	65 c0       	rjmp	.+202    	; 0x1174 <avrisp+0x192>
    10aa:	84 e1       	ldi	r24, 0x14	; 20
    10ac:	92 dc       	rcall	.-1756   	; 0x9d2 <sendCDCbyte>
    10ae:	81 e4       	ldi	r24, 0x41	; 65
    10b0:	90 dc       	rcall	.-1760   	; 0x9d2 <sendCDCbyte>
				sendCDCbyte(STK_INSYNC);
    10b2:	86 e5       	ldi	r24, 0x56	; 86
    10b4:	8e dc       	rcall	.-1764   	; 0x9d2 <sendCDCbyte>
    10b6:	82 e5       	ldi	r24, 0x52	; 82
				sendCDCbyte('A');
    10b8:	8c dc       	rcall	.-1768   	; 0x9d2 <sendCDCbyte>
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	8a dc       	rcall	.-1772   	; 0x9d2 <sendCDCbyte>
				sendCDCbyte('V');
    10be:	89 e4       	ldi	r24, 0x49	; 73
    10c0:	88 dc       	rcall	.-1776   	; 0x9d2 <sendCDCbyte>
    10c2:	83 e5       	ldi	r24, 0x53	; 83
				sendCDCbyte('R');
    10c4:	86 dc       	rcall	.-1780   	; 0x9d2 <sendCDCbyte>
    10c6:	80 e5       	ldi	r24, 0x50	; 80
    10c8:	84 dc       	rcall	.-1784   	; 0x9d2 <sendCDCbyte>
				sendCDCbyte(' ');
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	50 c0       	rjmp	.+160    	; 0x116e <avrisp+0x18c>
    10ce:	a6 dc       	rcall	.-1716   	; 0xa1c <getch>
				sendCDCbyte('I');
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	f5 cc       	rjmp	.-1558   	; 0xac0 <get_parameters>
				sendCDCbyte('S');
    10d6:	84 e1       	ldi	r24, 0x14	; 20
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a7 dc       	rcall	.-1714   	; 0xa2a <fill>
				sendCDCbyte('P');
    10dc:	c1 dc       	rcall	.-1662   	; 0xa60 <set_parameters>
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
				sendCDCbyte(STK_OK);
    10e2:	03 cd       	rjmp	.-1530   	; 0xaea <replyOK>
    10e4:	85 e0       	ldi	r24, 0x05	; 5
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 dc       	rcall	.-1728   	; 0xa2a <fill>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    10ea:	f9 cf       	rjmp	.-14     	; 0x10de <avrisp+0xfc>
    10ec:	57 dd       	rcall	.-1362   	; 0xb9c <start_pmode>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    10ee:	f7 cf       	rjmp	.-18     	; 0x10de <avrisp+0xfc>
    10f0:	95 dc       	rcall	.-1750   	; 0xa1c <getch>
			break;
		case STK_SET_PARM:
			fill(20);
    10f2:	c8 2f       	mov	r28, r24
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
    10f6:	d0 93 3e 01 	sts	0x013E, r29
			set_parameters();
    10fa:	c0 93 3d 01 	sts	0x013D, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    10fe:	8e dc       	rcall	.-1764   	; 0xa1c <getch>
    1100:	38 2f       	mov	r19, r24
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	2c 0f       	add	r18, r28
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    1106:	3d 1f       	adc	r19, r29
    1108:	30 93 3e 01 	sts	0x013E, r19
    110c:	20 93 3d 01 	sts	0x013D, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    1110:	e6 cf       	rjmp	.-52     	; 0x10de <avrisp+0xfc>
    1112:	84 dc       	rcall	.-1784   	; 0xa1c <getch>
    1114:	83 dc       	rcall	.-1786   	; 0xa1c <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    1116:	e3 cf       	rjmp	.-58     	; 0x10de <avrisp+0xfc>
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	24 cf       	rjmp	.-440    	; 0xf66 <program_page>
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	5d ce       	rjmp	.-838    	; 0xdde <read_page>
    1124:	df 91       	pop	r29
			ram.isp._addr += 256 * getch();
    1126:	cf 91       	pop	r28
    1128:	91 cd       	rjmp	.-1246   	; 0xc4c <universal>
    112a:	10 92 3a 01 	sts	0x013A, r1
    112e:	10 92 39 01 	sts	0x0139, r1
    1132:	bd dd       	rcall	.-1158   	; 0xcae <end_pmode>
    1134:	d4 cf       	rjmp	.-88     	; 0x10de <avrisp+0xfc>
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	95 cd       	rjmp	.-1238   	; 0xc66 <read_signature>
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    113c:	80 91 39 01 	lds	r24, 0x0139
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1140:	90 91 3a 01 	lds	r25, 0x013A
    1144:	01 96       	adiw	r24, 0x01	; 1
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1146:	90 93 3a 01 	sts	0x013A, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    114a:	80 93 39 01 	sts	0x0139, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    114e:	0e c0       	rjmp	.+28     	; 0x116c <avrisp+0x18a>
    1150:	80 91 39 01 	lds	r24, 0x0139
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1154:	90 91 3a 01 	lds	r25, 0x013A
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1158:	01 96       	adiw	r24, 0x01	; 1
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    115a:	90 93 3a 01 	sts	0x013A, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    115e:	80 93 39 01 	sts	0x0139, r24
    1162:	5c dc       	rcall	.-1864   	; 0xa1c <getch>
    1164:	80 32       	cpi	r24, 0x20	; 32
			end_pmode();
    1166:	11 f4       	brne	.+4      	; 0x116c <avrisp+0x18a>
    1168:	82 e1       	ldi	r24, 0x12	; 18
    116a:	01 c0       	rjmp	.+2      	; 0x116e <avrisp+0x18c>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    116c:	85 e1       	ldi	r24, 0x15	; 21
    116e:	df 91       	pop	r29
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1170:	cf 91       	pop	r28
    1172:	2f cc       	rjmp	.-1954   	; 0x9d2 <sendCDCbyte>
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	fb 01       	movw	r30, r22
	// completely reset the protocol after sucessfull reading/error last time
	if (protocol->reset || protocol->leadError){
    1180:	30 81       	ld	r19, Z
    1182:	93 2f       	mov	r25, r19
    1184:	90 7c       	andi	r25, 0xC0	; 192
    1186:	89 f0       	breq	.+34     	; 0x11aa <NHPread+0x30>
		protocol->mBlocks = 0;
    1188:	23 2f       	mov	r18, r19
    118a:	28 7f       	andi	r18, 0xF8	; 248
    118c:	20 83       	st	Z, r18
		// check if previous reading had a lead error, copy that lead byte to the beginning
		if (protocol->leadError){
    118e:	36 ff       	sbrs	r19, 6
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <NHPread+0x2e>
			protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1192:	26 95       	lsr	r18
    1194:	26 95       	lsr	r18
    1196:	26 95       	lsr	r18
    1198:	27 70       	andi	r18, 0x07	; 7
    119a:	db 01       	movw	r26, r22
    119c:	a2 0f       	add	r26, r18
    119e:	b1 1d       	adc	r27, r1
    11a0:	15 96       	adiw	r26, 0x05	; 5
    11a2:	2c 91       	ld	r18, X
    11a4:	25 83       	std	Z+5, r18	; 0x05
			protocol->readlength = 1;
    11a6:	98 60       	ori	r25, 0x08	; 8
		}
		else
			protocol->readlength = 0;
    11a8:	90 83       	st	Z, r25
	}

	// reset leadError indicator every time
	protocol->leadError = false;
    11aa:	90 81       	ld	r25, Z
	protocol->reset = false;
    11ac:	9f 7b       	andi	r25, 0xBF	; 191
    11ae:	9f 77       	andi	r25, 0x7F	; 127
    11b0:	90 83       	st	Z, r25

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    11b2:	96 95       	lsr	r25
    11b4:	96 95       	lsr	r25
    11b6:	96 95       	lsr	r25
    11b8:	97 70       	andi	r25, 0x07	; 7
    11ba:	df 01       	movw	r26, r30
    11bc:	a9 0f       	add	r26, r25
    11be:	b1 1d       	adc	r27, r1
    11c0:	15 96       	adiw	r26, 0x05	; 5
    11c2:	8c 93       	st	X, r24
    11c4:	29 2f       	mov	r18, r25
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	27 70       	andi	r18, 0x07	; 7
    11ca:	22 0f       	add	r18, r18
    11cc:	22 0f       	add	r18, r18
    11ce:	22 0f       	add	r18, r18
    11d0:	40 81       	ld	r20, Z
    11d2:	47 7c       	andi	r20, 0xC7	; 199
    11d4:	42 2b       	or	r20, r18
    11d6:	40 83       	st	Z, r20
	// create errorLevel that will be returned (contain errors or address)
	NHP_Enum_t errorLevel; //TODO initiaslze as no error?


	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    11d8:	28 2f       	mov	r18, r24
    11da:	20 7c       	andi	r18, 0xC0	; 192
    11dc:	34 2f       	mov	r19, r20
    11de:	37 70       	andi	r19, 0x07	; 7
    11e0:	20 38       	cpi	r18, 0x80	; 128
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <NHPread+0x6c>
    11e4:	51 c0       	rjmp	.+162    	; 0x1288 <NHPread+0x10e>
    11e6:	20 3c       	cpi	r18, 0xC0	; 192
    11e8:	99 f5       	brne	.+102    	; 0x1250 <NHPread+0xd6>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    11ea:	28 2f       	mov	r18, r24
    11ec:	28 73       	andi	r18, 0x38	; 56
    11ee:	26 95       	lsr	r18
    11f0:	26 95       	lsr	r18
    11f2:	26 95       	lsr	r18

		if (protocol->mBlocks){
    11f4:	33 23       	and	r19, r19
    11f6:	49 f0       	breq	.+18     	; 0x120a <NHPread+0x90>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    11f8:	99 0f       	add	r25, r25
    11fa:	99 0f       	add	r25, r25
    11fc:	99 0f       	add	r25, r25
    11fe:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    1200:	49 2b       	or	r20, r25
    1202:	40 64       	ori	r20, 0x40	; 64
    1204:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    1206:	9e ef       	ldi	r25, 0xFE	; 254
    1208:	01 c0       	rjmp	.+2      	; 0x120c <NHPread+0x92>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    120a:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	08 f4       	brcc	.+2      	; 0x1212 <NHPread+0x98>
    1210:	46 c0       	rjmp	.+140    	; 0x129e <NHPread+0x124>
			// return command indicator
			errorLevel = NHP_COMMAND;
			break;
		}

		else if (blocks == 7){
    1212:	27 30       	cpi	r18, 0x07	; 7
    1214:	59 f4       	brne	.+22     	; 0x122c <NHPread+0xb2>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    1216:	08 2f       	mov	r16, r24
    1218:	0f 70       	andi	r16, 0x0F	; 15
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	01 83       	std	Z+1, r16	; 0x01
    1222:	12 83       	std	Z+2, r17	; 0x02
    1224:	23 83       	std	Z+3, r18	; 0x03
    1226:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    1228:	25 e0       	ldi	r18, 0x05	; 5
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <NHPread+0xc6>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    122c:	48 2f       	mov	r20, r24
    122e:	47 70       	andi	r20, 0x07	; 7
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	41 83       	std	Z+1, r20	; 0x01
    1238:	52 83       	std	Z+2, r21	; 0x02
    123a:	63 83       	std	Z+3, r22	; 0x03
    123c:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    123e:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1240:	27 70       	andi	r18, 0x07	; 7
    1242:	80 81       	ld	r24, Z
    1244:	88 7f       	andi	r24, 0xF8	; 248
    1246:	82 2b       	or	r24, r18
    1248:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command, ignore in progress reading or lead error
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
    124a:	91 11       	cpse	r25, r1
    124c:	22 c0       	rjmp	.+68     	; 0x1292 <NHPread+0x118>
    124e:	2d c0       	rjmp	.+90     	; 0x12aa <NHPread+0x130>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1250:	03 2f       	mov	r16, r19
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	02 30       	cpi	r16, 0x02	; 2
    1256:	11 05       	cpc	r17, r1
    1258:	24 f1       	brlt	.+72     	; 0x12a2 <NHPread+0x128>
			// get next 7 bits of data
			protocol->mBlocks--;
    125a:	39 5f       	subi	r19, 0xF9	; 249
    125c:	37 70       	andi	r19, 0x07	; 7
    125e:	48 7f       	andi	r20, 0xF8	; 248
    1260:	43 2b       	or	r20, r19
    1262:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1264:	41 81       	ldd	r20, Z+1	; 0x01
    1266:	52 81       	ldd	r21, Z+2	; 0x02
    1268:	63 81       	ldd	r22, Z+3	; 0x03
    126a:	74 81       	ldd	r23, Z+4	; 0x04
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	44 0f       	add	r20, r20
    1270:	55 1f       	adc	r21, r21
    1272:	66 1f       	adc	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	9a 95       	dec	r25
    1278:	d1 f7       	brne	.-12     	; 0x126e <NHPread+0xf4>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    127a:	48 2b       	or	r20, r24
    127c:	41 83       	std	Z+1, r20	; 0x01
    127e:	52 83       	std	Z+2, r21	; 0x02
    1280:	63 83       	std	Z+3, r22	; 0x03
    1282:	74 83       	std	Z+4, r23	; 0x04
			errorLevel = NHP_NO_ERR;
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	11 c0       	rjmp	.+34     	; 0x12aa <NHPread+0x130>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    1288:	31 30       	cpi	r19, 0x01	; 1
    128a:	69 f4       	brne	.+26     	; 0x12a6 <NHPread+0x12c>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    128c:	98 2f       	mov	r25, r24
    128e:	9f 73       	andi	r25, 0x3F	; 63
    1290:	9f 5f       	subi	r25, 0xFF	; 255
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command, ignore in progress reading or lead error
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
    1292:	9e 3f       	cpi	r25, 0xFE	; 254
    1294:	51 f0       	breq	.+20     	; 0x12aa <NHPread+0x130>
		protocol->reset = true;
    1296:	80 81       	ld	r24, Z
    1298:	80 68       	ori	r24, 0x80	; 128
    129a:	80 83       	st	Z, r24
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <NHPread+0x130>
		if (blocks == 0 || blocks == 1){
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// return command indicator
			errorLevel = NHP_COMMAND;
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	fa cf       	rjmp	.-12     	; 0x1296 <NHPread+0x11c>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    12a2:	9d ef       	ldi	r25, 0xFD	; 253
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <NHPread+0x11c>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    12a6:	9c ef       	ldi	r25, 0xFC	; 252
    12a8:	f6 cf       	rjmp	.-20     	; 0x1296 <NHPread+0x11c>
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
		protocol->reset = true;

	// return the errors
	return errorLevel;
}
    12aa:	89 2f       	mov	r24, r25
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <NHPreadChecksum>:

//================================================================================
// Read NHP
//================================================================================

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    12bc:	5e df       	rcall	.-324    	; 0x117a <NHPread>
    12be:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    12c0:	b4 f4       	brge	.+44     	; 0x12ee <NHPreadChecksum+0x3c>
    12c2:	09 81       	ldd	r16, Y+1	; 0x01
    12c4:	1a 81       	ldd	r17, Y+2	; 0x02
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	a9 01       	movw	r20, r18
    12cc:	66 27       	eor	r22, r22
    12ce:	77 27       	eor	r23, r23
    12d0:	22 27       	eor	r18, r18
    12d2:	33 27       	eor	r19, r19
    12d4:	40 27       	eor	r20, r16
    12d6:	51 27       	eor	r21, r17
    12d8:	62 27       	eor	r22, r18
    12da:	73 27       	eor	r23, r19
    12dc:	4f 3f       	cpi	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	61 05       	cpc	r22, r1
    12e2:	71 05       	cpc	r23, r1
    12e4:	21 f0       	breq	.+8      	; 0x12ee <NHPreadChecksum+0x3c>
    12e6:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	88 83       	st	Y, r24
    12ec:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    12ee:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    12f8:	fa 01       	movw	r30, r20
    12fa:	2c e1       	ldi	r18, 0x1C	; 28
    12fc:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    12fe:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1300:	ab 01       	movw	r20, r22
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <NHPwriteChecksum+0x12>
    1306:	56 95       	lsr	r21
    1308:	47 95       	ror	r20
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    130e:	48 30       	cpi	r20, 0x08	; 8
    1310:	28 f0       	brcs	.+10     	; 0x131c <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    1312:	97 30       	cpi	r25, 0x07	; 7
    1314:	59 f4       	brne	.+22     	; 0x132c <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    1316:	40 83       	st	Z, r20
				blocks--;
    1318:	96 e0       	ldi	r25, 0x06	; 6
    131a:	08 c0       	rjmp	.+16     	; 0x132c <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    131c:	40 83       	st	Z, r20
			blocks--;
    131e:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1320:	41 11       	cpse	r20, r1
    1322:	04 c0       	rjmp	.+8      	; 0x132c <NHPwriteChecksum+0x34>
    1324:	27 50       	subi	r18, 0x07	; 7
    1326:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    1328:	92 30       	cpi	r25, 0x02	; 2
    132a:	51 f7       	brne	.-44     	; 0x1300 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    132c:	49 2f       	mov	r20, r25
    132e:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1330:	0d c0       	rjmp	.+26     	; 0x134c <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1332:	df 01       	movw	r26, r30
    1334:	a4 0f       	add	r26, r20
    1336:	b1 1d       	adc	r27, r1
    1338:	9b 01       	movw	r18, r22
    133a:	2f 77       	andi	r18, 0x7F	; 127
    133c:	33 27       	eor	r19, r19
    133e:	2c 93       	st	X, r18
		data >>= 7;
    1340:	66 0f       	add	r22, r22
    1342:	67 2f       	mov	r22, r23
    1344:	66 1f       	adc	r22, r22
    1346:	77 0b       	sbc	r23, r23
    1348:	71 95       	neg	r23
		datablocks--;
    134a:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    134c:	41 11       	cpse	r20, r1
    134e:	f1 cf       	rjmp	.-30     	; 0x1332 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1350:	49 2f       	mov	r20, r25
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	9a 01       	movw	r18, r20
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	6a 95       	dec	r22
    135e:	e1 f7       	brne	.-8      	; 0x1358 <NHPwriteChecksum+0x60>
    1360:	20 6c       	ori	r18, 0xC0	; 192
    1362:	3f 6f       	ori	r19, 0xFF	; 255
    1364:	30 81       	ld	r19, Z
    1366:	32 2b       	or	r19, r18
    1368:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    136a:	e4 0f       	add	r30, r20
    136c:	f5 1f       	adc	r31, r21
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	8f 73       	andi	r24, 0x3F	; 63
    1374:	80 68       	ori	r24, 0x80	; 128
    1376:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    1378:	89 2f       	mov	r24, r25
    137a:	08 95       	ret

0000137c <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	e9 8d       	ldd	r30, Y+25	; 0x19
    1386:	e1 50       	subi	r30, 0x01	; 1
    1388:	e2 30       	cpi	r30, 0x02	; 2
    138a:	28 f4       	brcc	.+10     	; 0x1396 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	ec 5c       	subi	r30, 0xCC	; 204
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	10 81       	ld	r17, Z
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    1396:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    1398:	88 8d       	ldd	r24, Y+24	; 0x18
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	09 f4       	brne	.+2      	; 0x13a0 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    139e:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    13a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13a2:	87 30       	cpi	r24, 0x07	; 7
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <EVENT_CDC_Device_LineEncodingChanged+0x36>
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    13aa:	86 30       	cpi	r24, 0x06	; 6
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    13ae:	12 60       	ori	r17, 0x02	; 2
		break;
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    13b2:	14 60       	ori	r17, 0x04	; 4
		break;
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    13b6:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    13b8:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    13ba:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    13be:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    13c2:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    13c6:	2c 89       	ldd	r18, Y+20	; 0x14
    13c8:	3d 89       	ldd	r19, Y+21	; 0x15
    13ca:	4e 89       	ldd	r20, Y+22	; 0x16
    13cc:	5f 89       	ldd	r21, Y+23	; 0x17
    13ce:	21 15       	cp	r18, r1
    13d0:	81 ee       	ldi	r24, 0xE1	; 225
    13d2:	38 07       	cpc	r19, r24
    13d4:	41 05       	cpc	r20, r1
    13d6:	51 05       	cpc	r21, r1
    13d8:	79 f0       	breq	.+30     	; 0x13f8 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    13da:	ca 01       	movw	r24, r20
    13dc:	b9 01       	movw	r22, r18
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	60 58       	subi	r22, 0x80	; 128
    13e8:	7b 47       	sbci	r23, 0x7B	; 123
    13ea:	81 4e       	sbci	r24, 0xE1	; 225
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	0e 94 9d 12 	call	0x253a	; 0x253a <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	31 09       	sbc	r19, r1
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <EVENT_CDC_Device_LineEncodingChanged+0x80>
    13f8:	20 e1       	ldi	r18, 0x10	; 16
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	30 93 cd 00 	sts	0x00CD, r19
    1400:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    1404:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1408:	8c 89       	ldd	r24, Y+20	; 0x14
    140a:	9d 89       	ldd	r25, Y+21	; 0x15
    140c:	ae 89       	ldd	r26, Y+22	; 0x16
    140e:	bf 89       	ldd	r27, Y+23	; 0x17
    1410:	81 15       	cp	r24, r1
    1412:	91 4e       	sbci	r25, 0xE1	; 225
    1414:	a1 05       	cpc	r26, r1
    1416:	b1 05       	cpc	r27, r1
    1418:	11 f4       	brne	.+4      	; 0x141e <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    1424:	88 e9       	ldi	r24, 0x98	; 152
    1426:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    142a:	5b 98       	cbi	0x0b, 3	; 11
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	08 95       	ret

00001434 <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    1434:	fc 01       	movw	r30, r24
    1436:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    1438:	20 ff       	sbrs	r18, 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    143c:	5f 98       	cbi	0x0b, 7	; 11
    143e:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    1440:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    1442:	8b b1       	in	r24, 0x0b	; 11
    1444:	80 63       	ori	r24, 0x30	; 48
    1446:	8b b9       	out	0x0b, r24	; 11
    1448:	08 95       	ret

0000144a <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    144a:	68 0f       	add	r22, r24
    144c:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    1450:	fc 01       	movw	r30, r24
    1452:	21 91       	ld	r18, Z+
    1454:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1456:	30 91 c8 00 	lds	r19, 0x00C8
    145a:	35 ff       	sbrs	r19, 5
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <Serial_SendData+0xc>
				UDR1 = DataByte;
    145e:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    1462:	86 17       	cp	r24, r22
    1464:	97 07       	cpc	r25, r23
    1466:	a1 f7       	brne	.-24     	; 0x1450 <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    1468:	08 95       	ret

0000146a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	7c 01       	movw	r14, r24
    147e:	8b 01       	movw	r16, r22
    1480:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1482:	d7 d1       	rcall	.+942    	; 0x1832 <Endpoint_WaitUntilReady>
    1484:	b8 2e       	mov	r11, r24
    1486:	81 11       	cpse	r24, r1
    1488:	32 c0       	rjmp	.+100    	; 0x14ee <Endpoint_Write_Stream_LE+0x84>
    148a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    148c:	31 f0       	breq	.+12     	; 0x149a <Endpoint_Write_Stream_LE+0x30>
    148e:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    1490:	39 81       	ldd	r19, Y+1	; 0x01
    1492:	02 1b       	sub	r16, r18
    1494:	13 0b       	sbc	r17, r19
    1496:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1498:	f3 1e       	adc	r15, r19
    149a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    149c:	d1 2c       	mov	r13, r1
    149e:	22 c0       	rjmp	.+68     	; 0x14e4 <Endpoint_Write_Stream_LE+0x7a>
    14a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14a4:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <Endpoint_Write_Stream_LE+0x66>
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ac:	8e 77       	andi	r24, 0x7E	; 126
    14ae:	80 93 e8 00 	sts	0x00E8, r24
    14b2:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    14b4:	49 f0       	breq	.+18     	; 0x14c8 <Endpoint_Write_Stream_LE+0x5e>
    14b6:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    14b8:	99 81       	ldd	r25, Y+1	; 0x01
    14ba:	8c 0d       	add	r24, r12
    14bc:	9d 1d       	adc	r25, r13
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 83       	st	Y, r24
    14c2:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    14c4:	b2 2e       	mov	r11, r18
    14c6:	13 c0       	rjmp	.+38     	; 0x14ee <Endpoint_Write_Stream_LE+0x84>
    14c8:	b4 d1       	rcall	.+872    	; 0x1832 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14ca:	88 23       	and	r24, r24
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <Endpoint_Write_Stream_LE+0x7a>
    14ce:	0e c0       	rjmp	.+28     	; 0x14ec <Endpoint_Write_Stream_LE+0x82>
    14d0:	f7 01       	movw	r30, r14
    14d2:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    14d4:	7f 01       	movw	r14, r30
    14d6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14da:	01 50       	subi	r16, 0x01	; 1
    14dc:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    14de:	ff ef       	ldi	r31, 0xFF	; 255
    14e0:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    14e2:	df 0a       	sbc	r13, r31
    14e4:	01 15       	cp	r16, r1
    14e6:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    14e8:	d9 f6       	brne	.-74     	; 0x14a0 <Endpoint_Write_Stream_LE+0x36>
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <Endpoint_Write_Stream_LE+0x84>
    14ec:	b8 2e       	mov	r11, r24
    14ee:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14f0:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	08 95       	ret

00001504 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1504:	20 91 4f 02 	lds	r18, 0x024F
    1508:	30 91 50 02 	lds	r19, 0x0250
    150c:	26 17       	cp	r18, r22
    150e:	37 07       	cpc	r19, r23
    1510:	48 f0       	brcs	.+18     	; 0x1524 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1512:	61 15       	cp	r22, r1
    1514:	71 05       	cpc	r23, r1
    1516:	39 f4       	brne	.+14     	; 0x1526 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1518:	20 91 e8 00 	lds	r18, 0x00E8
    151c:	2e 77       	andi	r18, 0x7E	; 126
    151e:	20 93 e8 00 	sts	0x00E8, r18
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1524:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1526:	9c 01       	movw	r18, r24
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	34 c0       	rjmp	.+104    	; 0x1594 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    152c:	90 91 48 02 	lds	r25, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1530:	99 23       	and	r25, r25
    1532:	09 f4       	brne	.+2      	; 0x1536 <Endpoint_Write_Control_Stream_LE+0x32>
    1534:	43 c0       	rjmp	.+134    	; 0x15bc <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1536:	95 30       	cpi	r25, 0x05	; 5
    1538:	09 f4       	brne	.+2      	; 0x153c <Endpoint_Write_Control_Stream_LE+0x38>
    153a:	42 c0       	rjmp	.+132    	; 0x15c0 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    153c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1540:	93 fd       	sbrc	r25, 3
    1542:	3a c0       	rjmp	.+116    	; 0x15b8 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1544:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1548:	92 fd       	sbrc	r25, 2
    154a:	30 c0       	rjmp	.+96     	; 0x15ac <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    154c:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1550:	90 ff       	sbrs	r25, 0
    1552:	20 c0       	rjmp	.+64     	; 0x1594 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1554:	80 91 f2 00 	lds	r24, 0x00F2
    1558:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    155a:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    155c:	82 1b       	sub	r24, r18
    155e:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1560:	05 c0       	rjmp	.+10     	; 0x156c <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1562:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1564:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1568:	61 50       	subi	r22, 0x01	; 1
    156a:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    156c:	9f 01       	movw	r18, r30
    156e:	28 0f       	add	r18, r24
    1570:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1572:	61 15       	cp	r22, r1
    1574:	71 05       	cpc	r23, r1
    1576:	19 f0       	breq	.+6      	; 0x157e <Endpoint_Write_Control_Stream_LE+0x7a>
    1578:	28 30       	cpi	r18, 0x08	; 8
    157a:	31 05       	cpc	r19, r1
    157c:	90 f3       	brcs	.-28     	; 0x1562 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	28 30       	cpi	r18, 0x08	; 8
    1582:	31 05       	cpc	r19, r1
    1584:	09 f0       	breq	.+2      	; 0x1588 <Endpoint_Write_Control_Stream_LE+0x84>
    1586:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1588:	90 91 e8 00 	lds	r25, 0x00E8
    158c:	9e 77       	andi	r25, 0x7E	; 126
    158e:	90 93 e8 00 	sts	0x00E8, r25
    1592:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1594:	61 15       	cp	r22, r1
    1596:	71 05       	cpc	r23, r1
    1598:	49 f6       	brne	.-110    	; 0x152c <Endpoint_Write_Control_Stream_LE+0x28>
    159a:	81 11       	cpse	r24, r1
    159c:	c7 cf       	rjmp	.-114    	; 0x152c <Endpoint_Write_Control_Stream_LE+0x28>
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15a0:	80 91 48 02 	lds	r24, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15a4:	88 23       	and	r24, r24
    15a6:	51 f0       	breq	.+20     	; 0x15bc <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15a8:	85 30       	cpi	r24, 0x05	; 5
    15aa:	51 f0       	breq	.+20     	; 0x15c0 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15b0:	82 ff       	sbrs	r24, 2
    15b2:	f6 cf       	rjmp	.-20     	; 0x15a0 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15c2:	08 95       	ret

000015c4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15ca:	20 91 e8 00 	lds	r18, 0x00E8
    15ce:	2b 77       	andi	r18, 0x7B	; 123
    15d0:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    15d4:	9c 01       	movw	r18, r24
    15d6:	21 c0       	rjmp	.+66     	; 0x161a <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15d8:	80 91 48 02 	lds	r24, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15dc:	88 23       	and	r24, r24
    15de:	81 f1       	breq	.+96     	; 0x1640 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15e0:	85 30       	cpi	r24, 0x05	; 5
    15e2:	41 f1       	breq	.+80     	; 0x1634 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15e8:	83 fd       	sbrc	r24, 3
    15ea:	26 c0       	rjmp	.+76     	; 0x1638 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    15f0:	82 ff       	sbrs	r24, 2
    15f2:	f2 cf       	rjmp	.-28     	; 0x15d8 <Endpoint_Read_Control_Stream_LE+0x14>
    15f4:	f9 01       	movw	r30, r18
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15f8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15fc:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    15fe:	9f 01       	movw	r18, r30
				Length--;
    1600:	61 50       	subi	r22, 0x01	; 1
    1602:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1604:	29 f0       	breq	.+10     	; 0x1610 <Endpoint_Read_Control_Stream_LE+0x4c>
    1606:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1608:	80 91 f2 00 	lds	r24, 0x00F2
    160c:	81 11       	cpse	r24, r1
    160e:	f4 cf       	rjmp	.-24     	; 0x15f8 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1610:	80 91 e8 00 	lds	r24, 0x00E8
    1614:	8b 77       	andi	r24, 0x7B	; 123
    1616:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    161a:	61 15       	cp	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	e1 f6       	brne	.-72     	; 0x15d8 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1620:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1624:	80 fd       	sbrc	r24, 0
    1626:	0a c0       	rjmp	.+20     	; 0x163c <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1628:	80 91 48 02 	lds	r24, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    162c:	88 23       	and	r24, r24
    162e:	41 f0       	breq	.+16     	; 0x1640 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	b1 f7       	brne	.-20     	; 0x1620 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1640:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1642:	08 95       	ret

00001644 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1644:	20 91 4f 02 	lds	r18, 0x024F
    1648:	30 91 50 02 	lds	r19, 0x0250
    164c:	26 17       	cp	r18, r22
    164e:	37 07       	cpc	r19, r23
    1650:	48 f0       	brcs	.+18     	; 0x1664 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1652:	61 15       	cp	r22, r1
    1654:	71 05       	cpc	r23, r1
    1656:	39 f4       	brne	.+14     	; 0x1666 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1658:	20 91 e8 00 	lds	r18, 0x00E8
    165c:	2e 77       	andi	r18, 0x7E	; 126
    165e:	20 93 e8 00 	sts	0x00E8, r18
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1664:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1666:	9c 01       	movw	r18, r24
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	35 c0       	rjmp	.+106    	; 0x16d6 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    166c:	90 91 48 02 	lds	r25, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1670:	99 23       	and	r25, r25
    1672:	09 f4       	brne	.+2      	; 0x1676 <Endpoint_Write_Control_PStream_LE+0x32>
    1674:	44 c0       	rjmp	.+136    	; 0x16fe <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1676:	95 30       	cpi	r25, 0x05	; 5
    1678:	09 f4       	brne	.+2      	; 0x167c <Endpoint_Write_Control_PStream_LE+0x38>
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    167c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1680:	93 fd       	sbrc	r25, 3
    1682:	3b c0       	rjmp	.+118    	; 0x16fa <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1684:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1688:	92 fd       	sbrc	r25, 2
    168a:	31 c0       	rjmp	.+98     	; 0x16ee <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    168c:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1690:	90 ff       	sbrs	r25, 0
    1692:	21 c0       	rjmp	.+66     	; 0x16d6 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1694:	80 91 f2 00 	lds	r24, 0x00F2
    1698:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    169a:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    169c:	82 1b       	sub	r24, r18
    169e:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    16a2:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16a4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    16a8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    16aa:	61 50       	subi	r22, 0x01	; 1
    16ac:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    16ae:	9c 01       	movw	r18, r24
    16b0:	2e 0f       	add	r18, r30
    16b2:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16b4:	61 15       	cp	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <Endpoint_Write_Control_PStream_LE+0x7c>
    16ba:	28 30       	cpi	r18, 0x08	; 8
    16bc:	31 05       	cpc	r19, r1
    16be:	88 f3       	brcs	.-30     	; 0x16a2 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	28 30       	cpi	r18, 0x08	; 8
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <Endpoint_Write_Control_PStream_LE+0x86>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ca:	90 91 e8 00 	lds	r25, 0x00E8
    16ce:	9e 77       	andi	r25, 0x7E	; 126
    16d0:	90 93 e8 00 	sts	0x00E8, r25
    16d4:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16d6:	61 15       	cp	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	41 f6       	brne	.-112    	; 0x166c <Endpoint_Write_Control_PStream_LE+0x28>
    16dc:	81 11       	cpse	r24, r1
    16de:	c6 cf       	rjmp	.-116    	; 0x166c <Endpoint_Write_Control_PStream_LE+0x28>
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16e2:	80 91 48 02 	lds	r24, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16e6:	88 23       	and	r24, r24
    16e8:	51 f0       	breq	.+20     	; 0x16fe <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16ea:	85 30       	cpi	r24, 0x05	; 5
    16ec:	51 f0       	breq	.+20     	; 0x1702 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16ee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    16f2:	82 ff       	sbrs	r24, 2
    16f4:	f6 cf       	rjmp	.-20     	; 0x16e2 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1702:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1704:	08 95       	ret

00001706 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1706:	98 2f       	mov	r25, r24
    1708:	2c c0       	rjmp	.+88     	; 0x1762 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    170a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    170e:	98 17       	cp	r25, r24
    1710:	39 f0       	breq	.+14     	; 0x1720 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1712:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1716:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    171a:	50 91 f0 00 	lds	r21, 0x00F0
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1720:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1722:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1724:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1726:	21 fd       	sbrc	r18, 1
    1728:	02 c0       	rjmp	.+4      	; 0x172e <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    172a:	9f 5f       	subi	r25, 0xFF	; 255
    172c:	1a c0       	rjmp	.+52     	; 0x1762 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    172e:	30 91 eb 00 	lds	r19, 0x00EB
    1732:	3e 7f       	andi	r19, 0xFE	; 254
    1734:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1738:	30 91 ed 00 	lds	r19, 0x00ED
    173c:	3d 7f       	andi	r19, 0xFD	; 253
    173e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1742:	30 91 eb 00 	lds	r19, 0x00EB
    1746:	31 60       	ori	r19, 0x01	; 1
    1748:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    174c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1750:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1754:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1758:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    175c:	27 fd       	sbrc	r18, 7
    175e:	e5 cf       	rjmp	.-54     	; 0x172a <Endpoint_ConfigureEndpoint_Prv+0x24>
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1762:	95 30       	cpi	r25, 0x05	; 5
    1764:	90 f2       	brcs	.-92     	; 0x170a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1766:	8f 70       	andi	r24, 0x0F	; 15
    1768:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1770:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1772:	08 95       	ret

00001774 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	06 2f       	mov	r16, r22
    177e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	2e c0       	rjmp	.+92     	; 0x17e0 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    1784:	98 81       	ld	r25, Y
    1786:	91 11       	cpse	r25, r1
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    178a:	1f 5f       	subi	r17, 0xFF	; 255
    178c:	25 96       	adiw	r28, 0x05	; 5
    178e:	28 c0       	rjmp	.+80     	; 0x17e0 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1798:	89 2f       	mov	r24, r25
    179a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	10 f0       	brcs	.+4      	; 0x17a4 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	21 c0       	rjmp	.+66     	; 0x17e6 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	10 f0       	brcs	.+4      	; 0x17ac <Endpoint_ConfigureEndpointTable+0x38>
    17a8:	56 e0       	ldi	r21, 0x06	; 6
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <Endpoint_ConfigureEndpointTable+0x3a>
    17ac:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    17ae:	28 e0       	ldi	r18, 0x08	; 8
    17b0:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    17b6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    17bc:	2e 17       	cp	r18, r30
    17be:	3f 07       	cpc	r19, r31
    17c0:	d0 f3       	brcs	.-12     	; 0x17b6 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    17c2:	42 95       	swap	r20
    17c4:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17c6:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    17c8:	99 1f       	adc	r25, r25
    17ca:	99 27       	eor	r25, r25
    17cc:	99 1f       	adc	r25, r25
    17ce:	62 95       	swap	r22
    17d0:	66 0f       	add	r22, r22
    17d2:	66 0f       	add	r22, r22
    17d4:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17d6:	69 2b       	or	r22, r25
    17d8:	96 df       	rcall	.-212    	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    17da:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    17dc:	d6 cf       	rjmp	.-84     	; 0x178a <Endpoint_ConfigureEndpointTable+0x16>
    17de:	e0 cf       	rjmp	.-64     	; 0x17a0 <Endpoint_ConfigureEndpointTable+0x2c>
    17e0:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    17e2:	d0 cf       	rjmp	.-96     	; 0x1784 <Endpoint_ConfigureEndpointTable+0x10>
    17e4:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    17e6:	df 91       	pop	r29
}
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    17f0:	80 91 49 02 	lds	r24, 0x0249
    17f4:	87 fd       	sbrc	r24, 7
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17f8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    17fc:	80 ff       	sbrs	r24, 0
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <Endpoint_ClearStatusStage+0x2c>
    1800:	12 c0       	rjmp	.+36     	; 0x1826 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1802:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1806:	82 fd       	sbrc	r24, 2
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    180a:	80 91 48 02 	lds	r24, 0x0248
    180e:	81 11       	cpse	r24, r1
    1810:	f8 cf       	rjmp	.-16     	; 0x1802 <Endpoint_ClearStatusStage+0x12>
    1812:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1814:	80 91 e8 00 	lds	r24, 0x00E8
    1818:	8b 77       	andi	r24, 0x7B	; 123
    181a:	08 c0       	rjmp	.+16     	; 0x182c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    181c:	80 91 48 02 	lds	r24, 0x0248
    1820:	81 11       	cpse	r24, r1
    1822:	ea cf       	rjmp	.-44     	; 0x17f8 <Endpoint_ClearStatusStage+0x8>
    1824:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1826:	80 91 e8 00 	lds	r24, 0x00E8
    182a:	8e 77       	andi	r24, 0x7E	; 126
    182c:	80 93 e8 00 	sts	0x00E8, r24
    1830:	08 95       	ret

00001832 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1832:	80 91 e4 00 	lds	r24, 0x00E4
    1836:	90 91 e5 00 	lds	r25, 0x00E5
    183a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    183c:	20 91 ec 00 	lds	r18, 0x00EC
    1840:	20 fd       	sbrc	r18, 0
    1842:	1f c0       	rjmp	.+62     	; 0x1882 <Endpoint_WaitUntilReady+0x50>
    1844:	23 c0       	rjmp	.+70     	; 0x188c <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1846:	20 91 48 02 	lds	r18, 0x0248

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    184a:	22 23       	and	r18, r18
    184c:	91 f0       	breq	.+36     	; 0x1872 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    184e:	25 30       	cpi	r18, 0x05	; 5
    1850:	91 f0       	breq	.+36     	; 0x1876 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1852:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1856:	25 fd       	sbrc	r18, 5
    1858:	10 c0       	rjmp	.+32     	; 0x187a <Endpoint_WaitUntilReady+0x48>
    185a:	20 91 e4 00 	lds	r18, 0x00E4
    185e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1862:	28 17       	cp	r18, r24
    1864:	39 07       	cpc	r19, r25
    1866:	51 f3       	breq	.-44     	; 0x183c <Endpoint_WaitUntilReady+0xa>
    1868:	41 50       	subi	r20, 0x01	; 1
    186a:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    186c:	39 f7       	brne	.-50     	; 0x183c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1882:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1886:	20 ff       	sbrs	r18, 0
    1888:	de cf       	rjmp	.-68     	; 0x1846 <Endpoint_WaitUntilReady+0x14>
    188a:	f9 cf       	rjmp	.-14     	; 0x187e <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    188c:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1890:	22 ff       	sbrs	r18, 2
    1892:	d9 cf       	rjmp	.-78     	; 0x1846 <Endpoint_WaitUntilReady+0x14>
    1894:	f4 cf       	rjmp	.-24     	; 0x187e <Endpoint_WaitUntilReady+0x4c>

00001896 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1896:	41 d0       	rcall	.+130    	; 0x191a <USB_INT_DisableAllInterrupts>
    1898:	43 d0       	rcall	.+134    	; 0x1920 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    189a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    189e:	8f 77       	andi	r24, 0x7F	; 127
    18a0:	80 93 d8 00 	sts	0x00D8, r24
    18a4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    18a8:	80 68       	ori	r24, 0x80	; 128
    18aa:	80 93 d8 00 	sts	0x00D8, r24
    18ae:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18b2:	8f 7d       	andi	r24, 0xDF	; 223
    18b4:	80 93 d8 00 	sts	0x00D8, r24
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18bc:	86 e0       	ldi	r24, 0x06	; 6
    18be:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18c0:	09 b4       	in	r0, 0x29	; 41
    18c2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    18c4:	fd cf       	rjmp	.-6      	; 0x18c0 <USB_ResetInterface+0x2a>
    18c6:	10 92 48 02 	sts	0x0248, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    18ca:	10 92 44 02 	sts	0x0244, r1
	USB_Device_ConfigurationNumber  = 0;
    18ce:	10 92 46 02 	sts	0x0246, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    18d2:	10 92 45 02 	sts	0x0245, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    18d6:	42 e0       	ldi	r20, 0x02	; 2
    18d8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	14 df       	rcall	.-472    	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    18de:	80 91 e1 00 	lds	r24, 0x00E1
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    18e4:	80 93 e1 00 	sts	0x00E1, r24
    18e8:	80 91 e2 00 	lds	r24, 0x00E2
    18ec:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    18ee:	80 93 e2 00 	sts	0x00E2, r24
    18f2:	80 91 e2 00 	lds	r24, 0x00E2
    18f6:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    18f8:	80 93 e2 00 	sts	0x00E2, r24
    18fc:	80 91 e0 00 	lds	r24, 0x00E0
    1900:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1902:	80 93 e0 00 	sts	0x00E0, r24
    1906:	08 95       	ret

00001908 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1908:	e3 e6       	ldi	r30, 0x63	; 99
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8e 7f       	andi	r24, 0xFE	; 254
    1910:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 47 02 	sts	0x0247, r24

	USB_ResetInterface();
    1918:	be cf       	rjmp	.-132    	; 0x1896 <USB_ResetInterface>

0000191a <USB_INT_DisableAllInterrupts>:
    191a:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    191e:	08 95       	ret

00001920 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1920:	10 92 e1 00 	sts	0x00E1, r1
    1924:	08 95       	ret

00001926 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1948:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    194c:	82 ff       	sbrs	r24, 2
    194e:	0b c0       	rjmp	.+22     	; 0x1966 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1950:	80 91 e2 00 	lds	r24, 0x00E2
    1954:	82 ff       	sbrs	r24, 2
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1958:	80 91 e1 00 	lds	r24, 0x00E1
    195c:	8b 7f       	andi	r24, 0xFB	; 251
    195e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1962:	0e 94 61 03 	call	0x6c2	; 0x6c2 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1966:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    196a:	80 ff       	sbrs	r24, 0
    196c:	18 c0       	rjmp	.+48     	; 0x199e <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    196e:	80 91 e2 00 	lds	r24, 0x00E2
    1972:	80 ff       	sbrs	r24, 0
    1974:	14 c0       	rjmp	.+40     	; 0x199e <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1976:	80 91 e2 00 	lds	r24, 0x00E2
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1980:	80 91 e2 00 	lds	r24, 0x00E2
    1984:	80 61       	ori	r24, 0x10	; 16
    1986:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    198a:	80 91 d8 00 	lds	r24, 0x00D8
    198e:	80 62       	ori	r24, 0x20	; 32
    1990:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1994:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1996:	10 92 48 02 	sts	0x0248, r1
		EVENT_USB_Device_Disconnect();
    199a:	0e 94 0a 03 	call	0x614	; 0x614 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    199e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    19a2:	84 ff       	sbrs	r24, 4
    19a4:	30 c0       	rjmp	.+96     	; 0x1a06 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    19a6:	80 91 e2 00 	lds	r24, 0x00E2
    19aa:	84 ff       	sbrs	r24, 4
    19ac:	2c c0       	rjmp	.+88     	; 0x1a06 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    19b6:	09 b4       	in	r0, 0x29	; 41
    19b8:	00 fe       	sbrs	r0, 0
    19ba:	fd cf       	rjmp	.-6      	; 0x19b6 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19bc:	80 91 d8 00 	lds	r24, 0x00D8
    19c0:	8f 7d       	andi	r24, 0xDF	; 223
    19c2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    19c6:	80 91 e1 00 	lds	r24, 0x00E1
    19ca:	8f 7e       	andi	r24, 0xEF	; 239
    19cc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    19d0:	80 91 e2 00 	lds	r24, 0x00E2
    19d4:	8f 7e       	andi	r24, 0xEF	; 239
    19d6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19da:	80 91 e2 00 	lds	r24, 0x00E2
    19de:	81 60       	ori	r24, 0x01	; 1
    19e0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    19e4:	80 91 44 02 	lds	r24, 0x0244
    19e8:	88 23       	and	r24, r24
    19ea:	11 f0       	breq	.+4      	; 0x19f0 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    19ec:	84 e0       	ldi	r24, 0x04	; 4
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19f0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    19f4:	87 ff       	sbrs	r24, 7
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <__vector_11+0xd6>
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <__vector_11+0xd8>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 93 48 02 	sts	0x0248, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1a02:	0e 94 09 03 	call	0x612	; 0x612 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a06:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a0a:	83 ff       	sbrs	r24, 3
    1a0c:	27 c0       	rjmp	.+78     	; 0x1a5c <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a0e:	80 91 e2 00 	lds	r24, 0x00E2
    1a12:	83 ff       	sbrs	r24, 3
    1a14:	23 c0       	rjmp	.+70     	; 0x1a5c <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1a16:	80 91 e1 00 	lds	r24, 0x00E1
    1a1a:	87 7f       	andi	r24, 0xF7	; 247
    1a1c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	80 93 48 02 	sts	0x0248, r24
		USB_Device_ConfigurationNumber = 0;
    1a26:	10 92 44 02 	sts	0x0244, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a2a:	80 91 e1 00 	lds	r24, 0x00E1
    1a2e:	8e 7f       	andi	r24, 0xFE	; 254
    1a30:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a34:	80 91 e2 00 	lds	r24, 0x00E2
    1a38:	8e 7f       	andi	r24, 0xFE	; 254
    1a3a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a3e:	80 91 e2 00 	lds	r24, 0x00E2
    1a42:	80 61       	ori	r24, 0x10	; 16
    1a44:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	5b de       	rcall	.-842    	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    1a50:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1a54:	88 60       	ori	r24, 0x08	; 8
    1a56:	80 93 f0 00 	sts	0x00F0, r24
    1a5a:	b8 d1       	rcall	.+880    	; 0x1dcc <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	cf 93       	push	r28
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1aa2:	80 91 e9 00 	lds	r24, 0x00E9
    1aa6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1aa8:	90 91 ec 00 	lds	r25, 0x00EC
    1aac:	90 ff       	sbrs	r25, 0
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <__vector_12+0x36>
    1ab0:	90 e8       	ldi	r25, 0x80	; 128
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <__vector_12+0x38>
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ab6:	c9 2f       	mov	r28, r25
    1ab8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aba:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1abe:	80 91 f0 00 	lds	r24, 0x00F0
    1ac2:	87 7f       	andi	r24, 0xF7	; 247
    1ac4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ac8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1aca:	1c d0       	rcall	.+56     	; 0x1b04 <USB_Device_ProcessControlRequest>
    1acc:	10 92 e9 00 	sts	0x00E9, r1
    1ad0:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ad4:	88 60       	ori	r24, 0x08	; 8
    1ad6:	80 93 f0 00 	sts	0x00F0, r24
    1ada:	cf 70       	andi	r28, 0x0F	; 15
    1adc:	c0 93 e9 00 	sts	0x00E9, r28
    1ae0:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ae2:	ef 91       	pop	r30
    1ae4:	cf 91       	pop	r28
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <USB_Device_ProcessControlRequest>:
    1b04:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	ac 97       	sbiw	r28, 0x2c	; 44
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1b1a:	e9 e4       	ldi	r30, 0x49	; 73
    1b1c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b1e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b22:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b24:	22 e0       	ldi	r18, 0x02	; 2
    1b26:	e1 35       	cpi	r30, 0x51	; 81
    1b28:	f2 07       	cpc	r31, r18
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b2c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b30:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b34:	83 ff       	sbrs	r24, 3
    1b36:	32 c1       	rjmp	.+612    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b38:	80 91 49 02 	lds	r24, 0x0249

		switch (USB_ControlRequest.bRequest)
    1b3c:	90 91 4a 02 	lds	r25, 0x024A
    1b40:	95 30       	cpi	r25, 0x05	; 5
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <USB_Device_ProcessControlRequest+0x42>
    1b44:	87 c0       	rjmp	.+270    	; 0x1c54 <USB_Device_ProcessControlRequest+0x150>
    1b46:	38 f4       	brcc	.+14     	; 0x1b56 <USB_Device_ProcessControlRequest+0x52>
    1b48:	91 30       	cpi	r25, 0x01	; 1
    1b4a:	b1 f1       	breq	.+108    	; 0x1bb8 <USB_Device_ProcessControlRequest+0xb4>
    1b4c:	70 f0       	brcs	.+28     	; 0x1b6a <USB_Device_ProcessControlRequest+0x66>
    1b4e:	93 30       	cpi	r25, 0x03	; 3
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <USB_Device_ProcessControlRequest+0x50>
    1b52:	24 c1       	rjmp	.+584    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1b54:	31 c0       	rjmp	.+98     	; 0x1bb8 <USB_Device_ProcessControlRequest+0xb4>
    1b56:	98 30       	cpi	r25, 0x08	; 8
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <USB_Device_ProcessControlRequest+0x58>
    1b5a:	f4 c0       	rjmp	.+488    	; 0x1d44 <USB_Device_ProcessControlRequest+0x240>
    1b5c:	99 30       	cpi	r25, 0x09	; 9
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <USB_Device_ProcessControlRequest+0x5e>
    1b60:	00 c1       	rjmp	.+512    	; 0x1d62 <USB_Device_ProcessControlRequest+0x25e>
    1b62:	96 30       	cpi	r25, 0x06	; 6
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <USB_Device_ProcessControlRequest+0x64>
    1b66:	1a c1       	rjmp	.+564    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1b68:	9b c0       	rjmp	.+310    	; 0x1ca0 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b6a:	80 38       	cpi	r24, 0x80	; 128
    1b6c:	21 f0       	breq	.+8      	; 0x1b76 <USB_Device_ProcessControlRequest+0x72>
    1b6e:	82 38       	cpi	r24, 0x82	; 130
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <USB_Device_ProcessControlRequest+0x70>
    1b72:	14 c1       	rjmp	.+552    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1b74:	08 c0       	rjmp	.+16     	; 0x1b86 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1b76:	80 91 45 02 	lds	r24, 0x0245
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1b7a:	90 91 46 02 	lds	r25, 0x0246
    1b7e:	99 23       	and	r25, r25
    1b80:	89 f0       	breq	.+34     	; 0x1ba4 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1b82:	82 60       	ori	r24, 0x02	; 2
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b86:	80 91 4d 02 	lds	r24, 0x024D
    1b8a:	90 91 4e 02 	lds	r25, 0x024E
    1b8e:	8f 70       	andi	r24, 0x0F	; 15
    1b90:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b92:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b96:	80 91 eb 00 	lds	r24, 0x00EB
    1b9a:	85 fb       	bst	r24, 5
    1b9c:	88 27       	eor	r24, r24
    1b9e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ba0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ba4:	90 91 e8 00 	lds	r25, 0x00E8
    1ba8:	97 7f       	andi	r25, 0xF7	; 247
    1baa:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1bae:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1bb2:	10 92 f1 00 	sts	0x00F1, r1
    1bb6:	d1 c0       	rjmp	.+418    	; 0x1d5a <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bb8:	88 23       	and	r24, r24
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <USB_Device_ProcessControlRequest+0xbe>
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <USB_Device_ProcessControlRequest+0xbe>
    1bc0:	ed c0       	rjmp	.+474    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1bc2:	8f 71       	andi	r24, 0x1F	; 31
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <USB_Device_ProcessControlRequest+0xca>
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <USB_Device_ProcessControlRequest+0xc8>
    1bca:	e8 c0       	rjmp	.+464    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1bcc:	0b c0       	rjmp	.+22     	; 0x1be4 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1bce:	80 91 4b 02 	lds	r24, 0x024B
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <USB_Device_ProcessControlRequest+0xd4>
    1bd6:	e2 c0       	rjmp	.+452    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1bd8:	93 30       	cpi	r25, 0x03	; 3
    1bda:	09 f0       	breq	.+2      	; 0x1bde <USB_Device_ProcessControlRequest+0xda>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	80 93 46 02 	sts	0x0246, r24
    1be2:	2f c0       	rjmp	.+94     	; 0x1c42 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1be4:	80 91 4b 02 	lds	r24, 0x024B
    1be8:	81 11       	cpse	r24, r1
    1bea:	2b c0       	rjmp	.+86     	; 0x1c42 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1bec:	80 91 4d 02 	lds	r24, 0x024D
    1bf0:	90 91 4e 02 	lds	r25, 0x024E
    1bf4:	8f 70       	andi	r24, 0x0F	; 15
    1bf6:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <USB_Device_ProcessControlRequest+0xfa>
    1bfc:	cf c0       	rjmp	.+414    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bfe:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c02:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c06:	20 ff       	sbrs	r18, 0
    1c08:	1c c0       	rjmp	.+56     	; 0x1c42 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c0a:	20 91 4a 02 	lds	r18, 0x024A
    1c0e:	23 30       	cpi	r18, 0x03	; 3
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c12:	80 91 eb 00 	lds	r24, 0x00EB
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	12 c0       	rjmp	.+36     	; 0x1c3e <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c1a:	90 91 eb 00 	lds	r25, 0x00EB
    1c1e:	90 61       	ori	r25, 0x10	; 16
    1c20:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <USB_Device_ProcessControlRequest+0x128>
    1c2a:	22 0f       	add	r18, r18
    1c2c:	8a 95       	dec	r24
    1c2e:	ea f7       	brpl	.-6      	; 0x1c2a <USB_Device_ProcessControlRequest+0x126>
    1c30:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c34:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c38:	80 91 eb 00 	lds	r24, 0x00EB
    1c3c:	88 60       	ori	r24, 0x08	; 8
    1c3e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c42:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c46:	80 91 e8 00 	lds	r24, 0x00E8
    1c4a:	87 7f       	andi	r24, 0xF7	; 247
    1c4c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c50:	cf dd       	rcall	.-1122   	; 0x17f0 <Endpoint_ClearStatusStage>
    1c52:	a4 c0       	rjmp	.+328    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1c54:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c56:	a2 c0       	rjmp	.+324    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1c58:	80 91 4b 02 	lds	r24, 0x024B
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c5c:	90 91 4c 02 	lds	r25, 0x024C
    1c60:	8f 77       	andi	r24, 0x7F	; 127
    1c62:	99 27       	eor	r25, r25
    1c64:	18 2f       	mov	r17, r24
    1c66:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c6a:	90 78       	andi	r25, 0x80	; 128
    1c6c:	98 2b       	or	r25, r24
    1c6e:	90 93 e3 00 	sts	0x00E3, r25
    1c72:	80 91 e8 00 	lds	r24, 0x00E8
    1c76:	87 7f       	andi	r24, 0xF7	; 247
    1c78:	80 93 e8 00 	sts	0x00E8, r24
    1c7c:	b9 dd       	rcall	.-1166   	; 0x17f0 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c82:	80 ff       	sbrs	r24, 0
    1c84:	fc cf       	rjmp	.-8      	; 0x1c7e <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1c86:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1c8a:	80 68       	ori	r24, 0x80	; 128
    1c8c:	80 93 e3 00 	sts	0x00E3, r24
    1c90:	11 23       	and	r17, r17
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <USB_Device_ProcessControlRequest+0x196>
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	80 93 48 02 	sts	0x0248, r24
    1c9e:	7e c0       	rjmp	.+252    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1ca0:	80 58       	subi	r24, 0x80	; 128
    1ca2:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <USB_Device_ProcessControlRequest+0x1a4>
    1ca6:	7a c0       	rjmp	.+244    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1ca8:	80 91 4b 02 	lds	r24, 0x024B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1cac:	90 91 4c 02 	lds	r25, 0x024C
    1cb0:	8c 3d       	cpi	r24, 0xDC	; 220
    1cb2:	23 e0       	ldi	r18, 0x03	; 3
    1cb4:	92 07       	cpc	r25, r18
    1cb6:	71 f5       	brne	.+92     	; 0x1d14 <USB_Device_ProcessControlRequest+0x210>
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1cbc:	8a e2       	ldi	r24, 0x2A	; 42
    1cbe:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1cc0:	4f b7       	in	r20, 0x3f	; 63
    1cc2:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1cc4:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1cc6:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ccc:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1cce:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	50 93 57 00 	sts	0x0057, r21
    1cd6:	e4 91       	lpm	r30, Z+
    1cd8:	20 ff       	sbrs	r18, 0
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1cdc:	e2 95       	swap	r30
    1cde:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1ce0:	3f 5f       	subi	r19, 0xFF	; 255
    1ce2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ce4:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	ea 30       	cpi	r30, 0x0A	; 10
    1cea:	10 f0       	brcs	.+4      	; 0x1cf0 <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1cec:	c7 96       	adiw	r24, 0x37	; 55
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <USB_Device_ProcessControlRequest+0x1ee>
    1cf0:	c0 96       	adiw	r24, 0x30	; 48
    1cf2:	8d 93       	st	X+, r24
    1cf4:	9d 93       	st	X+, r25
    1cf6:	2f 5f       	subi	r18, 0xFF	; 255
    1cf8:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1cfa:	49 f7       	brne	.-46     	; 0x1cce <USB_Device_ProcessControlRequest+0x1ca>
    1cfc:	4f bf       	out	0x3f, r20	; 63
    1cfe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d02:	87 7f       	andi	r24, 0xF7	; 247
    1d04:	80 93 e8 00 	sts	0x00E8, r24
    1d08:	6a e2       	ldi	r22, 0x2A	; 42
    1d0a:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	f9 db       	rcall	.-2062   	; 0x1504 <Endpoint_Write_Control_Stream_LE>
    1d12:	12 c0       	rjmp	.+36     	; 0x1d38 <USB_Device_ProcessControlRequest+0x234>
    1d14:	ae 01       	movw	r20, r28
    1d16:	45 5d       	subi	r20, 0xD5	; 213
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1d1a:	60 91 4d 02 	lds	r22, 0x024D
    1d1e:	0e 94 6d 03 	call	0x6da	; 0x6da <CALLBACK_USB_GetDescriptor>
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	d9 f1       	breq	.+118    	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1d26:	20 91 e8 00 	lds	r18, 0x00E8
    1d2a:	27 7f       	andi	r18, 0xF7	; 247
    1d2c:	20 93 e8 00 	sts	0x00E8, r18
    1d30:	bc 01       	movw	r22, r24
    1d32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d34:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1d36:	86 dc       	rcall	.-1780   	; 0x1644 <Endpoint_Write_Control_PStream_LE>
    1d38:	80 91 e8 00 	lds	r24, 0x00E8
    1d3c:	8b 77       	andi	r24, 0x7B	; 123
    1d3e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d42:	2c c0       	rjmp	.+88     	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1d44:	80 38       	cpi	r24, 0x80	; 128
    1d46:	51 f5       	brne	.+84     	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1d48:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1d4c:	87 7f       	andi	r24, 0xF7	; 247
    1d4e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d52:	80 91 44 02 	lds	r24, 0x0244
    1d56:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1d5a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d5e:	8e 77       	andi	r24, 0x7E	; 126
    1d60:	75 cf       	rjmp	.-278    	; 0x1c4c <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d62:	81 11       	cpse	r24, r1
    1d64:	1b c0       	rjmp	.+54     	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
    1d66:	90 91 4b 02 	lds	r25, 0x024B
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d6a:	92 30       	cpi	r25, 0x02	; 2
    1d6c:	b8 f4       	brcc	.+46     	; 0x1d9c <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d6e:	80 91 e8 00 	lds	r24, 0x00E8
    1d72:	87 7f       	andi	r24, 0xF7	; 247
    1d74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d78:	90 93 44 02 	sts	0x0244, r25
    1d7c:	39 dd       	rcall	.-1422   	; 0x17f0 <Endpoint_ClearStatusStage>
    1d7e:	80 91 44 02 	lds	r24, 0x0244
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1d82:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <USB_Device_ProcessControlRequest+0x28a>
    1d86:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1d8a:	87 ff       	sbrs	r24, 7
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <USB_Device_ProcessControlRequest+0x28e>
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <USB_Device_ProcessControlRequest+0x290>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1d94:	80 93 48 02 	sts	0x0248, r24
    1d98:	0e 94 0b 03 	call	0x616	; 0x616 <EVENT_USB_Device_ConfigurationChanged>
    1d9c:	80 91 e8 00 	lds	r24, 0x00E8
    1da0:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1da2:	0a c0       	rjmp	.+20     	; 0x1db8 <USB_Device_ProcessControlRequest+0x2b4>
    1da4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1da8:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1daa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dae:	80 91 eb 00 	lds	r24, 0x00EB
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1db8:	ac 96       	adiw	r28, 0x2c	; 44
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	08 95       	ret

00001dcc <USB_Event_Stub>:
    1dcc:	08 95       	ret

00001dce <USB_USBTask>:
    1dce:	cf 93       	push	r28
    1dd0:	80 91 48 02 	lds	r24, 0x0248
    1dd4:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1dd6:	a9 f0       	breq	.+42     	; 0x1e02 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dd8:	80 91 e9 00 	lds	r24, 0x00E9
    1ddc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1dde:	90 91 ec 00 	lds	r25, 0x00EC
    1de2:	90 ff       	sbrs	r25, 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <USB_USBTask+0x1c>
    1de6:	90 e8       	ldi	r25, 0x80	; 128
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <USB_USBTask+0x1e>
    1dea:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dec:	c9 2f       	mov	r28, r25
    1dee:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1df0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1df4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1df8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1dfa:	84 de       	rcall	.-760    	; 0x1b04 <USB_Device_ProcessControlRequest>
    1dfc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dfe:	c0 93 e9 00 	sts	0x00E9, r28
    1e02:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e04:	08 95       	ret

00001e06 <CDC_Device_ConfigureEndpoints>:
    1e06:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1e08:	df 93       	push	r29
    1e0a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1e0c:	40 96       	adiw	r24, 0x10	; 16
    1e0e:	fc 01       	movw	r30, r24
    1e10:	8b e0       	ldi	r24, 0x0B	; 11
    1e12:	df 01       	movw	r26, r30
    1e14:	1d 92       	st	X+, r1
    1e16:	8a 95       	dec	r24
    1e18:	e9 f7       	brne	.-6      	; 0x1e14 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1e1e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	ce 01       	movw	r24, r28
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	a4 dc       	rcall	.-1720   	; 0x1774 <Endpoint_ConfigureEndpointTable>
    1e2c:	88 23       	and	r24, r24
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <CDC_Device_ConfigureEndpoints+0x42>
    1e30:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1e32:	ce 01       	movw	r24, r28
    1e34:	06 96       	adiw	r24, 0x06	; 6
    1e36:	9e dc       	rcall	.-1732   	; 0x1774 <Endpoint_ConfigureEndpointTable>
    1e38:	88 23       	and	r24, r24
    1e3a:	31 f0       	breq	.+12     	; 0x1e48 <CDC_Device_ConfigureEndpoints+0x42>
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1e40:	0b 96       	adiw	r24, 0x0b	; 11
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
	  return false;

	return true;
}
    1e46:	96 cc       	rjmp	.-1748   	; 0x1774 <Endpoint_ConfigureEndpointTable>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
	  return false;

	return true;
}
    1e4e:	08 95       	ret

00001e50 <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	fc 01       	movw	r30, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	ba 01       	movw	r22, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1e5a:	20 91 48 02 	lds	r18, 0x0248
    1e5e:	24 30       	cpi	r18, 0x04	; 4
    1e60:	89 f4       	brne	.+34     	; 0x1e84 <CDC_Device_SendData+0x34>
    1e62:	04 89       	ldd	r16, Z+20	; 0x14
    1e64:	15 89       	ldd	r17, Z+21	; 0x15
    1e66:	26 89       	ldd	r18, Z+22	; 0x16
    1e68:	37 89       	ldd	r19, Z+23	; 0x17
    1e6a:	01 2b       	or	r16, r17
    1e6c:	02 2b       	or	r16, r18
    1e6e:	03 2b       	or	r16, r19
    1e70:	49 f0       	breq	.+18     	; 0x1e84 <CDC_Device_SendData+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	21 81       	ldd	r18, Z+1	; 0x01
    1e74:	2f 70       	andi	r18, 0x0F	; 15
    1e76:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
}
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1e82:	f3 ca       	rjmp	.-2586   	; 0x146a <Endpoint_Write_Stream_LE>
    1e84:	82 e0       	ldi	r24, 0x02	; 2
}
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	08 95       	ret

00001e8c <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1e8c:	cf 93       	push	r28
    1e8e:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1e90:	20 91 48 02 	lds	r18, 0x0248
    1e94:	24 30       	cpi	r18, 0x04	; 4
    1e96:	f1 f4       	brne	.+60     	; 0x1ed4 <CDC_Device_SendByte+0x48>
    1e98:	fc 01       	movw	r30, r24
    1e9a:	44 89       	ldd	r20, Z+20	; 0x14
    1e9c:	55 89       	ldd	r21, Z+21	; 0x15
    1e9e:	66 89       	ldd	r22, Z+22	; 0x16
    1ea0:	77 89       	ldd	r23, Z+23	; 0x17
    1ea2:	45 2b       	or	r20, r21
    1ea4:	46 2b       	or	r20, r22
    1ea6:	47 2b       	or	r20, r23
    1ea8:	a9 f0       	breq	.+42     	; 0x1ed4 <CDC_Device_SendByte+0x48>
    1eaa:	81 81       	ldd	r24, Z+1	; 0x01
    1eac:	8f 70       	andi	r24, 0x0F	; 15
    1eae:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1eb2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1eb6:	85 ff       	sbrs	r24, 5
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1eba:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ec2:	80 91 e8 00 	lds	r24, 0x00E8
    1ec6:	8e 77       	andi	r24, 0x7E	; 126
    1ec8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1ecc:	b2 dc       	rcall	.-1692   	; 0x1832 <Endpoint_WaitUntilReady>
    1ece:	88 23       	and	r24, r24
    1ed0:	a1 f3       	breq	.-24     	; 0x1eba <CDC_Device_SendByte+0x2e>
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <CDC_Device_SendByte+0x4a>
    1ed4:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1ed6:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1ed8:	08 95       	ret

00001eda <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1eda:	20 91 48 02 	lds	r18, 0x0248
    1ede:	24 30       	cpi	r18, 0x04	; 4
    1ee0:	29 f5       	brne	.+74     	; 0x1f2c <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	44 89       	ldd	r20, Z+20	; 0x14
    1ee6:	55 89       	ldd	r21, Z+21	; 0x15
    1ee8:	66 89       	ldd	r22, Z+22	; 0x16
    1eea:	77 89       	ldd	r23, Z+23	; 0x17
    1eec:	45 2b       	or	r20, r21
    1eee:	46 2b       	or	r20, r22
    1ef0:	47 2b       	or	r20, r23
    1ef2:	e1 f0       	breq	.+56     	; 0x1f2c <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef4:	81 81       	ldd	r24, Z+1	; 0x01
    1ef6:	8f 70       	andi	r24, 0x0F	; 15
    1ef8:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1efc:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1f00:	81 11       	cpse	r24, r1
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f08:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f0c:	80 91 e8 00 	lds	r24, 0x00E8
    1f10:	8e 77       	andi	r24, 0x7E	; 126
    1f12:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1f16:	95 fd       	sbrc	r25, 5
    1f18:	f5 cf       	rjmp	.-22     	; 0x1f04 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1f1a:	8b dc       	rcall	.-1770   	; 0x1832 <Endpoint_WaitUntilReady>
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <CDC_Device_Flush+0x54>
    1f20:	90 91 e8 00 	lds	r25, 0x00E8
    1f24:	9e 77       	andi	r25, 0x7E	; 126
    1f26:	90 93 e8 00 	sts	0x00E8, r25
    1f2a:	08 95       	ret
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1f2e:	08 95       	ret

00001f30 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1f30:	20 91 48 02 	lds	r18, 0x0248
    1f34:	24 30       	cpi	r18, 0x04	; 4
    1f36:	89 f4       	brne	.+34     	; 0x1f5a <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f38:	fc 01       	movw	r30, r24
    1f3a:	44 89       	ldd	r20, Z+20	; 0x14
    1f3c:	55 89       	ldd	r21, Z+21	; 0x15
    1f3e:	66 89       	ldd	r22, Z+22	; 0x16
    1f40:	77 89       	ldd	r23, Z+23	; 0x17
    1f42:	45 2b       	or	r20, r21
    1f44:	46 2b       	or	r20, r22
    1f46:	47 2b       	or	r20, r23
    1f48:	41 f0       	breq	.+16     	; 0x1f5a <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f4a:	21 81       	ldd	r18, Z+1	; 0x01
    1f4c:	2f 70       	andi	r18, 0x0F	; 15
    1f4e:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f52:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1f56:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    1f58:	c0 cf       	rjmp	.-128    	; 0x1eda <CDC_Device_Flush>
    1f5a:	08 95       	ret

00001f5c <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f5c:	20 91 48 02 	lds	r18, 0x0248
    1f60:	24 30       	cpi	r18, 0x04	; 4
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1f64:	2f ef       	ldi	r18, 0xFF	; 255
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	24 c0       	rjmp	.+72     	; 0x1fb2 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	44 89       	ldd	r20, Z+20	; 0x14
    1f6e:	55 89       	ldd	r21, Z+21	; 0x15
    1f70:	66 89       	ldd	r22, Z+22	; 0x16
    1f72:	77 89       	ldd	r23, Z+23	; 0x17
    1f74:	45 2b       	or	r20, r21
    1f76:	46 2b       	or	r20, r22
    1f78:	47 2b       	or	r20, r23
    1f7a:	a1 f3       	breq	.-24     	; 0x1f64 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7c:	86 81       	ldd	r24, Z+6	; 0x06
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f84:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1f88:	82 ff       	sbrs	r24, 2
    1f8a:	ec cf       	rjmp	.-40     	; 0x1f64 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1f8c:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1f90:	88 23       	and	r24, r24
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f94:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1f9c:	2f ef       	ldi	r18, 0xFF	; 255
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1fa0:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fa8:	80 91 e8 00 	lds	r24, 0x00E8
    1fac:	8b 77       	andi	r24, 0x7B	; 123
    1fae:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1fb2:	c9 01       	movw	r24, r18
    1fb4:	08 95       	ret

00001fb6 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1fb6:	08 95       	ret

00001fb8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fbe:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1fc2:	83 ff       	sbrs	r24, 3
    1fc4:	a7 c0       	rjmp	.+334    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1fc6:	88 81       	ld	r24, Y
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	20 91 4d 02 	lds	r18, 0x024D
    1fce:	30 91 4e 02 	lds	r19, 0x024E
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <CDC_Device_ProcessControlRequest+0x22>
    1fd8:	9d c0       	rjmp	.+314    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1fda:	80 91 4a 02 	lds	r24, 0x024A
    1fde:	81 32       	cpi	r24, 0x21	; 33
    1fe0:	61 f0       	breq	.+24     	; 0x1ffa <CDC_Device_ProcessControlRequest+0x42>
    1fe2:	20 f4       	brcc	.+8      	; 0x1fec <CDC_Device_ProcessControlRequest+0x34>
    1fe4:	80 32       	cpi	r24, 0x20	; 32
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <CDC_Device_ProcessControlRequest+0x32>
    1fe8:	95 c0       	rjmp	.+298    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    1fea:	3d c0       	rjmp	.+122    	; 0x2066 <CDC_Device_ProcessControlRequest+0xae>
    1fec:	82 32       	cpi	r24, 0x22	; 34
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <CDC_Device_ProcessControlRequest+0x3a>
    1ff0:	6d c0       	rjmp	.+218    	; 0x20cc <CDC_Device_ProcessControlRequest+0x114>
    1ff2:	83 32       	cpi	r24, 0x23	; 35
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <CDC_Device_ProcessControlRequest+0x40>
    1ff6:	8e c0       	rjmp	.+284    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    1ff8:	7d c0       	rjmp	.+250    	; 0x20f4 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ffa:	80 91 49 02 	lds	r24, 0x0249
    1ffe:	81 3a       	cpi	r24, 0xA1	; 161
    2000:	09 f0       	breq	.+2      	; 0x2004 <CDC_Device_ProcessControlRequest+0x4c>
    2002:	88 c0       	rjmp	.+272    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2004:	80 91 e8 00 	lds	r24, 0x00E8
    2008:	87 7f       	andi	r24, 0xF7	; 247
    200a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    200e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2012:	80 ff       	sbrs	r24, 0
    2014:	fc cf       	rjmp	.-8      	; 0x200e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2016:	4c 89       	ldd	r20, Y+20	; 0x14
    2018:	5d 89       	ldd	r21, Y+21	; 0x15
    201a:	6e 89       	ldd	r22, Y+22	; 0x16
    201c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    201e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2022:	bb 27       	eor	r27, r27
    2024:	a7 2f       	mov	r26, r23
    2026:	96 2f       	mov	r25, r22
    2028:	85 2f       	mov	r24, r21
    202a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    202e:	cb 01       	movw	r24, r22
    2030:	aa 27       	eor	r26, r26
    2032:	bb 27       	eor	r27, r27
    2034:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2038:	47 2f       	mov	r20, r23
    203a:	55 27       	eor	r21, r21
    203c:	66 27       	eor	r22, r22
    203e:	77 27       	eor	r23, r23
    2040:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2044:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2046:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    204a:	89 8d       	ldd	r24, Y+25	; 0x19
    204c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2050:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2052:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2056:	80 91 e8 00 	lds	r24, 0x00E8
    205a:	8e 77       	andi	r24, 0x7E	; 126
    205c:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2064:	c5 cb       	rjmp	.-2166   	; 0x17f0 <Endpoint_ClearStatusStage>
    2066:	80 91 49 02 	lds	r24, 0x0249
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    206a:	81 32       	cpi	r24, 0x21	; 33
    206c:	09 f0       	breq	.+2      	; 0x2070 <CDC_Device_ProcessControlRequest+0xb8>
    206e:	52 c0       	rjmp	.+164    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    2070:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2074:	87 7f       	andi	r24, 0xF7	; 247
    2076:	80 93 e8 00 	sts	0x00E8, r24
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <CDC_Device_ProcessControlRequest+0xce>
    207c:	80 91 48 02 	lds	r24, 0x0248
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2080:	88 23       	and	r24, r24
    2082:	09 f4       	brne	.+2      	; 0x2086 <CDC_Device_ProcessControlRequest+0xce>
    2084:	47 c0       	rjmp	.+142    	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    2086:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    208a:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    208c:	f7 cf       	rjmp	.-18     	; 0x207c <CDC_Device_ProcessControlRequest+0xc4>
    208e:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    2092:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    2096:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    209a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    209e:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    20a0:	2d 8b       	std	Y+21, r18	; 0x15
    20a2:	9e 8b       	std	Y+22, r25	; 0x16
    20a4:	8f 8b       	std	Y+23, r24	; 0x17
    20a6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20aa:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    20ac:	80 91 f1 00 	lds	r24, 0x00F1
    20b0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    20b2:	80 91 f1 00 	lds	r24, 0x00F1
    20b6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    20b8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20bc:	8b 77       	andi	r24, 0x7B	; 123
    20be:	80 93 e8 00 	sts	0x00E8, r24
    20c2:	96 db       	rcall	.-2260   	; 0x17f0 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    20c4:	ce 01       	movw	r24, r28
    20c6:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    20c8:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    20ca:	58 c9       	rjmp	.-3408   	; 0x137c <EVENT_CDC_Device_LineEncodingChanged>
    20cc:	80 91 49 02 	lds	r24, 0x0249
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    20d0:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20d2:	01 f5       	brne	.+64     	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    20d4:	80 91 e8 00 	lds	r24, 0x00E8
    20d8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20da:	80 93 e8 00 	sts	0x00E8, r24
    20de:	88 db       	rcall	.-2288   	; 0x17f0 <Endpoint_ClearStatusStage>
    20e0:	80 91 4b 02 	lds	r24, 0x024B
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    20e4:	90 91 4c 02 	lds	r25, 0x024C

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    20e8:	99 8b       	std	Y+17, r25	; 0x11
    20ea:	88 8b       	std	Y+16, r24	; 0x10
    20ec:	ce 01       	movw	r24, r28
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	a0 c9       	rjmp	.-3264   	; 0x1434 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    20f4:	80 91 49 02 	lds	r24, 0x0249
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    20f8:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    20fa:	61 f4       	brne	.+24     	; 0x2114 <CDC_Device_ProcessControlRequest+0x15c>
    20fc:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2100:	87 7f       	andi	r24, 0xF7	; 247
    2102:	80 93 e8 00 	sts	0x00E8, r24
    2106:	74 db       	rcall	.-2328   	; 0x17f0 <Endpoint_ClearStatusStage>
    2108:	60 91 4b 02 	lds	r22, 0x024B
    210c:	ce 01       	movw	r24, r28
    210e:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2110:	cf 91       	pop	r28
    2112:	51 cf       	rjmp	.-350    	; 0x1fb6 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    211a:	6f 92       	push	r6
    211c:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    211e:	8f 92       	push	r8
    2120:	9f 92       	push	r9
			}

			break;
	}
}
    2122:	af 92       	push	r10
    2124:	bf 92       	push	r11
    2126:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	00 d0       	rcall	.+0      	; 0x2138 <HID_Device_ProcessControlRequest+0x1e>
    2138:	1f 92       	push	r1
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    2140:	ad b6       	in	r10, 0x3d	; 61
    2142:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2144:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2148:	83 ff       	sbrs	r24, 3
    214a:	07 c1       	rjmp	.+526    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    214c:	f7 01       	movw	r30, r14
    214e:	80 81       	ld	r24, Z
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	20 91 4d 02 	lds	r18, 0x024D
    2156:	30 91 4e 02 	lds	r19, 0x024E
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	09 f0       	breq	.+2      	; 0x2162 <HID_Device_ProcessControlRequest+0x48>
    2160:	fc c0       	rjmp	.+504    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    2162:	80 91 4a 02 	lds	r24, 0x024A
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	09 f4       	brne	.+2      	; 0x216c <HID_Device_ProcessControlRequest+0x52>
    216a:	9e c0       	rjmp	.+316    	; 0x22a8 <HID_Device_ProcessControlRequest+0x18e>
    216c:	30 f4       	brcc	.+12     	; 0x217a <HID_Device_ProcessControlRequest+0x60>
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	71 f0       	breq	.+28     	; 0x218e <HID_Device_ProcessControlRequest+0x74>
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	09 f0       	breq	.+2      	; 0x2178 <HID_Device_ProcessControlRequest+0x5e>
    2176:	f1 c0       	rjmp	.+482    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    2178:	d4 c0       	rjmp	.+424    	; 0x2322 <HID_Device_ProcessControlRequest+0x208>
    217a:	8a 30       	cpi	r24, 0x0A	; 10
    217c:	09 f4       	brne	.+2      	; 0x2180 <HID_Device_ProcessControlRequest+0x66>
    217e:	b9 c0       	rjmp	.+370    	; 0x22f2 <HID_Device_ProcessControlRequest+0x1d8>
    2180:	8b 30       	cpi	r24, 0x0B	; 11
    2182:	09 f4       	brne	.+2      	; 0x2186 <HID_Device_ProcessControlRequest+0x6c>
    2184:	a2 c0       	rjmp	.+324    	; 0x22ca <HID_Device_ProcessControlRequest+0x1b0>
    2186:	89 30       	cpi	r24, 0x09	; 9
    2188:	09 f0       	breq	.+2      	; 0x218c <HID_Device_ProcessControlRequest+0x72>
    218a:	e7 c0       	rjmp	.+462    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    218c:	4c c0       	rjmp	.+152    	; 0x2226 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    218e:	80 91 49 02 	lds	r24, 0x0249
    2192:	81 3a       	cpi	r24, 0xA1	; 161
    2194:	09 f0       	breq	.+2      	; 0x2198 <HID_Device_ProcessControlRequest+0x7e>
    2196:	e1 c0       	rjmp	.+450    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    2198:	8d b6       	in	r8, 0x3d	; 61
    219a:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    219c:	1a 82       	std	Y+2, r1	; 0x02
    219e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    21a0:	80 91 4b 02 	lds	r24, 0x024B
    21a4:	10 91 4c 02 	lds	r17, 0x024C
    21a8:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    21aa:	f7 01       	movw	r30, r14
    21ac:	40 85       	ldd	r20, Z+8	; 0x08
    21ae:	8d b7       	in	r24, 0x3d	; 61
    21b0:	9e b7       	in	r25, 0x3e	; 62
    21b2:	84 1b       	sub	r24, r20
    21b4:	91 09       	sbc	r25, r1
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	9e bf       	out	0x3e, r25	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	8d bf       	out	0x3d, r24	; 61
    21c0:	cd b6       	in	r12, 0x3d	; 61
    21c2:	de b6       	in	r13, 0x3e	; 62
    21c4:	ef ef       	ldi	r30, 0xFF	; 255
    21c6:	ce 1a       	sub	r12, r30
    21c8:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    21ca:	36 01       	movw	r6, r12
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	c6 01       	movw	r24, r12
    21d4:	ea d1       	rcall	.+980    	; 0x25aa <memset>
    21d6:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    21d8:	41 50       	subi	r20, 0x01	; 1
    21da:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    21dc:	0f 5f       	subi	r16, 0xFF	; 255
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	96 01       	movw	r18, r12
    21e2:	be 01       	movw	r22, r28
    21e4:	6d 5f       	subi	r22, 0xFD	; 253
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	c7 01       	movw	r24, r14
    21ea:	0e 94 be 03 	call	0x77c	; 0x77c <CALLBACK_HID_Device_CreateHIDReport>
    21ee:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    21f0:	26 81       	ldd	r18, Z+6	; 0x06
    21f2:	37 81       	ldd	r19, Z+7	; 0x07
    21f4:	21 15       	cp	r18, r1
    21f6:	31 05       	cpc	r19, r1
    21f8:	29 f0       	breq	.+10     	; 0x2204 <HID_Device_ProcessControlRequest+0xea>
    21fa:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	b6 01       	movw	r22, r12
    2200:	c9 01       	movw	r24, r18
    2202:	ca d1       	rcall	.+916    	; 0x2598 <memcpy>
    2204:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2208:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    220c:	87 7f       	andi	r24, 0xF7	; 247
    220e:	80 93 e8 00 	sts	0x00E8, r24
    2212:	69 81       	ldd	r22, Y+1	; 0x01
    2214:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2216:	c3 01       	movw	r24, r6
    2218:	75 d9       	rcall	.-3350   	; 0x1504 <Endpoint_Write_Control_Stream_LE>
    221a:	80 91 e8 00 	lds	r24, 0x00E8
    221e:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2220:	80 93 e8 00 	sts	0x00E8, r24
    2224:	39 c0       	rjmp	.+114    	; 0x2298 <HID_Device_ProcessControlRequest+0x17e>
    2226:	80 91 49 02 	lds	r24, 0x0249
    222a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    222c:	09 f0       	breq	.+2      	; 0x2230 <HID_Device_ProcessControlRequest+0x116>
    222e:	95 c0       	rjmp	.+298    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    2230:	8d b6       	in	r8, 0x3d	; 61
    2232:	9e b6       	in	r9, 0x3e	; 62
    2234:	00 91 4f 02 	lds	r16, 0x024F
    2238:	10 91 50 02 	lds	r17, 0x0250
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    223c:	70 90 4b 02 	lds	r7, 0x024B
    2240:	60 90 4c 02 	lds	r6, 0x024C
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2244:	8d b7       	in	r24, 0x3d	; 61
    2246:	9e b7       	in	r25, 0x3e	; 62
    2248:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    224a:	91 0b       	sbc	r25, r17
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	9e bf       	out	0x3e, r25	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	8d bf       	out	0x3d, r24	; 61
    2256:	cd b6       	in	r12, 0x3d	; 61
    2258:	de b6       	in	r13, 0x3e	; 62
    225a:	ef ef       	ldi	r30, 0xFF	; 255
    225c:	ce 1a       	sub	r12, r30
    225e:	de 0a       	sbc	r13, r30
    2260:	80 91 e8 00 	lds	r24, 0x00E8
    2264:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2266:	80 93 e8 00 	sts	0x00E8, r24
    226a:	b8 01       	movw	r22, r16
    226c:	c6 01       	movw	r24, r12
    226e:	aa d9       	rcall	.-3244   	; 0x15c4 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2270:	80 91 e8 00 	lds	r24, 0x00E8
    2274:	8e 77       	andi	r24, 0x7E	; 126
    2276:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	71 10       	cpse	r7, r1
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <HID_Device_ProcessControlRequest+0x168>
    2280:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	02 1b       	sub	r16, r18
    2286:	13 0b       	sbc	r17, r19
    2288:	2c 0d       	add	r18, r12
    228a:	3d 1d       	adc	r19, r13
    228c:	46 2d       	mov	r20, r6
    228e:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    2290:	67 2d       	mov	r22, r7
    2292:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2294:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2298:	88 2d       	mov	r24, r8
    229a:	99 2d       	mov	r25, r9
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	9e bf       	out	0x3e, r25	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	8d bf       	out	0x3d, r24	; 61
    22a6:	59 c0       	rjmp	.+178    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    22a8:	80 91 49 02 	lds	r24, 0x0249
    22ac:	81 3a       	cpi	r24, 0xA1	; 161
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    22b0:	54 c0       	rjmp	.+168    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    22b2:	80 91 e8 00 	lds	r24, 0x00E8
    22b6:	87 7f       	andi	r24, 0xF7	; 247
    22b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22bc:	80 91 e8 00 	lds	r24, 0x00E8
    22c0:	80 ff       	sbrs	r24, 0
    22c2:	fc cf       	rjmp	.-8      	; 0x22bc <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22c4:	f7 01       	movw	r30, r14
    22c6:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    22c8:	40 c0       	rjmp	.+128    	; 0x234a <HID_Device_ProcessControlRequest+0x230>
    22ca:	80 91 49 02 	lds	r24, 0x0249
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    22ce:	81 32       	cpi	r24, 0x21	; 33
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22d2:	43 c0       	rjmp	.+134    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    22d4:	80 91 e8 00 	lds	r24, 0x00E8
    22d8:	87 7f       	andi	r24, 0xF7	; 247
    22da:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22de:	88 da       	rcall	.-2800   	; 0x17f0 <Endpoint_ClearStatusStage>
    22e0:	90 91 4b 02 	lds	r25, 0x024B
    22e4:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22e6:	91 11       	cpse	r25, r1
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	f7 01       	movw	r30, r14
    22ee:	81 87       	std	Z+9, r24	; 0x09
    22f0:	34 c0       	rjmp	.+104    	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    22f2:	80 91 49 02 	lds	r24, 0x0249
    22f6:	81 32       	cpi	r24, 0x21	; 33
    22f8:	81 f5       	brne	.+96     	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    22fa:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22fe:	87 7f       	andi	r24, 0xF7	; 247
    2300:	80 93 e8 00 	sts	0x00E8, r24
    2304:	75 da       	rcall	.-2838   	; 0x17f0 <Endpoint_ClearStatusStage>
    2306:	80 91 4b 02 	lds	r24, 0x024B
    230a:	90 91 4c 02 	lds	r25, 0x024C
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    230e:	88 27       	eor	r24, r24
    2310:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2312:	96 95       	lsr	r25
    2314:	87 95       	ror	r24
    2316:	3a 95       	dec	r19
    2318:	e1 f7       	brne	.-8      	; 0x2312 <HID_Device_ProcessControlRequest+0x1f8>
    231a:	f7 01       	movw	r30, r14
    231c:	95 87       	std	Z+13, r25	; 0x0d
    231e:	84 87       	std	Z+12, r24	; 0x0c
    2320:	1c c0       	rjmp	.+56     	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    2322:	80 91 49 02 	lds	r24, 0x0249
    2326:	81 3a       	cpi	r24, 0xA1	; 161
    2328:	c1 f4       	brne	.+48     	; 0x235a <HID_Device_ProcessControlRequest+0x240>
    232a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	80 93 e8 00 	sts	0x00E8, r24
    2334:	80 91 e8 00 	lds	r24, 0x00E8
    2338:	80 ff       	sbrs	r24, 0
    233a:	fc cf       	rjmp	.-8      	; 0x2334 <HID_Device_ProcessControlRequest+0x21a>
    233c:	f7 01       	movw	r30, r14
    233e:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2340:	95 85       	ldd	r25, Z+13	; 0x0d
    2342:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2344:	87 95       	ror	r24
    2346:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2348:	87 95       	ror	r24
    234a:	80 93 f1 00 	sts	0x00F1, r24
    234e:	80 91 e8 00 	lds	r24, 0x00E8
    2352:	8e 77       	andi	r24, 0x7E	; 126
    2354:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2358:	4b da       	rcall	.-2922   	; 0x17f0 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	be be       	out	0x3e, r11	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
			}

			break;
	}
}
    2368:	0f 90       	pop	r0
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
    237a:	bf 90       	pop	r11
    237c:	af 90       	pop	r10
    237e:	9f 90       	pop	r9
    2380:	8f 90       	pop	r8
    2382:	7f 90       	pop	r7
    2384:	6f 90       	pop	r6
    2386:	08 95       	ret

00002388 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2388:	9c 01       	movw	r18, r24
    238a:	27 5f       	subi	r18, 0xF7	; 247
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	f9 01       	movw	r30, r18
    2390:	27 e0       	ldi	r18, 0x07	; 7
    2392:	df 01       	movw	r26, r30
    2394:	1d 92       	st	X+, r1
    2396:	2a 95       	dec	r18
    2398:	e9 f7       	brne	.-6      	; 0x2394 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	fc 01       	movw	r30, r24
    239e:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    23a0:	24 ef       	ldi	r18, 0xF4	; 244
    23a2:	31 e0       	ldi	r19, 0x01	; 1
    23a4:	35 87       	std	Z+13, r19	; 0x0d
    23a6:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    23a8:	23 e0       	ldi	r18, 0x03	; 3
    23aa:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	e1 c9       	rjmp	.-3134   	; 0x1774 <Endpoint_ConfigureEndpointTable>

000023b2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    23b2:	4f 92       	push	r4
    23b4:	5f 92       	push	r5
    23b6:	6f 92       	push	r6
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <HID_Device_USBTask+0x22>
    23d4:	1f 92       	push	r1
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    23dc:	ad b6       	in	r10, 0x3d	; 61
    23de:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    23e0:	80 91 48 02 	lds	r24, 0x0248
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	09 f0       	breq	.+2      	; 0x23ea <HID_Device_USBTask+0x38>
    23e8:	8f c0       	rjmp	.+286    	; 0x2508 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    23ea:	80 91 e4 00 	lds	r24, 0x00E4
    23ee:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    23f2:	f7 01       	movw	r30, r14
    23f4:	22 85       	ldd	r18, Z+10	; 0x0a
    23f6:	33 85       	ldd	r19, Z+11	; 0x0b
    23f8:	28 17       	cp	r18, r24
    23fa:	39 07       	cpc	r19, r25
    23fc:	09 f4       	brne	.+2      	; 0x2400 <HID_Device_USBTask+0x4e>
    23fe:	84 c0       	rjmp	.+264    	; 0x2508 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2400:	81 81       	ldd	r24, Z+1	; 0x01
    2402:	8f 70       	andi	r24, 0x0F	; 15
    2404:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2408:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    240c:	85 ff       	sbrs	r24, 5
    240e:	7c c0       	rjmp	.+248    	; 0x2508 <HID_Device_USBTask+0x156>
    2410:	6d b6       	in	r6, 0x3d	; 61
    2412:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2414:	40 85       	ldd	r20, Z+8	; 0x08
    2416:	8d b7       	in	r24, 0x3d	; 61
    2418:	9e b7       	in	r25, 0x3e	; 62
    241a:	84 1b       	sub	r24, r20
    241c:	91 09       	sbc	r25, r1
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	9e bf       	out	0x3e, r25	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	8d bf       	out	0x3d, r24	; 61
    2428:	cd b6       	in	r12, 0x3d	; 61
    242a:	de b6       	in	r13, 0x3e	; 62
    242c:	ef ef       	ldi	r30, 0xFF	; 255
    242e:	ce 1a       	sub	r12, r30
    2430:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2432:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2434:	1a 82       	std	Y+2, r1	; 0x02
    2436:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2438:	46 01       	movw	r8, r12
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	c6 01       	movw	r24, r12
    2442:	b3 d0       	rcall	.+358    	; 0x25aa <memset>
    2444:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2446:	0f 5f       	subi	r16, 0xFF	; 255
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	96 01       	movw	r18, r12
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	be 01       	movw	r22, r28
    2450:	6d 5f       	subi	r22, 0xFD	; 253
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	c7 01       	movw	r24, r14
    2456:	0e 94 be 03 	call	0x77c	; 0x77c <CALLBACK_HID_Device_CreateHIDReport>
    245a:	58 2e       	mov	r5, r24
    245c:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    245e:	84 85       	ldd	r24, Z+12	; 0x0c
    2460:	95 85       	ldd	r25, Z+13	; 0x0d
    2462:	89 2b       	or	r24, r25
    2464:	31 f0       	breq	.+12     	; 0x2472 <HID_Device_USBTask+0xc0>
    2466:	01 e0       	ldi	r16, 0x01	; 1
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	86 85       	ldd	r24, Z+14	; 0x0e
    246c:	97 85       	ldd	r25, Z+15	; 0x0f
    246e:	89 2b       	or	r24, r25
    2470:	11 f0       	breq	.+4      	; 0x2476 <HID_Device_USBTask+0xc4>
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	10 e0       	ldi	r17, 0x00	; 0
    2476:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2478:	c6 80       	ldd	r12, Z+6	; 0x06
    247a:	d7 80       	ldd	r13, Z+7	; 0x07
    247c:	c1 14       	cp	r12, r1
    247e:	d1 04       	cpc	r13, r1
    2480:	89 f0       	breq	.+34     	; 0x24a4 <HID_Device_USBTask+0xf2>
    2482:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2484:	5a 81       	ldd	r21, Y+2	; 0x02
    2486:	b6 01       	movw	r22, r12
    2488:	c4 01       	movw	r24, r8
    248a:	79 d0       	rcall	.+242    	; 0x257e <memcmp>
    248c:	44 24       	eor	r4, r4
    248e:	43 94       	inc	r4
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	09 f4       	brne	.+2      	; 0x2496 <HID_Device_USBTask+0xe4>
    2494:	41 2c       	mov	r4, r1
    2496:	f7 01       	movw	r30, r14
    2498:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	b4 01       	movw	r22, r8
    249e:	c6 01       	movw	r24, r12
    24a0:	7b d0       	rcall	.+246    	; 0x2598 <memcpy>
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <HID_Device_USBTask+0xf4>
    24a4:	41 2c       	mov	r4, r1
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    24aa:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    24ac:	f9 f0       	breq	.+62     	; 0x24ec <HID_Device_USBTask+0x13a>
    24ae:	51 10       	cpse	r5, r1
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <HID_Device_USBTask+0x108>
    24b2:	41 10       	cpse	r4, r1
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <HID_Device_USBTask+0x108>
    24b6:	00 ff       	sbrs	r16, 0
    24b8:	19 c0       	rjmp	.+50     	; 0x24ec <HID_Device_USBTask+0x13a>
    24ba:	f7 01       	movw	r30, r14
    24bc:	84 85       	ldd	r24, Z+12	; 0x0c
    24be:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    24c0:	97 87       	std	Z+15, r25	; 0x0f
    24c2:	86 87       	std	Z+14, r24	; 0x0e
    24c4:	81 81       	ldd	r24, Z+1	; 0x01
    24c6:	8f 70       	andi	r24, 0x0F	; 15
    24c8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	81 11       	cpse	r24, r1
    24d0:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    24d4:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24d6:	7a 81       	ldd	r23, Y+2	; 0x02
    24d8:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	c4 01       	movw	r24, r8
    24de:	0e 94 35 0a 	call	0x146a	; 0x146a <Endpoint_Write_Stream_LE>
    24e2:	80 91 e8 00 	lds	r24, 0x00E8
    24e6:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24e8:	80 93 e8 00 	sts	0x00E8, r24
    24ec:	80 91 e4 00 	lds	r24, 0x00E4
    24f0:	90 91 e5 00 	lds	r25, 0x00E5
    24f4:	f7 01       	movw	r30, r14
    24f6:	93 87       	std	Z+11, r25	; 0x0b
    24f8:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    24fa:	86 2d       	mov	r24, r6
    24fc:	97 2d       	mov	r25, r7
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	9e bf       	out	0x3e, r25	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	8d bf       	out	0x3d, r24	; 61
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	be be       	out	0x3e, r11	; 62
	}
}
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	ad be       	out	0x3d, r10	; 61
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
    2532:	6f 90       	pop	r6
    2534:	5f 90       	pop	r5
    2536:	4f 90       	pop	r4
    2538:	08 95       	ret

0000253a <__udivmodsi4>:
    253a:	a1 e2       	ldi	r26, 0x21	; 33
    253c:	1a 2e       	mov	r1, r26
    253e:	aa 1b       	sub	r26, r26
    2540:	bb 1b       	sub	r27, r27
    2542:	fd 01       	movw	r30, r26
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <__udivmodsi4_ep>

00002546 <__udivmodsi4_loop>:
    2546:	aa 1f       	adc	r26, r26
    2548:	bb 1f       	adc	r27, r27
    254a:	ee 1f       	adc	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	a2 17       	cp	r26, r18
    2550:	b3 07       	cpc	r27, r19
    2552:	e4 07       	cpc	r30, r20
    2554:	f5 07       	cpc	r31, r21
    2556:	20 f0       	brcs	.+8      	; 0x2560 <__udivmodsi4_ep>
    2558:	a2 1b       	sub	r26, r18
    255a:	b3 0b       	sbc	r27, r19
    255c:	e4 0b       	sbc	r30, r20
    255e:	f5 0b       	sbc	r31, r21

00002560 <__udivmodsi4_ep>:
    2560:	66 1f       	adc	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	1a 94       	dec	r1
    256a:	69 f7       	brne	.-38     	; 0x2546 <__udivmodsi4_loop>
    256c:	60 95       	com	r22
    256e:	70 95       	com	r23
    2570:	80 95       	com	r24
    2572:	90 95       	com	r25
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	bd 01       	movw	r22, r26
    257a:	cf 01       	movw	r24, r30
    257c:	08 95       	ret

0000257e <memcmp>:
    257e:	fb 01       	movw	r30, r22
    2580:	dc 01       	movw	r26, r24
    2582:	04 c0       	rjmp	.+8      	; 0x258c <memcmp+0xe>
    2584:	8d 91       	ld	r24, X+
    2586:	01 90       	ld	r0, Z+
    2588:	80 19       	sub	r24, r0
    258a:	21 f4       	brne	.+8      	; 0x2594 <memcmp+0x16>
    258c:	41 50       	subi	r20, 0x01	; 1
    258e:	50 40       	sbci	r21, 0x00	; 0
    2590:	c8 f7       	brcc	.-14     	; 0x2584 <memcmp+0x6>
    2592:	88 1b       	sub	r24, r24
    2594:	99 0b       	sbc	r25, r25
    2596:	08 95       	ret

00002598 <memcpy>:
    2598:	fb 01       	movw	r30, r22
    259a:	dc 01       	movw	r26, r24
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <memcpy+0xa>
    259e:	01 90       	ld	r0, Z+
    25a0:	0d 92       	st	X+, r0
    25a2:	41 50       	subi	r20, 0x01	; 1
    25a4:	50 40       	sbci	r21, 0x00	; 0
    25a6:	d8 f7       	brcc	.-10     	; 0x259e <memcpy+0x6>
    25a8:	08 95       	ret

000025aa <memset>:
    25aa:	dc 01       	movw	r26, r24
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <memset+0x6>
    25ae:	6d 93       	st	X+, r22
    25b0:	41 50       	subi	r20, 0x01	; 1
    25b2:	50 40       	sbci	r21, 0x00	; 0
    25b4:	e0 f7       	brcc	.-8      	; 0x25ae <memset+0x4>
    25b6:	08 95       	ret

000025b8 <_exit>:
    25b8:	f8 94       	cli

000025ba <__stop_program>:
    25ba:	ff cf       	rjmp	.-2      	; 0x25ba <__stop_program>
