
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001c00  00001c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  0080012e  0080012e  00001cc2  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000028cb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006c0  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b53f  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ccb  00000000  00000000  0000e4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000489c  00000000  00000000  000111a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000113c  00000000  00000000  00015a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000044ea  00000000  00000000  00016b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000736e  00000000  00000000  0001b06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000880  00000000  00000000  000223d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
       e:	00 00       	nop
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
      12:	00 00       	nop
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	uint16_t CurrentBit   = ReportItem->BitOffset;
      16:	00 00       	nop
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      1a:	00 00       	nop
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	bf c7       	rjmp	.+3966   	; 0xfac <__vector_11>
      2e:	00 00       	nop

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	23 c2       	rjmp	.+1094   	; 0x4a4 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 15 00 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 40 09 01 81 02 95 40     .u...&...@.....@
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 05 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	05 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	fc e1       	ldi	r31, 0x1C	; 28
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	ae 32       	cpi	r26, 0x2E	; 46
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	ae e2       	ldi	r26, 0x2E	; 46
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a4 34       	cpi	r26, 0x44	; 68
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	72 d3       	rcall	.+1764   	; 0xa00 <main>
				break;
     31c:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <RingBuffer_Remove.constprop.0>:
     322:	ef e2       	ldi	r30, 0x2F	; 47
				break;
     324:	f1 e0       	ldi	r31, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	a2 81       	ldd	r26, Z+2	; 0x02
     328:	b3 81       	ldd	r27, Z+3	; 0x03
     32a:	8d 91       	ld	r24, X+

				if (ParserData->UsingReportIDs)
     32c:	b3 83       	std	Z+3, r27	; 0x03
     32e:	a2 83       	std	Z+2, r26	; 0x02
     330:	26 81       	ldd	r18, Z+6	; 0x06
     332:	37 81       	ldd	r19, Z+7	; 0x07
     334:	a2 17       	cp	r26, r18
     336:	b3 07       	cpc	r27, r19
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	21 f4       	brne	.+8      	; 0x342 <RingBuffer_Remove.constprop.0+0x20>
     33a:	24 81       	ldd	r18, Z+4	; 0x04
     33c:	35 81       	ldd	r19, Z+5	; 0x05
     33e:	33 83       	std	Z+3, r19	; 0x03
     340:	22 83       	std	Z+2, r18	; 0x02
     342:	9f b7       	in	r25, 0x3f	; 63
     344:	f8 94       	cli
     346:	22 85       	ldd	r18, Z+10	; 0x0a
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	33 85       	ldd	r19, Z+11	; 0x0b

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	31 09       	sbc	r19, r1
     34e:	33 87       	std	Z+11, r19	; 0x0b
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	22 87       	std	Z+10, r18	; 0x0a
     352:	9f bf       	out	0x3f, r25	; 63
     354:	08 95       	ret

00000356 <SetupHardware>:
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	84 b7       	in	r24, 0x34	; 52
     35c:	87 7f       	andi	r24, 0xF7	; 247
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	84 bf       	out	0x34, r24	; 52
     360:	28 e1       	ldi	r18, 0x18	; 24
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	20 93 60 00 	sts	0x0060, r18
     36a:	10 92 60 00 	sts	0x0060, r1
     36e:	0f be       	out	0x3f, r0	; 63
     370:	80 e1       	ldi	r24, 0x10	; 16
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	90 93 cd 00 	sts	0x00CD, r25

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	80 93 cc 00 	sts	0x00CC, r24
     37c:	ca ec       	ldi	r28, 0xCA	; 202
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	96 e0       	ldi	r25, 0x06	; 6
     382:	98 83       	st	Y, r25
     384:	a8 ec       	ldi	r26, 0xC8	; 200
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	8c 93       	st	X, r24
     38c:	e9 ec       	ldi	r30, 0xC9	; 201
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	20 83       	st	Z, r18
     392:	53 9a       	sbi	0x0a, 3	; 10
     394:	5a 9a       	sbi	0x0b, 2	; 11
     396:	5b 9a       	sbi	0x0b, 3	; 11
     398:	10 82       	st	Z, r1
     39a:	1c 92       	st	X, r1
     39c:	18 82       	st	Y, r1
     39e:	98 83       	st	Y, r25
     3a0:	8c 93       	st	X, r24
     3a2:	88 e9       	ldi	r24, 0x98	; 152
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	80 83       	st	Z, r24
     3a6:	5b 98       	cbi	0x0b, 3	; 11
     3a8:	8a b1       	in	r24, 0x0a	; 10
     3aa:	80 63       	ori	r24, 0x30	; 48
     3ac:	8a b9       	out	0x0a, r24	; 10
     3ae:	8b b1       	in	r24, 0x0b	; 11
     3b0:	80 63       	ori	r24, 0x30	; 48
     3b2:	8b b9       	out	0x0b, r24	; 11
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	ec d5       	rcall	.+3032   	; 0xf8e <USB_Init>
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	85 bd       	out	0x25, r24	; 37
     3ba:	5f 9a       	sbi	0x0b, 7	; 11
     3bc:	57 9a       	sbi	0x0a, 7	; 10

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	84 b1       	in	r24, 0x04	; 4
     3c0:	84 b9       	out	0x04, r24	; 4
     3c2:	22 98       	cbi	0x04, 2	; 4
     3c4:	2a 9a       	sbi	0x05, 2	; 5
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <EVENT_USB_Device_Connect>:
				break;
     3cc:	08 95       	ret

000003ce <EVENT_USB_Device_Disconnect>:

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	08 95       	ret

000003d0 <EVENT_USB_Device_ConfigurationChanged>:
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <HID_Device_ConfigureEndpoints>
     3d8:	80 e1       	ldi	r24, 0x10	; 16
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 41 0a 	call	0x1482	; 0x1482 <CDC_Device_ConfigureEndpoints>
     3e0:	e2 ee       	ldi	r30, 0xE2	; 226
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	80 83       	st	Z, r24
     3ea:	08 95       	ret

000003ec <EVENT_CDC_Device_LineEncodingChanged>:
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	ec 01       	movw	r28, r24
     3f4:	e9 8d       	ldd	r30, Y+25	; 0x19
     3f6:	e1 50       	subi	r30, 0x01	; 1
     3f8:	e2 30       	cpi	r30, 0x02	; 2
				break;
     3fa:	28 f4       	brcc	.+10     	; 0x406 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	e5 5d       	subi	r30, 0xD5	; 213
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	10 81       	ld	r17, Z
     404:	01 c0       	rjmp	.+2      	; 0x408 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	88 8d       	ldd	r24, Y+24	; 0x18

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	09 f4       	brne	.+2      	; 0x410 <EVENT_CDC_Device_LineEncodingChanged+0x24>
     40e:	18 60       	ori	r17, 0x08	; 8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	8a 8d       	ldd	r24, Y+26	; 0x1a
     412:	87 30       	cpi	r24, 0x07	; 7
     414:	31 f0       	breq	.+12     	; 0x422 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     416:	88 30       	cpi	r24, 0x08	; 8
     418:	31 f0       	breq	.+12     	; 0x426 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     41a:	86 30       	cpi	r24, 0x06	; 6
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	29 f4       	brne	.+10     	; 0x428 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     41e:	12 60       	ori	r17, 0x02	; 2
     420:	03 c0       	rjmp	.+6      	; 0x428 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     422:	14 60       	ori	r17, 0x04	; 4
     424:	01 c0       	rjmp	.+2      	; 0x428 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     426:	16 60       	ori	r17, 0x06	; 6

					while (CurrCollectionPath->Parent != NULL)
     428:	5b 9a       	sbi	0x0b, 3	; 11
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	10 92 c9 00 	sts	0x00C9, r1
     42e:	10 92 c8 00 	sts	0x00C8, r1
     432:	10 92 ca 00 	sts	0x00CA, r1
     436:	2c 89       	ldd	r18, Y+20	; 0x14
     438:	3d 89       	ldd	r19, Y+21	; 0x15
     43a:	4e 89       	ldd	r20, Y+22	; 0x16
     43c:	5f 89       	ldd	r21, Y+23	; 0x17
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	21 15       	cp	r18, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	81 ee       	ldi	r24, 0xE1	; 225
     442:	38 07       	cpc	r19, r24
     444:	41 05       	cpc	r20, r1
     446:	51 05       	cpc	r21, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	79 f0       	breq	.+30     	; 0x468 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
     44a:	ca 01       	movw	r24, r20
     44c:	b9 01       	movw	r22, r18
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	77 95       	ror	r23
     454:	67 95       	ror	r22
     456:	60 58       	subi	r22, 0x80	; 128
     458:	7b 47       	sbci	r23, 0x7B	; 123
     45a:	81 4e       	sbci	r24, 0xE1	; 225
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>

				if (UsageListSize)
     462:	21 50       	subi	r18, 0x01	; 1
     464:	31 09       	sbc	r19, r1
     466:	02 c0       	rjmp	.+4      	; 0x46c <EVENT_CDC_Device_LineEncodingChanged+0x80>
     468:	20 e1       	ldi	r18, 0x10	; 16
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	30 93 cd 00 	sts	0x00CD, r19
     470:	20 93 cc 00 	sts	0x00CC, r18
     474:	10 93 ca 00 	sts	0x00CA, r17
     478:	8c 89       	ldd	r24, Y+20	; 0x14
     47a:	9d 89       	ldd	r25, Y+21	; 0x15
     47c:	ae 89       	ldd	r26, Y+22	; 0x16
     47e:	bf 89       	ldd	r27, Y+23	; 0x17

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	81 15       	cp	r24, r1
     482:	91 4e       	sbci	r25, 0xE1	; 225
					  UsageList[i - 1] = UsageList[i];
     484:	a1 05       	cpc	r26, r1
     486:	b1 05       	cpc	r27, r1
     488:	11 f4       	brne	.+4      	; 0x48e <EVENT_CDC_Device_LineEncodingChanged+0xa2>
     48a:	80 e0       	ldi	r24, 0x00	; 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	01 c0       	rjmp	.+2      	; 0x490 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 c8 00 	sts	0x00C8, r24
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	80 93 c9 00 	sts	0x00C9, r24
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     49a:	5b 98       	cbi	0x0b, 3	; 11
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	08 95       	ret

000004a4 <__vector_23>:
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	2f 93       	push	r18
     4b0:	3f 93       	push	r19
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	af 93       	push	r26
     4b8:	bf 93       	push	r27
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
     4be:	80 91 ce 00 	lds	r24, 0x00CE
     4c2:	90 91 3b 02 	lds	r25, 0x023B
     4c6:	94 30       	cpi	r25, 0x04	; 4
     4c8:	d9 f4       	brne	.+54     	; 0x500 <__vector_23+0x5c>
     4ca:	ef e2       	ldi	r30, 0x2F	; 47
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	a0 81       	ld	r26, Z
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	b1 81       	ldd	r27, Z+1	; 0x01
     4d2:	8c 93       	st	X, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	91 81       	ldd	r25, Z+1	; 0x01
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
				break;
     4de:	26 81       	ldd	r18, Z+6	; 0x06
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	37 81       	ldd	r19, Z+7	; 0x07
     4e2:	82 17       	cp	r24, r18
     4e4:	93 07       	cpc	r25, r19
     4e6:	21 f4       	brne	.+8      	; 0x4f0 <__vector_23+0x4c>
     4e8:	84 81       	ldd	r24, Z+4	; 0x04
     4ea:	95 81       	ldd	r25, Z+5	; 0x05
     4ec:	91 83       	std	Z+1, r25	; 0x01
     4ee:	80 83       	st	Z, r24
     4f0:	2f b7       	in	r18, 0x3f	; 63
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	f8 94       	cli
     4f4:	82 85       	ldd	r24, Z+10	; 0x0a
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	93 85       	ldd	r25, Z+11	; 0x0b
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	93 87       	std	Z+11, r25	; 0x0b
     4fc:	82 87       	std	Z+10, r24	; 0x0a
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	2f bf       	out	0x3f, r18	; 63
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27

					if (UsageListSize)
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	3f 91       	pop	r19
     50e:	2f 91       	pop	r18
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <EVENT_CDC_Device_ControLineStateChanged>:
     51a:	fc 01       	movw	r30, r24
     51c:	20 89       	ldd	r18, Z+16	; 0x10
     51e:	20 ff       	sbrs	r18, 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <EVENT_CDC_Device_ControLineStateChanged+0xc>
     522:	5f 98       	cbi	0x0b, 7	; 11
     524:	08 95       	ret

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	5f 9a       	sbi	0x0b, 7	; 11
     528:	8b b1       	in	r24, 0x0b	; 11
						  UsageList[i - 1] = UsageList[i];
     52a:	80 63       	ori	r24, 0x30	; 48
     52c:	8b b9       	out	0x0b, r24	; 11
     52e:	08 95       	ret

00000530 <EVENT_USB_Device_ControlRequest>:
     530:	80 e1       	ldi	r24, 0x10	; 16

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <CDC_Device_ProcessControlRequest>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <HID_Device_ProcessControlRequest>

00000540 <EVENT_USB_Device_StartOfFrame>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     540:	80 91 0e 01 	lds	r24, 0x010E
     544:	90 91 0f 01 	lds	r25, 0x010F
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	29 f0       	breq	.+10     	; 0x556 <EVENT_USB_Device_StartOfFrame+0x16>
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	90 93 0f 01 	sts	0x010F, r25
     552:	80 93 0e 01 	sts	0x010E, r24
     556:	08 95       	ret

00000558 <CALLBACK_HID_Device_CreateHIDReport>:
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7b 01       	movw	r14, r22
     566:	c9 01       	movw	r24, r18
     568:	ce eb       	ldi	r28, 0xBE	; 190
     56a:	d1 e0       	ldi	r29, 0x01	; 1
     56c:	48 81       	ld	r20, Y
     56e:	e0 ec       	ldi	r30, 0xC0	; 192
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	f1 e0       	ldi	r31, 0x01	; 1
     572:	50 e0       	ldi	r21, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	bf 01       	movw	r22, r30
     576:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <memcpy>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57a:	ed eb       	ldi	r30, 0xBD	; 189
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	80 81       	ld	r24, Z
     580:	d7 01       	movw	r26, r14
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	8c 93       	st	X, r24
     584:	88 81       	ld	r24, Y

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	d8 01       	movw	r26, r16
     588:	8c 93       	st	X, r24
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	1c 92       	st	X, r1
     58e:	10 82       	st	Z, r1
     590:	10 92 bf 01 	sts	0x01BF, r1
     594:	18 82       	st	Y, r1
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	ef 90       	pop	r14
     5a4:	08 95       	ret

000005a6 <CALLBACK_HID_Device_ProcessHIDReport>:
     5a6:	08 95       	ret

000005a8 <writeToCDC>:
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	df 93       	push	r29
     5b4:	7c 01       	movw	r14, r24
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	06 2f       	mov	r16, r22
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	10 c0       	rjmp	.+32     	; 0x5e0 <writeToCDC+0x38>
     5c0:	80 91 20 01 	lds	r24, 0x0120
     5c4:	80 fd       	sbrc	r24, 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <writeToCDC+0x24>
     5c8:	21 96       	adiw	r28, 0x01	; 1
     5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <writeToCDC+0x38>
     5cc:	f7 01       	movw	r30, r14
     5ce:	ec 0f       	add	r30, r28
     5d0:	fd 1f       	adc	r31, r29
     5d2:	60 81       	ld	r22, Z
     5d4:	80 e1       	ldi	r24, 0x10	; 16
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	79 d7       	rcall	.+3826   	; 0x14cc <CDC_Device_SendByte>
     5da:	88 23       	and	r24, r24
     5dc:	a9 f3       	breq	.-22     	; 0x5c8 <writeToCDC+0x20>
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <writeToCDC+0x3e>
     5e0:	c0 17       	cp	r28, r16
     5e2:	d1 07       	cpc	r29, r17
     5e4:	6c f3       	brlt	.-38     	; 0x5c0 <writeToCDC+0x18>
     5e6:	8c 2f       	mov	r24, r28
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret

000005f6 <NHPwriteChecksum>:
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
					  return HID_PARSE_InsufficientReportItems;
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	fa 01       	movw	r30, r20
     604:	8b 01       	movw	r16, r22
     606:	00 95       	com	r16
     608:	10 95       	com	r17
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	98 01       	movw	r18, r16
     610:	11 27       	eor	r17, r17
     612:	00 27       	eor	r16, r16
     614:	ab 01       	movw	r20, r22
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	04 2b       	or	r16, r20
     61c:	15 2b       	or	r17, r21
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	26 2b       	or	r18, r22
     620:	37 2b       	or	r19, r23
     622:	4c e1       	ldi	r20, 0x1C	; 28
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	97 e0       	ldi	r25, 0x07	; 7
     628:	68 01       	movw	r12, r16
     62a:	79 01       	movw	r14, r18
     62c:	04 2e       	mov	r0, r20
     62e:	04 c0       	rjmp	.+8      	; 0x638 <NHPwriteChecksum+0x42>
     630:	f6 94       	lsr	r15
     632:	e7 94       	ror	r14
     634:	d7 94       	ror	r13
     636:	c7 94       	ror	r12
     638:	0a 94       	dec	r0
     63a:	d2 f7       	brpl	.-12     	; 0x630 <NHPwriteChecksum+0x3a>
     63c:	6c 2d       	mov	r22, r12
     63e:	68 30       	cpi	r22, 0x08	; 8
     640:	28 f0       	brcs	.+10     	; 0x64c <NHPwriteChecksum+0x56>
     642:	97 30       	cpi	r25, 0x07	; 7
     644:	59 f4       	brne	.+22     	; 0x65c <NHPwriteChecksum+0x66>
     646:	c0 82       	st	Z, r12
     648:	96 e0       	ldi	r25, 0x06	; 6
     64a:	08 c0       	rjmp	.+16     	; 0x65c <NHPwriteChecksum+0x66>
     64c:	c0 82       	st	Z, r12
     64e:	91 50       	subi	r25, 0x01	; 1
     650:	c1 10       	cpse	r12, r1
     652:	04 c0       	rjmp	.+8      	; 0x65c <NHPwriteChecksum+0x66>
     654:	47 50       	subi	r20, 0x07	; 7
     656:	51 09       	sbc	r21, r1
     658:	92 30       	cpi	r25, 0x02	; 2
     65a:	31 f7       	brne	.-52     	; 0x628 <NHPwriteChecksum+0x32>
     65c:	49 2f       	mov	r20, r25
     65e:	42 50       	subi	r20, 0x02	; 2
     660:	13 c0       	rjmp	.+38     	; 0x688 <NHPwriteChecksum+0x92>
     662:	df 01       	movw	r26, r30
     664:	a4 0f       	add	r26, r20
     666:	b1 1d       	adc	r27, r1
     668:	68 01       	movw	r12, r16
     66a:	79 01       	movw	r14, r18
     66c:	e8 94       	clt
     66e:	c7 f8       	bld	r12, 7
     670:	dd 24       	eor	r13, r13
     672:	ee 24       	eor	r14, r14
     674:	ff 24       	eor	r15, r15
     676:	cc 92       	st	X, r12
     678:	b7 e0       	ldi	r27, 0x07	; 7
     67a:	36 95       	lsr	r19
     67c:	27 95       	ror	r18
					  ParserData->TotalReportItems++;
     67e:	17 95       	ror	r17
     680:	07 95       	ror	r16
     682:	ba 95       	dec	r27
     684:	d1 f7       	brne	.-12     	; 0x67a <NHPwriteChecksum+0x84>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	41 50       	subi	r20, 0x01	; 1
     688:	41 11       	cpse	r20, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	eb cf       	rjmp	.-42     	; 0x662 <NHPwriteChecksum+0x6c>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	49 2f       	mov	r20, r25
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	9a 01       	movw	r18, r20
     692:	a3 e0       	ldi	r26, 0x03	; 3
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	aa 95       	dec	r26
     69a:	e1 f7       	brne	.-8      	; 0x694 <NHPwriteChecksum+0x9e>
     69c:	20 6c       	ori	r18, 0xC0	; 192
     69e:	3f 6f       	ori	r19, 0xFF	; 255
     6a0:	30 81       	ld	r19, Z
     6a2:	32 2b       	or	r19, r18
     6a4:	30 83       	st	Z, r19
     6a6:	e4 0f       	add	r30, r20
     6a8:	f5 1f       	adc	r31, r21
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	8f 73       	andi	r24, 0x3F	; 63
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	80 83       	st	Z, r24
     6b4:	89 2f       	mov	r24, r25
     6b6:	1f 91       	pop	r17
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	08 95       	ret

000006c4 <checkNHPControlAddressError>:
     6c4:	cf 93       	push	r28
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	df 93       	push	r29
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <checkNHPControlAddressError+0x6>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <checkNHPControlAddressError+0x8>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <checkNHPControlAddressError+0xa>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	60 91 bd 01 	lds	r22, 0x01BD
     6d6:	66 23       	and	r22, r22
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	79 f0       	breq	.+30     	; 0x6f8 <checkNHPControlAddressError+0x34>
     6da:	80 91 bf 01 	lds	r24, 0x01BF
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	81 11       	cpse	r24, r1
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <checkNHPControlAddressError+0x34>
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	71 60       	ori	r23, 0x01	; 1
     6e6:	ae 01       	movw	r20, r28
     6e8:	4f 5f       	subi	r20, 0xFF	; 255
     6ea:	5f 4f       	sbci	r21, 0xFF	; 255
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	83 df       	rcall	.-250    	; 0x5f6 <NHPwriteChecksum>
     6f0:	68 2f       	mov	r22, r24
     6f2:	ce 01       	movw	r24, r28
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	58 df       	rcall	.-336    	; 0x5a8 <writeToCDC>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	10 92 bd 01 	sts	0x01BD, r1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	26 96       	adiw	r28, 0x06	; 6
     6fe:	0f b6       	in	r0, 0x3f	; 63
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	08 95       	ret

0000070e <NHPreadChecksum>:
     70e:	0f 93       	push	r16
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	c8 2f       	mov	r28, r24
     716:	80 91 dd 01 	lds	r24, 0x01DD
     71a:	e8 2f       	mov	r30, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	e9 52       	subi	r30, 0x29	; 41
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	c0 83       	st	Z, r28
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	80 93 dd 01 	sts	0x01DD, r24
     72a:	9c 2f       	mov	r25, r28
     72c:	90 7c       	andi	r25, 0xC0	; 192
     72e:	80 91 d1 01 	lds	r24, 0x01D1
     732:	90 38       	cpi	r25, 0x80	; 128
     734:	09 f4       	brne	.+2      	; 0x738 <NHPreadChecksum+0x2a>
     736:	4a c0       	rjmp	.+148    	; 0x7cc <NHPreadChecksum+0xbe>
     738:	90 3c       	cpi	r25, 0xC0	; 192
     73a:	09 f0       	breq	.+2      	; 0x73e <NHPreadChecksum+0x30>
     73c:	63 c0       	rjmp	.+198    	; 0x804 <NHPreadChecksum+0xf6>
     73e:	88 23       	and	r24, r24
     740:	99 f0       	breq	.+38     	; 0x768 <NHPreadChecksum+0x5a>
     742:	c0 df       	rcall	.-128    	; 0x6c4 <checkNHPControlAddressError>
     744:	60 91 dd 01 	lds	r22, 0x01DD
     748:	61 50       	subi	r22, 0x01	; 1
     74a:	87 ed       	ldi	r24, 0xD7	; 215
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	2c df       	rcall	.-424    	; 0x5a8 <writeToCDC>
     750:	40 91 dd 01 	lds	r20, 0x01DD
     754:	e4 2f       	mov	r30, r20
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ea 52       	subi	r30, 0x2A	; 42
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	80 81       	ld	r24, Z
     75e:	80 93 d7 01 	sts	0x01D7, r24
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 dd 01 	sts	0x01DD, r24
     768:	4c 2f       	mov	r20, r28
     76a:	48 73       	andi	r20, 0x38	; 56
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	55 95       	asr	r21
     772:	47 95       	ror	r20
     774:	6a 95       	dec	r22
     776:	e1 f7       	brne	.-8      	; 0x770 <NHPreadChecksum+0x62>
     778:	24 2f       	mov	r18, r20
     77a:	40 93 d1 01 	sts	0x01D1, r20
     77e:	42 30       	cpi	r20, 0x02	; 2
     780:	08 f4       	brcc	.+2      	; 0x784 <NHPreadChecksum+0x76>
     782:	5e c0       	rjmp	.+188    	; 0x840 <NHPreadChecksum+0x132>
     784:	47 30       	cpi	r20, 0x07	; 7
     786:	89 f4       	brne	.+34     	; 0x7aa <NHPreadChecksum+0x9c>
     788:	4c 2f       	mov	r20, r28
     78a:	4f 70       	andi	r20, 0x0F	; 15
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	40 93 d2 01 	sts	0x01D2, r20
     796:	50 93 d3 01 	sts	0x01D3, r21
     79a:	60 93 d4 01 	sts	0x01D4, r22
     79e:	70 93 d5 01 	sts	0x01D5, r23
     7a2:	85 e0       	ldi	r24, 0x05	; 5
     7a4:	80 93 d1 01 	sts	0x01D1, r24
     7a8:	55 c0       	rjmp	.+170    	; 0x854 <NHPreadChecksum+0x146>
     7aa:	8c 2f       	mov	r24, r28
     7ac:	87 70       	andi	r24, 0x07	; 7
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	80 93 d2 01 	sts	0x01D2, r24
     7b8:	90 93 d3 01 	sts	0x01D3, r25
     7bc:	a0 93 d4 01 	sts	0x01D4, r26
     7c0:	b0 93 d5 01 	sts	0x01D5, r27
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	20 93 d1 01 	sts	0x01D1, r18
     7ca:	44 c0       	rjmp	.+136    	; 0x854 <NHPreadChecksum+0x146>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	c1 f5       	brne	.+112    	; 0x840 <NHPreadChecksum+0x132>
     7d0:	00 91 d2 01 	lds	r16, 0x01D2
     7d4:	10 91 d3 01 	lds	r17, 0x01D3
     7d8:	20 91 d4 01 	lds	r18, 0x01D4
     7dc:	30 91 d5 01 	lds	r19, 0x01D5
     7e0:	a9 01       	movw	r20, r18
     7e2:	66 27       	eor	r22, r22
     7e4:	77 27       	eor	r23, r23
     7e6:	22 27       	eor	r18, r18
     7e8:	33 27       	eor	r19, r19
     7ea:	40 27       	eor	r20, r16
     7ec:	51 27       	eor	r21, r17
     7ee:	62 27       	eor	r22, r18
     7f0:	73 27       	eor	r23, r19
     7f2:	4f 3f       	cpi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	61 05       	cpc	r22, r1
     7f8:	71 05       	cpc	r23, r1
     7fa:	11 f5       	brne	.+68     	; 0x840 <NHPreadChecksum+0x132>
     7fc:	8c 2f       	mov	r24, r28
     7fe:	8f 73       	andi	r24, 0x3F	; 63
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	29 c0       	rjmp	.+82     	; 0x856 <NHPreadChecksum+0x148>
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	e0 f0       	brcs	.+56     	; 0x840 <NHPreadChecksum+0x132>
     808:	81 50       	subi	r24, 0x01	; 1
     80a:	80 93 d1 01 	sts	0x01D1, r24
     80e:	40 91 d2 01 	lds	r20, 0x01D2
     812:	50 91 d3 01 	lds	r21, 0x01D3
     816:	60 91 d4 01 	lds	r22, 0x01D4
     81a:	70 91 d5 01 	lds	r23, 0x01D5
     81e:	27 e0       	ldi	r18, 0x07	; 7
     820:	44 0f       	add	r20, r20
     822:	55 1f       	adc	r21, r21
     824:	66 1f       	adc	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	2a 95       	dec	r18
     82a:	d1 f7       	brne	.-12     	; 0x820 <NHPreadChecksum+0x112>
     82c:	4c 2b       	or	r20, r28
     82e:	40 93 d2 01 	sts	0x01D2, r20
     832:	50 93 d3 01 	sts	0x01D3, r21
     836:	60 93 d4 01 	sts	0x01D4, r22
     83a:	70 93 d5 01 	sts	0x01D5, r23
     83e:	0a c0       	rjmp	.+20     	; 0x854 <NHPreadChecksum+0x146>
     840:	41 df       	rcall	.-382    	; 0x6c4 <checkNHPControlAddressError>
     842:	60 91 dd 01 	lds	r22, 0x01DD
     846:	87 ed       	ldi	r24, 0xD7	; 215
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	ae de       	rcall	.-676    	; 0x5a8 <writeToCDC>
     84c:	10 92 d1 01 	sts	0x01D1, r1
     850:	10 92 dd 01 	sts	0x01DD, r1
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <checkNHPProtocol>:
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	52 df       	rcall	.-348    	; 0x70e <NHPreadChecksum>
     86a:	88 23       	and	r24, r24
     86c:	09 f4       	brne	.+2      	; 0x870 <checkNHPProtocol+0x12>
     86e:	76 c0       	rjmp	.+236    	; 0x95c <checkNHPProtocol+0xfe>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	89 f5       	brne	.+98     	; 0x8d6 <checkNHPProtocol+0x78>
     874:	90 91 d3 01 	lds	r25, 0x01D3
     878:	91 30       	cpi	r25, 0x01	; 1
     87a:	69 f5       	brne	.+90     	; 0x8d6 <checkNHPProtocol+0x78>
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	22 df       	rcall	.-444    	; 0x6c4 <checkNHPControlAddressError>
     880:	90 91 d2 01 	lds	r25, 0x01D2
     884:	90 93 bd 01 	sts	0x01BD, r25
     888:	10 92 bf 01 	sts	0x01BF, r1
     88c:	21 e1       	ldi	r18, 0x11	; 17
     88e:	e0 ec       	ldi	r30, 0xC0	; 192
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	df 01       	movw	r26, r30
     894:	32 2f       	mov	r19, r18
     896:	1d 92       	st	X+, r1
     898:	3a 95       	dec	r19
     89a:	e9 f7       	brne	.-6      	; 0x896 <checkNHPProtocol+0x38>
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	95 30       	cpi	r25, 0x05	; 5
     8a0:	b9 f0       	breq	.+46     	; 0x8d0 <checkNHPProtocol+0x72>
     8a2:	40 f4       	brcc	.+16     	; 0x8b4 <checkNHPProtocol+0x56>
     8a4:	92 30       	cpi	r25, 0x02	; 2
     8a6:	71 f0       	breq	.+28     	; 0x8c4 <checkNHPProtocol+0x66>
     8a8:	94 30       	cpi	r25, 0x04	; 4
     8aa:	61 f0       	breq	.+24     	; 0x8c4 <checkNHPProtocol+0x66>
     8ac:	91 30       	cpi	r25, 0x01	; 1
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <checkNHPProtocol+0x54>
     8b0:	4a c0       	rjmp	.+148    	; 0x946 <checkNHPProtocol+0xe8>
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <checkNHPProtocol+0x62>
     8b4:	98 30       	cpi	r25, 0x08	; 8
     8b6:	40 f0       	brcs	.+16     	; 0x8c8 <checkNHPProtocol+0x6a>
     8b8:	9a 30       	cpi	r25, 0x0A	; 10
     8ba:	08 f0       	brcs	.+2      	; 0x8be <checkNHPProtocol+0x60>
     8bc:	44 c0       	rjmp	.+136    	; 0x946 <checkNHPProtocol+0xe8>
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <checkNHPProtocol+0x70>
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <checkNHPProtocol+0x72>
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <checkNHPProtocol+0x72>
     8c8:	20 93 be 01 	sts	0x01BE, r18
     8cc:	43 c0       	rjmp	.+134    	; 0x954 <checkNHPProtocol+0xf6>
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	80 93 be 01 	sts	0x01BE, r24
     8d4:	3f c0       	rjmp	.+126    	; 0x954 <checkNHPProtocol+0xf6>
     8d6:	90 91 bd 01 	lds	r25, 0x01BD
     8da:	99 23       	and	r25, r25
     8dc:	b1 f1       	breq	.+108    	; 0x94a <checkNHPProtocol+0xec>
     8de:	60 91 bf 01 	lds	r22, 0x01BF
     8e2:	46 2f       	mov	r20, r22
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9a 01       	movw	r18, r20
     8ea:	2e 5f       	subi	r18, 0xFE	; 254
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	35 95       	asr	r19
     8f0:	27 95       	ror	r18
     8f2:	2f 5f       	subi	r18, 0xFF	; 255
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	82 17       	cp	r24, r18
     8f8:	93 07       	cpc	r25, r19
     8fa:	29 f5       	brne	.+74     	; 0x946 <checkNHPProtocol+0xe8>
     8fc:	fa 01       	movw	r30, r20
     8fe:	e0 54       	subi	r30, 0x40	; 64
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	80 91 d2 01 	lds	r24, 0x01D2
     906:	80 83       	st	Z, r24
     908:	e6 2f       	mov	r30, r22
     90a:	ef 5f       	subi	r30, 0xFF	; 255
     90c:	e0 93 bf 01 	sts	0x01BF, r30
     910:	80 91 be 01 	lds	r24, 0x01BE
     914:	8e 17       	cp	r24, r30
     916:	49 f0       	breq	.+18     	; 0x92a <checkNHPProtocol+0xcc>
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	e0 54       	subi	r30, 0x40	; 64
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	90 91 d3 01 	lds	r25, 0x01D3
     922:	90 83       	st	Z, r25
     924:	6e 5f       	subi	r22, 0xFE	; 254
     926:	60 93 bf 01 	sts	0x01BF, r22
     92a:	90 91 bf 01 	lds	r25, 0x01BF
     92e:	89 13       	cpse	r24, r25
     930:	11 c0       	rjmp	.+34     	; 0x954 <checkNHPProtocol+0xf6>
     932:	04 c0       	rjmp	.+8      	; 0x93c <checkNHPProtocol+0xde>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <HID_Device_USBTask>
     93c:	80 91 bd 01 	lds	r24, 0x01BD
     940:	81 11       	cpse	r24, r1
     942:	f8 cf       	rjmp	.-16     	; 0x934 <checkNHPProtocol+0xd6>
     944:	07 c0       	rjmp	.+14     	; 0x954 <checkNHPProtocol+0xf6>
     946:	be de       	rcall	.-644    	; 0x6c4 <checkNHPControlAddressError>
     948:	05 c0       	rjmp	.+10     	; 0x954 <checkNHPProtocol+0xf6>
     94a:	60 91 dd 01 	lds	r22, 0x01DD
     94e:	87 ed       	ldi	r24, 0xD7	; 215
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	2a de       	rcall	.-940    	; 0x5a8 <writeToCDC>
     954:	10 92 d1 01 	sts	0x01D1, r1
     958:	10 92 dd 01 	sts	0x01DD, r1
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <mode_hid>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	80 e1       	ldi	r24, 0x10	; 16
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	17 d6       	rcall	.+3118   	; 0x159c <CDC_Device_ReceiveByte>
     96e:	97 fd       	sbrc	r25, 7
     970:	0a c0       	rjmp	.+20     	; 0x986 <mode_hid+0x22>
     972:	5c 98       	cbi	0x0b, 4	; 11
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	90 93 bc 01 	sts	0x01BC, r25
     97a:	90 91 c8 00 	lds	r25, 0x00C8
     97e:	95 ff       	sbrs	r25, 5
     980:	fc cf       	rjmp	.-8      	; 0x97a <mode_hid+0x16>
     982:	80 93 ce 00 	sts	0x00CE, r24
     986:	8f b7       	in	r24, 0x3f	; 63
     988:	f8 94       	cli
     98a:	c0 91 39 01 	lds	r28, 0x0139
     98e:	d0 91 3a 01 	lds	r29, 0x013A
     992:	8f bf       	out	0x3f, r24	; 63
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	19 f4       	brne	.+6      	; 0x99e <mode_hid+0x3a>
     998:	a8 99       	sbic	0x15, 0	; 21
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <mode_hid+0x50>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <mode_hid+0x96>
     99e:	5d 98       	cbi	0x0b, 5	; 11
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	80 93 bb 01 	sts	0x01BB, r24
     9a6:	8f e2       	ldi	r24, 0x2F	; 47
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	bb dc       	rcall	.-1674   	; 0x322 <RingBuffer_Remove.constprop.0>
     9ac:	58 df       	rcall	.-336    	; 0x85e <checkNHPProtocol>
     9ae:	21 97       	sbiw	r28, 0x01	; 1
     9b0:	d1 f7       	brne	.-12     	; 0x9a6 <mode_hid+0x42>
     9b2:	f2 cf       	rjmp	.-28     	; 0x998 <mode_hid+0x34>
     9b4:	a8 9a       	sbi	0x15, 0	; 21
     9b6:	80 91 bb 01 	lds	r24, 0x01BB
     9ba:	88 23       	and	r24, r24
     9bc:	91 f0       	breq	.+36     	; 0x9e2 <mode_hid+0x7e>
     9be:	80 91 bb 01 	lds	r24, 0x01BB
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	80 93 bb 01 	sts	0x01BB, r24
     9c8:	81 11       	cpse	r24, r1
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <mode_hid+0x7e>
     9cc:	7b de       	rcall	.-778    	; 0x6c4 <checkNHPControlAddressError>
     9ce:	60 91 dd 01 	lds	r22, 0x01DD
     9d2:	87 ed       	ldi	r24, 0xD7	; 215
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	e8 dd       	rcall	.-1072   	; 0x5a8 <writeToCDC>
     9d8:	10 92 d1 01 	sts	0x01D1, r1
     9dc:	10 92 dd 01 	sts	0x01DD, r1
     9e0:	5d 9a       	sbi	0x0b, 5	; 11
     9e2:	80 91 bc 01 	lds	r24, 0x01BC
     9e6:	88 23       	and	r24, r24
     9e8:	41 f0       	breq	.+16     	; 0x9fa <mode_hid+0x96>
     9ea:	80 91 bc 01 	lds	r24, 0x01BC
     9ee:	81 50       	subi	r24, 0x01	; 1
     9f0:	80 93 bc 01 	sts	0x01BC, r24
     9f4:	81 11       	cpse	r24, r1
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <mode_hid+0x96>
     9f8:	5c 9a       	sbi	0x0b, 4	; 11
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <main>:
     a00:	aa dc       	rcall	.-1708   	; 0x356 <SetupHardware>
     a02:	ef e2       	ldi	r30, 0x2F	; 47
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	2f b7       	in	r18, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	8b e3       	ldi	r24, 0x3B	; 59
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	93 83       	std	Z+3, r25	; 0x03
     a14:	82 83       	std	Z+2, r24	; 0x02
     a16:	95 83       	std	Z+5, r25	; 0x05
     a18:	84 83       	std	Z+4, r24	; 0x04
     a1a:	8b eb       	ldi	r24, 0xBB	; 187
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	97 83       	std	Z+7, r25	; 0x07
     a20:	86 83       	std	Z+6, r24	; 0x06
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	91 87       	std	Z+9, r25	; 0x09
     a28:	80 87       	std	Z+8, r24	; 0x08
     a2a:	13 86       	std	Z+11, r1	; 0x0b
     a2c:	12 86       	std	Z+10, r1	; 0x0a
     a2e:	2f bf       	out	0x3f, r18	; 63
     a30:	10 92 d1 01 	sts	0x01D1, r1
     a34:	10 92 dd 01 	sts	0x01DD, r1
     a38:	10 92 bd 01 	sts	0x01BD, r1
     a3c:	10 92 2e 01 	sts	0x012E, r1
     a40:	78 94       	sei
     a42:	90 df       	rcall	.-224    	; 0x964 <mode_hid>
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	93 d5       	rcall	.+2854   	; 0x1570 <CDC_Device_USBTask>
     a4a:	ff d4       	rcall	.+2558   	; 0x144a <USB_USBTask>
     a4c:	fa cf       	rjmp	.-12     	; 0xa42 <main+0x42>

00000a4e <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     a4e:	29 2f       	mov	r18, r25
     a50:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     a52:	23 30       	cpi	r18, 0x03	; 3
     a54:	31 05       	cpc	r19, r1
     a56:	b1 f0       	breq	.+44     	; 0xa84 <CALLBACK_USB_GetDescriptor+0x36>
     a58:	4c f4       	brge	.+18     	; 0xa6c <CALLBACK_USB_GetDescriptor+0x1e>
     a5a:	21 30       	cpi	r18, 0x01	; 1
     a5c:	31 05       	cpc	r19, r1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <CALLBACK_USB_GetDescriptor+0x14>
     a60:	39 c0       	rjmp	.+114    	; 0xad4 <CALLBACK_USB_GetDescriptor+0x86>
     a62:	22 30       	cpi	r18, 0x02	; 2
     a64:	31 05       	cpc	r19, r1
     a66:	09 f0       	breq	.+2      	; 0xa6a <CALLBACK_USB_GetDescriptor+0x1c>
     a68:	3a c0       	rjmp	.+116    	; 0xade <CALLBACK_USB_GetDescriptor+0x90>
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <CALLBACK_USB_GetDescriptor+0x2c>
     a6c:	21 32       	cpi	r18, 0x21	; 33
     a6e:	31 05       	cpc	r19, r1
     a70:	39 f1       	breq	.+78     	; 0xac0 <CALLBACK_USB_GetDescriptor+0x72>
     a72:	22 32       	cpi	r18, 0x22	; 34
     a74:	31 05       	cpc	r19, r1
     a76:	49 f1       	breq	.+82     	; 0xaca <CALLBACK_USB_GetDescriptor+0x7c>
     a78:	32 c0       	rjmp	.+100    	; 0xade <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
     a7a:	ef e5       	ldi	r30, 0x5F	; 95
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     a7e:	8e eb       	ldi	r24, 0xBE	; 190
     a80:	90 e0       	ldi	r25, 0x00	; 0
		Size    = sizeof(USB_Descriptor_Configuration_t);
		break;
     a82:	31 c0       	rjmp	.+98     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     a84:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	91 05       	cpc	r25, r1
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <CALLBACK_USB_GetDescriptor+0x56>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	81 f0       	breq	.+32     	; 0xab2 <CALLBACK_USB_GetDescriptor+0x64>
     a92:	89 2b       	or	r24, r25
     a94:	21 f5       	brne	.+72     	; 0xade <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size    = pgm_read_byte(&LanguageString.Header.Size);
     a96:	ea eb       	ldi	r30, 0xBA	; 186
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	e4 91       	lpm	r30, Z+
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     a9e:	8a eb       	ldi	r24, 0xBA	; 186
     aa0:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&LanguageString.Header.Size);
			break;
     aa2:	21 c0       	rjmp	.+66     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     aa4:	e6 ea       	ldi	r30, 0xA6	; 166
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e4 91       	lpm	r30, Z+
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size    = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     aac:	86 ea       	ldi	r24, 0xA6	; 166
     aae:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     ab0:	1a c0       	rjmp	.+52     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size    = pgm_read_byte(&ProductString.Header.Size);
     ab2:	e4 e7       	ldi	r30, 0x74	; 116
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	e4 91       	lpm	r30, Z+
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     aba:	84 e7       	ldi	r24, 0x74	; 116
     abc:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&ProductString.Header.Size);
			break;
     abe:	13 c0       	rjmp	.+38     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
     ac0:	e9 e0       	ldi	r30, 0x09	; 9
     ac2:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     ac4:	8d e0       	ldi	r24, 0x0D	; 13
     ac6:	91 e0       	ldi	r25, 0x01	; 1
		Size    = sizeof(USB_HID_Descriptor_HID_t);
		break;
     ac8:	0e c0       	rjmp	.+28     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
     aca:	e8 eb       	ldi	r30, 0xB8	; 184
     acc:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     ace:	8f e2       	ldi	r24, 0x2F	; 47
     ad0:	91 e0       	ldi	r25, 0x01	; 1
		Size    = sizeof(HIDReport);
		break;
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
     ad4:	e2 e1       	ldi	r30, 0x12	; 18
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     ad8:	8d e1       	ldi	r24, 0x1D	; 29
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     ade:	e0 e0       	ldi	r30, 0x00	; 0
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
									const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     ae6:	da 01       	movw	r26, r20
     ae8:	8d 93       	st	X+, r24
     aea:	9c 93       	st	X, r25
	return Size;
}
     aec:	cf 01       	movw	r24, r30
     aee:	08 95       	ret

00000af0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	7c 01       	movw	r14, r24
     b04:	8b 01       	movw	r16, r22
     b06:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     b08:	d7 d1       	rcall	.+942    	; 0xeb8 <Endpoint_WaitUntilReady>
     b0a:	b8 2e       	mov	r11, r24
     b0c:	81 11       	cpse	r24, r1
     b0e:	32 c0       	rjmp	.+100    	; 0xb74 <Endpoint_Write_Stream_LE+0x84>
     b10:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b12:	31 f0       	breq	.+12     	; 0xb20 <Endpoint_Write_Stream_LE+0x30>
     b14:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
     b16:	39 81       	ldd	r19, Y+1	; 0x01
     b18:	02 1b       	sub	r16, r18
     b1a:	13 0b       	sbc	r17, r19
     b1c:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b1e:	f3 1e       	adc	r15, r19
     b20:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b22:	d1 2c       	mov	r13, r1
     b24:	22 c0       	rjmp	.+68     	; 0xb6a <Endpoint_Write_Stream_LE+0x7a>
     b26:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b2a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     b2c:	14 c0       	rjmp	.+40     	; 0xb56 <Endpoint_Write_Stream_LE+0x66>
     b2e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b32:	8e 77       	andi	r24, 0x7E	; 126
     b34:	80 93 e8 00 	sts	0x00E8, r24
     b38:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     b3a:	49 f0       	breq	.+18     	; 0xb4e <Endpoint_Write_Stream_LE+0x5e>
     b3c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     b3e:	99 81       	ldd	r25, Y+1	; 0x01
     b40:	8c 0d       	add	r24, r12
     b42:	9d 1d       	adc	r25, r13
     b44:	99 83       	std	Y+1, r25	; 0x01
     b46:	88 83       	st	Y, r24
     b48:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     b4a:	b2 2e       	mov	r11, r18
     b4c:	13 c0       	rjmp	.+38     	; 0xb74 <Endpoint_Write_Stream_LE+0x84>
     b4e:	b4 d1       	rcall	.+872    	; 0xeb8 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     b50:	88 23       	and	r24, r24
     b52:	59 f0       	breq	.+22     	; 0xb6a <Endpoint_Write_Stream_LE+0x7a>
     b54:	0e c0       	rjmp	.+28     	; 0xb72 <Endpoint_Write_Stream_LE+0x82>
     b56:	f7 01       	movw	r30, r14
     b58:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     b5a:	7f 01       	movw	r14, r30
     b5c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b60:	01 50       	subi	r16, 0x01	; 1
     b62:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b64:	ff ef       	ldi	r31, 0xFF	; 255
     b66:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     b68:	df 0a       	sbc	r13, r31
     b6a:	01 15       	cp	r16, r1
     b6c:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b6e:	d9 f6       	brne	.-74     	; 0xb26 <Endpoint_Write_Stream_LE+0x36>
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <Endpoint_Write_Stream_LE+0x84>
     b72:	b8 2e       	mov	r11, r24
     b74:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     b76:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	08 95       	ret

00000b8a <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     b8a:	20 91 42 02 	lds	r18, 0x0242
     b8e:	30 91 43 02 	lds	r19, 0x0243
     b92:	26 17       	cp	r18, r22
     b94:	37 07       	cpc	r19, r23
     b96:	48 f0       	brcs	.+18     	; 0xbaa <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b98:	61 15       	cp	r22, r1
     b9a:	71 05       	cpc	r23, r1
     b9c:	39 f4       	brne	.+14     	; 0xbac <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b9e:	20 91 e8 00 	lds	r18, 0x00E8
     ba2:	2e 77       	andi	r18, 0x7E	; 126
     ba4:	20 93 e8 00 	sts	0x00E8, r18
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     baa:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     bac:	9c 01       	movw	r18, r24
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	34 c0       	rjmp	.+104    	; 0xc1a <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bb2:	90 91 3b 02 	lds	r25, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bb6:	99 23       	and	r25, r25
     bb8:	09 f4       	brne	.+2      	; 0xbbc <Endpoint_Write_Control_Stream_LE+0x32>
     bba:	43 c0       	rjmp	.+134    	; 0xc42 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bbc:	95 30       	cpi	r25, 0x05	; 5
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <Endpoint_Write_Control_Stream_LE+0x38>
     bc0:	42 c0       	rjmp	.+132    	; 0xc46 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc2:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bc6:	93 fd       	sbrc	r25, 3
     bc8:	3a c0       	rjmp	.+116    	; 0xc3e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bca:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     bce:	92 fd       	sbrc	r25, 2
     bd0:	30 c0       	rjmp	.+96     	; 0xc32 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bd2:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     bd6:	90 ff       	sbrs	r25, 0
     bd8:	20 c0       	rjmp	.+64     	; 0xc1a <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     bda:	80 91 f2 00 	lds	r24, 0x00F2
     bde:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     be0:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     be2:	82 1b       	sub	r24, r18
     be4:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     be8:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bea:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     bee:	61 50       	subi	r22, 0x01	; 1
     bf0:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     bf2:	9f 01       	movw	r18, r30
     bf4:	28 0f       	add	r18, r24
     bf6:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     bf8:	61 15       	cp	r22, r1
     bfa:	71 05       	cpc	r23, r1
     bfc:	19 f0       	breq	.+6      	; 0xc04 <Endpoint_Write_Control_Stream_LE+0x7a>
     bfe:	28 30       	cpi	r18, 0x08	; 8
     c00:	31 05       	cpc	r19, r1
     c02:	90 f3       	brcs	.-28     	; 0xbe8 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	28 30       	cpi	r18, 0x08	; 8
     c08:	31 05       	cpc	r19, r1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <Endpoint_Write_Control_Stream_LE+0x84>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c0e:	90 91 e8 00 	lds	r25, 0x00E8
     c12:	9e 77       	andi	r25, 0x7E	; 126
     c14:	90 93 e8 00 	sts	0x00E8, r25
     c18:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c1a:	61 15       	cp	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	49 f6       	brne	.-110    	; 0xbb2 <Endpoint_Write_Control_Stream_LE+0x28>
     c20:	81 11       	cpse	r24, r1
     c22:	c7 cf       	rjmp	.-114    	; 0xbb2 <Endpoint_Write_Control_Stream_LE+0x28>
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c26:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c2a:	88 23       	and	r24, r24
     c2c:	51 f0       	breq	.+20     	; 0xc42 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	51 f0       	breq	.+20     	; 0xc46 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c32:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c36:	82 ff       	sbrs	r24, 2
     c38:	f6 cf       	rjmp	.-20     	; 0xc26 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c46:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c48:	08 95       	ret

00000c4a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     c4a:	61 15       	cp	r22, r1
     c4c:	71 05       	cpc	r23, r1
     c4e:	29 f4       	brne	.+10     	; 0xc5a <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c50:	20 91 e8 00 	lds	r18, 0x00E8
     c54:	2b 77       	andi	r18, 0x7B	; 123
     c56:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     c5a:	9c 01       	movw	r18, r24
     c5c:	21 c0       	rjmp	.+66     	; 0xca0 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c5e:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c62:	88 23       	and	r24, r24
     c64:	81 f1       	breq	.+96     	; 0xcc6 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	41 f1       	breq	.+80     	; 0xcba <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c6e:	83 fd       	sbrc	r24, 3
     c70:	26 c0       	rjmp	.+76     	; 0xcbe <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c72:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     c76:	82 ff       	sbrs	r24, 2
     c78:	f2 cf       	rjmp	.-28     	; 0xc5e <Endpoint_Read_Control_Stream_LE+0x14>
     c7a:	f9 01       	movw	r30, r18
     c7c:	07 c0       	rjmp	.+14     	; 0xc8c <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c7e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c82:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c84:	9f 01       	movw	r18, r30
				Length--;
     c86:	61 50       	subi	r22, 0x01	; 1
     c88:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     c8a:	29 f0       	breq	.+10     	; 0xc96 <Endpoint_Read_Control_Stream_LE+0x4c>
     c8c:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c8e:	80 91 f2 00 	lds	r24, 0x00F2
     c92:	81 11       	cpse	r24, r1
     c94:	f4 cf       	rjmp	.-24     	; 0xc7e <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c96:	80 91 e8 00 	lds	r24, 0x00E8
     c9a:	8b 77       	andi	r24, 0x7B	; 123
     c9c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     ca0:	61 15       	cp	r22, r1
     ca2:	71 05       	cpc	r23, r1
     ca4:	e1 f6       	brne	.-72     	; 0xc5e <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ca6:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     caa:	80 fd       	sbrc	r24, 0
     cac:	0a c0       	rjmp	.+20     	; 0xcc2 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cae:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cb2:	88 23       	and	r24, r24
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cb6:	85 30       	cpi	r24, 0x05	; 5
     cb8:	b1 f7       	brne	.-20     	; 0xca6 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     cc6:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cc8:	08 95       	ret

00000cca <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cca:	20 91 42 02 	lds	r18, 0x0242
     cce:	30 91 43 02 	lds	r19, 0x0243
     cd2:	26 17       	cp	r18, r22
     cd4:	37 07       	cpc	r19, r23
     cd6:	48 f0       	brcs	.+18     	; 0xcea <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     cd8:	61 15       	cp	r22, r1
     cda:	71 05       	cpc	r23, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cde:	20 91 e8 00 	lds	r18, 0x00E8
     ce2:	2e 77       	andi	r18, 0x7E	; 126
     ce4:	20 93 e8 00 	sts	0x00E8, r18
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cea:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cec:	9c 01       	movw	r18, r24
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	35 c0       	rjmp	.+106    	; 0xd5c <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cf2:	90 91 3b 02 	lds	r25, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cf6:	99 23       	and	r25, r25
     cf8:	09 f4       	brne	.+2      	; 0xcfc <Endpoint_Write_Control_PStream_LE+0x32>
     cfa:	44 c0       	rjmp	.+136    	; 0xd84 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cfc:	95 30       	cpi	r25, 0x05	; 5
     cfe:	09 f4       	brne	.+2      	; 0xd02 <Endpoint_Write_Control_PStream_LE+0x38>
     d00:	43 c0       	rjmp	.+134    	; 0xd88 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d02:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d06:	93 fd       	sbrc	r25, 3
     d08:	3b c0       	rjmp	.+118    	; 0xd80 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d0a:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d0e:	92 fd       	sbrc	r25, 2
     d10:	31 c0       	rjmp	.+98     	; 0xd74 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d12:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d16:	90 ff       	sbrs	r25, 0
     d18:	21 c0       	rjmp	.+66     	; 0xd5c <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d1a:	80 91 f2 00 	lds	r24, 0x00F2
     d1e:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d20:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     d22:	82 1b       	sub	r24, r18
     d24:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d28:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d2a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d2e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d30:	61 50       	subi	r22, 0x01	; 1
     d32:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     d34:	9c 01       	movw	r18, r24
     d36:	2e 0f       	add	r18, r30
     d38:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d3a:	61 15       	cp	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	19 f0       	breq	.+6      	; 0xd46 <Endpoint_Write_Control_PStream_LE+0x7c>
     d40:	28 30       	cpi	r18, 0x08	; 8
     d42:	31 05       	cpc	r19, r1
     d44:	88 f3       	brcs	.-30     	; 0xd28 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	28 30       	cpi	r18, 0x08	; 8
     d4a:	31 05       	cpc	r19, r1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <Endpoint_Write_Control_PStream_LE+0x86>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d50:	90 91 e8 00 	lds	r25, 0x00E8
     d54:	9e 77       	andi	r25, 0x7E	; 126
     d56:	90 93 e8 00 	sts	0x00E8, r25
     d5a:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d5c:	61 15       	cp	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	41 f6       	brne	.-112    	; 0xcf2 <Endpoint_Write_Control_PStream_LE+0x28>
     d62:	81 11       	cpse	r24, r1
     d64:	c6 cf       	rjmp	.-116    	; 0xcf2 <Endpoint_Write_Control_PStream_LE+0x28>
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d68:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d6c:	88 23       	and	r24, r24
     d6e:	51 f0       	breq	.+20     	; 0xd84 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d70:	85 30       	cpi	r24, 0x05	; 5
     d72:	51 f0       	breq	.+20     	; 0xd88 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d74:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d78:	82 ff       	sbrs	r24, 2
     d7a:	f6 cf       	rjmp	.-20     	; 0xd68 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d88:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d8a:	08 95       	ret

00000d8c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     d8c:	98 2f       	mov	r25, r24
     d8e:	2c c0       	rjmp	.+88     	; 0xde8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d90:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     d94:	98 17       	cp	r25, r24
     d96:	39 f0       	breq	.+14     	; 0xda6 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     d98:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     d9c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     da0:	50 91 f0 00 	lds	r21, 0x00F0
     da4:	03 c0       	rjmp	.+6      	; 0xdac <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     da6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     da8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     daa:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     dac:	21 fd       	sbrc	r18, 1
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     db0:	9f 5f       	subi	r25, 0xFF	; 255
     db2:	1a c0       	rjmp	.+52     	; 0xde8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     db4:	30 91 eb 00 	lds	r19, 0x00EB
     db8:	3e 7f       	andi	r19, 0xFE	; 254
     dba:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     dbe:	30 91 ed 00 	lds	r19, 0x00ED
     dc2:	3d 7f       	andi	r19, 0xFD	; 253
     dc4:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     dc8:	30 91 eb 00 	lds	r19, 0x00EB
     dcc:	31 60       	ori	r19, 0x01	; 1
     dce:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     dd2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     dd6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     dda:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     dde:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     de2:	27 fd       	sbrc	r18, 7
     de4:	e5 cf       	rjmp	.-54     	; 0xdb0 <Endpoint_ConfigureEndpoint_Prv+0x24>
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     de8:	95 30       	cpi	r25, 0x05	; 5
     dea:	90 f2       	brcs	.-92     	; 0xd90 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     df6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     df8:	08 95       	ret

00000dfa <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	06 2f       	mov	r16, r22
     e04:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	2e c0       	rjmp	.+92     	; 0xe66 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
     e0a:	98 81       	ld	r25, Y
     e0c:	91 11       	cpse	r25, r1
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     e10:	1f 5f       	subi	r17, 0xFF	; 255
     e12:	25 96       	adiw	r28, 0x05	; 5
     e14:	28 c0       	rjmp	.+80     	; 0xe66 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     e16:	2c 81       	ldd	r18, Y+4	; 0x04
     e18:	e9 81       	ldd	r30, Y+1	; 0x01
     e1a:	fa 81       	ldd	r31, Y+2	; 0x02
     e1c:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     e1e:	89 2f       	mov	r24, r25
     e20:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     e22:	85 30       	cpi	r24, 0x05	; 5
     e24:	10 f0       	brcs	.+4      	; 0xe2a <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	21 c0       	rjmp	.+66     	; 0xe6c <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	10 f0       	brcs	.+4      	; 0xe32 <Endpoint_ConfigureEndpointTable+0x38>
     e2e:	56 e0       	ldi	r21, 0x06	; 6
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <Endpoint_ConfigureEndpointTable+0x3a>
     e32:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     e34:	28 e0       	ldi	r18, 0x08	; 8
     e36:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     e3c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e42:	2e 17       	cp	r18, r30
     e44:	3f 07       	cpc	r19, r31
     e46:	d0 f3       	brcs	.-12     	; 0xe3c <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     e48:	42 95       	swap	r20
     e4a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e4c:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     e4e:	99 1f       	adc	r25, r25
     e50:	99 27       	eor	r25, r25
     e52:	99 1f       	adc	r25, r25
     e54:	62 95       	swap	r22
     e56:	66 0f       	add	r22, r22
     e58:	66 0f       	add	r22, r22
     e5a:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e5c:	69 2b       	or	r22, r25
     e5e:	96 df       	rcall	.-212    	; 0xd8c <Endpoint_ConfigureEndpoint_Prv>
     e60:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     e62:	d6 cf       	rjmp	.-84     	; 0xe10 <Endpoint_ConfigureEndpointTable+0x16>
     e64:	e0 cf       	rjmp	.-64     	; 0xe26 <Endpoint_ConfigureEndpointTable+0x2c>
     e66:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     e68:	d0 cf       	rjmp	.-96     	; 0xe0a <Endpoint_ConfigureEndpointTable+0x10>
     e6a:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     e6c:	df 91       	pop	r29
}
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     e76:	80 91 3c 02 	lds	r24, 0x023C
     e7a:	87 fd       	sbrc	r24, 7
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e7e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e82:	80 ff       	sbrs	r24, 0
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <Endpoint_ClearStatusStage+0x2c>
     e86:	12 c0       	rjmp	.+36     	; 0xeac <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e88:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e8c:	82 fd       	sbrc	r24, 2
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e90:	80 91 3b 02 	lds	r24, 0x023B
     e94:	81 11       	cpse	r24, r1
     e96:	f8 cf       	rjmp	.-16     	; 0xe88 <Endpoint_ClearStatusStage+0x12>
     e98:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
     e9e:	8b 77       	andi	r24, 0x7B	; 123
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ea2:	80 91 3b 02 	lds	r24, 0x023B
     ea6:	81 11       	cpse	r24, r1
     ea8:	ea cf       	rjmp	.-44     	; 0xe7e <Endpoint_ClearStatusStage+0x8>
     eaa:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eac:	80 91 e8 00 	lds	r24, 0x00E8
     eb0:	8e 77       	andi	r24, 0x7E	; 126
     eb2:	80 93 e8 00 	sts	0x00E8, r24
     eb6:	08 95       	ret

00000eb8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     eb8:	80 91 e4 00 	lds	r24, 0x00E4
     ebc:	90 91 e5 00 	lds	r25, 0x00E5
     ec0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ec2:	20 91 ec 00 	lds	r18, 0x00EC
     ec6:	20 fd       	sbrc	r18, 0
     ec8:	1f c0       	rjmp	.+62     	; 0xf08 <Endpoint_WaitUntilReady+0x50>
     eca:	23 c0       	rjmp	.+70     	; 0xf12 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ecc:	20 91 3b 02 	lds	r18, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ed0:	22 23       	and	r18, r18
     ed2:	91 f0       	breq	.+36     	; 0xef8 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ed4:	25 30       	cpi	r18, 0x05	; 5
     ed6:	91 f0       	breq	.+36     	; 0xefc <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ed8:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     edc:	25 fd       	sbrc	r18, 5
     ede:	10 c0       	rjmp	.+32     	; 0xf00 <Endpoint_WaitUntilReady+0x48>
     ee0:	20 91 e4 00 	lds	r18, 0x00E4
     ee4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	51 f3       	breq	.-44     	; 0xec2 <Endpoint_WaitUntilReady+0xa>
     eee:	41 50       	subi	r20, 0x01	; 1
     ef0:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ef2:	39 f7       	brne	.-50     	; 0xec2 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f08:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     f0c:	20 ff       	sbrs	r18, 0
     f0e:	de cf       	rjmp	.-68     	; 0xecc <Endpoint_WaitUntilReady+0x14>
     f10:	f9 cf       	rjmp	.-14     	; 0xf04 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f12:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     f16:	22 ff       	sbrs	r18, 2
     f18:	d9 cf       	rjmp	.-78     	; 0xecc <Endpoint_WaitUntilReady+0x14>
     f1a:	f4 cf       	rjmp	.-24     	; 0xf04 <Endpoint_WaitUntilReady+0x4c>

00000f1c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f1c:	41 d0       	rcall	.+130    	; 0xfa0 <USB_INT_DisableAllInterrupts>
     f1e:	43 d0       	rcall	.+134    	; 0xfa6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f20:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f24:	8f 77       	andi	r24, 0x7F	; 127
     f26:	80 93 d8 00 	sts	0x00D8, r24
     f2a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	80 93 d8 00 	sts	0x00D8, r24
     f34:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	80 93 d8 00 	sts	0x00D8, r24
     f3e:	84 e0       	ldi	r24, 0x04	; 4
     f40:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f46:	09 b4       	in	r0, 0x29	; 41
     f48:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f4a:	fd cf       	rjmp	.-6      	; 0xf46 <USB_ResetInterface+0x2a>
     f4c:	10 92 3b 02 	sts	0x023B, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     f50:	10 92 37 02 	sts	0x0237, r1
	USB_Device_ConfigurationNumber  = 0;
     f54:	10 92 39 02 	sts	0x0239, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     f58:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	14 df       	rcall	.-472    	; 0xd8c <Endpoint_ConfigureEndpoint_Prv>
     f64:	80 91 e1 00 	lds	r24, 0x00E1
     f68:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f6a:	80 93 e1 00 	sts	0x00E1, r24
     f6e:	80 91 e2 00 	lds	r24, 0x00E2
     f72:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f74:	80 93 e2 00 	sts	0x00E2, r24
     f78:	80 91 e2 00 	lds	r24, 0x00E2
     f7c:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     f7e:	80 93 e2 00 	sts	0x00E2, r24
     f82:	80 91 e0 00 	lds	r24, 0x00E0
     f86:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f88:	80 93 e0 00 	sts	0x00E0, r24
     f8c:	08 95       	ret

00000f8e <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     f8e:	e3 e6       	ldi	r30, 0x63	; 99
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8e 7f       	andi	r24, 0xFE	; 254
     f96:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 3a 02 	sts	0x023A, r24

	USB_ResetInterface();
     f9e:	be cf       	rjmp	.-132    	; 0xf1c <USB_ResetInterface>

00000fa0 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     fa0:	10 92 e2 00 	sts	0x00E2, r1
     fa4:	08 95       	ret

00000fa6 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     fa6:	10 92 e1 00 	sts	0x00E1, r1
     faa:	08 95       	ret

00000fac <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     fce:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     fd2:	82 ff       	sbrs	r24, 2
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     fd6:	80 91 e2 00 	lds	r24, 0x00E2
     fda:	82 ff       	sbrs	r24, 2
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     fde:	80 91 e1 00 	lds	r24, 0x00E1
     fe2:	8b 7f       	andi	r24, 0xFB	; 251
     fe4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     fe8:	ab da       	rcall	.-2730   	; 0x540 <EVENT_USB_Device_StartOfFrame>
     fea:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     fee:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ff0:	17 c0       	rjmp	.+46     	; 0x1020 <__vector_11+0x74>
     ff2:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ff6:	80 ff       	sbrs	r24, 0
     ff8:	13 c0       	rjmp	.+38     	; 0x1020 <__vector_11+0x74>
     ffa:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
    1000:	80 93 e2 00 	sts	0x00E2, r24
    1004:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1008:	80 61       	ori	r24, 0x10	; 16
    100a:	80 93 e2 00 	sts	0x00E2, r24
    100e:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1012:	80 62       	ori	r24, 0x20	; 32
    1014:	80 93 d8 00 	sts	0x00D8, r24
    1018:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    101a:	10 92 3b 02 	sts	0x023B, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    101e:	d7 d9       	rcall	.-3154   	; 0x3ce <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
    1020:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1024:	84 ff       	sbrs	r24, 4
    1026:	2f c0       	rjmp	.+94     	; 0x1086 <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1028:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    102c:	84 ff       	sbrs	r24, 4
    102e:	2b c0       	rjmp	.+86     	; 0x1086 <__vector_11+0xda>
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1038:	09 b4       	in	r0, 0x29	; 41
    103a:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    103c:	fd cf       	rjmp	.-6      	; 0x1038 <__vector_11+0x8c>
    103e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1042:	8f 7d       	andi	r24, 0xDF	; 223
    1044:	80 93 d8 00 	sts	0x00D8, r24
    1048:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    104c:	8f 7e       	andi	r24, 0xEF	; 239
    104e:	80 93 e1 00 	sts	0x00E1, r24
    1052:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1056:	8f 7e       	andi	r24, 0xEF	; 239
    1058:	80 93 e2 00 	sts	0x00E2, r24
    105c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	80 93 e2 00 	sts	0x00E2, r24
    1066:	80 91 37 02 	lds	r24, 0x0237
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    106a:	88 23       	and	r24, r24
    106c:	11 f0       	breq	.+4      	; 0x1072 <__vector_11+0xc6>
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1072:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1076:	87 ff       	sbrs	r24, 7
    1078:	02 c0       	rjmp	.+4      	; 0x107e <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <__vector_11+0xd4>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 3b 02 	sts	0x023B, r24
    1084:	a3 d9       	rcall	.-3258   	; 0x3cc <EVENT_USB_Device_Connect>
    1086:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    108a:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    108c:	27 c0       	rjmp	.+78     	; 0x10dc <__vector_11+0x130>
    108e:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1092:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1094:	23 c0       	rjmp	.+70     	; 0x10dc <__vector_11+0x130>
    1096:	80 91 e1 00 	lds	r24, 0x00E1
    109a:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    109c:	80 93 e1 00 	sts	0x00E1, r24
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	80 93 3b 02 	sts	0x023B, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    10a6:	10 92 37 02 	sts	0x0237, r1
    10aa:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    10b0:	80 93 e1 00 	sts	0x00E1, r24
    10b4:	80 91 e2 00 	lds	r24, 0x00E2
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    10ba:	80 93 e2 00 	sts	0x00E2, r24
    10be:	80 91 e2 00 	lds	r24, 0x00E2
    10c2:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    10c4:	80 93 e2 00 	sts	0x00E2, r24
    10c8:	42 e0       	ldi	r20, 0x02	; 2
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10ce:	5e de       	rcall	.-836    	; 0xd8c <Endpoint_ConfigureEndpoint_Prv>
    10d0:	80 91 f0 00 	lds	r24, 0x00F0
    10d4:	88 60       	ori	r24, 0x08	; 8
    10d6:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    10da:	b6 d1       	rcall	.+876    	; 0x1448 <USB_Event_Stub>
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	cf 93       	push	r28
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1122:	80 91 e9 00 	lds	r24, 0x00E9
    1126:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1128:	90 91 ec 00 	lds	r25, 0x00EC
    112c:	90 ff       	sbrs	r25, 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <__vector_12+0x36>
    1130:	90 e8       	ldi	r25, 0x80	; 128
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <__vector_12+0x38>
    1134:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1136:	c9 2f       	mov	r28, r25
    1138:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    113a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    113e:	80 91 f0 00 	lds	r24, 0x00F0
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1148:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    114a:	1c d0       	rcall	.+56     	; 0x1184 <USB_Device_ProcessControlRequest>
    114c:	10 92 e9 00 	sts	0x00E9, r1
    1150:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	80 93 f0 00 	sts	0x00F0, r24
    115a:	cf 70       	andi	r28, 0x0F	; 15
    115c:	c0 93 e9 00 	sts	0x00E9, r28
    1160:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1162:	ef 91       	pop	r30
    1164:	cf 91       	pop	r28
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	ac 97       	sbiw	r28, 0x2c	; 44
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    119a:	ec e3       	ldi	r30, 0x3C	; 60
    119c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    119e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    11a2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    11a4:	22 e0       	ldi	r18, 0x02	; 2
    11a6:	e4 34       	cpi	r30, 0x44	; 68
    11a8:	f2 07       	cpc	r31, r18
    11aa:	c9 f7       	brne	.-14     	; 0x119e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    11ac:	c1 d9       	rcall	.-3198   	; 0x530 <EVENT_USB_Device_ControlRequest>
    11ae:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11b2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    11b4:	31 c1       	rjmp	.+610    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    11b6:	80 91 3c 02 	lds	r24, 0x023C
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    11ba:	90 91 3d 02 	lds	r25, 0x023D

		switch (USB_ControlRequest.bRequest)
    11be:	95 30       	cpi	r25, 0x05	; 5
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <USB_Device_ProcessControlRequest+0x40>
    11c2:	87 c0       	rjmp	.+270    	; 0x12d2 <USB_Device_ProcessControlRequest+0x14e>
    11c4:	38 f4       	brcc	.+14     	; 0x11d4 <USB_Device_ProcessControlRequest+0x50>
    11c6:	91 30       	cpi	r25, 0x01	; 1
    11c8:	b1 f1       	breq	.+108    	; 0x1236 <USB_Device_ProcessControlRequest+0xb2>
    11ca:	70 f0       	brcs	.+28     	; 0x11e8 <USB_Device_ProcessControlRequest+0x64>
    11cc:	93 30       	cpi	r25, 0x03	; 3
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <USB_Device_ProcessControlRequest+0x4e>
    11d0:	23 c1       	rjmp	.+582    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    11d2:	31 c0       	rjmp	.+98     	; 0x1236 <USB_Device_ProcessControlRequest+0xb2>
    11d4:	98 30       	cpi	r25, 0x08	; 8
    11d6:	09 f4       	brne	.+2      	; 0x11da <USB_Device_ProcessControlRequest+0x56>
    11d8:	f3 c0       	rjmp	.+486    	; 0x13c0 <USB_Device_ProcessControlRequest+0x23c>
    11da:	99 30       	cpi	r25, 0x09	; 9
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <USB_Device_ProcessControlRequest+0x5c>
    11de:	ff c0       	rjmp	.+510    	; 0x13de <USB_Device_ProcessControlRequest+0x25a>
    11e0:	96 30       	cpi	r25, 0x06	; 6
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <USB_Device_ProcessControlRequest+0x62>
    11e4:	19 c1       	rjmp	.+562    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    11e6:	9b c0       	rjmp	.+310    	; 0x131e <USB_Device_ProcessControlRequest+0x19a>
    11e8:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <USB_Device_ProcessControlRequest+0x70>
    11ec:	82 38       	cpi	r24, 0x82	; 130
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <USB_Device_ProcessControlRequest+0x6e>
    11f0:	13 c1       	rjmp	.+550    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <USB_Device_ProcessControlRequest+0x80>
    11f4:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    11f8:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    11fc:	99 23       	and	r25, r25
    11fe:	89 f0       	breq	.+34     	; 0x1222 <USB_Device_ProcessControlRequest+0x9e>
    1200:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1202:	0f c0       	rjmp	.+30     	; 0x1222 <USB_Device_ProcessControlRequest+0x9e>
    1204:	80 91 40 02 	lds	r24, 0x0240
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1208:	90 91 41 02 	lds	r25, 0x0241
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	99 27       	eor	r25, r25
    1210:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1214:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1218:	85 fb       	bst	r24, 5
    121a:	88 27       	eor	r24, r24
    121c:	80 f9       	bld	r24, 0
    121e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1222:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1226:	97 7f       	andi	r25, 0xF7	; 247
    1228:	90 93 e8 00 	sts	0x00E8, r25
    122c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1230:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    1234:	d0 c0       	rjmp	.+416    	; 0x13d6 <USB_Device_ProcessControlRequest+0x252>
    1236:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1238:	19 f0       	breq	.+6      	; 0x1240 <USB_Device_ProcessControlRequest+0xbc>
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	09 f0       	breq	.+2      	; 0x1240 <USB_Device_ProcessControlRequest+0xbc>
    123e:	ec c0       	rjmp	.+472    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    1240:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1242:	21 f0       	breq	.+8      	; 0x124c <USB_Device_ProcessControlRequest+0xc8>
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	09 f0       	breq	.+2      	; 0x124a <USB_Device_ProcessControlRequest+0xc6>
    1248:	e7 c0       	rjmp	.+462    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    124a:	0b c0       	rjmp	.+22     	; 0x1262 <USB_Device_ProcessControlRequest+0xde>
    124c:	80 91 3e 02 	lds	r24, 0x023E
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	09 f0       	breq	.+2      	; 0x1256 <USB_Device_ProcessControlRequest+0xd2>
    1254:	e1 c0       	rjmp	.+450    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    1256:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1258:	09 f0       	breq	.+2      	; 0x125c <USB_Device_ProcessControlRequest+0xd8>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	80 93 39 02 	sts	0x0239, r24
    1260:	2f c0       	rjmp	.+94     	; 0x12c0 <USB_Device_ProcessControlRequest+0x13c>
    1262:	80 91 3e 02 	lds	r24, 0x023E

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1266:	81 11       	cpse	r24, r1
    1268:	2b c0       	rjmp	.+86     	; 0x12c0 <USB_Device_ProcessControlRequest+0x13c>
    126a:	80 91 40 02 	lds	r24, 0x0240
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    126e:	90 91 41 02 	lds	r25, 0x0241
    1272:	8f 70       	andi	r24, 0x0F	; 15
    1274:	99 27       	eor	r25, r25
    1276:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1278:	09 f4       	brne	.+2      	; 0x127c <USB_Device_ProcessControlRequest+0xf8>
    127a:	ce c0       	rjmp	.+412    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    127c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1280:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1284:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1286:	1c c0       	rjmp	.+56     	; 0x12c0 <USB_Device_ProcessControlRequest+0x13c>
    1288:	20 91 3d 02 	lds	r18, 0x023D
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    128c:	23 30       	cpi	r18, 0x03	; 3
    128e:	21 f4       	brne	.+8      	; 0x1298 <USB_Device_ProcessControlRequest+0x114>
    1290:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	12 c0       	rjmp	.+36     	; 0x12bc <USB_Device_ProcessControlRequest+0x138>
    1298:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    129c:	90 61       	ori	r25, 0x10	; 16
    129e:	90 93 eb 00 	sts	0x00EB, r25
    12a2:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <USB_Device_ProcessControlRequest+0x126>
    12a8:	22 0f       	add	r18, r18
    12aa:	8a 95       	dec	r24
    12ac:	ea f7       	brpl	.-6      	; 0x12a8 <USB_Device_ProcessControlRequest+0x124>
    12ae:	20 93 ea 00 	sts	0x00EA, r18
    12b2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    12b6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    12ba:	88 60       	ori	r24, 0x08	; 8
    12bc:	80 93 eb 00 	sts	0x00EB, r24
    12c0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12c4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	80 93 e8 00 	sts	0x00E8, r24
    12ce:	d3 dd       	rcall	.-1114   	; 0xe76 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    12d0:	a3 c0       	rjmp	.+326    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    12d2:	81 11       	cpse	r24, r1
    12d4:	a1 c0       	rjmp	.+322    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12d6:	80 91 3e 02 	lds	r24, 0x023E
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    12da:	90 91 3f 02 	lds	r25, 0x023F
    12de:	8f 77       	andi	r24, 0x7F	; 127
    12e0:	99 27       	eor	r25, r25
    12e2:	18 2f       	mov	r17, r24
    12e4:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    12e8:	90 78       	andi	r25, 0x80	; 128
    12ea:	98 2b       	or	r25, r24
    12ec:	90 93 e3 00 	sts	0x00E3, r25
    12f0:	80 91 e8 00 	lds	r24, 0x00E8
    12f4:	87 7f       	andi	r24, 0xF7	; 247
    12f6:	80 93 e8 00 	sts	0x00E8, r24
    12fa:	bd dd       	rcall	.-1158   	; 0xe76 <Endpoint_ClearStatusStage>
    12fc:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1300:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1302:	fc cf       	rjmp	.-8      	; 0x12fc <USB_Device_ProcessControlRequest+0x178>
    1304:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    1308:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    130a:	80 93 e3 00 	sts	0x00E3, r24
    130e:	11 23       	and	r17, r17
    1310:	11 f0       	breq	.+4      	; 0x1316 <USB_Device_ProcessControlRequest+0x192>
    1312:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <USB_Device_ProcessControlRequest+0x194>
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 3b 02 	sts	0x023B, r24
    131c:	7d c0       	rjmp	.+250    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    131e:	80 58       	subi	r24, 0x80	; 128
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	08 f0       	brcs	.+2      	; 0x1326 <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1324:	79 c0       	rjmp	.+242    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    1326:	80 91 3e 02 	lds	r24, 0x023E
    132a:	90 91 3f 02 	lds	r25, 0x023F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    132e:	8c 3d       	cpi	r24, 0xDC	; 220
    1330:	23 e0       	ldi	r18, 0x03	; 3
    1332:	92 07       	cpc	r25, r18
    1334:	71 f5       	brne	.+92     	; 0x1392 <USB_Device_ProcessControlRequest+0x20e>
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	8a 83       	std	Y+2, r24	; 0x02
    133a:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1340:	f8 94       	cli
    1342:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1344:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1346:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1348:	3e e0       	ldi	r19, 0x0E	; 14
    134a:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    134c:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    134e:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1350:	50 93 57 00 	sts	0x0057, r21
    1354:	e4 91       	lpm	r30, Z+
    1356:	20 ff       	sbrs	r18, 0
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <USB_Device_ProcessControlRequest+0x1dc>
    135a:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    135c:	ef 70       	andi	r30, 0x0F	; 15
    135e:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    1360:	ef 70       	andi	r30, 0x0F	; 15
    1362:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    1364:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    1366:	ea 30       	cpi	r30, 0x0A	; 10
    1368:	10 f0       	brcs	.+4      	; 0x136e <USB_Device_ProcessControlRequest+0x1ea>
    136a:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <USB_Device_ProcessControlRequest+0x1ec>
    136e:	c0 96       	adiw	r24, 0x30	; 48
    1370:	8d 93       	st	X+, r24
    1372:	9d 93       	st	X+, r25
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	24 31       	cpi	r18, 0x14	; 20
    1378:	49 f7       	brne	.-46     	; 0x134c <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    137a:	4f bf       	out	0x3f, r20	; 63
    137c:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1380:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1382:	80 93 e8 00 	sts	0x00E8, r24
    1386:	6a e2       	ldi	r22, 0x2A	; 42
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	fd db       	rcall	.-2054   	; 0xb8a <Endpoint_Write_Control_Stream_LE>
    1390:	11 c0       	rjmp	.+34     	; 0x13b4 <USB_Device_ProcessControlRequest+0x230>
    1392:	ae 01       	movw	r20, r28
    1394:	45 5d       	subi	r20, 0xD5	; 213
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	60 91 40 02 	lds	r22, 0x0240
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    139c:	58 db       	rcall	.-2384   	; 0xa4e <CALLBACK_USB_GetDescriptor>
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	d9 f1       	breq	.+118    	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    13a2:	20 91 e8 00 	lds	r18, 0x00E8
    13a6:	27 7f       	andi	r18, 0xF7	; 247
    13a8:	20 93 e8 00 	sts	0x00E8, r18
    13ac:	bc 01       	movw	r22, r24
    13ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13b2:	8b dc       	rcall	.-1770   	; 0xcca <Endpoint_Write_Control_PStream_LE>
    13b4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    13b8:	8b 77       	andi	r24, 0x7B	; 123
    13ba:	80 93 e8 00 	sts	0x00E8, r24
    13be:	2c c0       	rjmp	.+88     	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13c0:	80 38       	cpi	r24, 0x80	; 128
    13c2:	51 f5       	brne	.+84     	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
    13c4:	80 91 e8 00 	lds	r24, 0x00E8
    13c8:	87 7f       	andi	r24, 0xF7	; 247
    13ca:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    13ce:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d2:	80 93 f1 00 	sts	0x00F1, r24
    13d6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    13da:	8e 77       	andi	r24, 0x7E	; 126
    13dc:	76 cf       	rjmp	.-276    	; 0x12ca <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13de:	81 11       	cpse	r24, r1
    13e0:	1b c0       	rjmp	.+54     	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e2:	90 91 3e 02 	lds	r25, 0x023E
    13e6:	92 30       	cpi	r25, 0x02	; 2
    13e8:	b8 f4       	brcc	.+46     	; 0x1418 <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    13ea:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	80 93 e8 00 	sts	0x00E8, r24
    13f4:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13f8:	3e dd       	rcall	.-1412   	; 0xe76 <Endpoint_ClearStatusStage>
    13fa:	80 91 37 02 	lds	r24, 0x0237
    13fe:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1400:	04 c0       	rjmp	.+8      	; 0x140a <USB_Device_ProcessControlRequest+0x286>
    1402:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1406:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    1408:	02 c0       	rjmp	.+4      	; 0x140e <USB_Device_ProcessControlRequest+0x28a>
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <USB_Device_ProcessControlRequest+0x28c>
    140e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1410:	80 93 3b 02 	sts	0x023B, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1414:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EVENT_USB_Device_ConfigurationChanged>
    1418:	80 91 e8 00 	lds	r24, 0x00E8
    141c:	83 ff       	sbrs	r24, 3
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <USB_Device_ProcessControlRequest+0x2b0>
    1420:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    1424:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1426:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    142a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    142e:	80 62       	ori	r24, 0x20	; 32
    1430:	80 93 eb 00 	sts	0x00EB, r24
    1434:	ac 96       	adiw	r28, 0x2c	; 44
    1436:	0f b6       	in	r0, 0x3f	; 63
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	df 91       	pop	r29
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	08 95       	ret

00001448 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1448:	08 95       	ret

0000144a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    144a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    144c:	80 91 3b 02 	lds	r24, 0x023B
    1450:	88 23       	and	r24, r24
    1452:	a9 f0       	breq	.+42     	; 0x147e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1454:	80 91 e9 00 	lds	r24, 0x00E9
    1458:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    145a:	90 91 ec 00 	lds	r25, 0x00EC
    145e:	90 ff       	sbrs	r25, 0
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <USB_USBTask+0x1c>
    1462:	90 e8       	ldi	r25, 0x80	; 128
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <USB_USBTask+0x1e>
    1466:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1468:	c9 2f       	mov	r28, r25
    146a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    146c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1470:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1474:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1476:	86 de       	rcall	.-756    	; 0x1184 <USB_Device_ProcessControlRequest>
    1478:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    147a:	c0 93 e9 00 	sts	0x00E9, r28
    147e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1480:	08 95       	ret

00001482 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1488:	40 96       	adiw	r24, 0x10	; 16
    148a:	fc 01       	movw	r30, r24
    148c:	8b e0       	ldi	r24, 0x0B	; 11
    148e:	df 01       	movw	r26, r30
    1490:	1d 92       	st	X+, r1
    1492:	8a 95       	dec	r24
    1494:	e9 f7       	brne	.-6      	; 0x1490 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    149a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	a9 dc       	rcall	.-1710   	; 0xdfa <Endpoint_ConfigureEndpointTable>
    14a8:	88 23       	and	r24, r24
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <CDC_Device_ConfigureEndpoints+0x42>
    14ac:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    14ae:	ce 01       	movw	r24, r28
    14b0:	06 96       	adiw	r24, 0x06	; 6
    14b2:	a3 dc       	rcall	.-1722   	; 0xdfa <Endpoint_ConfigureEndpointTable>
    14b4:	88 23       	and	r24, r24
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <CDC_Device_ConfigureEndpoints+0x42>
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    14bc:	0b 96       	adiw	r24, 0x0b	; 11
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
	  return false;

	return true;
}
    14c2:	9b cc       	rjmp	.-1738   	; 0xdfa <Endpoint_ConfigureEndpointTable>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
	  return false;

	return true;
}
    14ca:	08 95       	ret

000014cc <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    14cc:	cf 93       	push	r28
    14ce:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    14d0:	20 91 3b 02 	lds	r18, 0x023B
    14d4:	24 30       	cpi	r18, 0x04	; 4
    14d6:	f1 f4       	brne	.+60     	; 0x1514 <CDC_Device_SendByte+0x48>
    14d8:	fc 01       	movw	r30, r24
    14da:	44 89       	ldd	r20, Z+20	; 0x14
    14dc:	55 89       	ldd	r21, Z+21	; 0x15
    14de:	66 89       	ldd	r22, Z+22	; 0x16
    14e0:	77 89       	ldd	r23, Z+23	; 0x17
    14e2:	45 2b       	or	r20, r21
    14e4:	46 2b       	or	r20, r22
    14e6:	47 2b       	or	r20, r23
    14e8:	a9 f0       	breq	.+42     	; 0x1514 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ea:	81 81       	ldd	r24, Z+1	; 0x01
    14ec:	8f 70       	andi	r24, 0x0F	; 15
    14ee:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14f2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    14f6:	85 ff       	sbrs	r24, 5
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14fa:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1502:	80 91 e8 00 	lds	r24, 0x00E8
    1506:	8e 77       	andi	r24, 0x7E	; 126
    1508:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    150c:	d5 dc       	rcall	.-1622   	; 0xeb8 <Endpoint_WaitUntilReady>
    150e:	88 23       	and	r24, r24
    1510:	a1 f3       	breq	.-24     	; 0x14fa <CDC_Device_SendByte+0x2e>
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <CDC_Device_SendByte+0x4a>
    1514:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1516:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1518:	08 95       	ret

0000151a <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    151a:	20 91 3b 02 	lds	r18, 0x023B
    151e:	24 30       	cpi	r18, 0x04	; 4
    1520:	29 f5       	brne	.+74     	; 0x156c <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1522:	fc 01       	movw	r30, r24
    1524:	44 89       	ldd	r20, Z+20	; 0x14
    1526:	55 89       	ldd	r21, Z+21	; 0x15
    1528:	66 89       	ldd	r22, Z+22	; 0x16
    152a:	77 89       	ldd	r23, Z+23	; 0x17
    152c:	45 2b       	or	r20, r21
    152e:	46 2b       	or	r20, r22
    1530:	47 2b       	or	r20, r23
    1532:	e1 f0       	breq	.+56     	; 0x156c <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1534:	81 81       	ldd	r24, Z+1	; 0x01
    1536:	8f 70       	andi	r24, 0x0F	; 15
    1538:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    153c:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1540:	81 11       	cpse	r24, r1
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1548:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    154c:	80 91 e8 00 	lds	r24, 0x00E8
    1550:	8e 77       	andi	r24, 0x7E	; 126
    1552:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1556:	95 fd       	sbrc	r25, 5
    1558:	f5 cf       	rjmp	.-22     	; 0x1544 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    155a:	ae dc       	rcall	.-1700   	; 0xeb8 <Endpoint_WaitUntilReady>
    155c:	81 11       	cpse	r24, r1
    155e:	07 c0       	rjmp	.+14     	; 0x156e <CDC_Device_Flush+0x54>
    1560:	90 91 e8 00 	lds	r25, 0x00E8
    1564:	9e 77       	andi	r25, 0x7E	; 126
    1566:	90 93 e8 00 	sts	0x00E8, r25
    156a:	08 95       	ret
    156c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    156e:	08 95       	ret

00001570 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1570:	20 91 3b 02 	lds	r18, 0x023B
    1574:	24 30       	cpi	r18, 0x04	; 4
    1576:	89 f4       	brne	.+34     	; 0x159a <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1578:	fc 01       	movw	r30, r24
    157a:	44 89       	ldd	r20, Z+20	; 0x14
    157c:	55 89       	ldd	r21, Z+21	; 0x15
    157e:	66 89       	ldd	r22, Z+22	; 0x16
    1580:	77 89       	ldd	r23, Z+23	; 0x17
    1582:	45 2b       	or	r20, r21
    1584:	46 2b       	or	r20, r22
    1586:	47 2b       	or	r20, r23
    1588:	41 f0       	breq	.+16     	; 0x159a <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    158a:	21 81       	ldd	r18, Z+1	; 0x01
    158c:	2f 70       	andi	r18, 0x0F	; 15
    158e:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1592:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1596:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    1598:	c0 cf       	rjmp	.-128    	; 0x151a <CDC_Device_Flush>
    159a:	08 95       	ret

0000159c <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    159c:	20 91 3b 02 	lds	r18, 0x023B
    15a0:	24 30       	cpi	r18, 0x04	; 4
    15a2:	19 f0       	breq	.+6      	; 0x15aa <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    15a4:	2f ef       	ldi	r18, 0xFF	; 255
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	24 c0       	rjmp	.+72     	; 0x15f2 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    15aa:	fc 01       	movw	r30, r24
    15ac:	44 89       	ldd	r20, Z+20	; 0x14
    15ae:	55 89       	ldd	r21, Z+21	; 0x15
    15b0:	66 89       	ldd	r22, Z+22	; 0x16
    15b2:	77 89       	ldd	r23, Z+23	; 0x17
    15b4:	45 2b       	or	r20, r21
    15b6:	46 2b       	or	r20, r22
    15b8:	47 2b       	or	r20, r23
    15ba:	a1 f3       	breq	.-24     	; 0x15a4 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15bc:	86 81       	ldd	r24, Z+6	; 0x06
    15be:	8f 70       	andi	r24, 0x0F	; 15
    15c0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15c4:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    15c8:	82 ff       	sbrs	r24, 2
    15ca:	ec cf       	rjmp	.-40     	; 0x15a4 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    15cc:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    15d0:	88 23       	and	r24, r24
    15d2:	21 f0       	breq	.+8      	; 0x15dc <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15d4:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    15dc:	2f ef       	ldi	r18, 0xFF	; 255
    15de:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    15e0:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    15e4:	81 11       	cpse	r24, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15e8:	80 91 e8 00 	lds	r24, 0x00E8
    15ec:	8b 77       	andi	r24, 0x7B	; 123
    15ee:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    15f2:	c9 01       	movw	r24, r18
    15f4:	08 95       	ret

000015f6 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    15f6:	08 95       	ret

000015f8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15fe:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1602:	83 ff       	sbrs	r24, 3
    1604:	a9 c0       	rjmp	.+338    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1606:	88 81       	ld	r24, Y
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	20 91 40 02 	lds	r18, 0x0240
    160e:	30 91 41 02 	lds	r19, 0x0241
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	09 f0       	breq	.+2      	; 0x161a <CDC_Device_ProcessControlRequest+0x22>
    1618:	9f c0       	rjmp	.+318    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
	  return;

	switch (USB_ControlRequest.bRequest)
    161a:	80 91 3d 02 	lds	r24, 0x023D
    161e:	81 32       	cpi	r24, 0x21	; 33
    1620:	61 f0       	breq	.+24     	; 0x163a <CDC_Device_ProcessControlRequest+0x42>
    1622:	20 f4       	brcc	.+8      	; 0x162c <CDC_Device_ProcessControlRequest+0x34>
    1624:	80 32       	cpi	r24, 0x20	; 32
    1626:	09 f0       	breq	.+2      	; 0x162a <CDC_Device_ProcessControlRequest+0x32>
    1628:	97 c0       	rjmp	.+302    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    162a:	3d c0       	rjmp	.+122    	; 0x16a6 <CDC_Device_ProcessControlRequest+0xae>
    162c:	82 32       	cpi	r24, 0x22	; 34
    162e:	09 f4       	brne	.+2      	; 0x1632 <CDC_Device_ProcessControlRequest+0x3a>
    1630:	6e c0       	rjmp	.+220    	; 0x170e <CDC_Device_ProcessControlRequest+0x116>
    1632:	83 32       	cpi	r24, 0x23	; 35
    1634:	09 f0       	breq	.+2      	; 0x1638 <CDC_Device_ProcessControlRequest+0x40>
    1636:	90 c0       	rjmp	.+288    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    1638:	7f c0       	rjmp	.+254    	; 0x1738 <CDC_Device_ProcessControlRequest+0x140>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    163a:	80 91 3c 02 	lds	r24, 0x023C
    163e:	81 3a       	cpi	r24, 0xA1	; 161
    1640:	09 f0       	breq	.+2      	; 0x1644 <CDC_Device_ProcessControlRequest+0x4c>
    1642:	8a c0       	rjmp	.+276    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1644:	80 91 e8 00 	lds	r24, 0x00E8
    1648:	87 7f       	andi	r24, 0xF7	; 247
    164a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    164e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1652:	80 ff       	sbrs	r24, 0
    1654:	fc cf       	rjmp	.-8      	; 0x164e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1656:	4c 89       	ldd	r20, Y+20	; 0x14
    1658:	5d 89       	ldd	r21, Y+21	; 0x15
    165a:	6e 89       	ldd	r22, Y+22	; 0x16
    165c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    165e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1662:	bb 27       	eor	r27, r27
    1664:	a7 2f       	mov	r26, r23
    1666:	96 2f       	mov	r25, r22
    1668:	85 2f       	mov	r24, r21
    166a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    166e:	cb 01       	movw	r24, r22
    1670:	aa 27       	eor	r26, r26
    1672:	bb 27       	eor	r27, r27
    1674:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    1678:	47 2f       	mov	r20, r23
    167a:	55 27       	eor	r21, r21
    167c:	66 27       	eor	r22, r22
    167e:	77 27       	eor	r23, r23
    1680:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1684:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1686:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    168a:	89 8d       	ldd	r24, Y+25	; 0x19
    168c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1690:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1692:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1696:	80 91 e8 00 	lds	r24, 0x00E8
    169a:	8e 77       	andi	r24, 0x7E	; 126
    169c:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    16a4:	e8 cb       	rjmp	.-2096   	; 0xe76 <Endpoint_ClearStatusStage>
    16a6:	80 91 3c 02 	lds	r24, 0x023C
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16aa:	81 32       	cpi	r24, 0x21	; 33
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <CDC_Device_ProcessControlRequest+0xb8>
    16ae:	54 c0       	rjmp	.+168    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    16b0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16b4:	87 7f       	andi	r24, 0xF7	; 247
    16b6:	80 93 e8 00 	sts	0x00E8, r24
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <CDC_Device_ProcessControlRequest+0xce>
    16bc:	80 91 3b 02 	lds	r24, 0x023B
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    16c0:	88 23       	and	r24, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <CDC_Device_ProcessControlRequest+0xce>
    16c4:	49 c0       	rjmp	.+146    	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    16c6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16ca:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    16cc:	f7 cf       	rjmp	.-18     	; 0x16bc <CDC_Device_ProcessControlRequest+0xc4>
    16ce:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    16d2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    16d6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    16da:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    16de:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    16e0:	2d 8b       	std	Y+21, r18	; 0x15
    16e2:	9e 8b       	std	Y+22, r25	; 0x16
    16e4:	8f 8b       	std	Y+23, r24	; 0x17
    16e6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16ea:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    16ec:	80 91 f1 00 	lds	r24, 0x00F1
    16f0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    16f2:	80 91 f1 00 	lds	r24, 0x00F1
    16f6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    16f8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16fc:	8b 77       	andi	r24, 0x7B	; 123
    16fe:	80 93 e8 00 	sts	0x00E8, r24
    1702:	b9 db       	rcall	.-2190   	; 0xe76 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1704:	ce 01       	movw	r24, r28
    1706:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1708:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    170a:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <EVENT_CDC_Device_LineEncodingChanged>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    170e:	80 91 3c 02 	lds	r24, 0x023C
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1712:	81 32       	cpi	r24, 0x21	; 33
    1714:	09 f5       	brne	.+66     	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    1716:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	80 93 e8 00 	sts	0x00E8, r24
    1720:	aa db       	rcall	.-2220   	; 0xe76 <Endpoint_ClearStatusStage>
    1722:	80 91 3e 02 	lds	r24, 0x023E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1726:	90 91 3f 02 	lds	r25, 0x023F

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    172a:	99 8b       	std	Y+17, r25	; 0x11
    172c:	88 8b       	std	Y+16, r24	; 0x10
    172e:	ce 01       	movw	r24, r28
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1734:	0c 94 8d 02 	jmp	0x51a	; 0x51a <EVENT_CDC_Device_ControLineStateChanged>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1738:	80 91 3c 02 	lds	r24, 0x023C
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    173c:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    173e:	61 f4       	brne	.+24     	; 0x1758 <CDC_Device_ProcessControlRequest+0x160>
    1740:	80 91 e8 00 	lds	r24, 0x00E8
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	80 93 e8 00 	sts	0x00E8, r24
    174a:	95 db       	rcall	.-2262   	; 0xe76 <Endpoint_ClearStatusStage>
    174c:	60 91 3e 02 	lds	r22, 0x023E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1750:	ce 01       	movw	r24, r28
    1752:	df 91       	pop	r29

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1754:	cf 91       	pop	r28
    1756:	4f cf       	rjmp	.-354    	; 0x15f6 <CDC_Device_Event_Stub>
    1758:	df 91       	pop	r29
			}

			break;
	}
}
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    175e:	6f 92       	push	r6
    1760:	7f 92       	push	r7
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	00 d0       	rcall	.+0      	; 0x177c <HID_Device_ProcessControlRequest+0x1e>
    177c:	1f 92       	push	r1
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1784:	ad b6       	in	r10, 0x3d	; 61
    1786:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1788:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    178c:	83 ff       	sbrs	r24, 3
    178e:	07 c1       	rjmp	.+526    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1790:	f7 01       	movw	r30, r14
    1792:	80 81       	ld	r24, Z
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	20 91 40 02 	lds	r18, 0x0240
    179a:	30 91 41 02 	lds	r19, 0x0241
    179e:	28 17       	cp	r18, r24
    17a0:	39 07       	cpc	r19, r25
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <HID_Device_ProcessControlRequest+0x48>
    17a4:	fc c0       	rjmp	.+504    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    17a6:	80 91 3d 02 	lds	r24, 0x023D
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <HID_Device_ProcessControlRequest+0x52>
    17ae:	9e c0       	rjmp	.+316    	; 0x18ec <HID_Device_ProcessControlRequest+0x18e>
    17b0:	30 f4       	brcc	.+12     	; 0x17be <HID_Device_ProcessControlRequest+0x60>
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	71 f0       	breq	.+28     	; 0x17d2 <HID_Device_ProcessControlRequest+0x74>
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	09 f0       	breq	.+2      	; 0x17bc <HID_Device_ProcessControlRequest+0x5e>
    17ba:	f1 c0       	rjmp	.+482    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    17bc:	d4 c0       	rjmp	.+424    	; 0x1966 <HID_Device_ProcessControlRequest+0x208>
    17be:	8a 30       	cpi	r24, 0x0A	; 10
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <HID_Device_ProcessControlRequest+0x66>
    17c2:	b9 c0       	rjmp	.+370    	; 0x1936 <HID_Device_ProcessControlRequest+0x1d8>
    17c4:	8b 30       	cpi	r24, 0x0B	; 11
    17c6:	09 f4       	brne	.+2      	; 0x17ca <HID_Device_ProcessControlRequest+0x6c>
    17c8:	a2 c0       	rjmp	.+324    	; 0x190e <HID_Device_ProcessControlRequest+0x1b0>
    17ca:	89 30       	cpi	r24, 0x09	; 9
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <HID_Device_ProcessControlRequest+0x72>
    17ce:	e7 c0       	rjmp	.+462    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    17d0:	4c c0       	rjmp	.+152    	; 0x186a <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17d2:	80 91 3c 02 	lds	r24, 0x023C
    17d6:	81 3a       	cpi	r24, 0xA1	; 161
    17d8:	09 f0       	breq	.+2      	; 0x17dc <HID_Device_ProcessControlRequest+0x7e>
    17da:	e1 c0       	rjmp	.+450    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    17dc:	8d b6       	in	r8, 0x3d	; 61
    17de:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    17e0:	1a 82       	std	Y+2, r1	; 0x02
    17e2:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    17e4:	80 91 3e 02 	lds	r24, 0x023E
    17e8:	10 91 3f 02 	lds	r17, 0x023F
    17ec:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    17ee:	f7 01       	movw	r30, r14
    17f0:	40 85       	ldd	r20, Z+8	; 0x08
    17f2:	8d b7       	in	r24, 0x3d	; 61
    17f4:	9e b7       	in	r25, 0x3e	; 62
    17f6:	84 1b       	sub	r24, r20
    17f8:	91 09       	sbc	r25, r1
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	9e bf       	out	0x3e, r25	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	8d bf       	out	0x3d, r24	; 61
    1804:	cd b6       	in	r12, 0x3d	; 61
    1806:	de b6       	in	r13, 0x3e	; 62
    1808:	ef ef       	ldi	r30, 0xFF	; 255
    180a:	ce 1a       	sub	r12, r30
    180c:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    180e:	36 01       	movw	r6, r12
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	c6 01       	movw	r24, r12
    1818:	ea d1       	rcall	.+980    	; 0x1bee <memset>
    181a:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    181c:	41 50       	subi	r20, 0x01	; 1
    181e:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1820:	0f 5f       	subi	r16, 0xFF	; 255
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	96 01       	movw	r18, r12
    1826:	be 01       	movw	r22, r28
    1828:	6d 5f       	subi	r22, 0xFD	; 253
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	c7 01       	movw	r24, r14
    182e:	0e 94 ac 02 	call	0x558	; 0x558 <CALLBACK_HID_Device_CreateHIDReport>
    1832:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1834:	26 81       	ldd	r18, Z+6	; 0x06
    1836:	37 81       	ldd	r19, Z+7	; 0x07
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	29 f0       	breq	.+10     	; 0x1848 <HID_Device_ProcessControlRequest+0xea>
    183e:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	b6 01       	movw	r22, r12
    1844:	c9 01       	movw	r24, r18
    1846:	ca d1       	rcall	.+916    	; 0x1bdc <memcpy>
    1848:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    184c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1850:	87 7f       	andi	r24, 0xF7	; 247
    1852:	80 93 e8 00 	sts	0x00E8, r24
    1856:	69 81       	ldd	r22, Y+1	; 0x01
    1858:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    185a:	c3 01       	movw	r24, r6
    185c:	96 d9       	rcall	.-3284   	; 0xb8a <Endpoint_Write_Control_Stream_LE>
    185e:	80 91 e8 00 	lds	r24, 0x00E8
    1862:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1864:	80 93 e8 00 	sts	0x00E8, r24
    1868:	39 c0       	rjmp	.+114    	; 0x18dc <HID_Device_ProcessControlRequest+0x17e>
    186a:	80 91 3c 02 	lds	r24, 0x023C
    186e:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1870:	09 f0       	breq	.+2      	; 0x1874 <HID_Device_ProcessControlRequest+0x116>
    1872:	95 c0       	rjmp	.+298    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    1874:	8d b6       	in	r8, 0x3d	; 61
    1876:	9e b6       	in	r9, 0x3e	; 62
    1878:	00 91 42 02 	lds	r16, 0x0242
    187c:	10 91 43 02 	lds	r17, 0x0243
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1880:	70 90 3e 02 	lds	r7, 0x023E
    1884:	60 90 3f 02 	lds	r6, 0x023F
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1888:	8d b7       	in	r24, 0x3d	; 61
    188a:	9e b7       	in	r25, 0x3e	; 62
    188c:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    188e:	91 0b       	sbc	r25, r17
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	9e bf       	out	0x3e, r25	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	8d bf       	out	0x3d, r24	; 61
    189a:	cd b6       	in	r12, 0x3d	; 61
    189c:	de b6       	in	r13, 0x3e	; 62
    189e:	ef ef       	ldi	r30, 0xFF	; 255
    18a0:	ce 1a       	sub	r12, r30
    18a2:	de 0a       	sbc	r13, r30
    18a4:	80 91 e8 00 	lds	r24, 0x00E8
    18a8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18aa:	80 93 e8 00 	sts	0x00E8, r24
    18ae:	b8 01       	movw	r22, r16
    18b0:	c6 01       	movw	r24, r12
    18b2:	cb d9       	rcall	.-3178   	; 0xc4a <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    18b4:	80 91 e8 00 	lds	r24, 0x00E8
    18b8:	8e 77       	andi	r24, 0x7E	; 126
    18ba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	71 10       	cpse	r7, r1
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <HID_Device_ProcessControlRequest+0x168>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	02 1b       	sub	r16, r18
    18ca:	13 0b       	sbc	r17, r19
    18cc:	2c 0d       	add	r18, r12
    18ce:	3d 1d       	adc	r19, r13
    18d0:	46 2d       	mov	r20, r6
    18d2:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    18d4:	67 2d       	mov	r22, r7
    18d6:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    18d8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    18dc:	88 2d       	mov	r24, r8
    18de:	99 2d       	mov	r25, r9
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	9e bf       	out	0x3e, r25	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	8d bf       	out	0x3d, r24	; 61
    18ea:	59 c0       	rjmp	.+178    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    18ec:	80 91 3c 02 	lds	r24, 0x023C
    18f0:	81 3a       	cpi	r24, 0xA1	; 161
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18f4:	54 c0       	rjmp	.+168    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    18f6:	80 91 e8 00 	lds	r24, 0x00E8
    18fa:	87 7f       	andi	r24, 0xF7	; 247
    18fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1900:	80 91 e8 00 	lds	r24, 0x00E8
    1904:	80 ff       	sbrs	r24, 0
    1906:	fc cf       	rjmp	.-8      	; 0x1900 <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1908:	f7 01       	movw	r30, r14
    190a:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    190c:	40 c0       	rjmp	.+128    	; 0x198e <HID_Device_ProcessControlRequest+0x230>
    190e:	80 91 3c 02 	lds	r24, 0x023C
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1912:	81 32       	cpi	r24, 0x21	; 33
    1914:	09 f0       	breq	.+2      	; 0x1918 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1916:	43 c0       	rjmp	.+134    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    1918:	80 91 e8 00 	lds	r24, 0x00E8
    191c:	87 7f       	andi	r24, 0xF7	; 247
    191e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1922:	a9 da       	rcall	.-2734   	; 0xe76 <Endpoint_ClearStatusStage>
    1924:	90 91 3e 02 	lds	r25, 0x023E
    1928:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    192a:	91 11       	cpse	r25, r1
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	f7 01       	movw	r30, r14
    1932:	81 87       	std	Z+9, r24	; 0x09
    1934:	34 c0       	rjmp	.+104    	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    1936:	80 91 3c 02 	lds	r24, 0x023C
    193a:	81 32       	cpi	r24, 0x21	; 33
    193c:	81 f5       	brne	.+96     	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    193e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1942:	87 7f       	andi	r24, 0xF7	; 247
    1944:	80 93 e8 00 	sts	0x00E8, r24
    1948:	96 da       	rcall	.-2772   	; 0xe76 <Endpoint_ClearStatusStage>
    194a:	80 91 3e 02 	lds	r24, 0x023E
    194e:	90 91 3f 02 	lds	r25, 0x023F
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1952:	88 27       	eor	r24, r24
    1954:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	3a 95       	dec	r19
    195c:	e1 f7       	brne	.-8      	; 0x1956 <HID_Device_ProcessControlRequest+0x1f8>
    195e:	f7 01       	movw	r30, r14
    1960:	95 87       	std	Z+13, r25	; 0x0d
    1962:	84 87       	std	Z+12, r24	; 0x0c
    1964:	1c c0       	rjmp	.+56     	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    1966:	80 91 3c 02 	lds	r24, 0x023C
    196a:	81 3a       	cpi	r24, 0xA1	; 161
    196c:	c1 f4       	brne	.+48     	; 0x199e <HID_Device_ProcessControlRequest+0x240>
    196e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1972:	87 7f       	andi	r24, 0xF7	; 247
    1974:	80 93 e8 00 	sts	0x00E8, r24
    1978:	80 91 e8 00 	lds	r24, 0x00E8
    197c:	80 ff       	sbrs	r24, 0
    197e:	fc cf       	rjmp	.-8      	; 0x1978 <HID_Device_ProcessControlRequest+0x21a>
    1980:	f7 01       	movw	r30, r14
    1982:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1984:	95 85       	ldd	r25, Z+13	; 0x0d
    1986:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1988:	87 95       	ror	r24
    198a:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    198c:	87 95       	ror	r24
    198e:	80 93 f1 00 	sts	0x00F1, r24
    1992:	80 91 e8 00 	lds	r24, 0x00E8
    1996:	8e 77       	andi	r24, 0x7E	; 126
    1998:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    199c:	6c da       	rcall	.-2856   	; 0xe76 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	be be       	out	0x3e, r11	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
			}

			break;
	}
}
    19ac:	0f 90       	pop	r0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	bf 90       	pop	r11
    19c0:	af 90       	pop	r10
    19c2:	9f 90       	pop	r9
    19c4:	8f 90       	pop	r8
    19c6:	7f 90       	pop	r7
    19c8:	6f 90       	pop	r6
    19ca:	08 95       	ret

000019cc <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19cc:	9c 01       	movw	r18, r24
    19ce:	27 5f       	subi	r18, 0xF7	; 247
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	f9 01       	movw	r30, r18
    19d4:	27 e0       	ldi	r18, 0x07	; 7
    19d6:	df 01       	movw	r26, r30
    19d8:	1d 92       	st	X+, r1
    19da:	2a 95       	dec	r18
    19dc:	e9 f7       	brne	.-6      	; 0x19d8 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	fc 01       	movw	r30, r24
    19e2:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    19e4:	24 ef       	ldi	r18, 0xF4	; 244
    19e6:	31 e0       	ldi	r19, 0x01	; 1
    19e8:	35 87       	std	Z+13, r19	; 0x0d
    19ea:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    19ec:	23 e0       	ldi	r18, 0x03	; 3
    19ee:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	02 ca       	rjmp	.-3068   	; 0xdfa <Endpoint_ConfigureEndpointTable>

000019f6 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19f6:	4f 92       	push	r4
    19f8:	5f 92       	push	r5
    19fa:	6f 92       	push	r6
    19fc:	7f 92       	push	r7
    19fe:	8f 92       	push	r8
    1a00:	9f 92       	push	r9
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <HID_Device_USBTask+0x22>
    1a18:	1f 92       	push	r1
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1a20:	ad b6       	in	r10, 0x3d	; 61
    1a22:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a24:	80 91 3b 02 	lds	r24, 0x023B
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <HID_Device_USBTask+0x38>
    1a2c:	8f c0       	rjmp	.+286    	; 0x1b4c <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a2e:	80 91 e4 00 	lds	r24, 0x00E4
    1a32:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1a36:	f7 01       	movw	r30, r14
    1a38:	22 85       	ldd	r18, Z+10	; 0x0a
    1a3a:	33 85       	ldd	r19, Z+11	; 0x0b
    1a3c:	28 17       	cp	r18, r24
    1a3e:	39 07       	cpc	r19, r25
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <HID_Device_USBTask+0x4e>
    1a42:	84 c0       	rjmp	.+264    	; 0x1b4c <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a44:	81 81       	ldd	r24, Z+1	; 0x01
    1a46:	8f 70       	andi	r24, 0x0F	; 15
    1a48:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1a50:	85 ff       	sbrs	r24, 5
    1a52:	7c c0       	rjmp	.+248    	; 0x1b4c <HID_Device_USBTask+0x156>
    1a54:	6d b6       	in	r6, 0x3d	; 61
    1a56:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a58:	40 85       	ldd	r20, Z+8	; 0x08
    1a5a:	8d b7       	in	r24, 0x3d	; 61
    1a5c:	9e b7       	in	r25, 0x3e	; 62
    1a5e:	84 1b       	sub	r24, r20
    1a60:	91 09       	sbc	r25, r1
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	9e bf       	out	0x3e, r25	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	8d bf       	out	0x3d, r24	; 61
    1a6c:	cd b6       	in	r12, 0x3d	; 61
    1a6e:	de b6       	in	r13, 0x3e	; 62
    1a70:	ef ef       	ldi	r30, 0xFF	; 255
    1a72:	ce 1a       	sub	r12, r30
    1a74:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    1a76:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1a78:	1a 82       	std	Y+2, r1	; 0x02
    1a7a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1a7c:	46 01       	movw	r8, r12
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	c6 01       	movw	r24, r12
    1a86:	b3 d0       	rcall	.+358    	; 0x1bee <memset>
    1a88:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1a8a:	0f 5f       	subi	r16, 0xFF	; 255
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	96 01       	movw	r18, r12
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	be 01       	movw	r22, r28
    1a94:	6d 5f       	subi	r22, 0xFD	; 253
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	c7 01       	movw	r24, r14
    1a9a:	0e 94 ac 02 	call	0x558	; 0x558 <CALLBACK_HID_Device_CreateHIDReport>
    1a9e:	58 2e       	mov	r5, r24
    1aa0:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1aa2:	84 85       	ldd	r24, Z+12	; 0x0c
    1aa4:	95 85       	ldd	r25, Z+13	; 0x0d
    1aa6:	89 2b       	or	r24, r25
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <HID_Device_USBTask+0xc0>
    1aaa:	01 e0       	ldi	r16, 0x01	; 1
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	86 85       	ldd	r24, Z+14	; 0x0e
    1ab0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ab2:	89 2b       	or	r24, r25
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <HID_Device_USBTask+0xc4>
    1ab6:	00 e0       	ldi	r16, 0x00	; 0
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
    1aba:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1abc:	c6 80       	ldd	r12, Z+6	; 0x06
    1abe:	d7 80       	ldd	r13, Z+7	; 0x07
    1ac0:	c1 14       	cp	r12, r1
    1ac2:	d1 04       	cpc	r13, r1
    1ac4:	89 f0       	breq	.+34     	; 0x1ae8 <HID_Device_USBTask+0xf2>
    1ac6:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1ac8:	5a 81       	ldd	r21, Y+2	; 0x02
    1aca:	b6 01       	movw	r22, r12
    1acc:	c4 01       	movw	r24, r8
    1ace:	79 d0       	rcall	.+242    	; 0x1bc2 <memcmp>
    1ad0:	44 24       	eor	r4, r4
    1ad2:	43 94       	inc	r4
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <HID_Device_USBTask+0xe4>
    1ad8:	41 2c       	mov	r4, r1
    1ada:	f7 01       	movw	r30, r14
    1adc:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	b4 01       	movw	r22, r8
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	7b d0       	rcall	.+246    	; 0x1bdc <memcpy>
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <HID_Device_USBTask+0xf4>
    1ae8:	41 2c       	mov	r4, r1
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1aee:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1af0:	f9 f0       	breq	.+62     	; 0x1b30 <HID_Device_USBTask+0x13a>
    1af2:	51 10       	cpse	r5, r1
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <HID_Device_USBTask+0x108>
    1af6:	41 10       	cpse	r4, r1
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <HID_Device_USBTask+0x108>
    1afa:	00 ff       	sbrs	r16, 0
    1afc:	19 c0       	rjmp	.+50     	; 0x1b30 <HID_Device_USBTask+0x13a>
    1afe:	f7 01       	movw	r30, r14
    1b00:	84 85       	ldd	r24, Z+12	; 0x0c
    1b02:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1b04:	97 87       	std	Z+15, r25	; 0x0f
    1b06:	86 87       	std	Z+14, r24	; 0x0e
    1b08:	81 81       	ldd	r24, Z+1	; 0x01
    1b0a:	8f 70       	andi	r24, 0x0F	; 15
    1b0c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	81 11       	cpse	r24, r1
    1b14:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1b18:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	c4 01       	movw	r24, r8
    1b22:	0e 94 78 05 	call	0xaf0	; 0xaf0 <Endpoint_Write_Stream_LE>
    1b26:	80 91 e8 00 	lds	r24, 0x00E8
    1b2a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b2c:	80 93 e8 00 	sts	0x00E8, r24
    1b30:	80 91 e4 00 	lds	r24, 0x00E4
    1b34:	90 91 e5 00 	lds	r25, 0x00E5
    1b38:	f7 01       	movw	r30, r14
    1b3a:	93 87       	std	Z+11, r25	; 0x0b
    1b3c:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1b3e:	86 2d       	mov	r24, r6
    1b40:	97 2d       	mov	r25, r7
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	9e bf       	out	0x3e, r25	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	8d bf       	out	0x3d, r24	; 61
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	be be       	out	0x3e, r11	; 62
	}
}
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	ad be       	out	0x3d, r10	; 61
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	7f 90       	pop	r7
    1b76:	6f 90       	pop	r6
    1b78:	5f 90       	pop	r5
    1b7a:	4f 90       	pop	r4
    1b7c:	08 95       	ret

00001b7e <__udivmodsi4>:
    1b7e:	a1 e2       	ldi	r26, 0x21	; 33
    1b80:	1a 2e       	mov	r1, r26
    1b82:	aa 1b       	sub	r26, r26
    1b84:	bb 1b       	sub	r27, r27
    1b86:	fd 01       	movw	r30, r26
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <__udivmodsi4_ep>

00001b8a <__udivmodsi4_loop>:
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	ee 1f       	adc	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	a2 17       	cp	r26, r18
    1b94:	b3 07       	cpc	r27, r19
    1b96:	e4 07       	cpc	r30, r20
    1b98:	f5 07       	cpc	r31, r21
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__udivmodsi4_ep>
    1b9c:	a2 1b       	sub	r26, r18
    1b9e:	b3 0b       	sbc	r27, r19
    1ba0:	e4 0b       	sbc	r30, r20
    1ba2:	f5 0b       	sbc	r31, r21

00001ba4 <__udivmodsi4_ep>:
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	1a 94       	dec	r1
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <__udivmodsi4_loop>
    1bb0:	60 95       	com	r22
    1bb2:	70 95       	com	r23
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	bd 01       	movw	r22, r26
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <memcmp>:
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <memcmp+0xe>
    1bc8:	8d 91       	ld	r24, X+
    1bca:	01 90       	ld	r0, Z+
    1bcc:	80 19       	sub	r24, r0
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <memcmp+0x16>
    1bd0:	41 50       	subi	r20, 0x01	; 1
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	c8 f7       	brcc	.-14     	; 0x1bc8 <memcmp+0x6>
    1bd6:	88 1b       	sub	r24, r24
    1bd8:	99 0b       	sbc	r25, r25
    1bda:	08 95       	ret

00001bdc <memcpy>:
    1bdc:	fb 01       	movw	r30, r22
    1bde:	dc 01       	movw	r26, r24
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <memcpy+0xa>
    1be2:	01 90       	ld	r0, Z+
    1be4:	0d 92       	st	X+, r0
    1be6:	41 50       	subi	r20, 0x01	; 1
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	d8 f7       	brcc	.-10     	; 0x1be2 <memcpy+0x6>
    1bec:	08 95       	ret

00001bee <memset>:
    1bee:	dc 01       	movw	r26, r24
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <memset+0x6>
    1bf2:	6d 93       	st	X+, r22
    1bf4:	41 50       	subi	r20, 0x01	; 1
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	e0 f7       	brcc	.-8      	; 0x1bf2 <memset+0x4>
    1bfa:	08 95       	ret

00001bfc <_exit>:
    1bfc:	f8 94       	cli

00001bfe <__stop_program>:
    1bfe:	ff cf       	rjmp	.-2      	; 0x1bfe <__stop_program>
