
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000027ea  0000287e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  00800136  00800136  000028b4  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  0000364c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003f6b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008c8  00000000  00000000  00003f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e6e4  00000000  00000000  00004855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003afd  00000000  00000000  00012f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000594f  00000000  00000000  00016a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015d8  00000000  00000000  0001c388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000496a  00000000  00000000  0001d960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008871  00000000  00000000  000222ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a68  00000000  00000000  0002ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	41 c3       	rjmp	.+1666   	; 0x6e0 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 10 00 01        !....".........

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 0f 09 01 81 02 95 0f     .u...&..........
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff 03 19 00 2a ff 03 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	04 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	ea ee       	ldi	r30, 0xEA	; 234
     2fc:	f7 e2       	ldi	r31, 0x27	; 39
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a0 31       	cpi	r26, 0x10	; 16
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	6c d0       	rcall	.+216    	; 0x3f4 <main>
				break;
     31c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <LRingBuffer_Remove.constprop.2>:
     322:	e6 e3       	ldi	r30, 0x36	; 54
				break;
     324:	f1 e0       	ldi	r31, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	5f b7       	in	r21, 0x3f	; 63
     328:	f8 94       	cli
     32a:	20 81       	ld	r18, Z

				if (ParserData->UsingReportIDs)
     32c:	31 81       	ldd	r19, Z+1	; 0x01
     32e:	21 15       	cp	r18, r1
     330:	31 05       	cpc	r19, r1
     332:	19 f0       	breq	.+6      	; 0x33a <LRingBuffer_Remove.constprop.2+0x18>
     334:	44 81       	ldd	r20, Z+4	; 0x04
     336:	41 11       	cpse	r20, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	04 c0       	rjmp	.+8      	; 0x342 <LRingBuffer_Remove.constprop.2+0x20>
     33a:	5f bf       	out	0x3f, r21	; 63
     33c:	2f ef       	ldi	r18, 0xFF	; 255
     33e:	3f ef       	ldi	r19, 0xFF	; 255
     340:	11 c0       	rjmp	.+34     	; 0x364 <LRingBuffer_Remove.constprop.2+0x42>
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	84 1b       	sub	r24, r20
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	91 09       	sbc	r25, r1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	97 ff       	sbrs	r25, 7
     34c:	03 c0       	rjmp	.+6      	; 0x354 <LRingBuffer_Remove.constprop.2+0x32>
     34e:	63 81       	ldd	r22, Z+3	; 0x03
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	86 0f       	add	r24, r22
     352:	91 1d       	adc	r25, r1
     354:	d9 01       	movw	r26, r18
     356:	a8 0f       	add	r26, r24
     358:	b9 1f       	adc	r27, r25
     35a:	2c 91       	ld	r18, X
     35c:	41 50       	subi	r20, 0x01	; 1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	44 83       	std	Z+4, r20	; 0x04
     360:	5f bf       	out	0x3f, r21	; 63
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	c9 01       	movw	r24, r18
     366:	08 95       	ret

00000368 <LRingBuffer_Append.constprop.4>:
     368:	e6 e3       	ldi	r30, 0x36	; 54
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	4f b7       	in	r20, 0x3f	; 63
     36e:	f8 94       	cli
     370:	20 81       	ld	r18, Z
     372:	31 81       	ldd	r19, Z+1	; 0x01
     374:	21 15       	cp	r18, r1
     376:	31 05       	cpc	r19, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	09 f4       	brne	.+2      	; 0x37c <LRingBuffer_Append.constprop.4+0x14>
     37a:	1d c0       	rjmp	.+58     	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     37c:	82 81       	ldd	r24, Z+2	; 0x02
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	54 81       	ldd	r21, Z+4	; 0x04
     382:	85 1b       	sub	r24, r21
     384:	91 09       	sbc	r25, r1
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	97 ff       	sbrs	r25, 7
     38a:	03 c0       	rjmp	.+6      	; 0x392 <LRingBuffer_Append.constprop.4+0x2a>
     38c:	53 81       	ldd	r21, Z+3	; 0x03
     38e:	85 0f       	add	r24, r21
     390:	91 1d       	adc	r25, r1
     392:	d9 01       	movw	r26, r18
     394:	a8 0f       	add	r26, r24
     396:	b9 1f       	adc	r27, r25
     398:	6c 93       	st	X, r22
     39a:	84 81       	ldd	r24, Z+4	; 0x04
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	89 13       	cpse	r24, r25
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <LRingBuffer_Append.constprop.4+0x4a>
     3a2:	92 81       	ldd	r25, Z+2	; 0x02
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	91 11       	cpse	r25, r1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <LRingBuffer_Append.constprop.4+0x42>
     3a8:	82 83       	std	Z+2, r24	; 0x02
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	81 50       	subi	r24, 0x01	; 1
     3ae:	82 83       	std	Z+2, r24	; 0x02
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	4f bf       	out	0x3f, r20	; 63
     3b8:	08 95       	ret

000003ba <SetupHardware>:
     3ba:	84 b7       	in	r24, 0x34	; 52
     3bc:	87 7f       	andi	r24, 0xF7	; 247

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	84 bf       	out	0x34, r24	; 52
     3c0:	88 e1       	ldi	r24, 0x18	; 24
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	80 93 60 00 	sts	0x0060, r24
     3ca:	10 92 60 00 	sts	0x0060, r1
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <SerialInitHID>
     3d4:	8a b1       	in	r24, 0x0a	; 10
     3d6:	80 63       	ori	r24, 0x30	; 48
     3d8:	8a b9       	out	0x0a, r24	; 10
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	80 63       	ori	r24, 0x30	; 48
     3de:	8b b9       	out	0x0b, r24	; 11
     3e0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <USB_Init>
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	85 bd       	out	0x25, r24	; 37
     3e8:	5f 9a       	sbi	0x0b, 7	; 11
     3ea:	57 9a       	sbi	0x0a, 7	; 10
     3ec:	20 98       	cbi	0x04, 0	; 4
     3ee:	25 98       	cbi	0x04, 5	; 4
     3f0:	2d 9a       	sbi	0x05, 5	; 5
     3f2:	08 95       	ret

000003f4 <main>:
     3f4:	e6 e3       	ldi	r30, 0x36	; 54
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	2f b7       	in	r18, 0x3f	; 63
				break;
     3fa:	f8 94       	cli
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	8b e3       	ldi	r24, 0x3B	; 59
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	12 82       	std	Z+2, r1	; 0x02
     406:	80 e8       	ldi	r24, 0x80	; 128
     408:	83 83       	std	Z+3, r24	; 0x03

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	14 82       	std	Z+4, r1	; 0x04
     40c:	2f bf       	out	0x3f, r18	; 63
     40e:	10 92 cf 01 	sts	0x01CF, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     412:	88 ef       	ldi	r24, 0xF8	; 248
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	9b d7       	rcall	.+3894   	; 0x134e <NHPreset>
     418:	10 92 d9 01 	sts	0x01D9, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	a2 d3       	rcall	.+1860   	; 0xb62 <HIDreset>
     41e:	b4 d3       	rcall	.+1896   	; 0xb88 <avrispReset>
     420:	cc df       	rcall	.-104    	; 0x3ba <SetupHardware>
     422:	78 94       	sei
     424:	80 91 d2 01 	lds	r24, 0x01D2

					while (CurrCollectionPath->Parent != NULL)
     428:	81 11       	cpse	r24, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	06 c0       	rjmp	.+12     	; 0x438 <main+0x44>
     42c:	83 b1       	in	r24, 0x03	; 3
     42e:	80 72       	andi	r24, 0x20	; 32
     430:	83 b9       	out	0x03, r24	; 3
     432:	81 11       	cpse	r24, r1
     434:	01 c0       	rjmp	.+2      	; 0x438 <main+0x44>
     436:	d0 d2       	rcall	.+1440   	; 0x9d8 <clearHIDReports>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 c5 10 	call	0x218a	; 0x218a <CDC_Device_ReceiveByte>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	97 fd       	sbrc	r25, 7
     442:	1b c0       	rjmp	.+54     	; 0x47a <main+0x86>
     444:	40 91 24 01 	lds	r20, 0x0124
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	50 91 25 01 	lds	r21, 0x0125
     44c:	60 91 26 01 	lds	r22, 0x0126
				}

				CurrCollectionPath->Type       = ReportItemData;
     450:	70 91 27 01 	lds	r23, 0x0127
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     454:	41 30       	cpi	r20, 0x01	; 1
     456:	51 05       	cpc	r21, r1
     458:	61 05       	cpc	r22, r1
     45a:	71 05       	cpc	r23, r1
     45c:	11 f4       	brne	.+4      	; 0x462 <main+0x6e>
     45e:	af d6       	rcall	.+3422   	; 0x11be <avrisp>

				if (UsageListSize)
     460:	0c c0       	rjmp	.+24     	; 0x47a <main+0x86>
     462:	5c 98       	cbi	0x0b, 4	; 11
     464:	90 91 d9 01 	lds	r25, 0x01D9
     468:	9c 60       	ori	r25, 0x0C	; 12
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	90 93 d9 01 	sts	0x01D9, r25
     46e:	90 91 c8 00 	lds	r25, 0x00C8
     472:	95 ff       	sbrs	r25, 5
     474:	fc cf       	rjmp	.-8      	; 0x46e <main+0x7a>
     476:	80 93 ce 00 	sts	0x00CE, r24
     47a:	2f b7       	in	r18, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	80 91 36 01 	lds	r24, 0x0136

					for (uint8_t i = 1; i < UsageListSize; i++)
     482:	90 91 37 01 	lds	r25, 0x0137
					  UsageList[i - 1] = UsageList[i];
     486:	89 2b       	or	r24, r25
     488:	19 f0       	breq	.+6      	; 0x490 <main+0x9c>
     48a:	80 91 3a 01 	lds	r24, 0x013A

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48e:	01 c0       	rjmp	.+2      	; 0x492 <main+0x9e>
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	2f bf       	out	0x3f, r18	; 63
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	00 97       	sbiw	r24, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	19 f4       	brne	.+6      	; 0x4a0 <main+0xac>
     49a:	a8 99       	sbic	0x15, 0	; 21
     49c:	89 c0       	rjmp	.+274    	; 0x5b0 <main+0x1bc>
     49e:	09 c1       	rjmp	.+530    	; 0x6b2 <main+0x2be>
     4a0:	5d 98       	cbi	0x0b, 5	; 11
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	20 91 d9 01 	lds	r18, 0x01D9
     4a6:	23 60       	ori	r18, 0x03	; 3
     4a8:	20 93 d9 01 	sts	0x01D9, r18
     4ac:	20 91 11 01 	lds	r18, 0x0111
     4b0:	2f 70       	andi	r18, 0x0F	; 15
     4b2:	20 93 e9 00 	sts	0x00E9, r18
     4b6:	20 91 e8 00 	lds	r18, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	20 ff       	sbrs	r18, 0
     4bc:	ee cf       	rjmp	.-36     	; 0x49a <main+0xa6>
     4be:	80 34       	cpi	r24, 0x40	; 64
     4c0:	91 05       	cpc	r25, r1
     4c2:	10 f0       	brcs	.+4      	; 0x4c8 <main+0xd4>
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	18 2f       	mov	r17, r24
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
     4ce:	6d c0       	rjmp	.+218    	; 0x5aa <main+0x1b6>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	80 91 24 01 	lds	r24, 0x0124
     4d4:	90 91 25 01 	lds	r25, 0x0125
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	a0 91 26 01 	lds	r26, 0x0126
     4dc:	b0 91 27 01 	lds	r27, 0x0127
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	20 91 cf 01 	lds	r18, 0x01CF
     4e4:	22 23       	and	r18, r18
     4e6:	29 f0       	breq	.+10     	; 0x4f2 <main+0xfe>
     4e8:	80 91 cf 01 	lds	r24, 0x01CF
     4ec:	81 11       	cpse	r24, r1
     4ee:	11 c0       	rjmp	.+34     	; 0x512 <main+0x11e>
     4f0:	16 c0       	rjmp	.+44     	; 0x51e <main+0x12a>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	91 05       	cpc	r25, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	a1 05       	cpc	r26, r1
     4f8:	b1 05       	cpc	r27, r1
     4fa:	28 f0       	brcs	.+10     	; 0x506 <main+0x112>
     4fc:	81 15       	cp	r24, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	92 4c       	sbci	r25, 0xC2	; 194
     500:	a1 40       	sbci	r26, 0x01	; 1
     502:	b1 05       	cpc	r27, r1
     504:	89 f7       	brne	.-30     	; 0x4e8 <main+0xf4>

					if (UsageListSize)
     506:	93 b1       	in	r25, 0x03	; 3
     508:	90 72       	andi	r25, 0x20	; 32
     50a:	93 b9       	out	0x03, r25	; 3
     50c:	99 23       	and	r25, r25
     50e:	61 f3       	breq	.-40     	; 0x4e8 <main+0xf4>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	47 c0       	rjmp	.+142    	; 0x5a0 <main+0x1ac>
     512:	80 91 d9 01 	lds	r24, 0x01D9
     516:	80 63       	ori	r24, 0x30	; 48
     518:	80 93 d9 01 	sts	0x01D9, r24
     51c:	01 c0       	rjmp	.+2      	; 0x520 <main+0x12c>
     51e:	5c d2       	rcall	.+1208   	; 0x9d8 <clearHIDReports>
     520:	80 91 20 01 	lds	r24, 0x0120
     524:	80 fd       	sbrc	r24, 0

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	0c c0       	rjmp	.+24     	; 0x540 <main+0x14c>
     528:	80 91 cf 01 	lds	r24, 0x01CF
						  UsageList[i - 1] = UsageList[i];
     52c:	88 23       	and	r24, r24
     52e:	41 f0       	breq	.+16     	; 0x540 <main+0x14c>
     530:	86 e3       	ldi	r24, 0x36	; 54

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	f6 de       	rcall	.-532    	; 0x322 <LRingBuffer_Remove.constprop.2>
     536:	80 91 cf 01 	lds	r24, 0x01CF
     53a:	81 11       	cpse	r24, r1
     53c:	2d c0       	rjmp	.+90     	; 0x598 <main+0x1a4>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	34 c0       	rjmp	.+104    	; 0x5a8 <main+0x1b4>
     540:	7f b7       	in	r23, 0x3f	; 63
     542:	f8 94       	cli
     544:	20 91 36 01 	lds	r18, 0x0136
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	30 91 37 01 	lds	r19, 0x0137
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	41 f0       	breq	.+16     	; 0x562 <main+0x16e>
     552:	40 91 3a 01 	lds	r20, 0x013A
     556:	44 23       	and	r20, r20
     558:	21 f0       	breq	.+8      	; 0x562 <main+0x16e>
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	14 16       	cp	r1, r20
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	15 06       	cpc	r1, r21
     560:	24 f0       	brlt	.+8      	; 0x56a <main+0x176>
     562:	7f bf       	out	0x3f, r23	; 63
     564:	6f ef       	ldi	r22, 0xFF	; 255
     566:	7f ef       	ldi	r23, 0xFF	; 255
     568:	10 c0       	rjmp	.+32     	; 0x58a <main+0x196>
     56a:	80 91 38 01 	lds	r24, 0x0138
     56e:	90 e0       	ldi	r25, 0x00	; 0
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	84 1b       	sub	r24, r20
     572:	95 0b       	sbc	r25, r21
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	97 ff       	sbrs	r25, 7
     576:	04 c0       	rjmp	.+8      	; 0x580 <main+0x18c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	40 91 39 01 	lds	r20, 0x0139
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	84 0f       	add	r24, r20
     57e:	91 1d       	adc	r25, r1
     580:	f9 01       	movw	r30, r18
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	60 81       	ld	r22, Z
     588:	7f bf       	out	0x3f, r23	; 63
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <CDC_Device_SendByte>
     592:	88 23       	and	r24, r24
     594:	69 f2       	breq	.-102    	; 0x530 <main+0x13c>
     596:	81 cf       	rjmp	.-254    	; 0x49a <main+0xa6>
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	80 93 cf 01 	sts	0x01CF, r24
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <main+0x1b4>
     5a0:	86 e3       	ldi	r24, 0x36	; 54

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	be de       	rcall	.-644    	; 0x322 <LRingBuffer_Remove.constprop.2>
     5a6:	5c d2       	rcall	.+1208   	; 0xa60 <checkNHPProtocol>
     5a8:	21 96       	adiw	r28, 0x01	; 1
     5aa:	1c 13       	cpse	r17, r28
     5ac:	91 cf       	rjmp	.-222    	; 0x4d0 <main+0xdc>
     5ae:	75 cf       	rjmp	.-278    	; 0x49a <main+0xa6>
     5b0:	a8 9a       	sbi	0x15, 0	; 21

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	90 91 d9 01 	lds	r25, 0x01D9
     5b6:	89 2f       	mov	r24, r25
     5b8:	80 73       	andi	r24, 0x30	; 48
     5ba:	09 f4       	brne	.+2      	; 0x5be <main+0x1ca>
     5bc:	58 c0       	rjmp	.+176    	; 0x66e <main+0x27a>
     5be:	89 2f       	mov	r24, r25
     5c0:	82 95       	swap	r24
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	8d 5f       	subi	r24, 0xFD	; 253
     5c6:	83 70       	andi	r24, 0x03	; 3
     5c8:	28 2f       	mov	r18, r24
     5ca:	22 95       	swap	r18
     5cc:	20 7f       	andi	r18, 0xF0	; 240
     5ce:	9f 7c       	andi	r25, 0xCF	; 207
     5d0:	92 2b       	or	r25, r18
     5d2:	90 93 d9 01 	sts	0x01D9, r25
     5d6:	81 11       	cpse	r24, r1
     5d8:	4a c0       	rjmp	.+148    	; 0x66e <main+0x27a>
     5da:	e0 91 f8 01 	lds	r30, 0x01F8
     5de:	e6 ff       	sbrs	r30, 6
     5e0:	15 c0       	rjmp	.+42     	; 0x60c <main+0x218>
     5e2:	e6 95       	lsr	r30
     5e4:	e6 95       	lsr	r30
     5e6:	e6 95       	lsr	r30
     5e8:	e7 70       	andi	r30, 0x07	; 7
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	e3 50       	subi	r30, 0x03	; 3
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	60 81       	ld	r22, Z

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	86 e3       	ldi	r24, 0x36	; 54
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	b8 de       	rcall	.-656    	; 0x368 <LRingBuffer_Append.constprop.4>
     5f8:	80 91 f8 01 	lds	r24, 0x01F8
					  return HID_PARSE_InsufficientReportItems;
     5fc:	86 fb       	bst	r24, 6

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	88 27       	eor	r24, r24
     600:	80 f9       	bld	r24, 0
     602:	90 91 cf 01 	lds	r25, 0x01CF
     606:	89 0f       	add	r24, r25
     608:	80 93 cf 01 	sts	0x01CF, r24
     60c:	00 91 f8 01 	lds	r16, 0x01F8
     610:	07 fd       	sbrc	r16, 7
     612:	29 c0       	rjmp	.+82     	; 0x666 <main+0x272>
     614:	06 95       	lsr	r16
     616:	06 95       	lsr	r16
     618:	06 95       	lsr	r16
     61a:	07 70       	andi	r16, 0x07	; 7
     61c:	c0 e0       	ldi	r28, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	d0 e0       	ldi	r29, 0x00	; 0
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	86 e3       	ldi	r24, 0x36	; 54
     624:	e8 2e       	mov	r14, r24
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	f8 2e       	mov	r15, r24
     62a:	e0 0e       	add	r14, r16
     62c:	f1 1e       	adc	r15, r17
     62e:	09 c0       	rjmp	.+18     	; 0x642 <main+0x24e>
     630:	f7 01       	movw	r30, r14
     632:	ec 0f       	add	r30, r28
     634:	fd 1f       	adc	r31, r29
     636:	e9 53       	subi	r30, 0x39	; 57
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	60 81       	ld	r22, Z
     63c:	86 e3       	ldi	r24, 0x36	; 54
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	93 de       	rcall	.-730    	; 0x368 <LRingBuffer_Append.constprop.4>
     642:	21 97       	sbiw	r28, 0x01	; 1
     644:	ce 01       	movw	r24, r28
     646:	80 95       	com	r24
     648:	90 95       	com	r25
     64a:	80 17       	cp	r24, r16
     64c:	91 07       	cpc	r25, r17
     64e:	84 f3       	brlt	.-32     	; 0x630 <main+0x23c>
     650:	80 91 f8 01 	lds	r24, 0x01F8
     654:	86 95       	lsr	r24
     656:	86 95       	lsr	r24
     658:	86 95       	lsr	r24
     65a:	87 70       	andi	r24, 0x07	; 7
     65c:	90 91 cf 01 	lds	r25, 0x01CF
     660:	89 0f       	add	r24, r25
     662:	80 93 cf 01 	sts	0x01CF, r24
     666:	88 ef       	ldi	r24, 0xF8	; 248
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	71 d6       	rcall	.+3298   	; 0x134e <NHPreset>
     66c:	c5 d1       	rcall	.+906    	; 0x9f8 <checkNHPControlAddressError>
     66e:	90 91 d9 01 	lds	r25, 0x01D9
     672:	89 2f       	mov	r24, r25
     674:	83 70       	andi	r24, 0x03	; 3
     676:	49 f0       	breq	.+18     	; 0x68a <main+0x296>
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	83 70       	andi	r24, 0x03	; 3
     67c:	9c 7f       	andi	r25, 0xFC	; 252
					  ParserData->TotalReportItems++;
     67e:	98 2b       	or	r25, r24
     680:	90 93 d9 01 	sts	0x01D9, r25
     684:	81 11       	cpse	r24, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	01 c0       	rjmp	.+2      	; 0x68a <main+0x296>
     688:	5d 9a       	sbi	0x0b, 5	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	90 91 d9 01 	lds	r25, 0x01D9
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	89 2f       	mov	r24, r25
     690:	8c 70       	andi	r24, 0x0C	; 12
     692:	79 f0       	breq	.+30     	; 0x6b2 <main+0x2be>
     694:	89 2f       	mov	r24, r25
     696:	86 95       	lsr	r24
     698:	86 95       	lsr	r24
     69a:	8d 5f       	subi	r24, 0xFD	; 253
     69c:	83 70       	andi	r24, 0x03	; 3
     69e:	28 2f       	mov	r18, r24
     6a0:	22 0f       	add	r18, r18
     6a2:	22 0f       	add	r18, r18
     6a4:	93 7f       	andi	r25, 0xF3	; 243
     6a6:	92 2b       	or	r25, r18
     6a8:	90 93 d9 01 	sts	0x01D9, r25
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6ac:	81 11       	cpse	r24, r1
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <main+0x2be>
     6b0:	5c 9a       	sbi	0x0b, 4	; 11
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 af 10 	call	0x215e	; 0x215e <CDC_Device_USBTask>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6ba:	0e 94 1c 10 	call	0x2038	; 0x2038 <USB_USBTask>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6be:	b2 ce       	rjmp	.-668    	; 0x424 <main+0x30>

000006c0 <EVENT_USB_Device_Connect>:
     6c0:	08 95       	ret

000006c2 <EVENT_USB_Device_Disconnect>:
     6c2:	08 95       	ret

000006c4 <EVENT_USB_Device_ConfigurationChanged>:
     6c4:	80 e0       	ldi	r24, 0x00	; 0
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <HID_Device_ConfigureEndpoints>
     6cc:	80 e1       	ldi	r24, 0x10	; 16
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 38 10 	call	0x2070	; 0x2070 <CDC_Device_ConfigureEndpoints>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d4:	e2 ee       	ldi	r30, 0xE2	; 226
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	80 81       	ld	r24, Z
     6da:	84 60       	ori	r24, 0x04	; 4
     6dc:	80 83       	st	Z, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	08 95       	ret

000006e0 <__vector_23>:
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 93       	push	r18
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	8f 93       	push	r24
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	ff 93       	push	r31
     6fe:	40 91 ce 00 	lds	r20, 0x00CE
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     702:	80 91 07 02 	lds	r24, 0x0207
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     706:	84 30       	cpi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	e9 f4       	brne	.+58     	; 0x744 <__vector_23+0x64>
     70a:	e6 e3       	ldi	r30, 0x36	; 54
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	2f b7       	in	r18, 0x3f	; 63
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	f8 94       	cli
     712:	80 81       	ld	r24, Z
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	a1 f0       	breq	.+40     	; 0x742 <__vector_23+0x62>
     71a:	54 81       	ldd	r21, Z+4	; 0x04

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	33 81       	ldd	r19, Z+3	; 0x03
     71e:	53 13       	cpse	r21, r19
     720:	01 c0       	rjmp	.+2      	; 0x724 <__vector_23+0x44>
     722:	0f c0       	rjmp	.+30     	; 0x742 <__vector_23+0x62>
     724:	32 81       	ldd	r19, Z+2	; 0x02
     726:	dc 01       	movw	r26, r24
     728:	a3 0f       	add	r26, r19
     72a:	b1 1d       	adc	r27, r1
     72c:	4c 93       	st	X, r20
     72e:	83 2f       	mov	r24, r19
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	82 83       	std	Z+2, r24	; 0x02
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	89 13       	cpse	r24, r25
     738:	01 c0       	rjmp	.+2      	; 0x73c <__vector_23+0x5c>
     73a:	12 82       	std	Z+2, r1	; 0x02
     73c:	84 81       	ldd	r24, Z+4	; 0x04
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	2f bf       	out	0x3f, r18	; 63
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
	uint8_t ReceivedByte = UDR1;

	// save new byte to the buffer (automatically discards if its disabled or full)
	if (USB_DeviceState == DEVICE_STATE_Configured)
		LRingBuffer_Insert(&ram.RingBuffer, ReceivedByte);
}
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     762:	80 e1       	ldi	r24, 0x10	; 16
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface); //<--new
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <HID_Device_ProcessControlRequest>

00000772 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     772:	80 91 0e 01 	lds	r24, 0x010E
     776:	90 91 0f 01 	lds	r25, 0x010F
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	29 f0       	breq	.+10     	; 0x788 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	90 93 0f 01 	sts	0x010F, r25
     784:	80 93 0e 01 	sts	0x010E, r24
     788:	08 95       	ret

0000078a <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     78a:	29 2f       	mov	r18, r25
     78c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     78e:	23 30       	cpi	r18, 0x03	; 3
     790:	31 05       	cpc	r19, r1
     792:	b1 f0       	breq	.+44     	; 0x7c0 <CALLBACK_USB_GetDescriptor+0x36>
     794:	4c f4       	brge	.+18     	; 0x7a8 <CALLBACK_USB_GetDescriptor+0x1e>
     796:	21 30       	cpi	r18, 0x01	; 1
     798:	31 05       	cpc	r19, r1
     79a:	09 f4       	brne	.+2      	; 0x79e <CALLBACK_USB_GetDescriptor+0x14>
     79c:	39 c0       	rjmp	.+114    	; 0x810 <CALLBACK_USB_GetDescriptor+0x86>
     79e:	22 30       	cpi	r18, 0x02	; 2
     7a0:	31 05       	cpc	r19, r1
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <CALLBACK_USB_GetDescriptor+0x1c>
     7a4:	3a c0       	rjmp	.+116    	; 0x81a <CALLBACK_USB_GetDescriptor+0x90>
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <CALLBACK_USB_GetDescriptor+0x2c>
     7a8:	21 32       	cpi	r18, 0x21	; 33
     7aa:	31 05       	cpc	r19, r1
     7ac:	39 f1       	breq	.+78     	; 0x7fc <CALLBACK_USB_GetDescriptor+0x72>
     7ae:	22 32       	cpi	r18, 0x22	; 34
     7b0:	31 05       	cpc	r19, r1
     7b2:	49 f1       	breq	.+82     	; 0x806 <CALLBACK_USB_GetDescriptor+0x7c>
     7b4:	32 c0       	rjmp	.+100    	; 0x81a <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7b6:	ef e5       	ldi	r30, 0x5F	; 95
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7ba:	8e eb       	ldi	r24, 0xBE	; 190
     7bc:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7be:	31 c0       	rjmp	.+98     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7c0:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	61 f0       	breq	.+24     	; 0x7e0 <CALLBACK_USB_GetDescriptor+0x56>
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	91 05       	cpc	r25, r1
     7cc:	81 f0       	breq	.+32     	; 0x7ee <CALLBACK_USB_GetDescriptor+0x64>
     7ce:	89 2b       	or	r24, r25
     7d0:	21 f5       	brne	.+72     	; 0x81a <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7d2:	ea eb       	ldi	r30, 0xBA	; 186
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	e4 91       	lpm	r30, Z+
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     7da:	8a eb       	ldi	r24, 0xBA	; 186
     7dc:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     7de:	21 c0       	rjmp	.+66     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     7e0:	e6 ea       	ldi	r30, 0xA6	; 166
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e4 91       	lpm	r30, Z+
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     7e8:	86 ea       	ldi	r24, 0xA6	; 166
     7ea:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     7ec:	1a c0       	rjmp	.+52     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     7ee:	e4 e7       	ldi	r30, 0x74	; 116
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e4 91       	lpm	r30, Z+
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     7f6:	84 e7       	ldi	r24, 0x74	; 116
     7f8:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     7fc:	e9 e0       	ldi	r30, 0x09	; 9
     7fe:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     804:	0e c0       	rjmp	.+28     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     806:	e8 eb       	ldi	r30, 0xB8	; 184
     808:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     80a:	8f e2       	ldi	r24, 0x2F	; 47
     80c:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     80e:	09 c0       	rjmp	.+18     	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     810:	e2 e1       	ldi	r30, 0x12	; 18
     812:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     814:	8d e1       	ldi	r24, 0x1D	; 29
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	04 c0       	rjmp	.+8      	; 0x822 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     81a:	e0 e0       	ldi	r30, 0x00	; 0
     81c:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     822:	da 01       	movw	r26, r20
     824:	8d 93       	st	X+, r24
     826:	9c 93       	st	X, r25
	return Size;
}
     828:	cf 01       	movw	r24, r30
     82a:	08 95       	ret

0000082c <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     83c:	64 0f       	add	r22, r20
     83e:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     840:	c6 e3       	ldi	r28, 0x36	; 54
     842:	d1 e0       	ldi	r29, 0x01	; 1
     844:	2c c0       	rjmp	.+88     	; 0x89e <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     846:	fb 01       	movw	r30, r22
     848:	e2 1b       	sub	r30, r18
     84a:	f3 0b       	sbc	r31, r19
     84c:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     84e:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     850:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     852:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     854:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     856:	a0 81       	ld	r26, Z
     858:	b1 81       	ldd	r27, Z+1	; 0x01
     85a:	10 97       	sbiw	r26, 0x00	; 0
     85c:	09 f4       	brne	.+2      	; 0x860 <LRingBuffer_Append_Buffer.constprop.0+0x34>
     85e:	1c c0       	rjmp	.+56     	; 0x898 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     860:	82 81       	ldd	r24, Z+2	; 0x02
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	f4 80       	ldd	r15, Z+4	; 0x04
     866:	8f 19       	sub	r24, r15
     868:	91 09       	sbc	r25, r1
     86a:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     86c:	97 ff       	sbrs	r25, 7
     86e:	03 c0       	rjmp	.+6      	; 0x876 <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     870:	f3 80       	ldd	r15, Z+3	; 0x03
     872:	8f 0d       	add	r24, r15
     874:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     876:	a8 0f       	add	r26, r24
     878:	b9 1f       	adc	r27, r25
     87a:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     87c:	84 81       	ldd	r24, Z+4	; 0x04
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	89 13       	cpse	r24, r25
     882:	08 c0       	rjmp	.+16     	; 0x894 <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     884:	92 81       	ldd	r25, Z+2	; 0x02
     886:	91 11       	cpse	r25, r1
     888:	01 c0       	rjmp	.+2      	; 0x88c <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     88a:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	81 50       	subi	r24, 0x01	; 1
     890:	82 83       	std	Z+2, r24	; 0x02
     892:	02 c0       	rjmp	.+4      	; 0x898 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     898:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     89a:	2f 5f       	subi	r18, 0xFF	; 255
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	24 17       	cp	r18, r20
     8a0:	35 07       	cpc	r19, r21
     8a2:	8c f2       	brlt	.-94     	; 0x846 <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	08 95       	ret

000008b0 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	7b 01       	movw	r14, r22
     8be:	c9 01       	movw	r24, r18
     8c0:	e8 01       	movw	r28, r16

	if (ram.isp.pmode || (!(AVR_NO_HID_PIN &= AVR_NO_HID_MASK))){
     8c2:	20 91 d2 01 	lds	r18, 0x01D2
     8c6:	22 23       	and	r18, r18
     8c8:	31 f0       	breq	.+12     	; 0x8d6 <CALLBACK_HID_Device_CreateHIDReport+0x26>
		//TODO improve
		*ReportID = 0;
     8ca:	f7 01       	movw	r30, r14
     8cc:	10 82       	st	Z, r1
		*ReportSize = 0;
     8ce:	19 82       	std	Y+1, r1	; 0x01
     8d0:	18 82       	st	Y, r1
		return false;
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	26 c0       	rjmp	.+76     	; 0x922 <CALLBACK_HID_Device_CreateHIDReport+0x72>
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{

	if (ram.isp.pmode || (!(AVR_NO_HID_PIN &= AVR_NO_HID_MASK))){
     8d6:	43 b1       	in	r20, 0x03	; 3
     8d8:	40 72       	andi	r20, 0x20	; 32
     8da:	43 b9       	out	0x03, r20	; 3
     8dc:	44 23       	and	r20, r20
     8de:	a9 f3       	breq	.-22     	; 0x8ca <CALLBACK_HID_Device_CreateHIDReport+0x1a>
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     8e0:	e0 91 da 01 	lds	r30, 0x01DA
     8e4:	e3 30       	cpi	r30, 0x03	; 3
     8e6:	31 f0       	breq	.+12     	; 0x8f4 <CALLBACK_HID_Device_CreateHIDReport+0x44>
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
     8e8:	10 92 ee 01 	sts	0x01EE, r1
		ram.HID.isEmpty[ram.HID.ID] = false;
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	e2 51       	subi	r30, 0x12	; 18
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	10 82       	st	Z, r1
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     8f4:	40 91 db 01 	lds	r20, 0x01DB
     8f8:	ed ed       	ldi	r30, 0xDD	; 221
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	bf 01       	movw	r22, r30
     900:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <memcpy>
	*ReportID = ram.HID.ID;
     904:	80 91 da 01 	lds	r24, 0x01DA
     908:	f7 01       	movw	r30, r14
     90a:	80 83       	st	Z, r24
	*ReportSize = ram.HID.length;
     90c:	80 91 db 01 	lds	r24, 0x01DB
     910:	88 83       	st	Y, r24
     912:	19 82       	std	Y+1, r1	; 0x01

	// reset ID
	ram.HID.ID = 0;
     914:	10 92 da 01 	sts	0x01DA, r1
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     918:	10 92 dc 01 	sts	0x01DC, r1
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     91c:	10 92 db 01 	sts	0x01DB, r1

	// always return true, because we cannot compare with >1 report due to ram limit
	// this will forcewrite the report every time
	return true;
     920:	81 e0       	ldi	r24, 0x01	; 1

	//}
	//else return false;
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	08 95       	ret

00000930 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     936:	63 30       	cpi	r22, 0x03	; 3
     938:	51 f4       	brne	.+20     	; 0x94e <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     93a:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     93c:	20 91 d9 01 	lds	r18, 0x01D9
     940:	2c 60       	ori	r18, 0x0C	; 12
     942:	20 93 d9 01 	sts	0x01D9, r18

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     946:	b8 01       	movw	r22, r16
	}
}
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     94c:	b3 c6       	rjmp	.+3430   	; 0x16b4 <Serial_SendData>
     94e:	1f 91       	pop	r17
	}
}
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <flushHID>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

void flushHID(void){
     954:	04 c0       	rjmp	.+8      	; 0x95e <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     95e:	80 91 da 01 	lds	r24, 0x01DA
     962:	88 23       	and	r24, r24
     964:	31 f0       	breq	.+12     	; 0x972 <flushHID+0x1e>
     966:	90 91 db 01 	lds	r25, 0x01DB
     96a:	80 91 dc 01 	lds	r24, 0x01DC
     96e:	98 17       	cp	r25, r24
     970:	91 f3       	breq	.-28     	; 0x956 <flushHID+0x2>
     972:	08 95       	ret

00000974 <getHIDReportLength>:
		HID_Device_USBTask(&Device_HID_Interface);
}


uint8_t getHIDReportLength(uint8_t ID){
     974:	81 50       	subi	r24, 0x01	; 1
     976:	89 30       	cpi	r24, 0x09	; 9
     978:	30 f4       	brcc	.+12     	; 0x986 <getHIDReportLength+0x12>
     97a:	e8 2f       	mov	r30, r24
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	e5 5d       	subi	r30, 0xD5	; 213
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	80 81       	ld	r24, Z
     984:	08 95       	ret
     986:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     988:	08 95       	ret

0000098a <clearHIDReport>:

	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	18 2f       	mov	r17, r24
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
     992:	c8 2f       	mov	r28, r24
     994:	d0 e0       	ldi	r29, 0x00	; 0
     996:	c2 51       	subi	r28, 0x12	; 18
     998:	de 4f       	sbci	r29, 0xFE	; 254
     99a:	88 81       	ld	r24, Y
     99c:	81 11       	cpse	r24, r1
     99e:	18 c0       	rjmp	.+48     	; 0x9d0 <clearHIDReport+0x46>
     9a0:	13 30       	cpi	r17, 0x03	; 3
     9a2:	b1 f0       	breq	.+44     	; 0x9d0 <clearHIDReport+0x46>

	// get length of the report if its a valid report
	uint8_t length = getHIDReportLength(ID);
     9a4:	81 2f       	mov	r24, r17
     9a6:	e6 df       	rcall	.-52     	; 0x974 <getHIDReportLength>
     9a8:	88 23       	and	r24, r24
	if (!length) return;
     9aa:	91 f0       	breq	.+36     	; 0x9d0 <clearHIDReport+0x46>
     9ac:	80 93 dc 01 	sts	0x01DC, r24

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
     9b0:	80 93 db 01 	sts	0x01DB, r24
     9b4:	10 93 da 01 	sts	0x01DA, r17
	ram.HID.ID = ID;
     9b8:	2d ed       	ldi	r18, 0xDD	; 221
	memset(&ram.HID.buffer, 0x00, length);
     9ba:	31 e0       	ldi	r19, 0x01	; 1
     9bc:	48 2f       	mov	r20, r24
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	c9 01       	movw	r24, r18
     9c6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <memset>
     9ca:	c4 df       	rcall	.-120    	; 0x954 <flushHID>

	// flush HID
	flushHID();
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	88 83       	st	Y, r24

	// save new empty state
	ram.HID.isEmpty[ID] = true;
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
}
     9d4:	1f 91       	pop	r17
     9d6:	08 95       	ret

000009d8 <clearHIDReports>:
		Serial_SendData(ReportData, ReportSize);
	}
}


void clearHIDReports(void){
     9d8:	cf 93       	push	r28
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;
     9da:	80 91 ee 01 	lds	r24, 0x01EE
     9de:	81 11       	cpse	r24, r1
     9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <clearHIDReports+0x1c>
     9e2:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
     9e4:	8c 2f       	mov	r24, r28
     9e6:	d1 df       	rcall	.-94     	; 0x98a <clearHIDReport>
     9e8:	cf 5f       	subi	r28, 0xFF	; 255
     9ea:	ca 30       	cpi	r28, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     9ec:	d9 f7       	brne	.-10     	; 0x9e4 <clearHIDReports+0xc>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
		clearHIDReport(i);

	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     9f0:	80 93 ee 01 	sts	0x01EE, r24
     9f4:	cf 91       	pop	r28
}
     9f6:	08 95       	ret

000009f8 <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <checkNHPControlAddressError+0x8>
     a00:	00 d0       	rcall	.+0      	; 0xa02 <checkNHPControlAddressError+0xa>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <checkNHPControlAddressError+0xc>
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     a08:	60 91 da 01 	lds	r22, 0x01DA
     a0c:	66 23       	and	r22, r22
     a0e:	c1 f0       	breq	.+48     	; 0xa40 <checkNHPControlAddressError+0x48>
     a10:	80 91 dc 01 	lds	r24, 0x01DC
     a14:	81 11       	cpse	r24, r1
     a16:	14 c0       	rjmp	.+40     	; 0xa40 <checkNHPControlAddressError+0x48>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	71 60       	ori	r23, 0x01	; 1
     a1c:	ae 01       	movw	r20, r28
     a1e:	4f 5f       	subi	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	6a d5       	rcall	.+2772   	; 0x14fa <NHPwriteChecksum>
     a26:	18 2f       	mov	r17, r24
     a28:	48 2f       	mov	r20, r24

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.RingBuffer, buff, length);
     a2a:	be 01       	movw	r22, r28
     a2c:	6f 5f       	subi	r22, 0xFF	; 255
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	86 e3       	ldi	r24, 0x36	; 54
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	fb de       	rcall	.-522    	; 0x82c <LRingBuffer_Append_Buffer.constprop.0>
     a36:	90 91 cf 01 	lds	r25, 0x01CF
		ram.skipNHP += length;
     a3a:	91 0f       	add	r25, r17
     a3c:	90 93 cf 01 	sts	0x01CF, r25
     a40:	10 92 da 01 	sts	0x01DA, r1
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     a44:	10 92 dc 01 	sts	0x01DC, r1
	ram.HID.recvlength = 0; // just to be sure
     a48:	10 92 db 01 	sts	0x01DB, r1
	ram.HID.length = 0; // just to be sure
     a4c:	26 96       	adiw	r28, 0x06	; 6
     a4e:	0f b6       	in	r0, 0x3f	; 63
}
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	08 95       	ret

00000a60 <checkNHPProtocol>:
	} //end switch
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     a60:	90 91 d9 01 	lds	r25, 0x01D9
     a64:	90 63       	ori	r25, 0x30	; 48
     a66:	90 93 d9 01 	sts	0x01D9, r25
	// set new timeout mark
	ram.PulseMSRemaining.NHPTimeout = NHP_TIMEOUT_MS;

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     a6a:	68 ef       	ldi	r22, 0xF8	; 248
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	22 d5       	rcall	.+2628   	; 0x14b4 <NHPreadChecksum>
     a70:	88 23       	and	r24, r24

	if (address == 0)
     a72:	09 f4       	brne	.+2      	; 0xa76 <checkNHPProtocol+0x16>
     a74:	75 c0       	rjmp	.+234    	; 0xb60 <checkNHPProtocol+0x100>
     a76:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     a78:	18 c0       	rjmp	.+48     	; 0xaaa <checkNHPProtocol+0x4a>
     a7a:	be df       	rcall	.-132    	; 0x9f8 <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     a7c:	40 91 f8 01 	lds	r20, 0x01F8

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     a80:	46 95       	lsr	r20
     a82:	46 95       	lsr	r20
     a84:	46 95       	lsr	r20
     a86:	47 70       	andi	r20, 0x07	; 7
     a88:	6d ef       	ldi	r22, 0xFD	; 253
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	86 e3       	ldi	r24, 0x36	; 54
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	cd de       	rcall	.-614    	; 0x82c <LRingBuffer_Append_Buffer.constprop.0>
     a92:	80 91 f8 01 	lds	r24, 0x01F8
     a96:	86 95       	lsr	r24
		ram.skipNHP += ram.NHP.readlength;
     a98:	86 95       	lsr	r24
     a9a:	86 95       	lsr	r24
     a9c:	87 70       	andi	r24, 0x07	; 7
     a9e:	90 91 cf 01 	lds	r25, 0x01CF
     aa2:	89 0f       	add	r24, r25
     aa4:	80 93 cf 01 	sts	0x01CF, r24
     aa8:	08 95       	ret
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	89 f4       	brne	.+34     	; 0xad0 <checkNHPProtocol+0x70>
		return;
     aae:	90 91 fa 01 	lds	r25, 0x01FA
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     ab2:	91 30       	cpi	r25, 0x01	; 1
     ab4:	69 f4       	brne	.+26     	; 0xad0 <checkNHPProtocol+0x70>
     ab6:	a0 df       	rcall	.-192    	; 0x9f8 <checkNHPControlAddressError>
     ab8:	80 91 f9 01 	lds	r24, 0x01F9
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     abc:	80 93 da 01 	sts	0x01DA, r24

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     ac0:	10 92 dc 01 	sts	0x01DC, r1
     ac4:	57 df       	rcall	.-338    	; 0x974 <getHIDReportLength>
     ac6:	80 93 db 01 	sts	0x01DB, r24
		ram.HID.recvlength = 0;
     aca:	81 11       	cpse	r24, r1

		// TODO remove this cleaning
		//memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     acc:	49 c0       	rjmp	.+146    	; 0xb60 <checkNHPProtocol+0x100>
     ace:	47 c0       	rjmp	.+142    	; 0xb5e <checkNHPProtocol+0xfe>
     ad0:	90 91 da 01 	lds	r25, 0x01DA

		// error, write down this wrong ID report
		if (!ram.HID.length)
     ad4:	99 23       	and	r25, r25
     ad6:	69 f1       	breq	.+90     	; 0xb32 <checkNHPProtocol+0xd2>
     ad8:	60 91 dc 01 	lds	r22, 0x01DC
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     adc:	46 2f       	mov	r20, r22
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	99 27       	eor	r25, r25
     ae2:	87 fd       	sbrc	r24, 7
     ae4:	90 95       	com	r25
     ae6:	9a 01       	movw	r18, r20
     ae8:	2e 5f       	subi	r18, 0xFE	; 254
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	35 95       	asr	r19
     aee:	27 95       	ror	r18
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	82 17       	cp	r24, r18
     af6:	93 07       	cpc	r25, r19
     af8:	e1 f4       	brne	.+56     	; 0xb32 <checkNHPProtocol+0xd2>
     afa:	80 91 f9 01 	lds	r24, 0x01F9
     afe:	90 91 fa 01 	lds	r25, 0x01FA
     b02:	fa 01       	movw	r30, r20
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     b04:	e3 52       	subi	r30, 0x23	; 35
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	80 83       	st	Z, r24
     b0a:	e6 2f       	mov	r30, r22
     b0c:	ef 5f       	subi	r30, 0xFF	; 255
     b0e:	e0 93 dc 01 	sts	0x01DC, r30
     b12:	80 91 db 01 	lds	r24, 0x01DB
     b16:	8e 17       	cp	r24, r30
     b18:	39 f0       	breq	.+14     	; 0xb28 <checkNHPProtocol+0xc8>
     b1a:	f0 e0       	ldi	r31, 0x00	; 0

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     b1c:	e3 52       	subi	r30, 0x23	; 35
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	90 83       	st	Z, r25
     b22:	6e 5f       	subi	r22, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     b24:	60 93 dc 01 	sts	0x01DC, r22
     b28:	90 91 dc 01 	lds	r25, 0x01DC
     b2c:	89 13       	cpse	r24, r25
     b2e:	18 c0       	rjmp	.+48     	; 0xb60 <checkNHPProtocol+0x100>
     b30:	11 cf       	rjmp	.-478    	; 0x954 <flushHID>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     b32:	40 91 f8 01 	lds	r20, 0x01F8
     b36:	46 95       	lsr	r20
     b38:	46 95       	lsr	r20
			flushHID();
     b3a:	46 95       	lsr	r20
     b3c:	47 70       	andi	r20, 0x07	; 7
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     b3e:	6d ef       	ldi	r22, 0xFD	; 253
     b40:	71 e0       	ldi	r23, 0x01	; 1
     b42:	86 e3       	ldi	r24, 0x36	; 54
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	72 de       	rcall	.-796    	; 0x82c <LRingBuffer_Append_Buffer.constprop.0>
     b48:	80 91 f8 01 	lds	r24, 0x01F8
     b4c:	86 95       	lsr	r24
     b4e:	86 95       	lsr	r24
     b50:	86 95       	lsr	r24
     b52:	87 70       	andi	r24, 0x07	; 7
     b54:	90 91 cf 01 	lds	r25, 0x01CF
		ram.skipNHP += ram.NHP.readlength;
     b58:	89 0f       	add	r24, r25
     b5a:	80 93 cf 01 	sts	0x01CF, r24
     b5e:	4c cf       	rjmp	.-360    	; 0x9f8 <checkNHPControlAddressError>
     b60:	08 95       	ret

00000b62 <HIDreset>:
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
}

void HIDreset(void){
     b62:	10 92 da 01 	sts	0x01DA, r1
	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
     b66:	10 92 dc 01 	sts	0x01DC, r1
	ram.HID.length = 0; // just to be sure
     b6a:	10 92 db 01 	sts	0x01DB, r1

	// all reports are empty by default
	memset(&ram.HID.isEmpty, true, sizeof(ram.HID.isEmpty));
     b6e:	4a e0       	ldi	r20, 0x0A	; 10
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	8e ee       	ldi	r24, 0xEE	; 238
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <memset>

00000b7e <LEDs_TurnOnLEDs>:
     b7e:	9b b1       	in	r25, 0x0b	; 11
     b80:	80 95       	com	r24
     b82:	89 23       	and	r24, r25
     b84:	8b b9       	out	0x0b, r24	; 11
     b86:	08 95       	ret

00000b88 <avrispReset>:
//================================================================================
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
     b88:	10 92 d1 01 	sts	0x01D1, r1
     b8c:	10 92 d0 01 	sts	0x01D0, r1
	ram.isp.pmode = false;
     b90:	10 92 d2 01 	sts	0x01D2, r1
	ram.isp._addr = 0; // just to be sure
     b94:	10 92 d4 01 	sts	0x01D4, r1
     b98:	10 92 d3 01 	sts	0x01D3, r1
     b9c:	08 95       	ret

00000b9e <sendCDCbyte>:
}

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     b9e:	68 2f       	mov	r22, r24
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <CDC_Device_SendByte>
     ba8:	88 23       	and	r24, r24
     baa:	e9 f0       	breq	.+58     	; 0xbe6 <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 af 10 	call	0x215e	; 0x215e <CDC_Device_USBTask>
		USB_USBTask();
     bb4:	0e 94 1c 10 	call	0x2038	; 0x2038 <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     bb8:	80 e1       	ldi	r24, 0x10	; 16
     bba:	e1 df       	rcall	.-62     	; 0xb7e <LEDs_TurnOnLEDs>
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bbe:	81 ee       	ldi	r24, 0xE1	; 225
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <sendCDCbyte+0x24>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <sendCDCbyte+0x2e>
     bcc:	00 00       	nop
     bce:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     bd0:	d6 df       	rcall	.-84     	; 0xb7e <LEDs_TurnOnLEDs>
     bd2:	2f ef       	ldi	r18, 0xFF	; 255
     bd4:	81 ee       	ldi	r24, 0xE1	; 225
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	90 40       	sbci	r25, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <sendCDCbyte+0x3a>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <sendCDCbyte+0x44>
     be2:	00 00       	nop
     be4:	e9 cf       	rjmp	.-46     	; 0xbb8 <sendCDCbyte+0x1a>
     be6:	08 95       	ret

00000be8 <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     be8:	80 e1       	ldi	r24, 0x10	; 16
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 c5 10 	call	0x218a	; 0x218a <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     bf0:	97 fd       	sbrc	r25, 7
     bf2:	fa cf       	rjmp	.-12     	; 0xbe8 <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     bf4:	08 95       	ret

00000bf6 <fill>:

void fill(int n) {
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	7c 01       	movw	r14, r24
     c04:	0b eb       	ldi	r16, 0xBB	; 187
     c06:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     c08:	c0 e0       	ldi	r28, 0x00	; 0
     c0a:	d0 e0       	ldi	r29, 0x00	; 0
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <fill+0x22>
		ram.ispBuffer[x] = getch();
     c0e:	ec df       	rcall	.-40     	; 0xbe8 <getch>
     c10:	f8 01       	movw	r30, r16
     c12:	81 93       	st	Z+, r24
     c14:	8f 01       	movw	r16, r30
     c16:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     c18:	ce 15       	cp	r28, r14
     c1a:	df 05       	cpc	r29, r15
     c1c:	c4 f3       	brlt	.-16     	; 0xc0e <fill+0x18>
     c1e:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     c2c:	90 91 c7 01 	lds	r25, 0x01C7
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	20 91 c8 01 	lds	r18, 0x01C8
     c36:	82 0f       	add	r24, r18
     c38:	91 1d       	adc	r25, r1
     c3a:	90 93 d6 01 	sts	0x01D6, r25
     c3e:	80 93 d5 01 	sts	0x01D5, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     c42:	90 91 c9 01 	lds	r25, 0x01C9
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	20 91 ca 01 	lds	r18, 0x01CA
     c4c:	82 0f       	add	r24, r18
     c4e:	91 1d       	adc	r25, r1
     c50:	90 93 d8 01 	sts	0x01D8, r25
     c54:	80 93 d7 01 	sts	0x01D7, r24
     c58:	08 95       	ret

00000c5a <breply>:
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}


void breply(uint8_t b) {
     c5a:	cf 93       	push	r28
     c5c:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     c5e:	c4 df       	rcall	.-120    	; 0xbe8 <getch>
     c60:	80 32       	cpi	r24, 0x20	; 32
     c62:	39 f4       	brne	.+14     	; 0xc72 <breply+0x18>
     c64:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     c66:	9b df       	rcall	.-202    	; 0xb9e <sendCDCbyte>
     c68:	8c 2f       	mov	r24, r28
     c6a:	99 df       	rcall	.-206    	; 0xb9e <sendCDCbyte>
		sendCDCbyte(b);
     c6c:	80 e1       	ldi	r24, 0x10	; 16
     c6e:	cf 91       	pop	r28
     c70:	96 cf       	rjmp	.-212    	; 0xb9e <sendCDCbyte>
		sendCDCbyte(STK_OK);
     c72:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c74:	94 df       	rcall	.-216    	; 0xb9e <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     c76:	80 91 d0 01 	lds	r24, 0x01D0
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     c7a:	90 91 d1 01 	lds	r25, 0x01D1
     c7e:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     c80:	90 93 d1 01 	sts	0x01D1, r25
     c84:	80 93 d0 01 	sts	0x01D0, r24
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <get_parameters>:
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}


void get_parameters(uint8_t c) {
     c8c:	81 38       	cpi	r24, 0x81	; 129
     c8e:	59 f0       	breq	.+22     	; 0xca6 <get_parameters+0x1a>
     c90:	18 f4       	brcc	.+6      	; 0xc98 <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c92:	80 38       	cpi	r24, 0x80	; 128
     c94:	71 f4       	brne	.+28     	; 0xcb2 <get_parameters+0x26>
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <get_parameters+0x16>
     c98:	82 38       	cpi	r24, 0x82	; 130
     c9a:	39 f0       	breq	.+14     	; 0xcaa <get_parameters+0x1e>
     c9c:	83 39       	cpi	r24, 0x93	; 147
     c9e:	49 f4       	brne	.+18     	; 0xcb2 <get_parameters+0x26>
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <get_parameters+0x22>


void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     caa:	82 e1       	ldi	r24, 0x12	; 18
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     cae:	83 e5       	ldi	r24, 0x53	; 83
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <get_parameters+0x28>
		break;
	default:
		breply(0);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	d2 cf       	rjmp	.-92     	; 0xc5a <breply>

00000cb6 <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     cb6:	98 df       	rcall	.-208    	; 0xbe8 <getch>
     cb8:	80 32       	cpi	r24, 0x20	; 32
     cba:	21 f4       	brne	.+8      	; 0xcc4 <replyOK+0xe>
     cbc:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     cbe:	6f df       	rcall	.-290    	; 0xb9e <sendCDCbyte>
     cc0:	80 e1       	ldi	r24, 0x10	; 16
     cc2:	6d cf       	rjmp	.-294    	; 0xb9e <sendCDCbyte>
		sendCDCbyte(STK_OK);
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	5b df       	rcall	.-330    	; 0xb7e <LEDs_TurnOnLEDs>
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     cca:	80 e7       	ldi	r24, 0x70	; 112
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	80 40       	sbci	r24, 0x00	; 0
     cd2:	90 40       	sbci	r25, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <replyOK+0x18>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <replyOK+0x22>
     cd8:	00 00       	nop
     cda:	5d 9a       	sbi	0x0b, 5	; 11
     cdc:	2f ef       	ldi	r18, 0xFF	; 255
     cde:	80 e7       	ldi	r24, 0x70	; 112
     ce0:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	80 40       	sbci	r24, 0x00	; 0
     ce6:	90 40       	sbci	r25, 0x00	; 0
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <replyOK+0x2c>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <replyOK+0x36>
     cec:	00 00       	nop
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	46 df       	rcall	.-372    	; 0xb7e <LEDs_TurnOnLEDs>
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <replyOK+0x42>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <replyOK+0x4c>
     d02:	00 00       	nop
     d04:	5d 9a       	sbi	0x0b, 5	; 11
     d06:	85 e1       	ldi	r24, 0x15	; 21
     d08:	4a df       	rcall	.-364    	; 0xb9e <sendCDCbyte>
     d0a:	80 91 d0 01 	lds	r24, 0x01D0
     d0e:	90 91 d1 01 	lds	r25, 0x01D1
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	90 93 d1 01 	sts	0x01D1, r25
		ram.isp.error++;
     d18:	80 93 d0 01 	sts	0x01D0, r24
     d1c:	08 95       	ret

00000d1e <end_pmode>:
	// do not write Serial stuff into buffer, we need this ram now
	LRingBuffer_ResetBuffer(&ram.RingBuffer);
	return;
}

void end_pmode(void) {
     d1e:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     d20:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     d22:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     d24:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     d26:	20 98       	cbi	0x04, 0	; 4
	}

	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     d28:	e6 e3       	ldi	r30, 0x36	; 54
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d2c:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d2e:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// TODO index doesnt really matter
		Buffer->Index = 0;
     d30:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Count = 0;
     d32:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d34:	8f bf       	out	0x3f, r24	; 63

	// release this buffer for Serial again
	LRingBuffer_ResetBuffer(&ram.RingBuffer);

	ram.isp.pmode = false;
     d36:	10 92 d2 01 	sts	0x01D2, r1

	// HID Setup
	HIDreset();
     d3a:	13 df       	rcall	.-474    	; 0xb62 <HIDreset>
     d3c:	10 92 cf 01 	sts	0x01CF, r1

	ram.skipNHP = 0;
     d40:	88 ef       	ldi	r24, 0xF8	; 248
	NHPreset(&ram.NHP);
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	04 c3       	rjmp	.+1544   	; 0x134e <NHPreset>

00000d46 <spi_init>:
}

void spi_init(void) {
     d46:	83 e5       	ldi	r24, 0x53	; 83
     d48:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     d4a:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     d4c:	8e b5       	in	r24, 0x2e	; 46
     d4e:	08 95       	ret

00000d50 <spi_wait>:
	return reply;
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     d50:	0d b4       	in	r0, 0x2d	; 45
     d52:	07 fe       	sbrs	r0, 7
     d54:	fd cf       	rjmp	.-6      	; 0xd50 <spi_wait>
}
     d56:	08 95       	ret

00000d58 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     d58:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     d5a:	fa df       	rcall	.-12     	; 0xd50 <spi_wait>
     d5c:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     d5e:	08 95       	ret

00000d60 <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <spi_transaction+0x6>
     d66:	1f 92       	push	r1
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     d6c:	2b 83       	std	Y+3, r18	; 0x03
     d6e:	4a 83       	std	Y+2, r20	; 0x02
     d70:	69 83       	std	Y+1, r22	; 0x01
     d72:	f2 df       	rcall	.-28     	; 0xd58 <spi_send>
     d74:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     d76:	86 2f       	mov	r24, r22
     d78:	ef df       	rcall	.-34     	; 0xd58 <spi_send>
     d7a:	4a 81       	ldd	r20, Y+2	; 0x02
     d7c:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     d7e:	ec df       	rcall	.-40     	; 0xd58 <spi_send>
     d80:	2b 81       	ldd	r18, Y+3	; 0x03
     d82:	82 2f       	mov	r24, r18
     d84:	0f 90       	pop	r0
	return spi_send(d);
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	e4 cf       	rjmp	.-56     	; 0xd58 <spi_send>

00000d90 <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     d90:	20 9a       	sbi	0x04, 0	; 4
	//clearHIDReports();


	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);
     d92:	28 9a       	sbi	0x05, 0	; 5
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     d94:	d8 df       	rcall	.-80     	; 0xd46 <spi_init>
     d96:	24 9a       	sbi	0x04, 4	; 4
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);

	spi_init();

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     d98:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     d9a:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     d9c:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	80 e7       	ldi	r24, 0x70	; 112
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <start_pmode+0x14>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <start_pmode+0x1e>
     dae:	00 00       	nop
     db0:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	80 e7       	ldi	r24, 0x70	; 112
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <start_pmode+0x28>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <start_pmode+0x32>
     dc2:	00 00       	nop
     dc4:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     dc6:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     dc8:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	63 e5       	ldi	r22, 0x53	; 83
     dce:	8c ea       	ldi	r24, 0xAC	; 172
     dd0:	c7 df       	rcall	.-114    	; 0xd60 <spi_transaction>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 d2 01 	sts	0x01D2, r24
	ram.isp.pmode = true;
     dd8:	e6 e3       	ldi	r30, 0x36	; 54
     dda:	f1 e0       	ldi	r31, 0x01	; 1
	}

	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     ddc:	8f b7       	in	r24, 0x3f	; 63
     dde:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     de0:	12 82       	std	Z+2, r1	; 0x02
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     de2:	14 82       	std	Z+4, r1	; 0x04

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// TODO index doesnt really matter
		Buffer->Index = 0;
     de4:	8f bf       	out	0x3f, r24	; 63
		Buffer->Count = 0;
     de6:	08 95       	ret

00000de8 <commit>:
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     de8:	5d 9a       	sbi	0x0b, 5	; 11
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	48 2f       	mov	r20, r24
     dee:	69 2f       	mov	r22, r25
     df0:	8c e4       	ldi	r24, 0x4C	; 76
     df2:	b6 df       	rcall	.-148    	; 0xd60 <spi_transaction>
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	86 e7       	ldi	r24, 0x76	; 118
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	80 40       	sbci	r24, 0x00	; 0
     dfe:	90 40       	sbci	r25, 0x00	; 0
     e00:	e1 f7       	brne	.-8      	; 0xdfa <commit+0x12>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <commit+0x1c>
     e04:	00 00       	nop
     e06:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
     e08:	ba ce       	rjmp	.-652    	; 0xb7e <LEDs_TurnOnLEDs>

00000e0a <read_signature>:
	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
}

void read_signature(void) {
     e0a:	ee de       	rcall	.-548    	; 0xbe8 <getch>
     e0c:	80 32       	cpi	r24, 0x20	; 32
     e0e:	59 f0       	breq	.+22     	; 0xe26 <read_signature+0x1c>
     e10:	80 91 d0 01 	lds	r24, 0x01D0
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     e14:	90 91 d1 01 	lds	r25, 0x01D1
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	90 93 d1 01 	sts	0x01D1, r25
     e1e:	80 93 d0 01 	sts	0x01D0, r24
     e22:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     e24:	15 c0       	rjmp	.+42     	; 0xe50 <read_signature+0x46>
     e26:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e28:	ba de       	rcall	.-652    	; 0xb9e <sendCDCbyte>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	96 df       	rcall	.-212    	; 0xd60 <spi_transaction>
     e34:	b4 de       	rcall	.-664    	; 0xb9e <sendCDCbyte>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     e3e:	90 df       	rcall	.-224    	; 0xd60 <spi_transaction>
     e40:	ae de       	rcall	.-676    	; 0xb9e <sendCDCbyte>
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	42 e0       	ldi	r20, 0x02	; 2
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     e4a:	8a df       	rcall	.-236    	; 0xd60 <spi_transaction>
     e4c:	a8 de       	rcall	.-688    	; 0xb9e <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     e4e:	80 e1       	ldi	r24, 0x10	; 16
     e50:	a6 ce       	rjmp	.-692    	; 0xb9e <sendCDCbyte>

00000e52 <universal>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void universal(void) {
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	cf de       	rcall	.-610    	; 0xbf6 <fill>
     e58:	20 91 be 01 	lds	r18, 0x01BE
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     e5c:	40 91 bd 01 	lds	r20, 0x01BD
	sendCDCbyte(STK_OK);
     e60:	60 91 bc 01 	lds	r22, 0x01BC
     e64:	80 91 bb 01 	lds	r24, 0x01BB
     e68:	7b df       	rcall	.-266    	; 0xd60 <spi_transaction>
     e6a:	f7 ce       	rjmp	.-530    	; 0xc5a <breply>

00000e6c <flash>:
void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
}

void flash(uint8_t hilo, int addr, uint8_t data) {
     e6c:	96 2f       	mov	r25, r22
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     e6e:	67 2f       	mov	r22, r23
     e70:	24 2f       	mov	r18, r20
	do {
	} while (!(SPSR & (1 << SPIF)));
}

void flash(uint8_t hilo, int addr, uint8_t data) {
	spi_transaction(0x40 + 8 * hilo,
     e72:	88 0f       	add	r24, r24
     e74:	88 0f       	add	r24, r24
     e76:	88 0f       	add	r24, r24
     e78:	49 2f       	mov	r20, r25
     e7a:	80 5c       	subi	r24, 0xC0	; 192
     e7c:	71 cf       	rjmp	.-286    	; 0xd60 <spi_transaction>

00000e7e <current_page>:
		addr & 0xFF,
		data);
}


int current_page(void) {
     e7e:	80 91 d5 01 	lds	r24, 0x01D5
     e82:	90 91 d6 01 	lds	r25, 0x01D6
     e86:	20 91 d3 01 	lds	r18, 0x01D3
     e8a:	30 91 d4 01 	lds	r19, 0x01D4
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	91 05       	cpc	r25, r1
     e92:	11 f4       	brne	.+4      	; 0xe98 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     e94:	20 7f       	andi	r18, 0xF0	; 240
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     e98:	80 34       	cpi	r24, 0x40	; 64
     e9a:	91 05       	cpc	r25, r1
     e9c:	11 f4       	brne	.+4      	; 0xea2 <current_page+0x24>
     e9e:	20 7e       	andi	r18, 0xE0	; 224
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     ea2:	80 38       	cpi	r24, 0x80	; 128
     ea4:	91 05       	cpc	r25, r1
     ea6:	11 f4       	brne	.+4      	; 0xeac <current_page+0x2e>
     ea8:	20 7c       	andi	r18, 0xC0	; 192
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     eac:	81 15       	cp	r24, r1
     eae:	91 40       	sbci	r25, 0x01	; 1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <current_page+0x36>
     eb2:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     eb4:	c9 01       	movw	r24, r18
     eb6:	08 95       	ret

00000eb8 <flash_read>:
	return STK_OK;
}



uint8_t flash_read(uint8_t hilo, int addr) {
     eb8:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     eba:	88 0f       	add	r24, r24
     ebc:	88 0f       	add	r24, r24
     ebe:	88 0f       	add	r24, r24
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	67 2f       	mov	r22, r23
     ec4:	80 5e       	subi	r24, 0xE0	; 224
     ec6:	4c cf       	rjmp	.-360    	; 0xd60 <spi_transaction>

00000ec8 <flash_read_page>:
	sendCDCbyte(result);
	return;
}


char flash_read_page(int length) {
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	19 c0       	rjmp	.+50     	; 0xf0a <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     ed8:	60 91 d3 01 	lds	r22, 0x01D3
     edc:	70 91 d4 01 	lds	r23, 0x01D4
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	ea df       	rcall	.-44     	; 0xeb8 <flash_read>
     ee4:	5c de       	rcall	.-840    	; 0xb9e <sendCDCbyte>
		sendCDCbyte(low);
     ee6:	60 91 d3 01 	lds	r22, 0x01D3
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     eea:	70 91 d4 01 	lds	r23, 0x01D4
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	e3 df       	rcall	.-58     	; 0xeb8 <flash_read>
     ef2:	55 de       	rcall	.-854    	; 0xb9e <sendCDCbyte>
     ef4:	20 91 d3 01 	lds	r18, 0x01D3
		sendCDCbyte(high);
     ef8:	30 91 d4 01 	lds	r19, 0x01D4
		ram.isp._addr++;
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	30 93 d4 01 	sts	0x01D4, r19
     f04:	20 93 d3 01 	sts	0x01D3, r18
     f08:	22 96       	adiw	r28, 0x02	; 2
     f0a:	c0 17       	cp	r28, r16
     f0c:	d1 07       	cpc	r29, r17
     f0e:	24 f3       	brlt	.-56     	; 0xed8 <flash_read_page+0x10>
	return;
}


char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <eeprom_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char eeprom_read_page(int length) {
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     f2a:	00 91 d3 01 	lds	r16, 0x01D3
     f2e:	10 91 d4 01 	lds	r17, 0x01D4
     f32:	00 0f       	add	r16, r16
     f34:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     f36:	e8 01       	movw	r28, r16
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	4c 2f       	mov	r20, r28
     f3e:	6d 2f       	mov	r22, r29
     f40:	80 ea       	ldi	r24, 0xA0	; 160
     f42:	0e df       	rcall	.-484    	; 0xd60 <spi_transaction>
     f44:	2c de       	rcall	.-936    	; 0xb9e <sendCDCbyte>
		sendCDCbyte(ee);
     f46:	21 96       	adiw	r28, 0x01	; 1
     f48:	ce 01       	movw	r24, r28
     f4a:	80 1b       	sub	r24, r16
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char eeprom_read_page(int length) {
     f4c:	91 0b       	sbc	r25, r17
     f4e:	8e 15       	cp	r24, r14
     f50:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     f52:	9c f3       	brlt	.-26     	; 0xf3a <eeprom_read_page+0x1e>
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <read_page>:
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
	return ram.isp._addr;
}


void read_page(void) {
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f6a:	3e de       	rcall	.-900    	; 0xbe8 <getch>
     f6c:	d8 2f       	mov	r29, r24
     f6e:	3c de       	rcall	.-904    	; 0xbe8 <getch>
	length += getch();
     f70:	c8 2f       	mov	r28, r24
     f72:	3a de       	rcall	.-908    	; 0xbe8 <getch>
     f74:	18 2f       	mov	r17, r24
	char memtype = getch();
     f76:	38 de       	rcall	.-912    	; 0xbe8 <getch>
     f78:	80 32       	cpi	r24, 0x20	; 32
     f7a:	59 f0       	breq	.+22     	; 0xf92 <read_page+0x2e>
	if (CRC_EOP != getch()) {
     f7c:	80 91 d0 01 	lds	r24, 0x01D0
     f80:	90 91 d1 01 	lds	r25, 0x01D1
		ram.isp.error++;
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	90 93 d1 01 	sts	0x01D1, r25
     f8a:	80 93 d0 01 	sts	0x01D0, r24
     f8e:	85 e1       	ldi	r24, 0x15	; 21
     f90:	13 c0       	rjmp	.+38     	; 0xfb8 <read_page+0x54>
     f92:	3d 2f       	mov	r19, r29
     f94:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     f96:	c9 01       	movw	r24, r18
     f98:	8c 0f       	add	r24, r28
}


void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f9a:	91 1d       	adc	r25, r1
     f9c:	ec 01       	movw	r28, r24
	length += getch();
     f9e:	84 e1       	ldi	r24, 0x14	; 20
     fa0:	fe dd       	rcall	.-1028   	; 0xb9e <sendCDCbyte>
     fa2:	16 34       	cpi	r17, 0x46	; 70
     fa4:	19 f4       	brne	.+6      	; 0xfac <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
     fa6:	ce 01       	movw	r24, r28
     fa8:	8f df       	rcall	.-226    	; 0xec8 <flash_read_page>
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
     fac:	15 34       	cpi	r17, 0x45	; 69
     fae:	19 f4       	brne	.+6      	; 0xfb6 <read_page+0x52>
     fb0:	ce 01       	movw	r24, r28
     fb2:	b4 df       	rcall	.-152    	; 0xf1c <eeprom_read_page>
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <read_page+0x54>
     fb6:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	ef cd       	rjmp	.-1058   	; 0xb9e <sendCDCbyte>

00000fc0 <write_flash_chunk>:
	write_flash_chunk(start, remaining);
	return STK_OK;

}

uint8_t write_flash_chunk(int start, int length) {
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
	return ram.isp._addr;
}


void read_page(void) {
	char result = (char)STK_FAILED;
     fc4:	ef 92       	push	r14
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	7b 01       	movw	r14, r22
}

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     fd2:	cb 01       	movw	r24, r22
     fd4:	10 de       	rcall	.-992    	; 0xbf6 <fill>
     fd6:	53 df       	rcall	.-346    	; 0xe7e <current_page>
	int x = 0;
	int page = current_page();
     fd8:	8c 01       	movw	r16, r24
     fda:	c0 e0       	ldi	r28, 0x00	; 0
     fdc:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
     fde:	2d c0       	rjmp	.+90     	; 0x103a <write_flash_chunk+0x7a>
     fe0:	4e df       	rcall	.-356    	; 0xe7e <current_page>
	int page = current_page();
	while (x < length) {
     fe2:	08 17       	cp	r16, r24
		if (page != current_page()) {
     fe4:	19 07       	cpc	r17, r25
     fe6:	21 f0       	breq	.+8      	; 0xff0 <write_flash_chunk+0x30>
     fe8:	c8 01       	movw	r24, r16
     fea:	fe de       	rcall	.-516    	; 0xde8 <commit>
     fec:	48 df       	rcall	.-368    	; 0xe7e <current_page>
			commit(page);
     fee:	8c 01       	movw	r16, r24
     ff0:	96 e3       	ldi	r25, 0x36	; 54
     ff2:	c9 2e       	mov	r12, r25
			page = current_page();
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	d9 2e       	mov	r13, r25
     ff8:	cc 0e       	add	r12, r28
	write_flash_chunk(start, remaining);
	return STK_OK;

}

uint8_t write_flash_chunk(int start, int length) {
     ffa:	dd 1e       	adc	r13, r29
     ffc:	f6 01       	movw	r30, r12
     ffe:	eb 57       	subi	r30, 0x7B	; 123
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	60 91 d3 01 	lds	r22, 0x01D3
    1006:	70 91 d4 01 	lds	r23, 0x01D4
    100a:	40 81       	ld	r20, Z
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	2e df       	rcall	.-420    	; 0xe6c <flash>
    1010:	22 96       	adiw	r28, 0x02	; 2
    1012:	f6 01       	movw	r30, r12
    1014:	ea 57       	subi	r30, 0x7A	; 122
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	60 91 d3 01 	lds	r22, 0x01D3
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
    101c:	70 91 d4 01 	lds	r23, 0x01D4
	write_flash_chunk(start, remaining);
	return STK_OK;

}

uint8_t write_flash_chunk(int start, int length) {
    1020:	40 81       	ld	r20, Z
    1022:	81 e0       	ldi	r24, 0x01	; 1
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
    1024:	23 df       	rcall	.-442    	; 0xe6c <flash>
    1026:	20 91 d3 01 	lds	r18, 0x01D3
    102a:	30 91 d4 01 	lds	r19, 0x01D4
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	30 93 d4 01 	sts	0x01D4, r19
		ram.isp._addr++;
    1036:	20 93 d3 01 	sts	0x01D3, r18
    103a:	ce 15       	cp	r28, r14
    103c:	df 05       	cpc	r29, r15
    103e:	84 f2       	brlt	.-96     	; 0xfe0 <write_flash_chunk+0x20>
    1040:	c8 01       	movw	r24, r16
    1042:	d2 de       	rcall	.-604    	; 0xde8 <commit>
    1044:	80 e1       	ldi	r24, 0x10	; 16
    1046:	df 91       	pop	r29
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13

	return STK_OK;
}
    1054:	cf 90       	pop	r12
    1056:	08 95       	ret

00001058 <write_flash>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1060:	c0 91 d3 01 	lds	r28, 0x01D3
    1064:	d0 91 d4 01 	lds	r29, 0x01D4
    1068:	cc 0f       	add	r28, r28
    106a:	dd 1f       	adc	r29, r29
	int remaining = length;
    106c:	8c 01       	movw	r16, r24
	//if (length > ram.isp.param.flashsize) {
	//	ram.isp.error++;
	//	return STK_FAILED;
	//}

	while (remaining > sizeof(ram.ispBuffer)) {
    106e:	07 c0       	rjmp	.+14     	; 0x107e <write_flash+0x26>
		write_flash_chunk(start, sizeof(ram.ispBuffer));
    1070:	64 e1       	ldi	r22, 0x14	; 20
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	a4 df       	rcall	.-184    	; 0xfc0 <write_flash_chunk>
    1078:	64 96       	adiw	r28, 0x14	; 20
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    107a:	04 51       	subi	r16, 0x14	; 20
    107c:	11 09       	sbc	r17, r1
    107e:	05 31       	cpi	r16, 0x15	; 21
	//if (length > ram.isp.param.flashsize) {
	//	ram.isp.error++;
	//	return STK_FAILED;
	//}

	while (remaining > sizeof(ram.ispBuffer)) {
    1080:	11 05       	cpc	r17, r1
    1082:	b0 f7       	brcc	.-20     	; 0x1070 <write_flash+0x18>
    1084:	b8 01       	movw	r22, r16
		write_flash_chunk(start, sizeof(ram.ispBuffer));
		start += sizeof(ram.ispBuffer);
		remaining -= sizeof(ram.ispBuffer);
	}
	write_flash_chunk(start, remaining);
    1086:	ce 01       	movw	r24, r28
    1088:	9b df       	rcall	.-202    	; 0xfc0 <write_flash_chunk>
    108a:	80 e1       	ldi	r24, 0x10	; 16
    108c:	df 91       	pop	r29
	return STK_OK;

}
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	d8 2f       	mov	r29, r24
    10a8:	c9 2f       	mov	r28, r25
    10aa:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
    10ac:	cb 01       	movw	r24, r22
    10ae:	a3 dd       	rcall	.-1210   	; 0xbf6 <fill>
    10b0:	5d 9a       	sbi	0x0b, 5	; 11
    10b2:	3b eb       	ldi	r19, 0xBB	; 187
    10b4:	c3 2e       	mov	r12, r19
    10b6:	31 e0       	ldi	r19, 0x01	; 1
    10b8:	d3 2e       	mov	r13, r19
    10ba:	0d 2f       	mov	r16, r29
    10bc:	1c 2f       	mov	r17, r28
    10be:	e8 01       	movw	r28, r16
    10c0:	11 c0       	rjmp	.+34     	; 0x10e4 <write_eeprom_chunk+0x4e>
    10c2:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
    10c4:	21 91       	ld	r18, Z+
    10c6:	6f 01       	movw	r12, r30
    10c8:	4c 2f       	mov	r20, r28
    10ca:	6d 2f       	mov	r22, r29
    10cc:	80 ec       	ldi	r24, 0xC0	; 192
    10ce:	48 de       	rcall	.-880    	; 0xd60 <spi_transaction>
    10d0:	ff e7       	ldi	r31, 0x7F	; 127
    10d2:	22 e3       	ldi	r18, 0x32	; 50
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	f1 50       	subi	r31, 0x01	; 1
    10d8:	20 40       	sbci	r18, 0x00	; 0
    10da:	80 40       	sbci	r24, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <write_eeprom_chunk+0x40>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <write_eeprom_chunk+0x4a>
    10e0:	00 00       	nop
    10e2:	21 96       	adiw	r28, 0x01	; 1
    10e4:	ce 01       	movw	r24, r28
    10e6:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    10e8:	91 0b       	sbc	r25, r17
    10ea:	8e 15       	cp	r24, r14
    10ec:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    10ee:	4c f3       	brlt	.-46     	; 0x10c2 <write_eeprom_chunk+0x2c>
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	45 dd       	rcall	.-1398   	; 0xb7e <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
    10f4:	80 e1       	ldi	r24, 0x10	; 16
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
	return STK_OK;
}
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	08 95       	ret

00001108 <write_eeprom>:
	commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1110:	c0 91 d3 01 	lds	r28, 0x01D3
    1114:	d0 91 d4 01 	lds	r29, 0x01D4
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
    1118:	20 91 d7 01 	lds	r18, 0x01D7
    111c:	30 91 d8 01 	lds	r19, 0x01D8
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	24 f0       	brlt	.+8      	; 0x112e <write_eeprom+0x26>
	return STK_OK;
}

uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1126:	cc 0f       	add	r28, r28
    1128:	dd 1f       	adc	r29, r29
    112a:	8c 01       	movw	r16, r24
    112c:	12 c0       	rjmp	.+36     	; 0x1152 <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
    112e:	80 91 d0 01 	lds	r24, 0x01D0
    1132:	90 91 d1 01 	lds	r25, 0x01D1
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	90 93 d1 01 	sts	0x01D1, r25
    113c:	80 93 d0 01 	sts	0x01D0, r24
		return STK_FAILED;
    1140:	81 e1       	ldi	r24, 0x11	; 17
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <write_eeprom+0x58>
	}
	while (remaining > sizeof(ram.ispBuffer)) {
		write_eeprom_chunk(start, sizeof(ram.ispBuffer));
    1144:	64 e1       	ldi	r22, 0x14	; 20
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	ce 01       	movw	r24, r28
    114a:	a5 df       	rcall	.-182    	; 0x1096 <write_eeprom_chunk>
    114c:	64 96       	adiw	r28, 0x14	; 20
	commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    114e:	04 51       	subi	r16, 0x14	; 20
    1150:	11 09       	sbc	r17, r1
    1152:	05 31       	cpi	r16, 0x15	; 21
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > sizeof(ram.ispBuffer)) {
    1154:	11 05       	cpc	r17, r1
    1156:	b0 f7       	brcc	.-20     	; 0x1144 <write_eeprom+0x3c>
    1158:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, sizeof(ram.ispBuffer));
		start += sizeof(ram.ispBuffer);
		remaining -= sizeof(ram.ispBuffer);
	}
	write_eeprom_chunk(start, remaining);
    115a:	ce 01       	movw	r24, r28
    115c:	9c df       	rcall	.-200    	; 0x1096 <write_eeprom_chunk>
    115e:	80 e1       	ldi	r24, 0x10	; 16
    1160:	df 91       	pop	r29
	return STK_OK;
    1162:	cf 91       	pop	r28
}
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <program_page>:
	return STK_OK;
}



void program_page(void) {
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    116e:	3c dd       	rcall	.-1416   	; 0xbe8 <getch>
    1170:	d8 2f       	mov	r29, r24
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	c8 2f       	mov	r28, r24
    1176:	38 dd       	rcall	.-1424   	; 0xbe8 <getch>
	length += getch();
    1178:	c8 0f       	add	r28, r24
    117a:	d1 1d       	adc	r29, r1
    117c:	35 dd       	rcall	.-1430   	; 0xbe8 <getch>
    117e:	86 34       	cpi	r24, 0x46	; 70

	char memtype = getch();
    1180:	19 f4       	brne	.+6      	; 0x1188 <program_page+0x1e>
    1182:	ce 01       	movw	r24, r28
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    1184:	69 df       	rcall	.-302    	; 0x1058 <write_flash>
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <program_page+0x26>
		uint8_t result = write_flash(length);
    1188:	85 34       	cpi	r24, 0x45	; 69
    118a:	a9 f4       	brne	.+42     	; 0x11b6 <program_page+0x4c>
    118c:	ce 01       	movw	r24, r28
    118e:	bc df       	rcall	.-136    	; 0x1108 <write_eeprom>
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}

	if (memtype == 'E') {
    1190:	c8 2f       	mov	r28, r24
    1192:	2a dd       	rcall	.-1452   	; 0xbe8 <getch>
		result = (char)write_eeprom(length);
    1194:	80 32       	cpi	r24, 0x20	; 32
    1196:	21 f4       	brne	.+8      	; 0x11a0 <program_page+0x36>
    1198:	84 e1       	ldi	r24, 0x14	; 20
    119a:	01 dd       	rcall	.-1534   	; 0xb9e <sendCDCbyte>
		if (CRC_EOP == getch()) {
    119c:	8c 2f       	mov	r24, r28
    119e:	0c c0       	rjmp	.+24     	; 0x11b8 <program_page+0x4e>
    11a0:	80 91 d0 01 	lds	r24, 0x01D0
			sendCDCbyte(STK_INSYNC);
    11a4:	90 91 d1 01 	lds	r25, 0x01D1
    11a8:	01 96       	adiw	r24, 0x01	; 1
			sendCDCbyte(result);
    11aa:	90 93 d1 01 	sts	0x01D1, r25
		}
		else {
			ram.isp.error++;
    11ae:	80 93 d0 01 	sts	0x01D0, r24
    11b2:	85 e1       	ldi	r24, 0x15	; 21
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <program_page+0x4e>
    11b6:	81 e1       	ldi	r24, 0x11	; 17
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	f0 cc       	rjmp	.-1568   	; 0xb9e <sendCDCbyte>

000011be <avrisp>:
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}


void avrisp(int ReceivedByte){
    11be:	cf 93       	push	r28
			sendCDCbyte(STK_INSYNC);
			sendCDCbyte(result);
		}
		else {
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11c4:	80 91 d2 01 	lds	r24, 0x01D2
	return;
}
    11c8:	88 23       	and	r24, r24
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <avrisp+0x14>
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11cc:	80 e2       	ldi	r24, 0x20	; 32
    11ce:	d7 dc       	rcall	.-1618   	; 0xb7e <LEDs_TurnOnLEDs>
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <avrisp+0x16>
    11d2:	5d 9a       	sbi	0x0b, 5	; 11
    11d4:	80 91 d0 01 	lds	r24, 0x01D0
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    11d8:	90 91 d1 01 	lds	r25, 0x01D1
    11dc:	89 2b       	or	r24, r25
    11de:	19 f0       	breq	.+6      	; 0x11e6 <avrisp+0x28>
    11e0:	80 e1       	ldi	r24, 0x10	; 16
    11e2:	cd dc       	rcall	.-1638   	; 0xb7e <LEDs_TurnOnLEDs>
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <avrisp+0x2a>
    11e6:	5c 9a       	sbi	0x0b, 4	; 11
    11e8:	d7 fd       	sbrc	r29, 7
    11ea:	ae c0       	rjmp	.+348    	; 0x1348 <avrisp+0x18a>
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    11ec:	c1 35       	cpi	r28, 0x51	; 81
    11ee:	d1 05       	cpc	r29, r1
		switch (ReceivedByte) {
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <avrisp+0x36>
    11f2:	85 c0       	rjmp	.+266    	; 0x12fe <avrisp+0x140>
    11f4:	e4 f4       	brge	.+56     	; 0x122e <avrisp+0x70>
    11f6:	c1 34       	cpi	r28, 0x41	; 65
    11f8:	d1 05       	cpc	r29, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <avrisp+0x40>
    11fc:	52 c0       	rjmp	.+164    	; 0x12a2 <avrisp+0xe4>
    11fe:	54 f4       	brge	.+20     	; 0x1214 <avrisp+0x56>
    1200:	c0 33       	cpi	r28, 0x30	; 48
    1202:	d1 05       	cpc	r29, r1
    1204:	99 f1       	breq	.+102    	; 0x126c <avrisp+0xae>
    1206:	c1 33       	cpi	r28, 0x31	; 49
    1208:	d1 05       	cpc	r29, r1
    120a:	a9 f1       	breq	.+106    	; 0x1276 <avrisp+0xb8>
    120c:	a0 97       	sbiw	r28, 0x20	; 32
    120e:	09 f0       	breq	.+2      	; 0x1212 <avrisp+0x54>
    1210:	89 c0       	rjmp	.+274    	; 0x1324 <avrisp+0x166>
    1212:	7e c0       	rjmp	.+252    	; 0x1310 <avrisp+0x152>
    1214:	c5 34       	cpi	r28, 0x45	; 69
    1216:	d1 05       	cpc	r29, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <avrisp+0x5e>
    121a:	4e c0       	rjmp	.+156    	; 0x12b8 <avrisp+0xfa>
    121c:	c0 35       	cpi	r28, 0x50	; 80
    121e:	d1 05       	cpc	r29, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <avrisp+0x66>
    1222:	4e c0       	rjmp	.+156    	; 0x12c0 <avrisp+0x102>
    1224:	c2 34       	cpi	r28, 0x42	; 66
    1226:	d1 05       	cpc	r29, r1
    1228:	09 f0       	breq	.+2      	; 0x122c <avrisp+0x6e>
    122a:	7c c0       	rjmp	.+248    	; 0x1324 <avrisp+0x166>
    122c:	3e c0       	rjmp	.+124    	; 0x12aa <avrisp+0xec>
    122e:	c1 36       	cpi	r28, 0x61	; 97
    1230:	d1 05       	cpc	r29, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <avrisp+0x78>
    1234:	59 c0       	rjmp	.+178    	; 0x12e8 <avrisp+0x12a>
    1236:	6c f4       	brge	.+26     	; 0x1252 <avrisp+0x94>
    1238:	c6 35       	cpi	r28, 0x56	; 86
    123a:	d1 05       	cpc	r29, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <avrisp+0x82>
    123e:	5c c0       	rjmp	.+184    	; 0x12f8 <avrisp+0x13a>
    1240:	c0 36       	cpi	r28, 0x60	; 96
    1242:	d1 05       	cpc	r29, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <avrisp+0x8a>
    1246:	4f c0       	rjmp	.+158    	; 0x12e6 <avrisp+0x128>
    1248:	c5 35       	cpi	r28, 0x55	; 85
    124a:	d1 05       	cpc	r29, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <avrisp+0x92>
    124e:	6a c0       	rjmp	.+212    	; 0x1324 <avrisp+0x166>
    1250:	39 c0       	rjmp	.+114    	; 0x12c4 <avrisp+0x106>
    1252:	c4 37       	cpi	r28, 0x74	; 116
    1254:	d1 05       	cpc	r29, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <avrisp+0x9c>
    1258:	4c c0       	rjmp	.+152    	; 0x12f2 <avrisp+0x134>
    125a:	c5 37       	cpi	r28, 0x75	; 117
    125c:	d1 05       	cpc	r29, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <avrisp+0xa4>
    1260:	54 c0       	rjmp	.+168    	; 0x130a <avrisp+0x14c>
    1262:	c4 36       	cpi	r28, 0x64	; 100
    1264:	d1 05       	cpc	r29, r1
    1266:	09 f0       	breq	.+2      	; 0x126a <avrisp+0xac>
    1268:	5d c0       	rjmp	.+186    	; 0x1324 <avrisp+0x166>
    126a:	40 c0       	rjmp	.+128    	; 0x12ec <avrisp+0x12e>
    126c:	10 92 d1 01 	sts	0x01D1, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    1270:	10 92 d0 01 	sts	0x01D0, r1
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <avrisp+0xf4>
    1276:	b8 dc       	rcall	.-1680   	; 0xbe8 <getch>
    1278:	80 32       	cpi	r24, 0x20	; 32
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    127a:	09 f0       	breq	.+2      	; 0x127e <avrisp+0xc0>
    127c:	65 c0       	rjmp	.+202    	; 0x1348 <avrisp+0x18a>
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	8e dc       	rcall	.-1764   	; 0xb9e <sendCDCbyte>
    1282:	81 e4       	ldi	r24, 0x41	; 65
				sendCDCbyte(STK_INSYNC);
    1284:	8c dc       	rcall	.-1768   	; 0xb9e <sendCDCbyte>
    1286:	86 e5       	ldi	r24, 0x56	; 86
    1288:	8a dc       	rcall	.-1772   	; 0xb9e <sendCDCbyte>
				sendCDCbyte('A');
    128a:	82 e5       	ldi	r24, 0x52	; 82
    128c:	88 dc       	rcall	.-1776   	; 0xb9e <sendCDCbyte>
    128e:	80 e2       	ldi	r24, 0x20	; 32
				sendCDCbyte('V');
    1290:	86 dc       	rcall	.-1780   	; 0xb9e <sendCDCbyte>
    1292:	89 e4       	ldi	r24, 0x49	; 73
    1294:	84 dc       	rcall	.-1784   	; 0xb9e <sendCDCbyte>
				sendCDCbyte('R');
    1296:	83 e5       	ldi	r24, 0x53	; 83
    1298:	82 dc       	rcall	.-1788   	; 0xb9e <sendCDCbyte>
    129a:	80 e5       	ldi	r24, 0x50	; 80
				sendCDCbyte(' ');
    129c:	80 dc       	rcall	.-1792   	; 0xb9e <sendCDCbyte>
    129e:	80 e1       	ldi	r24, 0x10	; 16
    12a0:	50 c0       	rjmp	.+160    	; 0x1342 <avrisp+0x184>
				sendCDCbyte('I');
    12a2:	a2 dc       	rcall	.-1724   	; 0xbe8 <getch>
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
				sendCDCbyte('S');
    12a8:	f1 cc       	rjmp	.-1566   	; 0xc8c <get_parameters>
    12aa:	84 e1       	ldi	r24, 0x14	; 20
    12ac:	90 e0       	ldi	r25, 0x00	; 0
				sendCDCbyte('P');
    12ae:	a3 dc       	rcall	.-1722   	; 0xbf6 <fill>
    12b0:	bd dc       	rcall	.-1670   	; 0xc2c <set_parameters>
    12b2:	df 91       	pop	r29
				sendCDCbyte(STK_OK);
    12b4:	cf 91       	pop	r28
    12b6:	ff cc       	rjmp	.-1538   	; 0xcb6 <replyOK>
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	90 e0       	ldi	r25, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12bc:	9c dc       	rcall	.-1736   	; 0xbf6 <fill>
    12be:	f9 cf       	rjmp	.-14     	; 0x12b2 <avrisp+0xf4>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12c0:	67 dd       	rcall	.-1330   	; 0xd90 <start_pmode>
    12c2:	f7 cf       	rjmp	.-18     	; 0x12b2 <avrisp+0xf4>
			break;
		case STK_SET_PARM:
			fill(20);
    12c4:	91 dc       	rcall	.-1758   	; 0xbe8 <getch>
    12c6:	c8 2f       	mov	r28, r24
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
    12ca:	d0 93 d4 01 	sts	0x01D4, r29
			set_parameters();
    12ce:	c0 93 d3 01 	sts	0x01D3, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12d2:	8a dc       	rcall	.-1772   	; 0xbe8 <getch>
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    12d4:	38 2f       	mov	r19, r24
    12d6:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    12d8:	2c 0f       	add	r18, r28
    12da:	3d 1f       	adc	r19, r29
    12dc:	30 93 d4 01 	sts	0x01D4, r19
    12e0:	20 93 d3 01 	sts	0x01D3, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    12e4:	e6 cf       	rjmp	.-52     	; 0x12b2 <avrisp+0xf4>
    12e6:	80 dc       	rcall	.-1792   	; 0xbe8 <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    12e8:	7f dc       	rcall	.-1794   	; 0xbe8 <getch>
    12ea:	e3 cf       	rjmp	.-58     	; 0x12b2 <avrisp+0xf4>
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	3c cf       	rjmp	.-392    	; 0x116a <program_page>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	36 ce       	rjmp	.-916    	; 0xf64 <read_page>
			ram.isp._addr += 256 * getch();
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	aa cd       	rjmp	.-1196   	; 0xe52 <universal>
    12fe:	10 92 d1 01 	sts	0x01D1, r1
    1302:	10 92 d0 01 	sts	0x01D0, r1
    1306:	0b dd       	rcall	.-1514   	; 0xd1e <end_pmode>
    1308:	d4 cf       	rjmp	.-88     	; 0x12b2 <avrisp+0xf4>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    130e:	7d cd       	rjmp	.-1286   	; 0xe0a <read_signature>
    1310:	80 91 d0 01 	lds	r24, 0x01D0
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1314:	90 91 d1 01 	lds	r25, 0x01D1
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	90 93 d1 01 	sts	0x01D1, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    131e:	80 93 d0 01 	sts	0x01D0, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <avrisp+0x182>
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1324:	80 91 d0 01 	lds	r24, 0x01D0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1328:	90 91 d1 01 	lds	r25, 0x01D1
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	90 93 d1 01 	sts	0x01D1, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    1332:	80 93 d0 01 	sts	0x01D0, r24
    1336:	58 dc       	rcall	.-1872   	; 0xbe8 <getch>
			end_pmode();
    1338:	80 32       	cpi	r24, 0x20	; 32
    133a:	11 f4       	brne	.+4      	; 0x1340 <avrisp+0x182>
    133c:	82 e1       	ldi	r24, 0x12	; 18
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <avrisp+0x184>
    1340:	85 e1       	ldi	r24, 0x15	; 21
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1346:	2b cc       	rjmp	.-1962   	; 0xb9e <sendCDCbyte>
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    134e:	fc 01       	movw	r30, r24
    1350:	20 81       	ld	r18, Z
	protocol->leadError = false;
    1352:	20 68       	ori	r18, 0x80	; 128
    1354:	2f 7b       	andi	r18, 0xBF	; 191
    1356:	20 83       	st	Z, r18
    1358:	08 95       	ret

0000135a <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    1360:	90 81       	ld	r25, Z
    1362:	96 ff       	sbrs	r25, 6
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1366:	29 2f       	mov	r18, r25
    1368:	26 95       	lsr	r18
    136a:	26 95       	lsr	r18
    136c:	26 95       	lsr	r18
    136e:	27 70       	andi	r18, 0x07	; 7
    1370:	db 01       	movw	r26, r22
    1372:	a2 0f       	add	r26, r18
    1374:	b1 1d       	adc	r27, r1
    1376:	15 96       	adiw	r26, 0x05	; 5
    1378:	2c 91       	ld	r18, X
    137a:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    137c:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    137e:	98 60       	ori	r25, 0x08	; 8
    1380:	9f 7b       	andi	r25, 0xBF	; 191
    1382:	03 c0       	rjmp	.+6      	; 0x138a <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    1384:	97 ff       	sbrs	r25, 7
    1386:	02 c0       	rjmp	.+4      	; 0x138c <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    1388:	90 7c       	andi	r25, 0xC0	; 192
    138a:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    138c:	90 81       	ld	r25, Z
    138e:	96 95       	lsr	r25
    1390:	96 95       	lsr	r25
    1392:	96 95       	lsr	r25
    1394:	97 70       	andi	r25, 0x07	; 7
    1396:	df 01       	movw	r26, r30
    1398:	a9 0f       	add	r26, r25
    139a:	b1 1d       	adc	r27, r1
    139c:	15 96       	adiw	r26, 0x05	; 5
    139e:	8c 93       	st	X, r24
    13a0:	29 2f       	mov	r18, r25
    13a2:	2f 5f       	subi	r18, 0xFF	; 255
    13a4:	27 70       	andi	r18, 0x07	; 7
    13a6:	22 0f       	add	r18, r18
    13a8:	22 0f       	add	r18, r18
    13aa:	22 0f       	add	r18, r18
    13ac:	40 81       	ld	r20, Z
    13ae:	47 7c       	andi	r20, 0xC7	; 199
    13b0:	42 2b       	or	r20, r18
    13b2:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    13b4:	28 2f       	mov	r18, r24
    13b6:	20 7c       	andi	r18, 0xC0	; 192
    13b8:	34 2f       	mov	r19, r20
    13ba:	37 70       	andi	r19, 0x07	; 7
    13bc:	20 38       	cpi	r18, 0x80	; 128
    13be:	09 f4       	brne	.+2      	; 0x13c2 <NHPread+0x68>
    13c0:	63 c0       	rjmp	.+198    	; 0x1488 <NHPread+0x12e>
    13c2:	20 3c       	cpi	r18, 0xC0	; 192
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <NHPread+0x6e>
    13c6:	45 c0       	rjmp	.+138    	; 0x1452 <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    13c8:	28 2f       	mov	r18, r24
    13ca:	28 73       	andi	r18, 0x38	; 56
    13cc:	26 95       	lsr	r18
    13ce:	26 95       	lsr	r18
    13d0:	26 95       	lsr	r18

		if (protocol->mBlocks){
    13d2:	33 23       	and	r19, r19
    13d4:	49 f0       	breq	.+18     	; 0x13e8 <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    13d6:	99 0f       	add	r25, r25
    13d8:	99 0f       	add	r25, r25
    13da:	99 0f       	add	r25, r25
    13dc:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    13de:	49 2b       	or	r20, r25
    13e0:	40 64       	ori	r20, 0x40	; 64
    13e2:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    13e4:	9e ef       	ldi	r25, 0xFE	; 254
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    13e8:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	98 f4       	brcc	.+38     	; 0x1414 <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    13ee:	90 81       	ld	r25, Z
    13f0:	96 fb       	bst	r25, 6
    13f2:	22 27       	eor	r18, r18
    13f4:	20 f9       	bld	r18, 0
    13f6:	89 2f       	mov	r24, r25
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	86 95       	lsr	r24
    13fe:	82 0f       	add	r24, r18
    1400:	87 70       	andi	r24, 0x07	; 7
    1402:	88 0f       	add	r24, r24
    1404:	88 0f       	add	r24, r24
    1406:	88 0f       	add	r24, r24
    1408:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    140a:	98 2b       	or	r25, r24
    140c:	9f 7b       	andi	r25, 0xBF	; 191
    140e:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    1410:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <NHPread+0x138>
		}

		else if (blocks == 7){
    1414:	27 30       	cpi	r18, 0x07	; 7
    1416:	59 f4       	brne	.+22     	; 0x142e <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    1418:	08 2f       	mov	r16, r24
    141a:	0f 70       	andi	r16, 0x0F	; 15
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	01 83       	std	Z+1, r16	; 0x01
    1424:	12 83       	std	Z+2, r17	; 0x02
    1426:	23 83       	std	Z+3, r18	; 0x03
    1428:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    142a:	25 e0       	ldi	r18, 0x05	; 5
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    142e:	48 2f       	mov	r20, r24
    1430:	47 70       	andi	r20, 0x07	; 7
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	41 83       	std	Z+1, r20	; 0x01
    143a:	52 83       	std	Z+2, r21	; 0x02
    143c:	63 83       	std	Z+3, r22	; 0x03
    143e:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    1440:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1442:	27 70       	andi	r18, 0x07	; 7
    1444:	80 81       	ld	r24, Z
    1446:	88 7f       	andi	r24, 0xF8	; 248
    1448:	82 2b       	or	r24, r18
    144a:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    144c:	99 23       	and	r25, r25
    144e:	29 f1       	breq	.+74     	; 0x149a <NHPread+0x140>
    1450:	20 c0       	rjmp	.+64     	; 0x1492 <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1452:	03 2f       	mov	r16, r19
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	02 30       	cpi	r16, 0x02	; 2
    1458:	11 05       	cpc	r17, r1
    145a:	24 f1       	brlt	.+72     	; 0x14a4 <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    145c:	39 5f       	subi	r19, 0xF9	; 249
    145e:	37 70       	andi	r19, 0x07	; 7
    1460:	48 7f       	andi	r20, 0xF8	; 248
    1462:	43 2b       	or	r20, r19
    1464:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1466:	41 81       	ldd	r20, Z+1	; 0x01
    1468:	52 81       	ldd	r21, Z+2	; 0x02
    146a:	63 81       	ldd	r22, Z+3	; 0x03
    146c:	74 81       	ldd	r23, Z+4	; 0x04
    146e:	97 e0       	ldi	r25, 0x07	; 7
    1470:	44 0f       	add	r20, r20
    1472:	55 1f       	adc	r21, r21
    1474:	66 1f       	adc	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	9a 95       	dec	r25
    147a:	d1 f7       	brne	.-12     	; 0x1470 <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    147c:	48 2b       	or	r20, r24
    147e:	41 83       	std	Z+1, r20	; 0x01
    1480:	52 83       	std	Z+2, r21	; 0x02
    1482:	63 83       	std	Z+3, r22	; 0x03
    1484:	74 83       	std	Z+4, r23	; 0x04
    1486:	09 c0       	rjmp	.+18     	; 0x149a <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    1488:	31 30       	cpi	r19, 0x01	; 1
    148a:	71 f4       	brne	.+28     	; 0x14a8 <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    148c:	98 2f       	mov	r25, r24
    148e:	9f 73       	andi	r25, 0x3F	; 63
    1490:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    1492:	80 81       	ld	r24, Z
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	80 83       	st	Z, r24
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    149a:	80 81       	ld	r24, Z
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	80 83       	st	Z, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    14a4:	9d ef       	ldi	r25, 0xFD	; 253
    14a6:	f5 cf       	rjmp	.-22     	; 0x1492 <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    14a8:	9c ef       	ldi	r25, 0xFC	; 252
    14aa:	f3 cf       	rjmp	.-26     	; 0x1492 <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    14ac:	89 2f       	mov	r24, r25
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	08 95       	ret

000014b4 <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    14be:	4d df       	rcall	.-358    	; 0x135a <NHPread>
    14c0:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    14c2:	b4 f4       	brge	.+44     	; 0x14f0 <NHPreadChecksum+0x3c>
    14c4:	09 81       	ldd	r16, Y+1	; 0x01
    14c6:	1a 81       	ldd	r17, Y+2	; 0x02
    14c8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ca:	3c 81       	ldd	r19, Y+4	; 0x04
    14cc:	a9 01       	movw	r20, r18
    14ce:	66 27       	eor	r22, r22
    14d0:	77 27       	eor	r23, r23
    14d2:	22 27       	eor	r18, r18
    14d4:	33 27       	eor	r19, r19
    14d6:	40 27       	eor	r20, r16
    14d8:	51 27       	eor	r21, r17
    14da:	62 27       	eor	r22, r18
    14dc:	73 27       	eor	r23, r19
    14de:	4f 3f       	cpi	r20, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	61 05       	cpc	r22, r1
    14e4:	71 05       	cpc	r23, r1
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <NHPreadChecksum+0x3c>
    14e8:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	88 83       	st	Y, r24
    14ee:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    14f0:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    14fa:	fa 01       	movw	r30, r20
    14fc:	2c e1       	ldi	r18, 0x1C	; 28
    14fe:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    1500:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1502:	ab 01       	movw	r20, r22
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <NHPwriteChecksum+0x12>
    1508:	56 95       	lsr	r21
    150a:	47 95       	ror	r20
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    1510:	48 30       	cpi	r20, 0x08	; 8
    1512:	28 f0       	brcs	.+10     	; 0x151e <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    1514:	97 30       	cpi	r25, 0x07	; 7
    1516:	59 f4       	brne	.+22     	; 0x152e <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    1518:	40 83       	st	Z, r20
				blocks--;
    151a:	96 e0       	ldi	r25, 0x06	; 6
    151c:	08 c0       	rjmp	.+16     	; 0x152e <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    151e:	40 83       	st	Z, r20
			blocks--;
    1520:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1522:	41 11       	cpse	r20, r1
    1524:	04 c0       	rjmp	.+8      	; 0x152e <NHPwriteChecksum+0x34>
    1526:	27 50       	subi	r18, 0x07	; 7
    1528:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    152a:	92 30       	cpi	r25, 0x02	; 2
    152c:	51 f7       	brne	.-44     	; 0x1502 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    152e:	49 2f       	mov	r20, r25
    1530:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1532:	0d c0       	rjmp	.+26     	; 0x154e <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1534:	df 01       	movw	r26, r30
    1536:	a4 0f       	add	r26, r20
    1538:	b1 1d       	adc	r27, r1
    153a:	9b 01       	movw	r18, r22
    153c:	2f 77       	andi	r18, 0x7F	; 127
    153e:	33 27       	eor	r19, r19
    1540:	2c 93       	st	X, r18
		data >>= 7;
    1542:	66 0f       	add	r22, r22
    1544:	67 2f       	mov	r22, r23
    1546:	66 1f       	adc	r22, r22
    1548:	77 0b       	sbc	r23, r23
    154a:	71 95       	neg	r23
		datablocks--;
    154c:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    154e:	41 11       	cpse	r20, r1
    1550:	f1 cf       	rjmp	.-30     	; 0x1534 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1552:	49 2f       	mov	r20, r25
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	9a 01       	movw	r18, r20
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	6a 95       	dec	r22
    1560:	e1 f7       	brne	.-8      	; 0x155a <NHPwriteChecksum+0x60>
    1562:	20 6c       	ori	r18, 0xC0	; 192
    1564:	3f 6f       	ori	r19, 0xFF	; 255
    1566:	30 81       	ld	r19, Z
    1568:	32 2b       	or	r19, r18
    156a:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    156c:	e4 0f       	add	r30, r20
    156e:	f5 1f       	adc	r31, r21
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	81 50       	subi	r24, 0x01	; 1
    1574:	8f 73       	andi	r24, 0x3F	; 63
    1576:	80 68       	ori	r24, 0x80	; 128
    1578:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    157a:	89 2f       	mov	r24, r25
    157c:	08 95       	ret

0000157e <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    157e:	fc 01       	movw	r30, r24
    1580:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    1582:	20 ff       	sbrs	r18, 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    1586:	5f 98       	cbi	0x0b, 7	; 11
    1588:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    158a:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    158c:	8b b1       	in	r24, 0x0b	; 11
    158e:	80 63       	ori	r24, 0x30	; 48
    1590:	8b b9       	out	0x0b, r24	; 11
    1592:	08 95       	ret

00001594 <SerialInitHID>:
	//if (!ram.isp.pmode)
	//clearHIDReports();
}

// change Serial baud to 115200 for HID
void SerialInitHID(void){
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1598:	80 e1       	ldi	r24, 0x10	; 16
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	90 93 cd 00 	sts	0x00CD, r25
    15a0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    15a4:	ca ec       	ldi	r28, 0xCA	; 202
    15a6:	d0 e0       	ldi	r29, 0x00	; 0
    15a8:	96 e0       	ldi	r25, 0x06	; 6
    15aa:	98 83       	st	Y, r25
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    15ac:	a8 ec       	ldi	r26, 0xC8	; 200
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	8c 93       	st	X, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    15b4:	e9 ec       	ldi	r30, 0xC9	; 201
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	28 e1       	ldi	r18, 0x18	; 24
    15ba:	20 83       	st	Z, r18

				DDRD  |= (1 << 3);
    15bc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    15be:	5a 9a       	sbi	0x0b, 2	; 11
	Serial_Init(115200, true);

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	// Added for correct Serial connection at baud 115200 <--
	// TODO PD3 ??
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    15c0:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    15c2:	10 82       	st	Z, r1
	UCSR1A = 0;
    15c4:	1c 92       	st	X, r1
	UCSR1C = 0;
    15c6:	18 82       	st	Y, r1

	// these are values for baud 115200. i just read them manual from change
	// its needed to start with baud 115200 on powerup
	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10)); //C: 0x06
    15c8:	98 83       	st	Y, r25
	UCSR1A = (1 << U2X1); //A: 0x02
    15ca:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1)); //B: 0x98
    15cc:	88 e9       	ldi	r24, 0x98	; 152
    15ce:	80 83       	st	Z, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    15d0:	5b 98       	cbi	0x0b, 3	; 11
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	e9 8d       	ldd	r30, Y+25	; 0x19
    15e2:	e1 50       	subi	r30, 0x01	; 1
    15e4:	e2 30       	cpi	r30, 0x02	; 2
    15e6:	28 f4       	brcc	.+10     	; 0x15f2 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	ec 5c       	subi	r30, 0xCC	; 204
    15ec:	fe 4f       	sbci	r31, 0xFE	; 254
    15ee:	10 81       	ld	r17, Z
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    15f2:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    15f4:	88 8d       	ldd	r24, Y+24	; 0x18
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	09 f4       	brne	.+2      	; 0x15fc <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    15fa:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    15fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15fe:	87 30       	cpi	r24, 0x07	; 7
    1600:	31 f0       	breq	.+12     	; 0x160e <EVENT_CDC_Device_LineEncodingChanged+0x36>
    1602:	88 30       	cpi	r24, 0x08	; 8
    1604:	31 f0       	breq	.+12     	; 0x1612 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    1606:	86 30       	cpi	r24, 0x06	; 6
    1608:	29 f4       	brne	.+10     	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    160a:	12 60       	ori	r17, 0x02	; 2
		break;
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    160e:	14 60       	ori	r17, 0x04	; 4
		break;
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    1612:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    1614:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    1616:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    161a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    161e:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1622:	2c 89       	ldd	r18, Y+20	; 0x14
    1624:	3d 89       	ldd	r19, Y+21	; 0x15
    1626:	4e 89       	ldd	r20, Y+22	; 0x16
    1628:	5f 89       	ldd	r21, Y+23	; 0x17
    162a:	21 15       	cp	r18, r1
    162c:	81 ee       	ldi	r24, 0xE1	; 225
    162e:	38 07       	cpc	r19, r24
    1630:	41 05       	cpc	r20, r1
    1632:	51 05       	cpc	r21, r1
    1634:	79 f0       	breq	.+30     	; 0x1654 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1636:	ca 01       	movw	r24, r20
    1638:	b9 01       	movw	r22, r18
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	77 95       	ror	r23
    1640:	67 95       	ror	r22
    1642:	60 58       	subi	r22, 0x80	; 128
    1644:	7b 47       	sbci	r23, 0x7B	; 123
    1646:	81 4e       	sbci	r24, 0xE1	; 225
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	0e 94 b4 13 	call	0x2768	; 0x2768 <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	31 09       	sbc	r19, r1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <EVENT_CDC_Device_LineEncodingChanged+0x80>
    1654:	20 e1       	ldi	r18, 0x10	; 16
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	30 93 cd 00 	sts	0x00CD, r19
    165c:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    1660:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1664:	8c 89       	ldd	r24, Y+20	; 0x14
    1666:	9d 89       	ldd	r25, Y+21	; 0x15
    1668:	ae 89       	ldd	r26, Y+22	; 0x16
    166a:	bf 89       	ldd	r27, Y+23	; 0x17
    166c:	81 15       	cp	r24, r1
    166e:	91 4e       	sbci	r25, 0xE1	; 225
    1670:	a1 05       	cpc	r26, r1
    1672:	b1 05       	cpc	r27, r1
    1674:	11 f4       	brne	.+4      	; 0x167a <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	01 c0       	rjmp	.+2      	; 0x167c <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    1680:	88 e9       	ldi	r24, 0x98	; 152
    1682:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    1686:	5b 98       	cbi	0x0b, 3	; 11

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
    1688:	8c 89       	ldd	r24, Y+20	; 0x14
    168a:	9d 89       	ldd	r25, Y+21	; 0x15
    168c:	ae 89       	ldd	r26, Y+22	; 0x16
    168e:	bf 89       	ldd	r27, Y+23	; 0x17
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	11 f4       	brne	.+4      	; 0x169c <EVENT_CDC_Device_LineEncodingChanged+0xc4>
		SerialInitHID();
    1698:	7d df       	rcall	.-262    	; 0x1594 <SerialInitHID>
    169a:	76 da       	rcall	.-2836   	; 0xb88 <avrispReset>
		// disable the buffer until pmode has started
		//LRingBuffer_DisableBuffer(&ram.RingBuffer);
		//TODO add a pmode block?

		avrispReset();
    169c:	80 91 d2 01 	lds	r24, 0x01D2
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
    16a0:	88 23       	and	r24, r24
    16a2:	21 f0       	breq	.+8      	; 0x16ac <EVENT_CDC_Device_LineEncodingChanged+0xd4>
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
		//TODO pmode break to get out of this loop
		end_pmode();
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16a8:	1f 91       	pop	r17
    16aa:	39 cb       	rjmp	.-2446   	; 0xd1e <end_pmode>
    16ac:	df 91       	pop	r29
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
		//TODO pmode break to get out of this loop
		end_pmode();
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16b2:	92 c9       	rjmp	.-3292   	; 0x9d8 <clearHIDReports>

000016b4 <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    16b4:	68 0f       	add	r22, r24
    16b6:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    16ba:	fc 01       	movw	r30, r24
    16bc:	21 91       	ld	r18, Z+
    16be:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    16c0:	30 91 c8 00 	lds	r19, 0x00C8
    16c4:	35 ff       	sbrs	r19, 5
    16c6:	fc cf       	rjmp	.-8      	; 0x16c0 <Serial_SendData+0xc>
				UDR1 = DataByte;
    16c8:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    16cc:	86 17       	cp	r24, r22
    16ce:	97 07       	cpc	r25, r23
    16d0:	a1 f7       	brne	.-24     	; 0x16ba <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    16d2:	08 95       	ret

000016d4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16d4:	bf 92       	push	r11
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	7c 01       	movw	r14, r24
    16e8:	8b 01       	movw	r16, r22
    16ea:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16ec:	d7 d1       	rcall	.+942    	; 0x1a9c <Endpoint_WaitUntilReady>
    16ee:	b8 2e       	mov	r11, r24
    16f0:	81 11       	cpse	r24, r1
    16f2:	32 c0       	rjmp	.+100    	; 0x1758 <Endpoint_Write_Stream_LE+0x84>
    16f4:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16f6:	31 f0       	breq	.+12     	; 0x1704 <Endpoint_Write_Stream_LE+0x30>
    16f8:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    16fa:	39 81       	ldd	r19, Y+1	; 0x01
    16fc:	02 1b       	sub	r16, r18
    16fe:	13 0b       	sbc	r17, r19
    1700:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1702:	f3 1e       	adc	r15, r19
    1704:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1706:	d1 2c       	mov	r13, r1
    1708:	22 c0       	rjmp	.+68     	; 0x174e <Endpoint_Write_Stream_LE+0x7a>
    170a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    170e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1710:	14 c0       	rjmp	.+40     	; 0x173a <Endpoint_Write_Stream_LE+0x66>
    1712:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1716:	8e 77       	andi	r24, 0x7E	; 126
    1718:	80 93 e8 00 	sts	0x00E8, r24
    171c:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    171e:	49 f0       	breq	.+18     	; 0x1732 <Endpoint_Write_Stream_LE+0x5e>
    1720:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1722:	99 81       	ldd	r25, Y+1	; 0x01
    1724:	8c 0d       	add	r24, r12
    1726:	9d 1d       	adc	r25, r13
    1728:	99 83       	std	Y+1, r25	; 0x01
    172a:	88 83       	st	Y, r24
    172c:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    172e:	b2 2e       	mov	r11, r18
    1730:	13 c0       	rjmp	.+38     	; 0x1758 <Endpoint_Write_Stream_LE+0x84>
    1732:	b4 d1       	rcall	.+872    	; 0x1a9c <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1734:	88 23       	and	r24, r24
    1736:	59 f0       	breq	.+22     	; 0x174e <Endpoint_Write_Stream_LE+0x7a>
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <Endpoint_Write_Stream_LE+0x82>
    173a:	f7 01       	movw	r30, r14
    173c:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    173e:	7f 01       	movw	r14, r30
    1740:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1744:	01 50       	subi	r16, 0x01	; 1
    1746:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1748:	ff ef       	ldi	r31, 0xFF	; 255
    174a:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    174c:	df 0a       	sbc	r13, r31
    174e:	01 15       	cp	r16, r1
    1750:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1752:	d9 f6       	brne	.-74     	; 0x170a <Endpoint_Write_Stream_LE+0x36>
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <Endpoint_Write_Stream_LE+0x84>
    1756:	b8 2e       	mov	r11, r24
    1758:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    175a:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	08 95       	ret

0000176e <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    176e:	20 91 0e 02 	lds	r18, 0x020E
    1772:	30 91 0f 02 	lds	r19, 0x020F
    1776:	26 17       	cp	r18, r22
    1778:	37 07       	cpc	r19, r23
    177a:	48 f0       	brcs	.+18     	; 0x178e <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    177c:	61 15       	cp	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	39 f4       	brne	.+14     	; 0x1790 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1782:	20 91 e8 00 	lds	r18, 0x00E8
    1786:	2e 77       	andi	r18, 0x7E	; 126
    1788:	20 93 e8 00 	sts	0x00E8, r18
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    178e:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1790:	9c 01       	movw	r18, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	34 c0       	rjmp	.+104    	; 0x17fe <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1796:	90 91 07 02 	lds	r25, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    179a:	99 23       	and	r25, r25
    179c:	09 f4       	brne	.+2      	; 0x17a0 <Endpoint_Write_Control_Stream_LE+0x32>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17a0:	95 30       	cpi	r25, 0x05	; 5
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Endpoint_Write_Control_Stream_LE+0x38>
    17a4:	42 c0       	rjmp	.+132    	; 0x182a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17a6:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17aa:	93 fd       	sbrc	r25, 3
    17ac:	3a c0       	rjmp	.+116    	; 0x1822 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17ae:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    17b2:	92 fd       	sbrc	r25, 2
    17b4:	30 c0       	rjmp	.+96     	; 0x1816 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17b6:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    17ba:	90 ff       	sbrs	r25, 0
    17bc:	20 c0       	rjmp	.+64     	; 0x17fe <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    17be:	80 91 f2 00 	lds	r24, 0x00F2
    17c2:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17c4:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17c6:	82 1b       	sub	r24, r18
    17c8:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17cc:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ce:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17d6:	9f 01       	movw	r18, r30
    17d8:	28 0f       	add	r18, r24
    17da:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17dc:	61 15       	cp	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <Endpoint_Write_Control_Stream_LE+0x7a>
    17e2:	28 30       	cpi	r18, 0x08	; 8
    17e4:	31 05       	cpc	r19, r1
    17e6:	90 f3       	brcs	.-28     	; 0x17cc <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	28 30       	cpi	r18, 0x08	; 8
    17ec:	31 05       	cpc	r19, r1
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <Endpoint_Write_Control_Stream_LE+0x84>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f2:	90 91 e8 00 	lds	r25, 0x00E8
    17f6:	9e 77       	andi	r25, 0x7E	; 126
    17f8:	90 93 e8 00 	sts	0x00E8, r25
    17fc:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    17fe:	61 15       	cp	r22, r1
    1800:	71 05       	cpc	r23, r1
    1802:	49 f6       	brne	.-110    	; 0x1796 <Endpoint_Write_Control_Stream_LE+0x28>
    1804:	81 11       	cpse	r24, r1
    1806:	c7 cf       	rjmp	.-114    	; 0x1796 <Endpoint_Write_Control_Stream_LE+0x28>
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    180a:	80 91 07 02 	lds	r24, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    180e:	88 23       	and	r24, r24
    1810:	51 f0       	breq	.+20     	; 0x1826 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1812:	85 30       	cpi	r24, 0x05	; 5
    1814:	51 f0       	breq	.+20     	; 0x182a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1816:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    181a:	82 ff       	sbrs	r24, 2
    181c:	f6 cf       	rjmp	.-20     	; 0x180a <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    182a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    182c:	08 95       	ret

0000182e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    182e:	61 15       	cp	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	29 f4       	brne	.+10     	; 0x183e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1834:	20 91 e8 00 	lds	r18, 0x00E8
    1838:	2b 77       	andi	r18, 0x7B	; 123
    183a:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    183e:	9c 01       	movw	r18, r24
    1840:	21 c0       	rjmp	.+66     	; 0x1884 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1842:	80 91 07 02 	lds	r24, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1846:	88 23       	and	r24, r24
    1848:	81 f1       	breq	.+96     	; 0x18aa <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	41 f1       	breq	.+80     	; 0x189e <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    184e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1852:	83 fd       	sbrc	r24, 3
    1854:	26 c0       	rjmp	.+76     	; 0x18a2 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    185a:	82 ff       	sbrs	r24, 2
    185c:	f2 cf       	rjmp	.-28     	; 0x1842 <Endpoint_Read_Control_Stream_LE+0x14>
    185e:	f9 01       	movw	r30, r18
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1862:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1866:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1868:	9f 01       	movw	r18, r30
				Length--;
    186a:	61 50       	subi	r22, 0x01	; 1
    186c:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    186e:	29 f0       	breq	.+10     	; 0x187a <Endpoint_Read_Control_Stream_LE+0x4c>
    1870:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1872:	80 91 f2 00 	lds	r24, 0x00F2
    1876:	81 11       	cpse	r24, r1
    1878:	f4 cf       	rjmp	.-24     	; 0x1862 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    187a:	80 91 e8 00 	lds	r24, 0x00E8
    187e:	8b 77       	andi	r24, 0x7B	; 123
    1880:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1884:	61 15       	cp	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	e1 f6       	brne	.-72     	; 0x1842 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    188a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    188e:	80 fd       	sbrc	r24, 0
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1892:	80 91 07 02 	lds	r24, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1896:	88 23       	and	r24, r24
    1898:	41 f0       	breq	.+16     	; 0x18aa <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    189a:	85 30       	cpi	r24, 0x05	; 5
    189c:	b1 f7       	brne	.-20     	; 0x188a <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18aa:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18ac:	08 95       	ret

000018ae <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ae:	20 91 0e 02 	lds	r18, 0x020E
    18b2:	30 91 0f 02 	lds	r19, 0x020F
    18b6:	26 17       	cp	r18, r22
    18b8:	37 07       	cpc	r19, r23
    18ba:	48 f0       	brcs	.+18     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18bc:	61 15       	cp	r22, r1
    18be:	71 05       	cpc	r23, r1
    18c0:	39 f4       	brne	.+14     	; 0x18d0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c2:	20 91 e8 00 	lds	r18, 0x00E8
    18c6:	2e 77       	andi	r18, 0x7E	; 126
    18c8:	20 93 e8 00 	sts	0x00E8, r18
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ce:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18d0:	9c 01       	movw	r18, r24
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	35 c0       	rjmp	.+106    	; 0x1940 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18d6:	90 91 07 02 	lds	r25, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18da:	99 23       	and	r25, r25
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <Endpoint_Write_Control_PStream_LE+0x32>
    18de:	44 c0       	rjmp	.+136    	; 0x1968 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18e0:	95 30       	cpi	r25, 0x05	; 5
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Endpoint_Write_Control_PStream_LE+0x38>
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18e6:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ea:	93 fd       	sbrc	r25, 3
    18ec:	3b c0       	rjmp	.+118    	; 0x1964 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ee:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18f2:	92 fd       	sbrc	r25, 2
    18f4:	31 c0       	rjmp	.+98     	; 0x1958 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18f6:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18fa:	90 ff       	sbrs	r25, 0
    18fc:	21 c0       	rjmp	.+66     	; 0x1940 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    18fe:	80 91 f2 00 	lds	r24, 0x00F2
    1902:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1904:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1906:	82 1b       	sub	r24, r18
    1908:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    190c:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    190e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1912:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1914:	61 50       	subi	r22, 0x01	; 1
    1916:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1918:	9c 01       	movw	r18, r24
    191a:	2e 0f       	add	r18, r30
    191c:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    191e:	61 15       	cp	r22, r1
    1920:	71 05       	cpc	r23, r1
    1922:	19 f0       	breq	.+6      	; 0x192a <Endpoint_Write_Control_PStream_LE+0x7c>
    1924:	28 30       	cpi	r18, 0x08	; 8
    1926:	31 05       	cpc	r19, r1
    1928:	88 f3       	brcs	.-30     	; 0x190c <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	28 30       	cpi	r18, 0x08	; 8
    192e:	31 05       	cpc	r19, r1
    1930:	09 f0       	breq	.+2      	; 0x1934 <Endpoint_Write_Control_PStream_LE+0x86>
    1932:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1934:	90 91 e8 00 	lds	r25, 0x00E8
    1938:	9e 77       	andi	r25, 0x7E	; 126
    193a:	90 93 e8 00 	sts	0x00E8, r25
    193e:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1940:	61 15       	cp	r22, r1
    1942:	71 05       	cpc	r23, r1
    1944:	41 f6       	brne	.-112    	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0x28>
    1946:	81 11       	cpse	r24, r1
    1948:	c6 cf       	rjmp	.-116    	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0x28>
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    194c:	80 91 07 02 	lds	r24, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1950:	88 23       	and	r24, r24
    1952:	51 f0       	breq	.+20     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1954:	85 30       	cpi	r24, 0x05	; 5
    1956:	51 f0       	breq	.+20     	; 0x196c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1958:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    195c:	82 ff       	sbrs	r24, 2
    195e:	f6 cf       	rjmp	.-20     	; 0x194c <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    196c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    196e:	08 95       	ret

00001970 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1970:	98 2f       	mov	r25, r24
    1972:	2c c0       	rjmp	.+88     	; 0x19cc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1974:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1978:	98 17       	cp	r25, r24
    197a:	39 f0       	breq	.+14     	; 0x198a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    197c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1980:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1984:	50 91 f0 00 	lds	r21, 0x00F0
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    198a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    198c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    198e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1990:	21 fd       	sbrc	r18, 1
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1994:	9f 5f       	subi	r25, 0xFF	; 255
    1996:	1a c0       	rjmp	.+52     	; 0x19cc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1998:	30 91 eb 00 	lds	r19, 0x00EB
    199c:	3e 7f       	andi	r19, 0xFE	; 254
    199e:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19a2:	30 91 ed 00 	lds	r19, 0x00ED
    19a6:	3d 7f       	andi	r19, 0xFD	; 253
    19a8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19ac:	30 91 eb 00 	lds	r19, 0x00EB
    19b0:	31 60       	ori	r19, 0x01	; 1
    19b2:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    19b6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    19ba:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    19be:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19c2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19c6:	27 fd       	sbrc	r18, 7
    19c8:	e5 cf       	rjmp	.-54     	; 0x1994 <Endpoint_ConfigureEndpoint_Prv+0x24>
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19cc:	95 30       	cpi	r25, 0x05	; 5
    19ce:	90 f2       	brcs	.-92     	; 0x1974 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    19da:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    19dc:	08 95       	ret

000019de <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	06 2f       	mov	r16, r22
    19e8:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	2e c0       	rjmp	.+92     	; 0x1a4a <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    19ee:	98 81       	ld	r25, Y
    19f0:	91 11       	cpse	r25, r1
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    19f4:	1f 5f       	subi	r17, 0xFF	; 255
    19f6:	25 96       	adiw	r28, 0x05	; 5
    19f8:	28 c0       	rjmp	.+80     	; 0x1a4a <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1a02:	89 2f       	mov	r24, r25
    1a04:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1a06:	85 30       	cpi	r24, 0x05	; 5
    1a08:	10 f0       	brcs	.+4      	; 0x1a0e <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	21 c0       	rjmp	.+66     	; 0x1a50 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	10 f0       	brcs	.+4      	; 0x1a16 <Endpoint_ConfigureEndpointTable+0x38>
    1a12:	56 e0       	ldi	r21, 0x06	; 6
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <Endpoint_ConfigureEndpointTable+0x3a>
    1a16:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1a18:	28 e0       	ldi	r18, 0x08	; 8
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	03 c0       	rjmp	.+6      	; 0x1a26 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a20:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a26:	2e 17       	cp	r18, r30
    1a28:	3f 07       	cpc	r19, r31
    1a2a:	d0 f3       	brcs	.-12     	; 0x1a20 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1a2c:	42 95       	swap	r20
    1a2e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a30:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1a32:	99 1f       	adc	r25, r25
    1a34:	99 27       	eor	r25, r25
    1a36:	99 1f       	adc	r25, r25
    1a38:	62 95       	swap	r22
    1a3a:	66 0f       	add	r22, r22
    1a3c:	66 0f       	add	r22, r22
    1a3e:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a40:	69 2b       	or	r22, r25
    1a42:	96 df       	rcall	.-212    	; 0x1970 <Endpoint_ConfigureEndpoint_Prv>
    1a44:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a46:	d6 cf       	rjmp	.-84     	; 0x19f4 <Endpoint_ConfigureEndpointTable+0x16>
    1a48:	e0 cf       	rjmp	.-64     	; 0x1a0a <Endpoint_ConfigureEndpointTable+0x2c>
    1a4a:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a4c:	d0 cf       	rjmp	.-96     	; 0x19ee <Endpoint_ConfigureEndpointTable+0x10>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1a50:	df 91       	pop	r29
}
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1a5a:	80 91 08 02 	lds	r24, 0x0208
    1a5e:	87 fd       	sbrc	r24, 7
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a62:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a66:	80 ff       	sbrs	r24, 0
    1a68:	0e c0       	rjmp	.+28     	; 0x1a86 <Endpoint_ClearStatusStage+0x2c>
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a6c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a70:	82 fd       	sbrc	r24, 2
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a74:	80 91 07 02 	lds	r24, 0x0207
    1a78:	81 11       	cpse	r24, r1
    1a7a:	f8 cf       	rjmp	.-16     	; 0x1a6c <Endpoint_ClearStatusStage+0x12>
    1a7c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a7e:	80 91 e8 00 	lds	r24, 0x00E8
    1a82:	8b 77       	andi	r24, 0x7B	; 123
    1a84:	08 c0       	rjmp	.+16     	; 0x1a96 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a86:	80 91 07 02 	lds	r24, 0x0207
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	ea cf       	rjmp	.-44     	; 0x1a62 <Endpoint_ClearStatusStage+0x8>
    1a8e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a90:	80 91 e8 00 	lds	r24, 0x00E8
    1a94:	8e 77       	andi	r24, 0x7E	; 126
    1a96:	80 93 e8 00 	sts	0x00E8, r24
    1a9a:	08 95       	ret

00001a9c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a9c:	80 91 e4 00 	lds	r24, 0x00E4
    1aa0:	90 91 e5 00 	lds	r25, 0x00E5
    1aa4:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1aa6:	20 91 ec 00 	lds	r18, 0x00EC
    1aaa:	20 fd       	sbrc	r18, 0
    1aac:	1f c0       	rjmp	.+62     	; 0x1aec <Endpoint_WaitUntilReady+0x50>
    1aae:	23 c0       	rjmp	.+70     	; 0x1af6 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ab0:	20 91 07 02 	lds	r18, 0x0207

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab4:	22 23       	and	r18, r18
    1ab6:	91 f0       	breq	.+36     	; 0x1adc <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ab8:	25 30       	cpi	r18, 0x05	; 5
    1aba:	91 f0       	breq	.+36     	; 0x1ae0 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1abc:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1ac0:	25 fd       	sbrc	r18, 5
    1ac2:	10 c0       	rjmp	.+32     	; 0x1ae4 <Endpoint_WaitUntilReady+0x48>
    1ac4:	20 91 e4 00 	lds	r18, 0x00E4
    1ac8:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1acc:	28 17       	cp	r18, r24
    1ace:	39 07       	cpc	r19, r25
    1ad0:	51 f3       	breq	.-44     	; 0x1aa6 <Endpoint_WaitUntilReady+0xa>
    1ad2:	41 50       	subi	r20, 0x01	; 1
    1ad4:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ad6:	39 f7       	brne	.-50     	; 0x1aa6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aec:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1af0:	20 ff       	sbrs	r18, 0
    1af2:	de cf       	rjmp	.-68     	; 0x1ab0 <Endpoint_WaitUntilReady+0x14>
    1af4:	f9 cf       	rjmp	.-14     	; 0x1ae8 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1af6:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1afa:	22 ff       	sbrs	r18, 2
    1afc:	d9 cf       	rjmp	.-78     	; 0x1ab0 <Endpoint_WaitUntilReady+0x14>
    1afe:	f4 cf       	rjmp	.-24     	; 0x1ae8 <Endpoint_WaitUntilReady+0x4c>

00001b00 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b00:	41 d0       	rcall	.+130    	; 0x1b84 <USB_INT_DisableAllInterrupts>
    1b02:	43 d0       	rcall	.+134    	; 0x1b8a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b04:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	80 93 d8 00 	sts	0x00D8, r24
    1b0e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	80 93 d8 00 	sts	0x00D8, r24
    1b18:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b1c:	8f 7d       	andi	r24, 0xDF	; 223
    1b1e:	80 93 d8 00 	sts	0x00D8, r24
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b26:	86 e0       	ldi	r24, 0x06	; 6
    1b28:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b2a:	09 b4       	in	r0, 0x29	; 41
    1b2c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b2e:	fd cf       	rjmp	.-6      	; 0x1b2a <USB_ResetInterface+0x2a>
    1b30:	10 92 07 02 	sts	0x0207, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b34:	10 92 03 02 	sts	0x0203, r1
	USB_Device_ConfigurationNumber  = 0;
    1b38:	10 92 05 02 	sts	0x0205, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b3c:	10 92 04 02 	sts	0x0204, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b40:	42 e0       	ldi	r20, 0x02	; 2
    1b42:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	14 df       	rcall	.-472    	; 0x1970 <Endpoint_ConfigureEndpoint_Prv>
    1b48:	80 91 e1 00 	lds	r24, 0x00E1
    1b4c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b4e:	80 93 e1 00 	sts	0x00E1, r24
    1b52:	80 91 e2 00 	lds	r24, 0x00E2
    1b56:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b58:	80 93 e2 00 	sts	0x00E2, r24
    1b5c:	80 91 e2 00 	lds	r24, 0x00E2
    1b60:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b62:	80 93 e2 00 	sts	0x00E2, r24
    1b66:	80 91 e0 00 	lds	r24, 0x00E0
    1b6a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b6c:	80 93 e0 00 	sts	0x00E0, r24
    1b70:	08 95       	ret

00001b72 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1b72:	e3 e6       	ldi	r30, 0x63	; 99
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 06 02 	sts	0x0206, r24

	USB_ResetInterface();
    1b82:	be cf       	rjmp	.-132    	; 0x1b00 <USB_ResetInterface>

00001b84 <USB_INT_DisableAllInterrupts>:
    1b84:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b88:	08 95       	ret

00001b8a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b8a:	10 92 e1 00 	sts	0x00E1, r1
    1b8e:	08 95       	ret

00001b90 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b90:	1f 92       	push	r1
    1b92:	0f 92       	push	r0
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	0f 92       	push	r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	2f 93       	push	r18
    1b9c:	3f 93       	push	r19
    1b9e:	4f 93       	push	r20
    1ba0:	5f 93       	push	r21
    1ba2:	6f 93       	push	r22
    1ba4:	7f 93       	push	r23
    1ba6:	8f 93       	push	r24
    1ba8:	9f 93       	push	r25
    1baa:	af 93       	push	r26
    1bac:	bf 93       	push	r27
    1bae:	ef 93       	push	r30
    1bb0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1bb2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1bb6:	82 ff       	sbrs	r24, 2
    1bb8:	0b c0       	rjmp	.+22     	; 0x1bd0 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1bba:	80 91 e2 00 	lds	r24, 0x00E2
    1bbe:	82 ff       	sbrs	r24, 2
    1bc0:	07 c0       	rjmp	.+14     	; 0x1bd0 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bc2:	80 91 e1 00 	lds	r24, 0x00E1
    1bc6:	8b 7f       	andi	r24, 0xFB	; 251
    1bc8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1bcc:	0e 94 b9 03 	call	0x772	; 0x772 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1bd0:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1bd4:	80 ff       	sbrs	r24, 0
    1bd6:	18 c0       	rjmp	.+48     	; 0x1c08 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1bd8:	80 91 e2 00 	lds	r24, 0x00E2
    1bdc:	80 ff       	sbrs	r24, 0
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1be0:	80 91 e2 00 	lds	r24, 0x00E2
    1be4:	8e 7f       	andi	r24, 0xFE	; 254
    1be6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1bea:	80 91 e2 00 	lds	r24, 0x00E2
    1bee:	80 61       	ori	r24, 0x10	; 16
    1bf0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1bf4:	80 91 d8 00 	lds	r24, 0x00D8
    1bf8:	80 62       	ori	r24, 0x20	; 32
    1bfa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bfe:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1c00:	10 92 07 02 	sts	0x0207, r1
		EVENT_USB_Device_Disconnect();
    1c04:	0e 94 61 03 	call	0x6c2	; 0x6c2 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c08:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c0c:	84 ff       	sbrs	r24, 4
    1c0e:	30 c0       	rjmp	.+96     	; 0x1c70 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c10:	80 91 e2 00 	lds	r24, 0x00E2
    1c14:	84 ff       	sbrs	r24, 4
    1c16:	2c c0       	rjmp	.+88     	; 0x1c70 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c18:	84 e0       	ldi	r24, 0x04	; 4
    1c1a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c20:	09 b4       	in	r0, 0x29	; 41
    1c22:	00 fe       	sbrs	r0, 0
    1c24:	fd cf       	rjmp	.-6      	; 0x1c20 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c26:	80 91 d8 00 	lds	r24, 0x00D8
    1c2a:	8f 7d       	andi	r24, 0xDF	; 223
    1c2c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c30:	80 91 e1 00 	lds	r24, 0x00E1
    1c34:	8f 7e       	andi	r24, 0xEF	; 239
    1c36:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c3a:	80 91 e2 00 	lds	r24, 0x00E2
    1c3e:	8f 7e       	andi	r24, 0xEF	; 239
    1c40:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c44:	80 91 e2 00 	lds	r24, 0x00E2
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c4e:	80 91 03 02 	lds	r24, 0x0203
    1c52:	88 23       	and	r24, r24
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c5a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c5e:	87 ff       	sbrs	r24, 7
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <__vector_11+0xd6>
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <__vector_11+0xd8>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 07 02 	sts	0x0207, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1c6c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c70:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c74:	83 ff       	sbrs	r24, 3
    1c76:	27 c0       	rjmp	.+78     	; 0x1cc6 <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c78:	80 91 e2 00 	lds	r24, 0x00E2
    1c7c:	83 ff       	sbrs	r24, 3
    1c7e:	23 c0       	rjmp	.+70     	; 0x1cc6 <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c80:	80 91 e1 00 	lds	r24, 0x00E1
    1c84:	87 7f       	andi	r24, 0xF7	; 247
    1c86:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	80 93 07 02 	sts	0x0207, r24
		USB_Device_ConfigurationNumber = 0;
    1c90:	10 92 03 02 	sts	0x0203, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c94:	80 91 e1 00 	lds	r24, 0x00E1
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c9e:	80 91 e2 00 	lds	r24, 0x00E2
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ca8:	80 91 e2 00 	lds	r24, 0x00E2
    1cac:	80 61       	ori	r24, 0x10	; 16
    1cae:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cb2:	42 e0       	ldi	r20, 0x02	; 2
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	5b de       	rcall	.-842    	; 0x1970 <Endpoint_ConfigureEndpoint_Prv>
    1cba:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	80 93 f0 00 	sts	0x00F0, r24
    1cc4:	b8 d1       	rcall	.+880    	; 0x2036 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1cc6:	ff 91       	pop	r31
    1cc8:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cca:	bf 91       	pop	r27
    1ccc:	af 91       	pop	r26
    1cce:	9f 91       	pop	r25
    1cd0:	8f 91       	pop	r24
    1cd2:	7f 91       	pop	r23
    1cd4:	6f 91       	pop	r22
    1cd6:	5f 91       	pop	r21
    1cd8:	4f 91       	pop	r20
    1cda:	3f 91       	pop	r19
    1cdc:	2f 91       	pop	r18
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1ce8:	1f 92       	push	r1
    1cea:	0f 92       	push	r0
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	0f 92       	push	r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	cf 93       	push	r28
    1d08:	ef 93       	push	r30
    1d0a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d0c:	80 91 e9 00 	lds	r24, 0x00E9
    1d10:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d12:	90 91 ec 00 	lds	r25, 0x00EC
    1d16:	90 ff       	sbrs	r25, 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <__vector_12+0x36>
    1d1a:	90 e8       	ldi	r25, 0x80	; 128
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <__vector_12+0x38>
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d20:	c9 2f       	mov	r28, r25
    1d22:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d24:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d28:	80 91 f0 00 	lds	r24, 0x00F0
    1d2c:	87 7f       	andi	r24, 0xF7	; 247
    1d2e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1d32:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1d34:	1c d0       	rcall	.+56     	; 0x1d6e <USB_Device_ProcessControlRequest>
    1d36:	10 92 e9 00 	sts	0x00E9, r1
    1d3a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d3e:	88 60       	ori	r24, 0x08	; 8
    1d40:	80 93 f0 00 	sts	0x00F0, r24
    1d44:	cf 70       	andi	r28, 0x0F	; 15
    1d46:	c0 93 e9 00 	sts	0x00E9, r28
    1d4a:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d4c:	ef 91       	pop	r30
    1d4e:	cf 91       	pop	r28
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <USB_Device_ProcessControlRequest>:
    1d6e:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	ac 97       	sbiw	r28, 0x2c	; 44
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1d84:	e8 e0       	ldi	r30, 0x08	; 8
    1d86:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d88:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d8c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d8e:	22 e0       	ldi	r18, 0x02	; 2
    1d90:	e0 31       	cpi	r30, 0x10	; 16
    1d92:	f2 07       	cpc	r31, r18
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d96:	0e 94 b1 03 	call	0x762	; 0x762 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d9a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d9e:	83 ff       	sbrs	r24, 3
    1da0:	32 c1       	rjmp	.+612    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1da2:	80 91 08 02 	lds	r24, 0x0208

		switch (USB_ControlRequest.bRequest)
    1da6:	90 91 09 02 	lds	r25, 0x0209
    1daa:	95 30       	cpi	r25, 0x05	; 5
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <USB_Device_ProcessControlRequest+0x42>
    1dae:	87 c0       	rjmp	.+270    	; 0x1ebe <USB_Device_ProcessControlRequest+0x150>
    1db0:	38 f4       	brcc	.+14     	; 0x1dc0 <USB_Device_ProcessControlRequest+0x52>
    1db2:	91 30       	cpi	r25, 0x01	; 1
    1db4:	b1 f1       	breq	.+108    	; 0x1e22 <USB_Device_ProcessControlRequest+0xb4>
    1db6:	70 f0       	brcs	.+28     	; 0x1dd4 <USB_Device_ProcessControlRequest+0x66>
    1db8:	93 30       	cpi	r25, 0x03	; 3
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <USB_Device_ProcessControlRequest+0x50>
    1dbc:	24 c1       	rjmp	.+584    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1dbe:	31 c0       	rjmp	.+98     	; 0x1e22 <USB_Device_ProcessControlRequest+0xb4>
    1dc0:	98 30       	cpi	r25, 0x08	; 8
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <USB_Device_ProcessControlRequest+0x58>
    1dc4:	f4 c0       	rjmp	.+488    	; 0x1fae <USB_Device_ProcessControlRequest+0x240>
    1dc6:	99 30       	cpi	r25, 0x09	; 9
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <USB_Device_ProcessControlRequest+0x5e>
    1dca:	00 c1       	rjmp	.+512    	; 0x1fcc <USB_Device_ProcessControlRequest+0x25e>
    1dcc:	96 30       	cpi	r25, 0x06	; 6
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <USB_Device_ProcessControlRequest+0x64>
    1dd0:	1a c1       	rjmp	.+564    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1dd2:	9b c0       	rjmp	.+310    	; 0x1f0a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1dd4:	80 38       	cpi	r24, 0x80	; 128
    1dd6:	21 f0       	breq	.+8      	; 0x1de0 <USB_Device_ProcessControlRequest+0x72>
    1dd8:	82 38       	cpi	r24, 0x82	; 130
    1dda:	09 f0       	breq	.+2      	; 0x1dde <USB_Device_ProcessControlRequest+0x70>
    1ddc:	14 c1       	rjmp	.+552    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1de0:	80 91 04 02 	lds	r24, 0x0204
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1de4:	90 91 05 02 	lds	r25, 0x0205
    1de8:	99 23       	and	r25, r25
    1dea:	89 f0       	breq	.+34     	; 0x1e0e <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1df0:	80 91 0c 02 	lds	r24, 0x020C
    1df4:	90 91 0d 02 	lds	r25, 0x020D
    1df8:	8f 70       	andi	r24, 0x0F	; 15
    1dfa:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dfc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e00:	80 91 eb 00 	lds	r24, 0x00EB
    1e04:	85 fb       	bst	r24, 5
    1e06:	88 27       	eor	r24, r24
    1e08:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e0a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e0e:	90 91 e8 00 	lds	r25, 0x00E8
    1e12:	97 7f       	andi	r25, 0xF7	; 247
    1e14:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e18:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e1c:	10 92 f1 00 	sts	0x00F1, r1
    1e20:	d1 c0       	rjmp	.+418    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e22:	88 23       	and	r24, r24
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <USB_Device_ProcessControlRequest+0xbe>
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <USB_Device_ProcessControlRequest+0xbe>
    1e2a:	ed c0       	rjmp	.+474    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e2c:	8f 71       	andi	r24, 0x1F	; 31
    1e2e:	21 f0       	breq	.+8      	; 0x1e38 <USB_Device_ProcessControlRequest+0xca>
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <USB_Device_ProcessControlRequest+0xc8>
    1e34:	e8 c0       	rjmp	.+464    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1e36:	0b c0       	rjmp	.+22     	; 0x1e4e <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e38:	80 91 0a 02 	lds	r24, 0x020A
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <USB_Device_ProcessControlRequest+0xd4>
    1e40:	e2 c0       	rjmp	.+452    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e42:	93 30       	cpi	r25, 0x03	; 3
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <USB_Device_ProcessControlRequest+0xda>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	80 93 05 02 	sts	0x0205, r24
    1e4c:	2f c0       	rjmp	.+94     	; 0x1eac <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e4e:	80 91 0a 02 	lds	r24, 0x020A
    1e52:	81 11       	cpse	r24, r1
    1e54:	2b c0       	rjmp	.+86     	; 0x1eac <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e56:	80 91 0c 02 	lds	r24, 0x020C
    1e5a:	90 91 0d 02 	lds	r25, 0x020D
    1e5e:	8f 70       	andi	r24, 0x0F	; 15
    1e60:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <USB_Device_ProcessControlRequest+0xfa>
    1e66:	cf c0       	rjmp	.+414    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e68:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e6c:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e70:	20 ff       	sbrs	r18, 0
    1e72:	1c c0       	rjmp	.+56     	; 0x1eac <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e74:	20 91 09 02 	lds	r18, 0x0209
    1e78:	23 30       	cpi	r18, 0x03	; 3
    1e7a:	21 f4       	brne	.+8      	; 0x1e84 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e7c:	80 91 eb 00 	lds	r24, 0x00EB
    1e80:	80 62       	ori	r24, 0x20	; 32
    1e82:	12 c0       	rjmp	.+36     	; 0x1ea8 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e84:	90 91 eb 00 	lds	r25, 0x00EB
    1e88:	90 61       	ori	r25, 0x10	; 16
    1e8a:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e8e:	21 e0       	ldi	r18, 0x01	; 1
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <USB_Device_ProcessControlRequest+0x128>
    1e94:	22 0f       	add	r18, r18
    1e96:	8a 95       	dec	r24
    1e98:	ea f7       	brpl	.-6      	; 0x1e94 <USB_Device_ProcessControlRequest+0x126>
    1e9a:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1e9e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ea2:	80 91 eb 00 	lds	r24, 0x00EB
    1ea6:	88 60       	ori	r24, 0x08	; 8
    1ea8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eac:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eb0:	80 91 e8 00 	lds	r24, 0x00E8
    1eb4:	87 7f       	andi	r24, 0xF7	; 247
    1eb6:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1eba:	cf dd       	rcall	.-1122   	; 0x1a5a <Endpoint_ClearStatusStage>
    1ebc:	a4 c0       	rjmp	.+328    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1ebe:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ec0:	a2 c0       	rjmp	.+324    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1ec2:	80 91 0a 02 	lds	r24, 0x020A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ec6:	90 91 0b 02 	lds	r25, 0x020B
    1eca:	8f 77       	andi	r24, 0x7F	; 127
    1ecc:	99 27       	eor	r25, r25
    1ece:	18 2f       	mov	r17, r24
    1ed0:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ed4:	90 78       	andi	r25, 0x80	; 128
    1ed6:	98 2b       	or	r25, r24
    1ed8:	90 93 e3 00 	sts	0x00E3, r25
    1edc:	80 91 e8 00 	lds	r24, 0x00E8
    1ee0:	87 7f       	andi	r24, 0xF7	; 247
    1ee2:	80 93 e8 00 	sts	0x00E8, r24
    1ee6:	b9 dd       	rcall	.-1166   	; 0x1a5a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ee8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1eec:	80 ff       	sbrs	r24, 0
    1eee:	fc cf       	rjmp	.-8      	; 0x1ee8 <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1ef0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ef4:	80 68       	ori	r24, 0x80	; 128
    1ef6:	80 93 e3 00 	sts	0x00E3, r24
    1efa:	11 23       	and	r17, r17
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <USB_Device_ProcessControlRequest+0x196>
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	80 93 07 02 	sts	0x0207, r24
    1f08:	7e c0       	rjmp	.+252    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1f0a:	80 58       	subi	r24, 0x80	; 128
    1f0c:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <USB_Device_ProcessControlRequest+0x1a4>
    1f10:	7a c0       	rjmp	.+244    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1f12:	80 91 0a 02 	lds	r24, 0x020A
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f16:	90 91 0b 02 	lds	r25, 0x020B
    1f1a:	8c 3d       	cpi	r24, 0xDC	; 220
    1f1c:	23 e0       	ldi	r18, 0x03	; 3
    1f1e:	92 07       	cpc	r25, r18
    1f20:	71 f5       	brne	.+92     	; 0x1f7e <USB_Device_ProcessControlRequest+0x210>
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f26:	8a e2       	ldi	r24, 0x2A	; 42
    1f28:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f2a:	4f b7       	in	r20, 0x3f	; 63
    1f2c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f2e:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f30:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f36:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f38:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	50 93 57 00 	sts	0x0057, r21
    1f40:	e4 91       	lpm	r30, Z+
    1f42:	20 ff       	sbrs	r18, 0
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1f46:	e2 95       	swap	r30
    1f48:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1f4a:	3f 5f       	subi	r19, 0xFF	; 255
    1f4c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f4e:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	ea 30       	cpi	r30, 0x0A	; 10
    1f54:	10 f0       	brcs	.+4      	; 0x1f5a <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f56:	c7 96       	adiw	r24, 0x37	; 55
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <USB_Device_ProcessControlRequest+0x1ee>
    1f5a:	c0 96       	adiw	r24, 0x30	; 48
    1f5c:	8d 93       	st	X+, r24
    1f5e:	9d 93       	st	X+, r25
    1f60:	2f 5f       	subi	r18, 0xFF	; 255
    1f62:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f64:	49 f7       	brne	.-46     	; 0x1f38 <USB_Device_ProcessControlRequest+0x1ca>
    1f66:	4f bf       	out	0x3f, r20	; 63
    1f68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6c:	87 7f       	andi	r24, 0xF7	; 247
    1f6e:	80 93 e8 00 	sts	0x00E8, r24
    1f72:	6a e2       	ldi	r22, 0x2A	; 42
    1f74:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	f9 db       	rcall	.-2062   	; 0x176e <Endpoint_Write_Control_Stream_LE>
    1f7c:	12 c0       	rjmp	.+36     	; 0x1fa2 <USB_Device_ProcessControlRequest+0x234>
    1f7e:	ae 01       	movw	r20, r28
    1f80:	45 5d       	subi	r20, 0xD5	; 213
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f84:	60 91 0c 02 	lds	r22, 0x020C
    1f88:	0e 94 c5 03 	call	0x78a	; 0x78a <CALLBACK_USB_GetDescriptor>
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	d9 f1       	breq	.+118    	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1f90:	20 91 e8 00 	lds	r18, 0x00E8
    1f94:	27 7f       	andi	r18, 0xF7	; 247
    1f96:	20 93 e8 00 	sts	0x00E8, r18
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fa0:	86 dc       	rcall	.-1780   	; 0x18ae <Endpoint_Write_Control_PStream_LE>
    1fa2:	80 91 e8 00 	lds	r24, 0x00E8
    1fa6:	8b 77       	andi	r24, 0x7B	; 123
    1fa8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fac:	2c c0       	rjmp	.+88     	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1fae:	80 38       	cpi	r24, 0x80	; 128
    1fb0:	51 f5       	brne	.+84     	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1fb2:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1fb6:	87 7f       	andi	r24, 0xF7	; 247
    1fb8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fbc:	80 91 03 02 	lds	r24, 0x0203
    1fc0:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1fc4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fc8:	8e 77       	andi	r24, 0x7E	; 126
    1fca:	75 cf       	rjmp	.-278    	; 0x1eb6 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fcc:	81 11       	cpse	r24, r1
    1fce:	1b c0       	rjmp	.+54     	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
    1fd0:	90 91 0a 02 	lds	r25, 0x020A
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fd4:	92 30       	cpi	r25, 0x02	; 2
    1fd6:	b8 f4       	brcc	.+46     	; 0x2006 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1fd8:	80 91 e8 00 	lds	r24, 0x00E8
    1fdc:	87 7f       	andi	r24, 0xF7	; 247
    1fde:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fe2:	90 93 03 02 	sts	0x0203, r25
    1fe6:	39 dd       	rcall	.-1422   	; 0x1a5a <Endpoint_ClearStatusStage>
    1fe8:	80 91 03 02 	lds	r24, 0x0203
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1fec:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <USB_Device_ProcessControlRequest+0x28a>
    1ff0:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1ff4:	87 ff       	sbrs	r24, 7
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <USB_Device_ProcessControlRequest+0x28e>
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <USB_Device_ProcessControlRequest+0x290>
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1ffe:	80 93 07 02 	sts	0x0207, r24
    2002:	0e 94 62 03 	call	0x6c4	; 0x6c4 <EVENT_USB_Device_ConfigurationChanged>
    2006:	80 91 e8 00 	lds	r24, 0x00E8
    200a:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <USB_Device_ProcessControlRequest+0x2b4>
    200e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2012:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2014:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2018:	80 91 eb 00 	lds	r24, 0x00EB
    201c:	80 62       	ori	r24, 0x20	; 32
    201e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2022:	ac 96       	adiw	r28, 0x2c	; 44
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	08 95       	ret

00002036 <USB_Event_Stub>:
    2036:	08 95       	ret

00002038 <USB_USBTask>:
    2038:	cf 93       	push	r28
    203a:	80 91 07 02 	lds	r24, 0x0207
    203e:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2040:	a9 f0       	breq	.+42     	; 0x206c <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2042:	80 91 e9 00 	lds	r24, 0x00E9
    2046:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2048:	90 91 ec 00 	lds	r25, 0x00EC
    204c:	90 ff       	sbrs	r25, 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <USB_USBTask+0x1c>
    2050:	90 e8       	ldi	r25, 0x80	; 128
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <USB_USBTask+0x1e>
    2054:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2056:	c9 2f       	mov	r28, r25
    2058:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    205a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    205e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2062:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2064:	84 de       	rcall	.-760    	; 0x1d6e <USB_Device_ProcessControlRequest>
    2066:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2068:	c0 93 e9 00 	sts	0x00E9, r28
    206c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    206e:	08 95       	ret

00002070 <CDC_Device_ConfigureEndpoints>:
    2070:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2072:	df 93       	push	r29
    2074:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2076:	40 96       	adiw	r24, 0x10	; 16
    2078:	fc 01       	movw	r30, r24
    207a:	8b e0       	ldi	r24, 0x0B	; 11
    207c:	df 01       	movw	r26, r30
    207e:	1d 92       	st	X+, r1
    2080:	8a 95       	dec	r24
    2082:	e9 f7       	brne	.-6      	; 0x207e <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2088:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	ce 01       	movw	r24, r28
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	a4 dc       	rcall	.-1720   	; 0x19de <Endpoint_ConfigureEndpointTable>
    2096:	88 23       	and	r24, r24
    2098:	61 f0       	breq	.+24     	; 0x20b2 <CDC_Device_ConfigureEndpoints+0x42>
    209a:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    209c:	ce 01       	movw	r24, r28
    209e:	06 96       	adiw	r24, 0x06	; 6
    20a0:	9e dc       	rcall	.-1732   	; 0x19de <Endpoint_ConfigureEndpointTable>
    20a2:	88 23       	and	r24, r24
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <CDC_Device_ConfigureEndpoints+0x42>
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    20aa:	0b 96       	adiw	r24, 0x0b	; 11
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
	  return false;

	return true;
}
    20b0:	96 cc       	rjmp	.-1748   	; 0x19de <Endpoint_ConfigureEndpointTable>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
	  return false;

	return true;
}
    20b8:	08 95       	ret

000020ba <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    20ba:	cf 93       	push	r28
    20bc:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20be:	20 91 07 02 	lds	r18, 0x0207
    20c2:	24 30       	cpi	r18, 0x04	; 4
    20c4:	f1 f4       	brne	.+60     	; 0x2102 <CDC_Device_SendByte+0x48>
    20c6:	fc 01       	movw	r30, r24
    20c8:	44 89       	ldd	r20, Z+20	; 0x14
    20ca:	55 89       	ldd	r21, Z+21	; 0x15
    20cc:	66 89       	ldd	r22, Z+22	; 0x16
    20ce:	77 89       	ldd	r23, Z+23	; 0x17
    20d0:	45 2b       	or	r20, r21
    20d2:	46 2b       	or	r20, r22
    20d4:	47 2b       	or	r20, r23
    20d6:	a9 f0       	breq	.+42     	; 0x2102 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d8:	81 81       	ldd	r24, Z+1	; 0x01
    20da:	8f 70       	andi	r24, 0x0F	; 15
    20dc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20e0:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    20e4:	85 ff       	sbrs	r24, 5
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20e8:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20f0:	80 91 e8 00 	lds	r24, 0x00E8
    20f4:	8e 77       	andi	r24, 0x7E	; 126
    20f6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    20fa:	d0 dc       	rcall	.-1632   	; 0x1a9c <Endpoint_WaitUntilReady>
    20fc:	88 23       	and	r24, r24
    20fe:	a1 f3       	breq	.-24     	; 0x20e8 <CDC_Device_SendByte+0x2e>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <CDC_Device_SendByte+0x4a>
    2102:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2104:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2106:	08 95       	ret

00002108 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2108:	20 91 07 02 	lds	r18, 0x0207
    210c:	24 30       	cpi	r18, 0x04	; 4
    210e:	29 f5       	brne	.+74     	; 0x215a <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2110:	fc 01       	movw	r30, r24
    2112:	44 89       	ldd	r20, Z+20	; 0x14
    2114:	55 89       	ldd	r21, Z+21	; 0x15
    2116:	66 89       	ldd	r22, Z+22	; 0x16
    2118:	77 89       	ldd	r23, Z+23	; 0x17
    211a:	45 2b       	or	r20, r21
    211c:	46 2b       	or	r20, r22
    211e:	47 2b       	or	r20, r23
    2120:	e1 f0       	breq	.+56     	; 0x215a <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2122:	81 81       	ldd	r24, Z+1	; 0x01
    2124:	8f 70       	andi	r24, 0x0F	; 15
    2126:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    212a:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    212e:	81 11       	cpse	r24, r1
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2136:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    213a:	80 91 e8 00 	lds	r24, 0x00E8
    213e:	8e 77       	andi	r24, 0x7E	; 126
    2140:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2144:	95 fd       	sbrc	r25, 5
    2146:	f5 cf       	rjmp	.-22     	; 0x2132 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2148:	a9 dc       	rcall	.-1710   	; 0x1a9c <Endpoint_WaitUntilReady>
    214a:	81 11       	cpse	r24, r1
    214c:	07 c0       	rjmp	.+14     	; 0x215c <CDC_Device_Flush+0x54>
    214e:	90 91 e8 00 	lds	r25, 0x00E8
    2152:	9e 77       	andi	r25, 0x7E	; 126
    2154:	90 93 e8 00 	sts	0x00E8, r25
    2158:	08 95       	ret
    215a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    215c:	08 95       	ret

0000215e <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    215e:	20 91 07 02 	lds	r18, 0x0207
    2162:	24 30       	cpi	r18, 0x04	; 4
    2164:	89 f4       	brne	.+34     	; 0x2188 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2166:	fc 01       	movw	r30, r24
    2168:	44 89       	ldd	r20, Z+20	; 0x14
    216a:	55 89       	ldd	r21, Z+21	; 0x15
    216c:	66 89       	ldd	r22, Z+22	; 0x16
    216e:	77 89       	ldd	r23, Z+23	; 0x17
    2170:	45 2b       	or	r20, r21
    2172:	46 2b       	or	r20, r22
    2174:	47 2b       	or	r20, r23
    2176:	41 f0       	breq	.+16     	; 0x2188 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2178:	21 81       	ldd	r18, Z+1	; 0x01
    217a:	2f 70       	andi	r18, 0x0F	; 15
    217c:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2180:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    2184:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    2186:	c0 cf       	rjmp	.-128    	; 0x2108 <CDC_Device_Flush>
    2188:	08 95       	ret

0000218a <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    218a:	20 91 07 02 	lds	r18, 0x0207
    218e:	24 30       	cpi	r18, 0x04	; 4
    2190:	19 f0       	breq	.+6      	; 0x2198 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    2192:	2f ef       	ldi	r18, 0xFF	; 255
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	24 c0       	rjmp	.+72     	; 0x21e0 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2198:	fc 01       	movw	r30, r24
    219a:	44 89       	ldd	r20, Z+20	; 0x14
    219c:	55 89       	ldd	r21, Z+21	; 0x15
    219e:	66 89       	ldd	r22, Z+22	; 0x16
    21a0:	77 89       	ldd	r23, Z+23	; 0x17
    21a2:	45 2b       	or	r20, r21
    21a4:	46 2b       	or	r20, r22
    21a6:	47 2b       	or	r20, r23
    21a8:	a1 f3       	breq	.-24     	; 0x2192 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21aa:	86 81       	ldd	r24, Z+6	; 0x06
    21ac:	8f 70       	andi	r24, 0x0F	; 15
    21ae:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21b2:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    21b6:	82 ff       	sbrs	r24, 2
    21b8:	ec cf       	rjmp	.-40     	; 0x2192 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21ba:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    21be:	88 23       	and	r24, r24
    21c0:	21 f0       	breq	.+8      	; 0x21ca <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    21c2:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    21ca:	2f ef       	ldi	r18, 0xFF	; 255
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21ce:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    21d2:	81 11       	cpse	r24, r1
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21d6:	80 91 e8 00 	lds	r24, 0x00E8
    21da:	8b 77       	andi	r24, 0x7B	; 123
    21dc:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    21e0:	c9 01       	movw	r24, r18
    21e2:	08 95       	ret

000021e4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    21e4:	08 95       	ret

000021e6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21ec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    21f0:	83 ff       	sbrs	r24, 3
    21f2:	a7 c0       	rjmp	.+334    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    21f4:	88 81       	ld	r24, Y
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	20 91 0c 02 	lds	r18, 0x020C
    21fc:	30 91 0d 02 	lds	r19, 0x020D
    2200:	28 17       	cp	r18, r24
    2202:	39 07       	cpc	r19, r25
    2204:	09 f0       	breq	.+2      	; 0x2208 <CDC_Device_ProcessControlRequest+0x22>
    2206:	9d c0       	rjmp	.+314    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    2208:	80 91 09 02 	lds	r24, 0x0209
    220c:	81 32       	cpi	r24, 0x21	; 33
    220e:	61 f0       	breq	.+24     	; 0x2228 <CDC_Device_ProcessControlRequest+0x42>
    2210:	20 f4       	brcc	.+8      	; 0x221a <CDC_Device_ProcessControlRequest+0x34>
    2212:	80 32       	cpi	r24, 0x20	; 32
    2214:	09 f0       	breq	.+2      	; 0x2218 <CDC_Device_ProcessControlRequest+0x32>
    2216:	95 c0       	rjmp	.+298    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    2218:	3d c0       	rjmp	.+122    	; 0x2294 <CDC_Device_ProcessControlRequest+0xae>
    221a:	82 32       	cpi	r24, 0x22	; 34
    221c:	09 f4       	brne	.+2      	; 0x2220 <CDC_Device_ProcessControlRequest+0x3a>
    221e:	6d c0       	rjmp	.+218    	; 0x22fa <CDC_Device_ProcessControlRequest+0x114>
    2220:	83 32       	cpi	r24, 0x23	; 35
    2222:	09 f0       	breq	.+2      	; 0x2226 <CDC_Device_ProcessControlRequest+0x40>
    2224:	8e c0       	rjmp	.+284    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    2226:	7d c0       	rjmp	.+250    	; 0x2322 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2228:	80 91 08 02 	lds	r24, 0x0208
    222c:	81 3a       	cpi	r24, 0xA1	; 161
    222e:	09 f0       	breq	.+2      	; 0x2232 <CDC_Device_ProcessControlRequest+0x4c>
    2230:	88 c0       	rjmp	.+272    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2232:	80 91 e8 00 	lds	r24, 0x00E8
    2236:	87 7f       	andi	r24, 0xF7	; 247
    2238:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    223c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2240:	80 ff       	sbrs	r24, 0
    2242:	fc cf       	rjmp	.-8      	; 0x223c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2244:	4c 89       	ldd	r20, Y+20	; 0x14
    2246:	5d 89       	ldd	r21, Y+21	; 0x15
    2248:	6e 89       	ldd	r22, Y+22	; 0x16
    224a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    224c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2250:	bb 27       	eor	r27, r27
    2252:	a7 2f       	mov	r26, r23
    2254:	96 2f       	mov	r25, r22
    2256:	85 2f       	mov	r24, r21
    2258:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    225c:	cb 01       	movw	r24, r22
    225e:	aa 27       	eor	r26, r26
    2260:	bb 27       	eor	r27, r27
    2262:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2266:	47 2f       	mov	r20, r23
    2268:	55 27       	eor	r21, r21
    226a:	66 27       	eor	r22, r22
    226c:	77 27       	eor	r23, r23
    226e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2272:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2274:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    2278:	89 8d       	ldd	r24, Y+25	; 0x19
    227a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    227e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2280:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2284:	80 91 e8 00 	lds	r24, 0x00E8
    2288:	8e 77       	andi	r24, 0x7E	; 126
    228a:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2292:	e3 cb       	rjmp	.-2106   	; 0x1a5a <Endpoint_ClearStatusStage>
    2294:	80 91 08 02 	lds	r24, 0x0208
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2298:	81 32       	cpi	r24, 0x21	; 33
    229a:	09 f0       	breq	.+2      	; 0x229e <CDC_Device_ProcessControlRequest+0xb8>
    229c:	52 c0       	rjmp	.+164    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    229e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22a2:	87 7f       	andi	r24, 0xF7	; 247
    22a4:	80 93 e8 00 	sts	0x00E8, r24
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <CDC_Device_ProcessControlRequest+0xce>
    22aa:	80 91 07 02 	lds	r24, 0x0207
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    22ae:	88 23       	and	r24, r24
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <CDC_Device_ProcessControlRequest+0xce>
    22b2:	47 c0       	rjmp	.+142    	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    22b4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22b8:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    22ba:	f7 cf       	rjmp	.-18     	; 0x22aa <CDC_Device_ProcessControlRequest+0xc4>
    22bc:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    22c0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    22c4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    22c8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    22cc:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    22ce:	2d 8b       	std	Y+21, r18	; 0x15
    22d0:	9e 8b       	std	Y+22, r25	; 0x16
    22d2:	8f 8b       	std	Y+23, r24	; 0x17
    22d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22d8:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    22da:	80 91 f1 00 	lds	r24, 0x00F1
    22de:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    22e0:	80 91 f1 00 	lds	r24, 0x00F1
    22e4:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    22e6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22ea:	8b 77       	andi	r24, 0x7B	; 123
    22ec:	80 93 e8 00 	sts	0x00E8, r24
    22f0:	b4 db       	rcall	.-2200   	; 0x1a5a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    22f2:	ce 01       	movw	r24, r28
    22f4:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22f6:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22f8:	6f c9       	rjmp	.-3362   	; 0x15d8 <EVENT_CDC_Device_LineEncodingChanged>
    22fa:	80 91 08 02 	lds	r24, 0x0208
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22fe:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2300:	01 f5       	brne	.+64     	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    2302:	80 91 e8 00 	lds	r24, 0x00E8
    2306:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2308:	80 93 e8 00 	sts	0x00E8, r24
    230c:	a6 db       	rcall	.-2228   	; 0x1a5a <Endpoint_ClearStatusStage>
    230e:	80 91 0a 02 	lds	r24, 0x020A
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2312:	90 91 0b 02 	lds	r25, 0x020B

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2316:	99 8b       	std	Y+17, r25	; 0x11
    2318:	88 8b       	std	Y+16, r24	; 0x10
    231a:	ce 01       	movw	r24, r28
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	2e c9       	rjmp	.-3492   	; 0x157e <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2322:	80 91 08 02 	lds	r24, 0x0208
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2326:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2328:	61 f4       	brne	.+24     	; 0x2342 <CDC_Device_ProcessControlRequest+0x15c>
    232a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	80 93 e8 00 	sts	0x00E8, r24
    2334:	92 db       	rcall	.-2268   	; 0x1a5a <Endpoint_ClearStatusStage>
    2336:	60 91 0a 02 	lds	r22, 0x020A
    233a:	ce 01       	movw	r24, r28
    233c:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    233e:	cf 91       	pop	r28
    2340:	51 cf       	rjmp	.-350    	; 0x21e4 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    2348:	6f 92       	push	r6
    234a:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    234c:	8f 92       	push	r8
    234e:	9f 92       	push	r9
			}

			break;
	}
}
    2350:	af 92       	push	r10
    2352:	bf 92       	push	r11
    2354:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	00 d0       	rcall	.+0      	; 0x2366 <HID_Device_ProcessControlRequest+0x1e>
    2366:	1f 92       	push	r1
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    236e:	ad b6       	in	r10, 0x3d	; 61
    2370:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2372:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2376:	83 ff       	sbrs	r24, 3
    2378:	07 c1       	rjmp	.+526    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    237a:	f7 01       	movw	r30, r14
    237c:	80 81       	ld	r24, Z
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	20 91 0c 02 	lds	r18, 0x020C
    2384:	30 91 0d 02 	lds	r19, 0x020D
    2388:	28 17       	cp	r18, r24
    238a:	39 07       	cpc	r19, r25
    238c:	09 f0       	breq	.+2      	; 0x2390 <HID_Device_ProcessControlRequest+0x48>
    238e:	fc c0       	rjmp	.+504    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    2390:	80 91 09 02 	lds	r24, 0x0209
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	09 f4       	brne	.+2      	; 0x239a <HID_Device_ProcessControlRequest+0x52>
    2398:	9e c0       	rjmp	.+316    	; 0x24d6 <HID_Device_ProcessControlRequest+0x18e>
    239a:	30 f4       	brcc	.+12     	; 0x23a8 <HID_Device_ProcessControlRequest+0x60>
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	71 f0       	breq	.+28     	; 0x23bc <HID_Device_ProcessControlRequest+0x74>
    23a0:	82 30       	cpi	r24, 0x02	; 2
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <HID_Device_ProcessControlRequest+0x5e>
    23a4:	f1 c0       	rjmp	.+482    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    23a6:	d4 c0       	rjmp	.+424    	; 0x2550 <HID_Device_ProcessControlRequest+0x208>
    23a8:	8a 30       	cpi	r24, 0x0A	; 10
    23aa:	09 f4       	brne	.+2      	; 0x23ae <HID_Device_ProcessControlRequest+0x66>
    23ac:	b9 c0       	rjmp	.+370    	; 0x2520 <HID_Device_ProcessControlRequest+0x1d8>
    23ae:	8b 30       	cpi	r24, 0x0B	; 11
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <HID_Device_ProcessControlRequest+0x6c>
    23b2:	a2 c0       	rjmp	.+324    	; 0x24f8 <HID_Device_ProcessControlRequest+0x1b0>
    23b4:	89 30       	cpi	r24, 0x09	; 9
    23b6:	09 f0       	breq	.+2      	; 0x23ba <HID_Device_ProcessControlRequest+0x72>
    23b8:	e7 c0       	rjmp	.+462    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    23ba:	4c c0       	rjmp	.+152    	; 0x2454 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    23bc:	80 91 08 02 	lds	r24, 0x0208
    23c0:	81 3a       	cpi	r24, 0xA1	; 161
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <HID_Device_ProcessControlRequest+0x7e>
    23c4:	e1 c0       	rjmp	.+450    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    23c6:	8d b6       	in	r8, 0x3d	; 61
    23c8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    23ca:	1a 82       	std	Y+2, r1	; 0x02
    23cc:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    23ce:	80 91 0a 02 	lds	r24, 0x020A
    23d2:	10 91 0b 02 	lds	r17, 0x020B
    23d6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    23d8:	f7 01       	movw	r30, r14
    23da:	40 85       	ldd	r20, Z+8	; 0x08
    23dc:	8d b7       	in	r24, 0x3d	; 61
    23de:	9e b7       	in	r25, 0x3e	; 62
    23e0:	84 1b       	sub	r24, r20
    23e2:	91 09       	sbc	r25, r1
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	9e bf       	out	0x3e, r25	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	8d bf       	out	0x3d, r24	; 61
    23ee:	cd b6       	in	r12, 0x3d	; 61
    23f0:	de b6       	in	r13, 0x3e	; 62
    23f2:	ef ef       	ldi	r30, 0xFF	; 255
    23f4:	ce 1a       	sub	r12, r30
    23f6:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    23f8:	36 01       	movw	r6, r12
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	70 e0       	ldi	r23, 0x00	; 0
    2400:	c6 01       	movw	r24, r12
    2402:	ea d1       	rcall	.+980    	; 0x27d8 <memset>
    2404:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2406:	41 50       	subi	r20, 0x01	; 1
    2408:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    240a:	0f 5f       	subi	r16, 0xFF	; 255
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	96 01       	movw	r18, r12
    2410:	be 01       	movw	r22, r28
    2412:	6d 5f       	subi	r22, 0xFD	; 253
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	c7 01       	movw	r24, r14
    2418:	0e 94 58 04 	call	0x8b0	; 0x8b0 <CALLBACK_HID_Device_CreateHIDReport>
    241c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    241e:	26 81       	ldd	r18, Z+6	; 0x06
    2420:	37 81       	ldd	r19, Z+7	; 0x07
    2422:	21 15       	cp	r18, r1
    2424:	31 05       	cpc	r19, r1
    2426:	29 f0       	breq	.+10     	; 0x2432 <HID_Device_ProcessControlRequest+0xea>
    2428:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	b6 01       	movw	r22, r12
    242e:	c9 01       	movw	r24, r18
    2430:	ca d1       	rcall	.+916    	; 0x27c6 <memcpy>
    2432:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2436:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    243a:	87 7f       	andi	r24, 0xF7	; 247
    243c:	80 93 e8 00 	sts	0x00E8, r24
    2440:	69 81       	ldd	r22, Y+1	; 0x01
    2442:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2444:	c3 01       	movw	r24, r6
    2446:	93 d9       	rcall	.-3290   	; 0x176e <Endpoint_Write_Control_Stream_LE>
    2448:	80 91 e8 00 	lds	r24, 0x00E8
    244c:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    244e:	80 93 e8 00 	sts	0x00E8, r24
    2452:	39 c0       	rjmp	.+114    	; 0x24c6 <HID_Device_ProcessControlRequest+0x17e>
    2454:	80 91 08 02 	lds	r24, 0x0208
    2458:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    245a:	09 f0       	breq	.+2      	; 0x245e <HID_Device_ProcessControlRequest+0x116>
    245c:	95 c0       	rjmp	.+298    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    245e:	8d b6       	in	r8, 0x3d	; 61
    2460:	9e b6       	in	r9, 0x3e	; 62
    2462:	00 91 0e 02 	lds	r16, 0x020E
    2466:	10 91 0f 02 	lds	r17, 0x020F
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    246a:	70 90 0a 02 	lds	r7, 0x020A
    246e:	60 90 0b 02 	lds	r6, 0x020B
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2472:	8d b7       	in	r24, 0x3d	; 61
    2474:	9e b7       	in	r25, 0x3e	; 62
    2476:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2478:	91 0b       	sbc	r25, r17
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	9e bf       	out	0x3e, r25	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	8d bf       	out	0x3d, r24	; 61
    2484:	cd b6       	in	r12, 0x3d	; 61
    2486:	de b6       	in	r13, 0x3e	; 62
    2488:	ef ef       	ldi	r30, 0xFF	; 255
    248a:	ce 1a       	sub	r12, r30
    248c:	de 0a       	sbc	r13, r30
    248e:	80 91 e8 00 	lds	r24, 0x00E8
    2492:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2494:	80 93 e8 00 	sts	0x00E8, r24
    2498:	b8 01       	movw	r22, r16
    249a:	c6 01       	movw	r24, r12
    249c:	c8 d9       	rcall	.-3184   	; 0x182e <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    249e:	80 91 e8 00 	lds	r24, 0x00E8
    24a2:	8e 77       	andi	r24, 0x7E	; 126
    24a4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	71 10       	cpse	r7, r1
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <HID_Device_ProcessControlRequest+0x168>
    24ae:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	02 1b       	sub	r16, r18
    24b4:	13 0b       	sbc	r17, r19
    24b6:	2c 0d       	add	r18, r12
    24b8:	3d 1d       	adc	r19, r13
    24ba:	46 2d       	mov	r20, r6
    24bc:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    24be:	67 2d       	mov	r22, r7
    24c0:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    24c2:	0e 94 98 04 	call	0x930	; 0x930 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    24c6:	88 2d       	mov	r24, r8
    24c8:	99 2d       	mov	r25, r9
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	9e bf       	out	0x3e, r25	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	8d bf       	out	0x3d, r24	; 61
    24d4:	59 c0       	rjmp	.+178    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    24d6:	80 91 08 02 	lds	r24, 0x0208
    24da:	81 3a       	cpi	r24, 0xA1	; 161
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24de:	54 c0       	rjmp	.+168    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    24e0:	80 91 e8 00 	lds	r24, 0x00E8
    24e4:	87 7f       	andi	r24, 0xF7	; 247
    24e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ea:	80 91 e8 00 	lds	r24, 0x00E8
    24ee:	80 ff       	sbrs	r24, 0
    24f0:	fc cf       	rjmp	.-8      	; 0x24ea <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24f2:	f7 01       	movw	r30, r14
    24f4:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24f6:	40 c0       	rjmp	.+128    	; 0x2578 <HID_Device_ProcessControlRequest+0x230>
    24f8:	80 91 08 02 	lds	r24, 0x0208
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    24fc:	81 32       	cpi	r24, 0x21	; 33
    24fe:	09 f0       	breq	.+2      	; 0x2502 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2500:	43 c0       	rjmp	.+134    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    2502:	80 91 e8 00 	lds	r24, 0x00E8
    2506:	87 7f       	andi	r24, 0xF7	; 247
    2508:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    250c:	a6 da       	rcall	.-2740   	; 0x1a5a <Endpoint_ClearStatusStage>
    250e:	90 91 0a 02 	lds	r25, 0x020A
    2512:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2514:	91 11       	cpse	r25, r1
    2516:	01 c0       	rjmp	.+2      	; 0x251a <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	f7 01       	movw	r30, r14
    251c:	81 87       	std	Z+9, r24	; 0x09
    251e:	34 c0       	rjmp	.+104    	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    2520:	80 91 08 02 	lds	r24, 0x0208
    2524:	81 32       	cpi	r24, 0x21	; 33
    2526:	81 f5       	brne	.+96     	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    2528:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    252c:	87 7f       	andi	r24, 0xF7	; 247
    252e:	80 93 e8 00 	sts	0x00E8, r24
    2532:	93 da       	rcall	.-2778   	; 0x1a5a <Endpoint_ClearStatusStage>
    2534:	80 91 0a 02 	lds	r24, 0x020A
    2538:	90 91 0b 02 	lds	r25, 0x020B
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    253c:	88 27       	eor	r24, r24
    253e:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2540:	96 95       	lsr	r25
    2542:	87 95       	ror	r24
    2544:	3a 95       	dec	r19
    2546:	e1 f7       	brne	.-8      	; 0x2540 <HID_Device_ProcessControlRequest+0x1f8>
    2548:	f7 01       	movw	r30, r14
    254a:	95 87       	std	Z+13, r25	; 0x0d
    254c:	84 87       	std	Z+12, r24	; 0x0c
    254e:	1c c0       	rjmp	.+56     	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    2550:	80 91 08 02 	lds	r24, 0x0208
    2554:	81 3a       	cpi	r24, 0xA1	; 161
    2556:	c1 f4       	brne	.+48     	; 0x2588 <HID_Device_ProcessControlRequest+0x240>
    2558:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    255c:	87 7f       	andi	r24, 0xF7	; 247
    255e:	80 93 e8 00 	sts	0x00E8, r24
    2562:	80 91 e8 00 	lds	r24, 0x00E8
    2566:	80 ff       	sbrs	r24, 0
    2568:	fc cf       	rjmp	.-8      	; 0x2562 <HID_Device_ProcessControlRequest+0x21a>
    256a:	f7 01       	movw	r30, r14
    256c:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    256e:	95 85       	ldd	r25, Z+13	; 0x0d
    2570:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2572:	87 95       	ror	r24
    2574:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2576:	87 95       	ror	r24
    2578:	80 93 f1 00 	sts	0x00F1, r24
    257c:	80 91 e8 00 	lds	r24, 0x00E8
    2580:	8e 77       	andi	r24, 0x7E	; 126
    2582:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2586:	69 da       	rcall	.-2862   	; 0x1a5a <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	be be       	out	0x3e, r11	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
			}

			break;
	}
}
    2596:	0f 90       	pop	r0
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	9f 90       	pop	r9
    25ae:	8f 90       	pop	r8
    25b0:	7f 90       	pop	r7
    25b2:	6f 90       	pop	r6
    25b4:	08 95       	ret

000025b6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    25b6:	9c 01       	movw	r18, r24
    25b8:	27 5f       	subi	r18, 0xF7	; 247
    25ba:	3f 4f       	sbci	r19, 0xFF	; 255
    25bc:	f9 01       	movw	r30, r18
    25be:	27 e0       	ldi	r18, 0x07	; 7
    25c0:	df 01       	movw	r26, r30
    25c2:	1d 92       	st	X+, r1
    25c4:	2a 95       	dec	r18
    25c6:	e9 f7       	brne	.-6      	; 0x25c2 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    25c8:	21 e0       	ldi	r18, 0x01	; 1
    25ca:	fc 01       	movw	r30, r24
    25cc:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    25ce:	24 ef       	ldi	r18, 0xF4	; 244
    25d0:	31 e0       	ldi	r19, 0x01	; 1
    25d2:	35 87       	std	Z+13, r19	; 0x0d
    25d4:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    25d6:	23 e0       	ldi	r18, 0x03	; 3
    25d8:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	ff c9       	rjmp	.-3074   	; 0x19de <Endpoint_ConfigureEndpointTable>

000025e0 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    25e0:	4f 92       	push	r4
    25e2:	5f 92       	push	r5
    25e4:	6f 92       	push	r6
    25e6:	7f 92       	push	r7
    25e8:	8f 92       	push	r8
    25ea:	9f 92       	push	r9
    25ec:	af 92       	push	r10
    25ee:	bf 92       	push	r11
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	00 d0       	rcall	.+0      	; 0x2602 <HID_Device_USBTask+0x22>
    2602:	1f 92       	push	r1
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    260a:	ad b6       	in	r10, 0x3d	; 61
    260c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    260e:	80 91 07 02 	lds	r24, 0x0207
    2612:	84 30       	cpi	r24, 0x04	; 4
    2614:	09 f0       	breq	.+2      	; 0x2618 <HID_Device_USBTask+0x38>
    2616:	8f c0       	rjmp	.+286    	; 0x2736 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2618:	80 91 e4 00 	lds	r24, 0x00E4
    261c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2620:	f7 01       	movw	r30, r14
    2622:	22 85       	ldd	r18, Z+10	; 0x0a
    2624:	33 85       	ldd	r19, Z+11	; 0x0b
    2626:	28 17       	cp	r18, r24
    2628:	39 07       	cpc	r19, r25
    262a:	09 f4       	brne	.+2      	; 0x262e <HID_Device_USBTask+0x4e>
    262c:	84 c0       	rjmp	.+264    	; 0x2736 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    262e:	81 81       	ldd	r24, Z+1	; 0x01
    2630:	8f 70       	andi	r24, 0x0F	; 15
    2632:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2636:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    263a:	85 ff       	sbrs	r24, 5
    263c:	7c c0       	rjmp	.+248    	; 0x2736 <HID_Device_USBTask+0x156>
    263e:	6d b6       	in	r6, 0x3d	; 61
    2640:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2642:	40 85       	ldd	r20, Z+8	; 0x08
    2644:	8d b7       	in	r24, 0x3d	; 61
    2646:	9e b7       	in	r25, 0x3e	; 62
    2648:	84 1b       	sub	r24, r20
    264a:	91 09       	sbc	r25, r1
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	9e bf       	out	0x3e, r25	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	8d bf       	out	0x3d, r24	; 61
    2656:	cd b6       	in	r12, 0x3d	; 61
    2658:	de b6       	in	r13, 0x3e	; 62
    265a:	ef ef       	ldi	r30, 0xFF	; 255
    265c:	ce 1a       	sub	r12, r30
    265e:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2660:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2662:	1a 82       	std	Y+2, r1	; 0x02
    2664:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2666:	46 01       	movw	r8, r12
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	c6 01       	movw	r24, r12
    2670:	b3 d0       	rcall	.+358    	; 0x27d8 <memset>
    2672:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2674:	0f 5f       	subi	r16, 0xFF	; 255
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	96 01       	movw	r18, r12
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	be 01       	movw	r22, r28
    267e:	6d 5f       	subi	r22, 0xFD	; 253
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	c7 01       	movw	r24, r14
    2684:	0e 94 58 04 	call	0x8b0	; 0x8b0 <CALLBACK_HID_Device_CreateHIDReport>
    2688:	58 2e       	mov	r5, r24
    268a:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    268c:	84 85       	ldd	r24, Z+12	; 0x0c
    268e:	95 85       	ldd	r25, Z+13	; 0x0d
    2690:	89 2b       	or	r24, r25
    2692:	31 f0       	breq	.+12     	; 0x26a0 <HID_Device_USBTask+0xc0>
    2694:	01 e0       	ldi	r16, 0x01	; 1
    2696:	10 e0       	ldi	r17, 0x00	; 0
    2698:	86 85       	ldd	r24, Z+14	; 0x0e
    269a:	97 85       	ldd	r25, Z+15	; 0x0f
    269c:	89 2b       	or	r24, r25
    269e:	11 f0       	breq	.+4      	; 0x26a4 <HID_Device_USBTask+0xc4>
    26a0:	00 e0       	ldi	r16, 0x00	; 0
    26a2:	10 e0       	ldi	r17, 0x00	; 0
    26a4:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    26a6:	c6 80       	ldd	r12, Z+6	; 0x06
    26a8:	d7 80       	ldd	r13, Z+7	; 0x07
    26aa:	c1 14       	cp	r12, r1
    26ac:	d1 04       	cpc	r13, r1
    26ae:	89 f0       	breq	.+34     	; 0x26d2 <HID_Device_USBTask+0xf2>
    26b0:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    26b2:	5a 81       	ldd	r21, Y+2	; 0x02
    26b4:	b6 01       	movw	r22, r12
    26b6:	c4 01       	movw	r24, r8
    26b8:	79 d0       	rcall	.+242    	; 0x27ac <memcmp>
    26ba:	44 24       	eor	r4, r4
    26bc:	43 94       	inc	r4
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <HID_Device_USBTask+0xe4>
    26c2:	41 2c       	mov	r4, r1
    26c4:	f7 01       	movw	r30, r14
    26c6:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	b4 01       	movw	r22, r8
    26cc:	c6 01       	movw	r24, r12
    26ce:	7b d0       	rcall	.+246    	; 0x27c6 <memcpy>
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <HID_Device_USBTask+0xf4>
    26d2:	41 2c       	mov	r4, r1
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    26d8:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    26da:	f9 f0       	breq	.+62     	; 0x271a <HID_Device_USBTask+0x13a>
    26dc:	51 10       	cpse	r5, r1
    26de:	04 c0       	rjmp	.+8      	; 0x26e8 <HID_Device_USBTask+0x108>
    26e0:	41 10       	cpse	r4, r1
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <HID_Device_USBTask+0x108>
    26e4:	00 ff       	sbrs	r16, 0
    26e6:	19 c0       	rjmp	.+50     	; 0x271a <HID_Device_USBTask+0x13a>
    26e8:	f7 01       	movw	r30, r14
    26ea:	84 85       	ldd	r24, Z+12	; 0x0c
    26ec:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    26ee:	97 87       	std	Z+15, r25	; 0x0f
    26f0:	86 87       	std	Z+14, r24	; 0x0e
    26f2:	81 81       	ldd	r24, Z+1	; 0x01
    26f4:	8f 70       	andi	r24, 0x0F	; 15
    26f6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	81 11       	cpse	r24, r1
    26fe:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2702:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2704:	7a 81       	ldd	r23, Y+2	; 0x02
    2706:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	c4 01       	movw	r24, r8
    270c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Endpoint_Write_Stream_LE>
    2710:	80 91 e8 00 	lds	r24, 0x00E8
    2714:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2716:	80 93 e8 00 	sts	0x00E8, r24
    271a:	80 91 e4 00 	lds	r24, 0x00E4
    271e:	90 91 e5 00 	lds	r25, 0x00E5
    2722:	f7 01       	movw	r30, r14
    2724:	93 87       	std	Z+11, r25	; 0x0b
    2726:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2728:	86 2d       	mov	r24, r6
    272a:	97 2d       	mov	r25, r7
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	9e bf       	out	0x3e, r25	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	8d bf       	out	0x3d, r24	; 61
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	be be       	out	0x3e, r11	; 62
	}
}
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	ad be       	out	0x3d, r10	; 61
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	ff 90       	pop	r15
    2750:	ef 90       	pop	r14
    2752:	df 90       	pop	r13
    2754:	cf 90       	pop	r12
    2756:	bf 90       	pop	r11
    2758:	af 90       	pop	r10
    275a:	9f 90       	pop	r9
    275c:	8f 90       	pop	r8
    275e:	7f 90       	pop	r7
    2760:	6f 90       	pop	r6
    2762:	5f 90       	pop	r5
    2764:	4f 90       	pop	r4
    2766:	08 95       	ret

00002768 <__udivmodsi4>:
    2768:	a1 e2       	ldi	r26, 0x21	; 33
    276a:	1a 2e       	mov	r1, r26
    276c:	aa 1b       	sub	r26, r26
    276e:	bb 1b       	sub	r27, r27
    2770:	fd 01       	movw	r30, r26
    2772:	0d c0       	rjmp	.+26     	; 0x278e <__udivmodsi4_ep>

00002774 <__udivmodsi4_loop>:
    2774:	aa 1f       	adc	r26, r26
    2776:	bb 1f       	adc	r27, r27
    2778:	ee 1f       	adc	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	a2 17       	cp	r26, r18
    277e:	b3 07       	cpc	r27, r19
    2780:	e4 07       	cpc	r30, r20
    2782:	f5 07       	cpc	r31, r21
    2784:	20 f0       	brcs	.+8      	; 0x278e <__udivmodsi4_ep>
    2786:	a2 1b       	sub	r26, r18
    2788:	b3 0b       	sbc	r27, r19
    278a:	e4 0b       	sbc	r30, r20
    278c:	f5 0b       	sbc	r31, r21

0000278e <__udivmodsi4_ep>:
    278e:	66 1f       	adc	r22, r22
    2790:	77 1f       	adc	r23, r23
    2792:	88 1f       	adc	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	1a 94       	dec	r1
    2798:	69 f7       	brne	.-38     	; 0x2774 <__udivmodsi4_loop>
    279a:	60 95       	com	r22
    279c:	70 95       	com	r23
    279e:	80 95       	com	r24
    27a0:	90 95       	com	r25
    27a2:	9b 01       	movw	r18, r22
    27a4:	ac 01       	movw	r20, r24
    27a6:	bd 01       	movw	r22, r26
    27a8:	cf 01       	movw	r24, r30
    27aa:	08 95       	ret

000027ac <memcmp>:
    27ac:	fb 01       	movw	r30, r22
    27ae:	dc 01       	movw	r26, r24
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <memcmp+0xe>
    27b2:	8d 91       	ld	r24, X+
    27b4:	01 90       	ld	r0, Z+
    27b6:	80 19       	sub	r24, r0
    27b8:	21 f4       	brne	.+8      	; 0x27c2 <memcmp+0x16>
    27ba:	41 50       	subi	r20, 0x01	; 1
    27bc:	50 40       	sbci	r21, 0x00	; 0
    27be:	c8 f7       	brcc	.-14     	; 0x27b2 <memcmp+0x6>
    27c0:	88 1b       	sub	r24, r24
    27c2:	99 0b       	sbc	r25, r25
    27c4:	08 95       	ret

000027c6 <memcpy>:
    27c6:	fb 01       	movw	r30, r22
    27c8:	dc 01       	movw	r26, r24
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <memcpy+0xa>
    27cc:	01 90       	ld	r0, Z+
    27ce:	0d 92       	st	X+, r0
    27d0:	41 50       	subi	r20, 0x01	; 1
    27d2:	50 40       	sbci	r21, 0x00	; 0
    27d4:	d8 f7       	brcc	.-10     	; 0x27cc <memcpy+0x6>
    27d6:	08 95       	ret

000027d8 <memset>:
    27d8:	dc 01       	movw	r26, r24
    27da:	01 c0       	rjmp	.+2      	; 0x27de <memset+0x6>
    27dc:	6d 93       	st	X+, r22
    27de:	41 50       	subi	r20, 0x01	; 1
    27e0:	50 40       	sbci	r21, 0x00	; 0
    27e2:	e0 f7       	brcc	.-8      	; 0x27dc <memset+0x4>
    27e4:	08 95       	ret

000027e6 <_exit>:
    27e6:	f8 94       	cli

000027e8 <__stop_program>:
    27e8:	ff cf       	rjmp	.-2      	; 0x27e8 <__stop_program>
