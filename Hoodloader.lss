
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002772  00002806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  00800136  00800136  0000283c  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003ef3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008c0  00000000  00000000  00003f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e825  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bea  00000000  00000000  00012ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005a1d  00000000  00000000  00016be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001574  00000000  00000000  0001c604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a0e  00000000  00000000  0001db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000087a6  00000000  00000000  00022586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a60  00000000  00000000  0002ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	6e c1       	rjmp	.+732    	; 0x306 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	38 c3       	rjmp	.+1648   	; 0x6ce <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 9f 01 07 05 81 03 10 00 01        !....".........

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 3f 09 01 81 02 95 3f     .u...&...?.....?
     1bf:	09 02 91 02 c0 05 01 09 80 a1 01 85 05 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff 00 19 00 29 ff 95 01 75 08 81 00 c0 05 01 09     ....)...u.......
				ReportSize     -= 1;
     1df:	04 a1 01 85 06 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     1ff:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     20f:	81 02 c0 05 01 09 39 09 39 15 01 25 08 95 02 75     ......9.9..%...u
     21f:	04 81 02 c0 05 01 09 04 a1 01 85 07 05 09 19 01     ................
     22f:	29 20 15 00 25 01 75 01 95 20 81 02 05 01 a1 00     ) ..%.u.. ......
     23f:	09 30 09 31 09 32 09 33 09 34 09 35 15 00 27 ff     .0.1.2.3.4.5..'.
     24f:	ff 00 00 75 10 95 06 81 02 c0 09 39 09 39 15 01     ...u.......9.9..
     25f:	25 08 95 02 75 04 81 02 c0 05 01 09 04 a1 01 85     %...u...........
     26f:	08 a1 00 05 09 19 01 29 02 15 00 25 01 75 01 95     .......)...%.u..
     27f:	02 81 02 05 01 09 30 09 31 15 00 26 ff 03 75 0a     ......0.1..&..u.
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	95 02 81 02 75 02 95 01 81 03 c0 c0 05 01 09 04     ....u...........
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	a1 01 85 09 a1 00 05 09 19 01 29 02 15 00 25 01     ..........)...%.

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	75 01 95 02 81 02 05 01 09 30 09 31 15 00 26 ff     u........0.1..&.

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	03 75 0a 95 02 81 02 75 02 95 01 81 03 c0 c0        .u.....u.......

000002ce <__ctors_end>:
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
				break;
     2d4:	d2 e0       	ldi	r29, 0x02	; 2

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e2 e7       	ldi	r30, 0x72	; 114
     2e2:	f7 e2       	ldi	r31, 0x27	; 39
				break;
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x10>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	05 90       	lpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a6 33       	cpi	r26, 0x36	; 54
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0xc>

000002f0 <__do_clear_bss>:
				break;
     2f0:	12 e0       	ldi	r17, 0x02	; 2

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	a6 e3       	ldi	r26, 0x36	; 54
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a3 35       	cpi	r26, 0x53	; 83
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
				break;
     300:	6c d0       	rcall	.+216    	; 0x3da <main>

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0c 94 b7 13 	jmp	0x276e	; 0x276e <_exit>

00000306 <__bad_interrupt>:
				break;
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <LRingBuffer_Remove.constprop.2>:

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	e6 e3       	ldi	r30, 0x36	; 54
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	5f b7       	in	r21, 0x3f	; 63
     30e:	f8 94       	cli
     310:	20 81       	ld	r18, Z
     312:	31 81       	ldd	r19, Z+1	; 0x01
     314:	21 15       	cp	r18, r1
				break;
     316:	31 05       	cpc	r19, r1

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	19 f0       	breq	.+6      	; 0x320 <LRingBuffer_Remove.constprop.2+0x18>
     31a:	44 81       	ldd	r20, Z+4	; 0x04
				break;
     31c:	41 11       	cpse	r20, r1

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	04 c0       	rjmp	.+8      	; 0x328 <LRingBuffer_Remove.constprop.2+0x20>
     320:	5f bf       	out	0x3f, r21	; 63
     322:	2f ef       	ldi	r18, 0xFF	; 255
				break;
     324:	3f ef       	ldi	r19, 0xFF	; 255

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	11 c0       	rjmp	.+34     	; 0x34a <LRingBuffer_Remove.constprop.2+0x42>
     328:	82 81       	ldd	r24, Z+2	; 0x02
     32a:	90 e0       	ldi	r25, 0x00	; 0

				if (ParserData->UsingReportIDs)
     32c:	84 1b       	sub	r24, r20
     32e:	91 09       	sbc	r25, r1
     330:	97 ff       	sbrs	r25, 7
     332:	03 c0       	rjmp	.+6      	; 0x33a <LRingBuffer_Remove.constprop.2+0x32>
     334:	63 81       	ldd	r22, Z+3	; 0x03
     336:	86 0f       	add	r24, r22
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	91 1d       	adc	r25, r1
     33a:	d9 01       	movw	r26, r18
     33c:	a8 0f       	add	r26, r24
     33e:	b9 1f       	adc	r27, r25
     340:	2c 91       	ld	r18, X
     342:	41 50       	subi	r20, 0x01	; 1
     344:	44 83       	std	Z+4, r20	; 0x04
     346:	5f bf       	out	0x3f, r21	; 63
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	30 e0       	ldi	r19, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	c9 01       	movw	r24, r18
     34c:	08 95       	ret

0000034e <LRingBuffer_Append.constprop.4>:
     34e:	e6 e3       	ldi	r30, 0x36	; 54
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	4f b7       	in	r20, 0x3f	; 63
     354:	f8 94       	cli
     356:	20 81       	ld	r18, Z
     358:	31 81       	ldd	r19, Z+1	; 0x01
     35a:	21 15       	cp	r18, r1
     35c:	31 05       	cpc	r19, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	09 f4       	brne	.+2      	; 0x362 <LRingBuffer_Append.constprop.4+0x14>
     360:	1d c0       	rjmp	.+58     	; 0x39c <LRingBuffer_Append.constprop.4+0x4e>
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	54 81       	ldd	r21, Z+4	; 0x04
     368:	85 1b       	sub	r24, r21
     36a:	91 09       	sbc	r25, r1
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	97 ff       	sbrs	r25, 7
     370:	03 c0       	rjmp	.+6      	; 0x378 <LRingBuffer_Append.constprop.4+0x2a>
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	85 0f       	add	r24, r21
     376:	91 1d       	adc	r25, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	d9 01       	movw	r26, r18
     37a:	a8 0f       	add	r26, r24
     37c:	b9 1f       	adc	r27, r25
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	6c 93       	st	X, r22
     380:	84 81       	ldd	r24, Z+4	; 0x04
     382:	93 81       	ldd	r25, Z+3	; 0x03
     384:	89 13       	cpse	r24, r25
     386:	08 c0       	rjmp	.+16     	; 0x398 <LRingBuffer_Append.constprop.4+0x4a>
     388:	92 81       	ldd	r25, Z+2	; 0x02
     38a:	91 11       	cpse	r25, r1
     38c:	01 c0       	rjmp	.+2      	; 0x390 <LRingBuffer_Append.constprop.4+0x42>
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	81 50       	subi	r24, 0x01	; 1
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	02 c0       	rjmp	.+4      	; 0x39c <LRingBuffer_Append.constprop.4+0x4e>
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	4f bf       	out	0x3f, r20	; 63
     39e:	08 95       	ret

000003a0 <SetupHardware>:
     3a0:	84 b7       	in	r24, 0x34	; 52
     3a2:	87 7f       	andi	r24, 0xF7	; 247
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	84 bf       	out	0x34, r24	; 52
     3a6:	88 e1       	ldi	r24, 0x18	; 24
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	80 93 60 00 	sts	0x0060, r24
     3b0:	10 92 60 00 	sts	0x0060, r1
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SerialInitHID>
     3ba:	8a b1       	in	r24, 0x0a	; 10
     3bc:	80 63       	ori	r24, 0x30	; 48

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	8a b9       	out	0x0a, r24	; 10
     3c0:	8b b1       	in	r24, 0x0b	; 11
     3c2:	80 63       	ori	r24, 0x30	; 48
     3c4:	8b b9       	out	0x0b, r24	; 11
     3c6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <USB_Init>
     3ca:	84 e0       	ldi	r24, 0x04	; 4
				break;
     3cc:	85 bd       	out	0x25, r24	; 37

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	5f 9a       	sbi	0x0b, 7	; 11
     3d0:	57 9a       	sbi	0x0a, 7	; 10
     3d2:	20 98       	cbi	0x04, 0	; 4
     3d4:	25 98       	cbi	0x04, 5	; 4
     3d6:	2d 9a       	sbi	0x05, 5	; 5
     3d8:	08 95       	ret

000003da <main>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	e6 e3       	ldi	r30, 0x36	; 54
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	2f b7       	in	r18, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	86 e4       	ldi	r24, 0x46	; 70
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	91 83       	std	Z+1, r25	; 0x01
     3e8:	80 83       	st	Z, r24
     3ea:	12 82       	std	Z+2, r1	; 0x02
     3ec:	84 e6       	ldi	r24, 0x64	; 100
     3ee:	83 83       	std	Z+3, r24	; 0x03
     3f0:	14 82       	std	Z+4, r1	; 0x04
     3f2:	2f bf       	out	0x3f, r18	; 63
     3f4:	10 92 3b 01 	sts	0x013B, r1
     3f8:	86 ef       	ldi	r24, 0xF6	; 246
				break;
     3fa:	91 e0       	ldi	r25, 0x01	; 1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	aa d7       	rcall	.+3924   	; 0x1352 <NHPreset>
     3fe:	10 92 45 01 	sts	0x0145, r1
     402:	97 d3       	rcall	.+1838   	; 0xb32 <HIDreset>
     404:	a9 d3       	rcall	.+1874   	; 0xb58 <avrispReset>
     406:	cc df       	rcall	.-104    	; 0x3a0 <SetupHardware>
     408:	78 94       	sei

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	80 91 3e 01 	lds	r24, 0x013E
     40e:	81 11       	cpse	r24, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	06 c0       	rjmp	.+12     	; 0x41e <main+0x44>
     412:	83 b1       	in	r24, 0x03	; 3
     414:	80 72       	andi	r24, 0x20	; 32
     416:	83 b9       	out	0x03, r24	; 3
     418:	81 11       	cpse	r24, r1
     41a:	01 c0       	rjmp	.+2      	; 0x41e <main+0x44>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	c5 d2       	rcall	.+1418   	; 0x9a8 <clearHIDReports>
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 8a 10 	call	0x2114	; 0x2114 <CDC_Device_ReceiveByte>
     426:	97 fd       	sbrc	r25, 7

					while (CurrCollectionPath->Parent != NULL)
     428:	1b c0       	rjmp	.+54     	; 0x460 <main+0x86>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	40 91 24 01 	lds	r20, 0x0124
     42e:	50 91 25 01 	lds	r21, 0x0125
     432:	60 91 26 01 	lds	r22, 0x0126
     436:	70 91 27 01 	lds	r23, 0x0127
     43a:	41 30       	cpi	r20, 0x01	; 1
     43c:	51 05       	cpc	r21, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	61 05       	cpc	r22, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	71 05       	cpc	r23, r1
     442:	11 f4       	brne	.+4      	; 0x448 <main+0x6e>
     444:	be d6       	rcall	.+3452   	; 0x11c2 <avrisp>
     446:	0c c0       	rjmp	.+24     	; 0x460 <main+0x86>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	5c 98       	cbi	0x0b, 4	; 11
     44a:	90 91 45 01 	lds	r25, 0x0145
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	9c 60       	ori	r25, 0x0C	; 12
     450:	90 93 45 01 	sts	0x0145, r25
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     454:	90 91 c8 00 	lds	r25, 0x00C8
     458:	95 ff       	sbrs	r25, 5
     45a:	fc cf       	rjmp	.-8      	; 0x454 <main+0x7a>
     45c:	80 93 ce 00 	sts	0x00CE, r24

				if (UsageListSize)
     460:	2f b7       	in	r18, 0x3f	; 63
     462:	f8 94       	cli
     464:	80 91 36 01 	lds	r24, 0x0136
     468:	90 91 37 01 	lds	r25, 0x0137
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46c:	89 2b       	or	r24, r25
     46e:	19 f0       	breq	.+6      	; 0x476 <main+0x9c>
     470:	80 91 3a 01 	lds	r24, 0x013A
     474:	01 c0       	rjmp	.+2      	; 0x478 <main+0x9e>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	2f bf       	out	0x3f, r18	; 63
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	19 f4       	brne	.+6      	; 0x486 <main+0xac>

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	a8 99       	sbic	0x15, 0	; 21
     482:	89 c0       	rjmp	.+274    	; 0x596 <main+0x1bc>
					  UsageList[i - 1] = UsageList[i];
     484:	0d c1       	rjmp	.+538    	; 0x6a0 <main+0x2c6>
     486:	5d 98       	cbi	0x0b, 5	; 11
     488:	20 91 45 01 	lds	r18, 0x0145

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	23 60       	ori	r18, 0x03	; 3
     48e:	20 93 45 01 	sts	0x0145, r18
     492:	20 91 11 01 	lds	r18, 0x0111
     496:	2f 70       	andi	r18, 0x0F	; 15
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	20 93 e9 00 	sts	0x00E9, r18
     49c:	20 91 e8 00 	lds	r18, 0x00E8
     4a0:	20 ff       	sbrs	r18, 0
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	ee cf       	rjmp	.-36     	; 0x480 <main+0xa6>
     4a4:	80 34       	cpi	r24, 0x40	; 64
     4a6:	91 05       	cpc	r25, r1
     4a8:	10 f0       	brcs	.+4      	; 0x4ae <main+0xd4>
     4aa:	8f e3       	ldi	r24, 0x3F	; 63
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	18 2f       	mov	r17, r24
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	6d c0       	rjmp	.+218    	; 0x590 <main+0x1b6>
     4b6:	80 91 24 01 	lds	r24, 0x0124
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	90 91 25 01 	lds	r25, 0x0125
     4be:	a0 91 26 01 	lds	r26, 0x0126
     4c2:	b0 91 27 01 	lds	r27, 0x0127
     4c6:	20 91 3b 01 	lds	r18, 0x013B
     4ca:	22 23       	and	r18, r18
     4cc:	29 f0       	breq	.+10     	; 0x4d8 <main+0xfe>
     4ce:	80 91 3b 01 	lds	r24, 0x013B
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d2:	81 11       	cpse	r24, r1
     4d4:	11 c0       	rjmp	.+34     	; 0x4f8 <main+0x11e>
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <main+0x12a>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	91 05       	cpc	r25, r1
     4dc:	a1 05       	cpc	r26, r1
				break;
     4de:	b1 05       	cpc	r27, r1
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	28 f0       	brcs	.+10     	; 0x4ec <main+0x112>
     4e2:	81 15       	cp	r24, r1
     4e4:	92 4c       	sbci	r25, 0xC2	; 194
     4e6:	a1 40       	sbci	r26, 0x01	; 1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	89 f7       	brne	.-30     	; 0x4ce <main+0xf4>
     4ec:	93 b1       	in	r25, 0x03	; 3
     4ee:	90 72       	andi	r25, 0x20	; 32
     4f0:	93 b9       	out	0x03, r25	; 3
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	99 23       	and	r25, r25
     4f4:	61 f3       	breq	.-40     	; 0x4ce <main+0xf4>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	47 c0       	rjmp	.+142    	; 0x586 <main+0x1ac>
     4f8:	80 91 45 01 	lds	r24, 0x0145
     4fc:	80 63       	ori	r24, 0x30	; 48
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	80 93 45 01 	sts	0x0145, r24
     502:	01 c0       	rjmp	.+2      	; 0x506 <main+0x12c>
     504:	51 d2       	rcall	.+1186   	; 0x9a8 <clearHIDReports>

					if (UsageListSize)
     506:	80 91 20 01 	lds	r24, 0x0120
     50a:	80 fd       	sbrc	r24, 0
     50c:	0c c0       	rjmp	.+24     	; 0x526 <main+0x14c>
     50e:	80 91 3b 01 	lds	r24, 0x013B
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     512:	88 23       	and	r24, r24
     514:	41 f0       	breq	.+16     	; 0x526 <main+0x14c>
     516:	86 e3       	ldi	r24, 0x36	; 54
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	f6 de       	rcall	.-532    	; 0x308 <LRingBuffer_Remove.constprop.2>
     51c:	80 91 3b 01 	lds	r24, 0x013B
     520:	81 11       	cpse	r24, r1
     522:	2d c0       	rjmp	.+90     	; 0x57e <main+0x1a4>
     524:	34 c0       	rjmp	.+104    	; 0x58e <main+0x1b4>

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	7f b7       	in	r23, 0x3f	; 63
     528:	f8 94       	cli
						  UsageList[i - 1] = UsageList[i];
     52a:	20 91 36 01 	lds	r18, 0x0136
     52e:	30 91 37 01 	lds	r19, 0x0137

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	21 15       	cp	r18, r1
     534:	31 05       	cpc	r19, r1
     536:	41 f0       	breq	.+16     	; 0x548 <main+0x16e>
     538:	40 91 3a 01 	lds	r20, 0x013A
     53c:	44 23       	and	r20, r20
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	21 f0       	breq	.+8      	; 0x548 <main+0x16e>
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	14 16       	cp	r1, r20
     544:	15 06       	cpc	r1, r21
     546:	24 f0       	brlt	.+8      	; 0x550 <main+0x176>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	7f bf       	out	0x3f, r23	; 63
     54a:	6f ef       	ldi	r22, 0xFF	; 255
     54c:	7f ef       	ldi	r23, 0xFF	; 255
     54e:	10 c0       	rjmp	.+32     	; 0x570 <main+0x196>
     550:	80 91 38 01 	lds	r24, 0x0138
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	84 1b       	sub	r24, r20
     558:	95 0b       	sbc	r25, r21
     55a:	97 ff       	sbrs	r25, 7
     55c:	04 c0       	rjmp	.+8      	; 0x566 <main+0x18c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	40 91 39 01 	lds	r20, 0x0139
     562:	84 0f       	add	r24, r20
     564:	91 1d       	adc	r25, r1
     566:	f9 01       	movw	r30, r18
     568:	e8 0f       	add	r30, r24
     56a:	f9 1f       	adc	r31, r25
     56c:	60 81       	ld	r22, Z
     56e:	7f bf       	out	0x3f, r23	; 63
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	80 e1       	ldi	r24, 0x10	; 16
     572:	91 e0       	ldi	r25, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	0e 94 22 10 	call	0x2044	; 0x2044 <CDC_Device_SendByte>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	88 23       	and	r24, r24
     57a:	69 f2       	breq	.-102    	; 0x516 <main+0x13c>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	81 cf       	rjmp	.-254    	; 0x480 <main+0xa6>
     57e:	81 50       	subi	r24, 0x01	; 1
     580:	80 93 3b 01 	sts	0x013B, r24
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     584:	04 c0       	rjmp	.+8      	; 0x58e <main+0x1b4>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	86 e3       	ldi	r24, 0x36	; 54
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	be de       	rcall	.-644    	; 0x308 <LRingBuffer_Remove.constprop.2>
     58c:	51 d2       	rcall	.+1186   	; 0xa30 <checkNHPProtocol>
     58e:	21 96       	adiw	r28, 0x01	; 1
     590:	1c 13       	cpse	r17, r28
     592:	91 cf       	rjmp	.-222    	; 0x4b6 <main+0xdc>
     594:	75 cf       	rjmp	.-278    	; 0x480 <main+0xa6>
     596:	a8 9a       	sbi	0x15, 0	; 21
     598:	90 91 45 01 	lds	r25, 0x0145
     59c:	89 2f       	mov	r24, r25
     59e:	80 73       	andi	r24, 0x30	; 48
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <main+0x1ca>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	5c c0       	rjmp	.+184    	; 0x65c <main+0x282>
     5a4:	89 2f       	mov	r24, r25
     5a6:	82 95       	swap	r24
     5a8:	8f 70       	andi	r24, 0x0F	; 15
     5aa:	8d 5f       	subi	r24, 0xFD	; 253
     5ac:	83 70       	andi	r24, 0x03	; 3
     5ae:	28 2f       	mov	r18, r24
     5b0:	22 95       	swap	r18

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	20 7f       	andi	r18, 0xF0	; 240
     5b4:	9f 7c       	andi	r25, 0xCF	; 207
     5b6:	92 2b       	or	r25, r18
     5b8:	90 93 45 01 	sts	0x0145, r25
     5bc:	81 11       	cpse	r24, r1
     5be:	4e c0       	rjmp	.+156    	; 0x65c <main+0x282>
     5c0:	80 91 3e 01 	lds	r24, 0x013E
     5c4:	81 11       	cpse	r24, r1
     5c6:	4a c0       	rjmp	.+148    	; 0x65c <main+0x282>
     5c8:	e0 91 f6 01 	lds	r30, 0x01F6
     5cc:	e6 ff       	sbrs	r30, 6
     5ce:	15 c0       	rjmp	.+42     	; 0x5fa <main+0x220>
     5d0:	e6 95       	lsr	r30
     5d2:	e6 95       	lsr	r30
     5d4:	e6 95       	lsr	r30
     5d6:	e7 70       	andi	r30, 0x07	; 7
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e5 50       	subi	r30, 0x05	; 5
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	60 81       	ld	r22, Z
     5e0:	86 e3       	ldi	r24, 0x36	; 54
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	b4 de       	rcall	.-664    	; 0x34e <LRingBuffer_Append.constprop.4>
     5e6:	80 91 f6 01 	lds	r24, 0x01F6
     5ea:	86 fb       	bst	r24, 6
     5ec:	88 27       	eor	r24, r24
     5ee:	80 f9       	bld	r24, 0
     5f0:	90 91 3b 01 	lds	r25, 0x013B

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	89 0f       	add	r24, r25
     5f6:	80 93 3b 01 	sts	0x013B, r24
					  return HID_PARSE_InsufficientReportItems;
     5fa:	00 91 f6 01 	lds	r16, 0x01F6

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	07 fd       	sbrc	r16, 7
     600:	29 c0       	rjmp	.+82     	; 0x654 <main+0x27a>
     602:	06 95       	lsr	r16
     604:	06 95       	lsr	r16
     606:	06 95       	lsr	r16
     608:	07 70       	andi	r16, 0x07	; 7
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	d0 e0       	ldi	r29, 0x00	; 0
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	86 e3       	ldi	r24, 0x36	; 54
     612:	e8 2e       	mov	r14, r24
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	f8 2e       	mov	r15, r24
     618:	e0 0e       	add	r14, r16
     61a:	f1 1e       	adc	r15, r17
     61c:	09 c0       	rjmp	.+18     	; 0x630 <main+0x256>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	f7 01       	movw	r30, r14
     620:	ec 0f       	add	r30, r28
     622:	fd 1f       	adc	r31, r29
     624:	eb 53       	subi	r30, 0x3B	; 59
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	60 81       	ld	r22, Z
     62a:	86 e3       	ldi	r24, 0x36	; 54
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	8f de       	rcall	.-738    	; 0x34e <LRingBuffer_Append.constprop.4>
     630:	21 97       	sbiw	r28, 0x01	; 1
     632:	ce 01       	movw	r24, r28
     634:	80 95       	com	r24
     636:	90 95       	com	r25
     638:	80 17       	cp	r24, r16
     63a:	91 07       	cpc	r25, r17
     63c:	84 f3       	brlt	.-32     	; 0x61e <main+0x244>
     63e:	80 91 f6 01 	lds	r24, 0x01F6
     642:	86 95       	lsr	r24
     644:	86 95       	lsr	r24
     646:	86 95       	lsr	r24
     648:	87 70       	andi	r24, 0x07	; 7
     64a:	90 91 3b 01 	lds	r25, 0x013B
     64e:	89 0f       	add	r24, r25
     650:	80 93 3b 01 	sts	0x013B, r24
     654:	86 ef       	ldi	r24, 0xF6	; 246
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	7c d6       	rcall	.+3320   	; 0x1352 <NHPreset>
     65a:	b6 d1       	rcall	.+876    	; 0x9c8 <checkNHPControlAddressError>
     65c:	90 91 45 01 	lds	r25, 0x0145
     660:	89 2f       	mov	r24, r25
     662:	83 70       	andi	r24, 0x03	; 3
     664:	49 f0       	breq	.+18     	; 0x678 <main+0x29e>
     666:	81 50       	subi	r24, 0x01	; 1
     668:	83 70       	andi	r24, 0x03	; 3
     66a:	9c 7f       	andi	r25, 0xFC	; 252
     66c:	98 2b       	or	r25, r24
     66e:	90 93 45 01 	sts	0x0145, r25
     672:	81 11       	cpse	r24, r1
     674:	01 c0       	rjmp	.+2      	; 0x678 <main+0x29e>
     676:	5d 9a       	sbi	0x0b, 5	; 11
     678:	90 91 45 01 	lds	r25, 0x0145
     67c:	89 2f       	mov	r24, r25
					  ParserData->TotalReportItems++;
     67e:	8c 70       	andi	r24, 0x0C	; 12
     680:	79 f0       	breq	.+30     	; 0x6a0 <main+0x2c6>
     682:	89 2f       	mov	r24, r25
     684:	86 95       	lsr	r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	86 95       	lsr	r24
     688:	8d 5f       	subi	r24, 0xFD	; 253
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	83 70       	andi	r24, 0x03	; 3
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	28 2f       	mov	r18, r24
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	22 0f       	add	r18, r18
     690:	22 0f       	add	r18, r18
     692:	93 7f       	andi	r25, 0xF3	; 243
     694:	92 2b       	or	r25, r18
     696:	90 93 45 01 	sts	0x0145, r25
     69a:	81 11       	cpse	r24, r1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <main+0x2c6>
     69e:	5c 9a       	sbi	0x0b, 4	; 11
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <CDC_Device_USBTask>
     6a8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <USB_USBTask>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6ac:	ae ce       	rjmp	.-676    	; 0x40a <main+0x30>

000006ae <EVENT_USB_Device_Connect>:
     6ae:	08 95       	ret

000006b0 <EVENT_USB_Device_Disconnect>:
     6b0:	08 95       	ret

000006b2 <EVENT_USB_Device_ConfigurationChanged>:
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 a0 12 	call	0x2540	; 0x2540 <HID_Device_ConfigureEndpoints>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6ba:	80 e1       	ldi	r24, 0x10	; 16

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <CDC_Device_ConfigureEndpoints>
     6c2:	e2 ee       	ldi	r30, 0xE2	; 226
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	80 81       	ld	r24, Z
     6c8:	84 60       	ori	r24, 0x04	; 4
     6ca:	80 83       	st	Z, r24
     6cc:	08 95       	ret

000006ce <__vector_23>:
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	2f 93       	push	r18
     6da:	3f 93       	push	r19
     6dc:	4f 93       	push	r20
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	5f 93       	push	r21
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	40 91 ce 00 	lds	r20, 0x00CE
     6f0:	80 91 4a 02 	lds	r24, 0x024A
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	84 30       	cpi	r24, 0x04	; 4
     6f6:	e9 f4       	brne	.+58     	; 0x732 <__vector_23+0x64>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	e6 e3       	ldi	r30, 0x36	; 54
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	2f b7       	in	r18, 0x3f	; 63
     6fe:	f8 94       	cli
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	a1 f0       	breq	.+40     	; 0x730 <__vector_23+0x62>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	54 81       	ldd	r21, Z+4	; 0x04
     70a:	33 81       	ldd	r19, Z+3	; 0x03
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	53 13       	cpse	r21, r19
     70e:	01 c0       	rjmp	.+2      	; 0x712 <__vector_23+0x44>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	0f c0       	rjmp	.+30     	; 0x730 <__vector_23+0x62>
     712:	32 81       	ldd	r19, Z+2	; 0x02
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	dc 01       	movw	r26, r24
     716:	a3 0f       	add	r26, r19
     718:	b1 1d       	adc	r27, r1
     71a:	4c 93       	st	X, r20

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	83 2f       	mov	r24, r19
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	82 83       	std	Z+2, r24	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	89 13       	cpse	r24, r25
     726:	01 c0       	rjmp	.+2      	; 0x72a <__vector_23+0x5c>
     728:	12 82       	std	Z+2, r1	; 0x02
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	84 83       	std	Z+4, r24	; 0x04
     730:	2f bf       	out	0x3f, r18	; 63
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	5f 91       	pop	r21
     740:	4f 91       	pop	r20
     742:	3f 91       	pop	r19
     744:	2f 91       	pop	r18
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     750:	80 e1       	ldi	r24, 0x10	; 16
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 b8 10 	call	0x2170	; 0x2170 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface); //<--new
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <HID_Device_ProcessControlRequest>

00000760 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     760:	80 91 0e 01 	lds	r24, 0x010E
     764:	90 91 0f 01 	lds	r25, 0x010F
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	29 f0       	breq	.+10     	; 0x776 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	90 93 0f 01 	sts	0x010F, r25
     772:	80 93 0e 01 	sts	0x010E, r24
     776:	08 95       	ret

00000778 <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     778:	29 2f       	mov	r18, r25
     77a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     77c:	23 30       	cpi	r18, 0x03	; 3
     77e:	31 05       	cpc	r19, r1
     780:	b1 f0       	breq	.+44     	; 0x7ae <CALLBACK_USB_GetDescriptor+0x36>
     782:	4c f4       	brge	.+18     	; 0x796 <CALLBACK_USB_GetDescriptor+0x1e>
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	31 05       	cpc	r19, r1
     788:	09 f4       	brne	.+2      	; 0x78c <CALLBACK_USB_GetDescriptor+0x14>
     78a:	39 c0       	rjmp	.+114    	; 0x7fe <CALLBACK_USB_GetDescriptor+0x86>
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	31 05       	cpc	r19, r1
     790:	09 f0       	breq	.+2      	; 0x794 <CALLBACK_USB_GetDescriptor+0x1c>
     792:	3a c0       	rjmp	.+116    	; 0x808 <CALLBACK_USB_GetDescriptor+0x90>
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <CALLBACK_USB_GetDescriptor+0x2c>
     796:	21 32       	cpi	r18, 0x21	; 33
     798:	31 05       	cpc	r19, r1
     79a:	39 f1       	breq	.+78     	; 0x7ea <CALLBACK_USB_GetDescriptor+0x72>
     79c:	22 32       	cpi	r18, 0x22	; 34
     79e:	31 05       	cpc	r19, r1
     7a0:	49 f1       	breq	.+82     	; 0x7f4 <CALLBACK_USB_GetDescriptor+0x7c>
     7a2:	32 c0       	rjmp	.+100    	; 0x808 <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7a4:	ef e5       	ldi	r30, 0x5F	; 95
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7a8:	8e eb       	ldi	r24, 0xBE	; 190
     7aa:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7ac:	31 c0       	rjmp	.+98     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7ae:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	91 05       	cpc	r25, r1
     7b4:	61 f0       	breq	.+24     	; 0x7ce <CALLBACK_USB_GetDescriptor+0x56>
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	91 05       	cpc	r25, r1
     7ba:	81 f0       	breq	.+32     	; 0x7dc <CALLBACK_USB_GetDescriptor+0x64>
     7bc:	89 2b       	or	r24, r25
     7be:	21 f5       	brne	.+72     	; 0x808 <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7c0:	ea eb       	ldi	r30, 0xBA	; 186
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	e4 91       	lpm	r30, Z+
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     7c8:	8a eb       	ldi	r24, 0xBA	; 186
     7ca:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     7cc:	21 c0       	rjmp	.+66     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     7ce:	e6 ea       	ldi	r30, 0xA6	; 166
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e4 91       	lpm	r30, Z+
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     7d6:	86 ea       	ldi	r24, 0xA6	; 166
     7d8:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     7da:	1a c0       	rjmp	.+52     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     7dc:	e4 e7       	ldi	r30, 0x74	; 116
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	e4 91       	lpm	r30, Z+
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     7e4:	84 e7       	ldi	r24, 0x74	; 116
     7e6:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     7e8:	13 c0       	rjmp	.+38     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     7ee:	8d e0       	ldi	r24, 0x0D	; 13
     7f0:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     7f2:	0e c0       	rjmp	.+28     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     7f4:	ef e9       	ldi	r30, 0x9F	; 159
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     7f8:	8f e2       	ldi	r24, 0x2F	; 47
     7fa:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     7fc:	09 c0       	rjmp	.+18     	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     7fe:	e2 e1       	ldi	r30, 0x12	; 18
     800:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     802:	8d e1       	ldi	r24, 0x1D	; 29
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	04 c0       	rjmp	.+8      	; 0x810 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     808:	e0 e0       	ldi	r30, 0x00	; 0
     80a:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     810:	da 01       	movw	r26, r20
     812:	8d 93       	st	X+, r24
     814:	9c 93       	st	X, r25
	return Size;
}
     816:	cf 01       	movw	r24, r30
     818:	08 95       	ret

0000081a <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     82a:	64 0f       	add	r22, r20
     82c:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     82e:	c6 e3       	ldi	r28, 0x36	; 54
     830:	d1 e0       	ldi	r29, 0x01	; 1
     832:	2c c0       	rjmp	.+88     	; 0x88c <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     834:	fb 01       	movw	r30, r22
     836:	e2 1b       	sub	r30, r18
     838:	f3 0b       	sbc	r31, r19
     83a:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     83c:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     83e:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     840:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     842:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     844:	a0 81       	ld	r26, Z
     846:	b1 81       	ldd	r27, Z+1	; 0x01
     848:	10 97       	sbiw	r26, 0x00	; 0
     84a:	09 f4       	brne	.+2      	; 0x84e <LRingBuffer_Append_Buffer.constprop.0+0x34>
     84c:	1c c0       	rjmp	.+56     	; 0x886 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	f4 80       	ldd	r15, Z+4	; 0x04
     854:	8f 19       	sub	r24, r15
     856:	91 09       	sbc	r25, r1
     858:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     85a:	97 ff       	sbrs	r25, 7
     85c:	03 c0       	rjmp	.+6      	; 0x864 <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     85e:	f3 80       	ldd	r15, Z+3	; 0x03
     860:	8f 0d       	add	r24, r15
     862:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     864:	a8 0f       	add	r26, r24
     866:	b9 1f       	adc	r27, r25
     868:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     86a:	84 81       	ldd	r24, Z+4	; 0x04
     86c:	93 81       	ldd	r25, Z+3	; 0x03
     86e:	89 13       	cpse	r24, r25
     870:	08 c0       	rjmp	.+16     	; 0x882 <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     872:	92 81       	ldd	r25, Z+2	; 0x02
     874:	91 11       	cpse	r25, r1
     876:	01 c0       	rjmp	.+2      	; 0x87a <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     878:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	81 50       	subi	r24, 0x01	; 1
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	02 c0       	rjmp	.+4      	; 0x886 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     886:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	24 17       	cp	r18, r20
     88e:	35 07       	cpc	r19, r21
     890:	8c f2       	brlt	.-94     	; 0x834 <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	08 95       	ret

0000089e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	7b 01       	movw	r14, r22
     8ac:	c9 01       	movw	r24, r18
     8ae:	e8 01       	movw	r28, r16
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     8b0:	e0 91 aa 01 	lds	r30, 0x01AA
     8b4:	e3 30       	cpi	r30, 0x03	; 3
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <CALLBACK_HID_Device_CreateHIDReport+0x26>
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
     8b8:	10 92 ec 01 	sts	0x01EC, r1
		ram.HID.isEmpty[ram.HID.ID] = false;
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e4 51       	subi	r30, 0x14	; 20
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	10 82       	st	Z, r1
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     8c4:	40 91 ab 01 	lds	r20, 0x01AB
     8c8:	ed ea       	ldi	r30, 0xAD	; 173
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	bf 01       	movw	r22, r30
     8d0:	0e 94 a7 13 	call	0x274e	; 0x274e <memcpy>
	*ReportID = ram.HID.ID;
     8d4:	80 91 aa 01 	lds	r24, 0x01AA
     8d8:	f7 01       	movw	r30, r14
     8da:	80 83       	st	Z, r24
	*ReportSize = ram.HID.length;
     8dc:	80 91 ab 01 	lds	r24, 0x01AB
     8e0:	88 83       	st	Y, r24
     8e2:	19 82       	std	Y+1, r1	; 0x01

	// reset ID
	ram.HID.ID = 0;
     8e4:	10 92 aa 01 	sts	0x01AA, r1
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     8e8:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     8ec:	10 92 ab 01 	sts	0x01AB, r1
	// this will forcewrite the report every time
	return true;

	//}
	//else return false;
}
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	08 95       	ret

00000900 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     906:	63 30       	cpi	r22, 0x03	; 3
     908:	51 f4       	brne	.+20     	; 0x91e <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     90a:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     90c:	20 91 45 01 	lds	r18, 0x0145
     910:	2c 60       	ori	r18, 0x0C	; 12
     912:	20 93 45 01 	sts	0x0145, r18

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     916:	b8 01       	movw	r22, r16
	}
}
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     91c:	d7 c6       	rjmp	.+3502   	; 0x16cc <Serial_SendData>
     91e:	1f 91       	pop	r17
	}
}
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <flushHID>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

void flushHID(void){
     924:	04 c0       	rjmp	.+8      	; 0x92e <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 b5 12 	call	0x256a	; 0x256a <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     92e:	80 91 aa 01 	lds	r24, 0x01AA
     932:	88 23       	and	r24, r24
     934:	31 f0       	breq	.+12     	; 0x942 <flushHID+0x1e>
     936:	90 91 ab 01 	lds	r25, 0x01AB
     93a:	80 91 ac 01 	lds	r24, 0x01AC
     93e:	98 17       	cp	r25, r24
     940:	91 f3       	breq	.-28     	; 0x926 <flushHID+0x2>
     942:	08 95       	ret

00000944 <getHIDReportLength>:
		HID_Device_USBTask(&Device_HID_Interface);
}


uint8_t getHIDReportLength(uint8_t ID){
     944:	81 50       	subi	r24, 0x01	; 1
     946:	89 30       	cpi	r24, 0x09	; 9
     948:	30 f4       	brcc	.+12     	; 0x956 <getHIDReportLength+0x12>
     94a:	e8 2f       	mov	r30, r24
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e5 5d       	subi	r30, 0xD5	; 213
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	80 81       	ld	r24, Z
     954:	08 95       	ret
     956:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     958:	08 95       	ret

0000095a <clearHIDReport>:
	
	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	18 2f       	mov	r17, r24
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
     962:	c8 2f       	mov	r28, r24
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	c4 51       	subi	r28, 0x14	; 20
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	88 81       	ld	r24, Y
     96c:	81 11       	cpse	r24, r1
     96e:	18 c0       	rjmp	.+48     	; 0x9a0 <clearHIDReport+0x46>
     970:	13 30       	cpi	r17, 0x03	; 3
     972:	b1 f0       	breq	.+44     	; 0x9a0 <clearHIDReport+0x46>

	// get length of the report if its a valid report
	uint8_t length = getHIDReportLength(ID);
     974:	81 2f       	mov	r24, r17
     976:	e6 df       	rcall	.-52     	; 0x944 <getHIDReportLength>
     978:	88 23       	and	r24, r24
	if (!length) return;
     97a:	91 f0       	breq	.+36     	; 0x9a0 <clearHIDReport+0x46>
     97c:	80 93 ac 01 	sts	0x01AC, r24

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
     980:	80 93 ab 01 	sts	0x01AB, r24
     984:	10 93 aa 01 	sts	0x01AA, r17
	ram.HID.ID = ID;
     988:	2d ea       	ldi	r18, 0xAD	; 173
	memset(&ram.HID.buffer, 0x00, length);
     98a:	31 e0       	ldi	r19, 0x01	; 1
     98c:	48 2f       	mov	r20, r24
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	c9 01       	movw	r24, r18
     996:	0e 94 b0 13 	call	0x2760	; 0x2760 <memset>
     99a:	c4 df       	rcall	.-120    	; 0x924 <flushHID>

	// flush HID
	flushHID();
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	88 83       	st	Y, r24

	// save new empty state
	ram.HID.isEmpty[ID] = true;
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
}
     9a4:	1f 91       	pop	r17
     9a6:	08 95       	ret

000009a8 <clearHIDReports>:
		Serial_SendData(ReportData, ReportSize);
	}
}


void clearHIDReports(void){
     9a8:	cf 93       	push	r28
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;
     9aa:	80 91 ec 01 	lds	r24, 0x01EC
     9ae:	81 11       	cpse	r24, r1
     9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <clearHIDReports+0x1c>
     9b2:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
			clearHIDReport(i);
     9b4:	8c 2f       	mov	r24, r28
     9b6:	d1 df       	rcall	.-94     	; 0x95a <clearHIDReport>
     9b8:	cf 5f       	subi	r28, 0xFF	; 255
     9ba:	ca 30       	cpi	r28, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     9bc:	d9 f7       	brne	.-10     	; 0x9b4 <clearHIDReports+0xc>
     9be:	81 e0       	ldi	r24, 0x01	; 1
			clearHIDReport(i);
	
	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     9c0:	80 93 ec 01 	sts	0x01EC, r24
     9c4:	cf 91       	pop	r28
}
     9c6:	08 95       	ret

000009c8 <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <checkNHPControlAddressError+0x8>
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <checkNHPControlAddressError+0xa>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <checkNHPControlAddressError+0xc>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     9d8:	60 91 aa 01 	lds	r22, 0x01AA
     9dc:	66 23       	and	r22, r22
     9de:	c1 f0       	breq	.+48     	; 0xa10 <checkNHPControlAddressError+0x48>
     9e0:	80 91 ac 01 	lds	r24, 0x01AC
     9e4:	81 11       	cpse	r24, r1
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <checkNHPControlAddressError+0x48>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	71 60       	ori	r23, 0x01	; 1
     9ec:	ae 01       	movw	r20, r28
     9ee:	4f 5f       	subi	r20, 0xFF	; 255
     9f0:	5f 4f       	sbci	r21, 0xFF	; 255
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	84 d5       	rcall	.+2824   	; 0x14fe <NHPwriteChecksum>
     9f6:	18 2f       	mov	r17, r24
     9f8:	48 2f       	mov	r20, r24

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	86 e3       	ldi	r24, 0x36	; 54
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0a df       	rcall	.-492    	; 0x81a <LRingBuffer_Append_Buffer.constprop.0>
     a06:	90 91 3b 01 	lds	r25, 0x013B
		ram.skipNHP += length;
     a0a:	91 0f       	add	r25, r17
     a0c:	90 93 3b 01 	sts	0x013B, r25
     a10:	10 92 aa 01 	sts	0x01AA, r1
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     a14:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.recvlength = 0; // just to be sure
     a18:	10 92 ab 01 	sts	0x01AB, r1
	ram.HID.length = 0; // just to be sure
     a1c:	26 96       	adiw	r28, 0x06	; 6
     a1e:	0f b6       	in	r0, 0x3f	; 63
}
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <checkNHPProtocol>:
	} //end switch
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     a30:	90 91 45 01 	lds	r25, 0x0145
     a34:	90 63       	ori	r25, 0x30	; 48
     a36:	90 93 45 01 	sts	0x0145, r25
	// set new timeout mark
	ram.PulseMSRemaining.NHPTimeout = NHP_TIMEOUT_MS;

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     a3a:	66 ef       	ldi	r22, 0xF6	; 246
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	3c d5       	rcall	.+2680   	; 0x14b8 <NHPreadChecksum>
     a40:	88 23       	and	r24, r24

	if (address == 0)
     a42:	09 f4       	brne	.+2      	; 0xa46 <checkNHPProtocol+0x16>
     a44:	75 c0       	rjmp	.+234    	; 0xb30 <checkNHPProtocol+0x100>
     a46:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     a48:	18 c0       	rjmp	.+48     	; 0xa7a <checkNHPProtocol+0x4a>
     a4a:	be df       	rcall	.-132    	; 0x9c8 <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     a4c:	40 91 f6 01 	lds	r20, 0x01F6

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
     a50:	46 95       	lsr	r20
     a52:	46 95       	lsr	r20
     a54:	46 95       	lsr	r20
     a56:	47 70       	andi	r20, 0x07	; 7
     a58:	6b ef       	ldi	r22, 0xFB	; 251
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	86 e3       	ldi	r24, 0x36	; 54
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	dc de       	rcall	.-584    	; 0x81a <LRingBuffer_Append_Buffer.constprop.0>
     a62:	80 91 f6 01 	lds	r24, 0x01F6
     a66:	86 95       	lsr	r24
		ram.skipNHP += ram.NHP.readlength;
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	87 70       	andi	r24, 0x07	; 7
     a6e:	90 91 3b 01 	lds	r25, 0x013B
     a72:	89 0f       	add	r24, r25
     a74:	80 93 3b 01 	sts	0x013B, r24
     a78:	08 95       	ret
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	89 f4       	brne	.+34     	; 0xaa0 <checkNHPProtocol+0x70>
		return;
     a7e:	90 91 f8 01 	lds	r25, 0x01F8
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     a82:	91 30       	cpi	r25, 0x01	; 1
     a84:	69 f4       	brne	.+26     	; 0xaa0 <checkNHPProtocol+0x70>
     a86:	a0 df       	rcall	.-192    	; 0x9c8 <checkNHPControlAddressError>
     a88:	80 91 f7 01 	lds	r24, 0x01F7
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     a8c:	80 93 aa 01 	sts	0x01AA, r24

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     a90:	10 92 ac 01 	sts	0x01AC, r1
     a94:	57 df       	rcall	.-338    	; 0x944 <getHIDReportLength>
     a96:	80 93 ab 01 	sts	0x01AB, r24
		ram.HID.recvlength = 0;
     a9a:	81 11       	cpse	r24, r1

		// TODO remove this cleaning
		//memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     a9c:	49 c0       	rjmp	.+146    	; 0xb30 <checkNHPProtocol+0x100>
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <checkNHPProtocol+0xfe>
     aa0:	90 91 aa 01 	lds	r25, 0x01AA

		// error, write down this wrong ID report
		if (!ram.HID.length)
     aa4:	99 23       	and	r25, r25
     aa6:	69 f1       	breq	.+90     	; 0xb02 <checkNHPProtocol+0xd2>
     aa8:	60 91 ac 01 	lds	r22, 0x01AC
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     aac:	46 2f       	mov	r20, r22
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	99 27       	eor	r25, r25
     ab2:	87 fd       	sbrc	r24, 7
     ab4:	90 95       	com	r25
     ab6:	9a 01       	movw	r18, r20
     ab8:	2e 5f       	subi	r18, 0xFE	; 254
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	35 95       	asr	r19
     abe:	27 95       	ror	r18
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	e1 f4       	brne	.+56     	; 0xb02 <checkNHPProtocol+0xd2>
     aca:	fa 01       	movw	r30, r20
     acc:	e3 55       	subi	r30, 0x53	; 83
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 91 f7 01 	lds	r24, 0x01F7
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     ad4:	80 83       	st	Z, r24
     ad6:	e6 2f       	mov	r30, r22
     ad8:	ef 5f       	subi	r30, 0xFF	; 255
     ada:	e0 93 ac 01 	sts	0x01AC, r30
     ade:	80 91 ab 01 	lds	r24, 0x01AB
     ae2:	8e 17       	cp	r24, r30
     ae4:	49 f0       	breq	.+18     	; 0xaf8 <checkNHPProtocol+0xc8>
     ae6:	f0 e0       	ldi	r31, 0x00	; 0

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     ae8:	e3 55       	subi	r30, 0x53	; 83
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	90 91 f8 01 	lds	r25, 0x01F8
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     af0:	90 83       	st	Z, r25
     af2:	6e 5f       	subi	r22, 0xFE	; 254
     af4:	60 93 ac 01 	sts	0x01AC, r22
     af8:	90 91 ac 01 	lds	r25, 0x01AC
     afc:	89 13       	cpse	r24, r25
     afe:	18 c0       	rjmp	.+48     	; 0xb30 <checkNHPProtocol+0x100>
     b00:	11 cf       	rjmp	.-478    	; 0x924 <flushHID>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     b02:	40 91 f6 01 	lds	r20, 0x01F6
     b06:	46 95       	lsr	r20
     b08:	46 95       	lsr	r20
			flushHID();
     b0a:	46 95       	lsr	r20
     b0c:	47 70       	andi	r20, 0x07	; 7
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
     b0e:	6b ef       	ldi	r22, 0xFB	; 251
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	86 e3       	ldi	r24, 0x36	; 54
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	81 de       	rcall	.-766    	; 0x81a <LRingBuffer_Append_Buffer.constprop.0>
     b18:	80 91 f6 01 	lds	r24, 0x01F6
     b1c:	86 95       	lsr	r24
     b1e:	86 95       	lsr	r24
     b20:	86 95       	lsr	r24
     b22:	87 70       	andi	r24, 0x07	; 7
     b24:	90 91 3b 01 	lds	r25, 0x013B
		ram.skipNHP += ram.NHP.readlength;
     b28:	89 0f       	add	r24, r25
     b2a:	80 93 3b 01 	sts	0x013B, r24
     b2e:	4c cf       	rjmp	.-360    	; 0x9c8 <checkNHPControlAddressError>
     b30:	08 95       	ret

00000b32 <HIDreset>:
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
}

void HIDreset(void){
     b32:	10 92 aa 01 	sts	0x01AA, r1
	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
     b36:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.length = 0; // just to be sure
     b3a:	10 92 ab 01 	sts	0x01AB, r1

	// all reports are empty by default
	memset(&ram.HID.isEmpty, true, sizeof(ram.HID.isEmpty));
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	8c ee       	ldi	r24, 0xEC	; 236
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <memset>

00000b4e <LEDs_TurnOnLEDs>:
     b4e:	9b b1       	in	r25, 0x0b	; 11
     b50:	80 95       	com	r24
     b52:	89 23       	and	r24, r25
     b54:	8b b9       	out	0x0b, r24	; 11
     b56:	08 95       	ret

00000b58 <avrispReset>:
//================================================================================
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
     b58:	10 92 3d 01 	sts	0x013D, r1
     b5c:	10 92 3c 01 	sts	0x013C, r1
	ram.isp.pmode = false;
     b60:	10 92 3e 01 	sts	0x013E, r1
	ram.isp._addr = 0; // just to be sure
     b64:	10 92 40 01 	sts	0x0140, r1
     b68:	10 92 3f 01 	sts	0x013F, r1
     b6c:	08 95       	ret

00000b6e <sendCDCbyte>:
}

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     b6e:	68 2f       	mov	r22, r24
     b70:	80 e1       	ldi	r24, 0x10	; 16
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 22 10 	call	0x2044	; 0x2044 <CDC_Device_SendByte>
     b78:	88 23       	and	r24, r24
     b7a:	e9 f0       	breq	.+58     	; 0xbb6 <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     b7c:	80 e1       	ldi	r24, 0x10	; 16
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 74 10 	call	0x20e8	; 0x20e8 <CDC_Device_USBTask>
		USB_USBTask();
     b84:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     b88:	80 e1       	ldi	r24, 0x10	; 16
     b8a:	e1 df       	rcall	.-62     	; 0xb4e <LEDs_TurnOnLEDs>
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	81 ee       	ldi	r24, 0xE1	; 225
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	90 40       	sbci	r25, 0x00	; 0
     b98:	e1 f7       	brne	.-8      	; 0xb92 <sendCDCbyte+0x24>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <sendCDCbyte+0x2e>
     b9c:	00 00       	nop
     b9e:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     ba0:	d6 df       	rcall	.-84     	; 0xb4e <LEDs_TurnOnLEDs>
     ba2:	2f ef       	ldi	r18, 0xFF	; 255
     ba4:	81 ee       	ldi	r24, 0xE1	; 225
     ba6:	94 e0       	ldi	r25, 0x04	; 4
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	90 40       	sbci	r25, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <sendCDCbyte+0x3a>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <sendCDCbyte+0x44>
     bb2:	00 00       	nop
     bb4:	e9 cf       	rjmp	.-46     	; 0xb88 <sendCDCbyte+0x1a>
     bb6:	08 95       	ret

00000bb8 <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     bb8:	80 e1       	ldi	r24, 0x10	; 16
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 8a 10 	call	0x2114	; 0x2114 <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     bc0:	97 fd       	sbrc	r25, 7
     bc2:	fa cf       	rjmp	.-12     	; 0xbb8 <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     bc4:	08 95       	ret

00000bc6 <fill>:

void fill(int n) {
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	7c 01       	movw	r14, r24
     bd4:	06 e4       	ldi	r16, 0x46	; 70
     bd6:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     bd8:	c0 e0       	ldi	r28, 0x00	; 0
     bda:	d0 e0       	ldi	r29, 0x00	; 0
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <fill+0x22>
		ram.ispBuffer[x] = getch();
     bde:	ec df       	rcall	.-40     	; 0xbb8 <getch>
     be0:	f8 01       	movw	r30, r16
     be2:	81 93       	st	Z+, r24
     be4:	8f 01       	movw	r16, r30
     be6:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     be8:	ce 15       	cp	r28, r14
     bea:	df 05       	cpc	r29, r15
     bec:	c4 f3       	brlt	.-16     	; 0xbde <fill+0x18>
     bee:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	08 95       	ret

00000bfc <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     bfc:	90 91 52 01 	lds	r25, 0x0152
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	20 91 53 01 	lds	r18, 0x0153
     c06:	82 0f       	add	r24, r18
     c08:	91 1d       	adc	r25, r1
     c0a:	90 93 42 01 	sts	0x0142, r25
     c0e:	80 93 41 01 	sts	0x0141, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     c12:	90 91 54 01 	lds	r25, 0x0154
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	20 91 55 01 	lds	r18, 0x0155
     c1c:	82 0f       	add	r24, r18
     c1e:	91 1d       	adc	r25, r1
     c20:	90 93 44 01 	sts	0x0144, r25
     c24:	80 93 43 01 	sts	0x0143, r24
     c28:	08 95       	ret

00000c2a <breply>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void breply(uint8_t b) {
     c2a:	cf 93       	push	r28
     c2c:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     c2e:	c4 df       	rcall	.-120    	; 0xbb8 <getch>
     c30:	80 32       	cpi	r24, 0x20	; 32
     c32:	39 f4       	brne	.+14     	; 0xc42 <breply+0x18>
     c34:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     c36:	9b df       	rcall	.-202    	; 0xb6e <sendCDCbyte>
     c38:	8c 2f       	mov	r24, r28
     c3a:	99 df       	rcall	.-206    	; 0xb6e <sendCDCbyte>
		sendCDCbyte(b);
     c3c:	80 e1       	ldi	r24, 0x10	; 16
     c3e:	cf 91       	pop	r28
     c40:	96 cf       	rjmp	.-212    	; 0xb6e <sendCDCbyte>
		sendCDCbyte(STK_OK);
     c42:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c44:	94 df       	rcall	.-216    	; 0xb6e <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     c46:	80 91 3c 01 	lds	r24, 0x013C
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     c4a:	90 91 3d 01 	lds	r25, 0x013D
     c4e:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     c50:	90 93 3d 01 	sts	0x013D, r25
     c54:	80 93 3c 01 	sts	0x013C, r24
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <get_parameters>:
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}

void get_parameters(uint8_t c) {
     c5c:	81 38       	cpi	r24, 0x81	; 129
     c5e:	59 f0       	breq	.+22     	; 0xc76 <get_parameters+0x1a>
     c60:	18 f4       	brcc	.+6      	; 0xc68 <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c62:	80 38       	cpi	r24, 0x80	; 128
     c64:	71 f4       	brne	.+28     	; 0xc82 <get_parameters+0x26>
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <get_parameters+0x16>
     c68:	82 38       	cpi	r24, 0x82	; 130
     c6a:	39 f0       	breq	.+14     	; 0xc7a <get_parameters+0x1e>
     c6c:	83 39       	cpi	r24, 0x93	; 147
     c6e:	49 f4       	brne	.+18     	; 0xc82 <get_parameters+0x26>
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <get_parameters+0x22>
}

void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     c7a:	82 e1       	ldi	r24, 0x12	; 18
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     c7e:	83 e5       	ldi	r24, 0x53	; 83
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <get_parameters+0x28>
		break;
	default:
		breply(0);
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	d2 cf       	rjmp	.-92     	; 0xc2a <breply>

00000c86 <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     c86:	98 df       	rcall	.-208    	; 0xbb8 <getch>
     c88:	80 32       	cpi	r24, 0x20	; 32
     c8a:	21 f4       	brne	.+8      	; 0xc94 <replyOK+0xe>
     c8c:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     c8e:	6f df       	rcall	.-290    	; 0xb6e <sendCDCbyte>
     c90:	80 e1       	ldi	r24, 0x10	; 16
     c92:	6d cf       	rjmp	.-294    	; 0xb6e <sendCDCbyte>
		sendCDCbyte(STK_OK);
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	5b df       	rcall	.-330    	; 0xb4e <LEDs_TurnOnLEDs>
     c98:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     c9a:	80 e7       	ldi	r24, 0x70	; 112
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	21 50       	subi	r18, 0x01	; 1
     ca0:	80 40       	sbci	r24, 0x00	; 0
     ca2:	90 40       	sbci	r25, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <replyOK+0x18>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <replyOK+0x22>
     ca8:	00 00       	nop
     caa:	5d 9a       	sbi	0x0b, 5	; 11
     cac:	2f ef       	ldi	r18, 0xFF	; 255
     cae:	80 e7       	ldi	r24, 0x70	; 112
     cb0:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	80 40       	sbci	r24, 0x00	; 0
     cb6:	90 40       	sbci	r25, 0x00	; 0
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <replyOK+0x2c>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <replyOK+0x36>
     cbc:	00 00       	nop
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	46 df       	rcall	.-372    	; 0xb4e <LEDs_TurnOnLEDs>
     cc2:	2f ef       	ldi	r18, 0xFF	; 255
     cc4:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	80 40       	sbci	r24, 0x00	; 0
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <replyOK+0x42>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <replyOK+0x4c>
     cd2:	00 00       	nop
     cd4:	5d 9a       	sbi	0x0b, 5	; 11
     cd6:	85 e1       	ldi	r24, 0x15	; 21
     cd8:	4a df       	rcall	.-364    	; 0xb6e <sendCDCbyte>
     cda:	80 91 3c 01 	lds	r24, 0x013C
     cde:	90 91 3d 01 	lds	r25, 0x013D
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	90 93 3d 01 	sts	0x013D, r25
		ram.isp.error++;
     ce8:	80 93 3c 01 	sts	0x013C, r24
     cec:	08 95       	ret

00000cee <end_pmode>:
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = true;
	return;
}

void end_pmode(void) {
     cee:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     cf0:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     cf2:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     cf4:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     cf6:	20 98       	cbi	0x04, 0	; 4

	ram.isp.pmode = false;
     cf8:	10 92 3e 01 	sts	0x013E, r1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cfc:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cfe:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if Base points to a buffer
		if (Buffer->Base == NULL)
     d00:	80 91 36 01 	lds	r24, 0x0136
     d04:	90 91 37 01 	lds	r25, 0x0137
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d08:	2f bf       	out	0x3f, r18	; 63

	// enable Serial buffer again
	if (!LRingBuffer_IsEnabled(&ram.USARTtoUSB_Buffer))
     d0a:	89 2b       	or	r24, r25
     d0c:	69 f4       	brne	.+26     	; 0xd28 <end_pmode+0x3a>
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     d0e:	e6 e3       	ldi	r30, 0x36	; 54
     d10:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d12:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d14:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = DataPtr;
     d16:	86 e4       	ldi	r24, 0x46	; 70
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
		Buffer->Index = 0;
     d1e:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = Size;
     d20:	84 e6       	ldi	r24, 0x64	; 100
     d22:	83 83       	std	Z+3, r24	; 0x03
		Buffer->Count = 0;
     d24:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d26:	2f bf       	out	0x3f, r18	; 63
		LRingBuffer_InitBuffer(&ram.USARTtoUSB_Buffer, ram.USARTtoUSB_Buffer_Data, sizeof(ram.USARTtoUSB_Buffer_Data));

	// HID Setup
	HIDreset();
     d28:	04 df       	rcall	.-504    	; 0xb32 <HIDreset>
     d2a:	10 92 3b 01 	sts	0x013B, r1

	ram.skipNHP = 0;
     d2e:	86 ef       	ldi	r24, 0xF6	; 246
	NHPreset(&ram.NHP);
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0f c3       	rjmp	.+1566   	; 0x1352 <NHPreset>

00000d34 <spi_init>:
}

void spi_init(void) {
     d34:	83 e5       	ldi	r24, 0x53	; 83
     d36:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     d38:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     d3a:	8e b5       	in	r24, 0x2e	; 46
     d3c:	08 95       	ret

00000d3e <spi_wait>:
	return reply;
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     d3e:	0d b4       	in	r0, 0x2d	; 45
     d40:	07 fe       	sbrs	r0, 7
     d42:	fd cf       	rjmp	.-6      	; 0xd3e <spi_wait>
}
     d44:	08 95       	ret

00000d46 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     d46:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     d48:	fa df       	rcall	.-12     	; 0xd3e <spi_wait>
     d4a:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     d4c:	08 95       	ret

00000d4e <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <spi_transaction+0x6>
     d54:	1f 92       	push	r1
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     d5a:	2b 83       	std	Y+3, r18	; 0x03
     d5c:	4a 83       	std	Y+2, r20	; 0x02
     d5e:	69 83       	std	Y+1, r22	; 0x01
     d60:	f2 df       	rcall	.-28     	; 0xd46 <spi_send>
     d62:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     d64:	86 2f       	mov	r24, r22
     d66:	ef df       	rcall	.-34     	; 0xd46 <spi_send>
     d68:	4a 81       	ldd	r20, Y+2	; 0x02
     d6a:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     d6c:	ec df       	rcall	.-40     	; 0xd46 <spi_send>
     d6e:	2b 81       	ldd	r18, Y+3	; 0x03
     d70:	82 2f       	mov	r24, r18
     d72:	0f 90       	pop	r0
	return spi_send(d);
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	e4 cf       	rjmp	.-56     	; 0xd46 <spi_send>

00000d7e <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     d7e:	e6 e3       	ldi	r30, 0x36	; 54
     d80:	f1 e0       	ldi	r31, 0x01	; 1
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     d82:	8f b7       	in	r24, 0x3f	; 63
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
     d84:	f8 94       	cli
		GCC_FORCE_POINTER_ACCESS(Buffer);

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
     d86:	11 82       	std	Z+1, r1	; 0x01
     d88:	10 82       	st	Z, r1
		Buffer->Index = 0;
     d8a:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = 0;
     d8c:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Count = 0;
     d8e:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d90:	8f bf       	out	0x3f, r24	; 63

	// do not write into Serial buffer, we need this ram now
	LRingBuffer_DisableBuffer(&ram.USARTtoUSB_Buffer);

	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
     d92:	20 9a       	sbi	0x04, 0	; 4
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);
     d94:	28 9a       	sbi	0x05, 0	; 5

	spi_init();
     d96:	ce df       	rcall	.-100    	; 0xd34 <spi_init>
     d98:	24 9a       	sbi	0x04, 4	; 4

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     d9a:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     d9c:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     d9e:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     da0:	2f ef       	ldi	r18, 0xFF	; 255
     da2:	80 e7       	ldi	r24, 0x70	; 112
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	21 50       	subi	r18, 0x01	; 1
     da8:	80 40       	sbci	r24, 0x00	; 0
     daa:	90 40       	sbci	r25, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <start_pmode+0x28>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <start_pmode+0x32>
     db0:	00 00       	nop
     db2:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	80 e7       	ldi	r24, 0x70	; 112
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	80 40       	sbci	r24, 0x00	; 0
     dbe:	90 40       	sbci	r25, 0x00	; 0
     dc0:	e1 f7       	brne	.-8      	; 0xdba <start_pmode+0x3c>
     dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <start_pmode+0x46>
     dc4:	00 00       	nop
     dc6:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     dc8:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     dca:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	63 e5       	ldi	r22, 0x53	; 83
     dd0:	8c ea       	ldi	r24, 0xAC	; 172
     dd2:	bd df       	rcall	.-134    	; 0xd4e <spi_transaction>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 3e 01 	sts	0x013E, r24
	ram.isp.pmode = true;
     dda:	08 95       	ret

00000ddc <flash_read>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t flash_read(uint8_t hilo, int addr) {
     ddc:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     dde:	88 0f       	add	r24, r24
     de0:	88 0f       	add	r24, r24
     de2:	88 0f       	add	r24, r24
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	67 2f       	mov	r22, r23
     de8:	80 5e       	subi	r24, 0xE0	; 224
     dea:	b1 cf       	rjmp	.-158    	; 0xd4e <spi_transaction>

00000dec <flash_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     df6:	c0 e0       	ldi	r28, 0x00	; 0
     df8:	d0 e0       	ldi	r29, 0x00	; 0
     dfa:	19 c0       	rjmp	.+50     	; 0xe2e <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     dfc:	60 91 3f 01 	lds	r22, 0x013F
     e00:	70 91 40 01 	lds	r23, 0x0140
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	ea df       	rcall	.-44     	; 0xddc <flash_read>
     e08:	b2 de       	rcall	.-668    	; 0xb6e <sendCDCbyte>
		sendCDCbyte(low);
     e0a:	60 91 3f 01 	lds	r22, 0x013F
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     e0e:	70 91 40 01 	lds	r23, 0x0140
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	e3 df       	rcall	.-58     	; 0xddc <flash_read>
     e16:	ab de       	rcall	.-682    	; 0xb6e <sendCDCbyte>
     e18:	20 91 3f 01 	lds	r18, 0x013F
		sendCDCbyte(high);
     e1c:	30 91 40 01 	lds	r19, 0x0140
		ram.isp._addr++;
     e20:	2f 5f       	subi	r18, 0xFF	; 255
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	30 93 40 01 	sts	0x0140, r19
     e28:	20 93 3f 01 	sts	0x013F, r18
     e2c:	22 96       	adiw	r28, 0x02	; 2
     e2e:	c0 17       	cp	r28, r16
     e30:	d1 07       	cpc	r29, r17
     e32:	24 f3       	brlt	.-56     	; 0xdfc <flash_read_page+0x10>
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <universal>:

void universal(void) {
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	c0 de       	rcall	.-640    	; 0xbc6 <fill>
     e46:	20 91 49 01 	lds	r18, 0x0149
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
     e4a:	40 91 48 01 	lds	r20, 0x0148
     e4e:	60 91 47 01 	lds	r22, 0x0147
     e52:	80 91 46 01 	lds	r24, 0x0146
     e56:	7b df       	rcall	.-266    	; 0xd4e <spi_transaction>
     e58:	e8 ce       	rjmp	.-560    	; 0xc2a <breply>

00000e5a <read_signature>:
	breply(ch);
}

void read_signature(void) {
     e5a:	ae de       	rcall	.-676    	; 0xbb8 <getch>
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     e5c:	80 32       	cpi	r24, 0x20	; 32
     e5e:	59 f0       	breq	.+22     	; 0xe76 <read_signature+0x1c>
     e60:	80 91 3c 01 	lds	r24, 0x013C
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     e64:	90 91 3d 01 	lds	r25, 0x013D
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	90 93 3d 01 	sts	0x013D, r25
     e6e:	80 93 3c 01 	sts	0x013C, r24
     e72:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <read_signature+0x46>
     e76:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e78:	7a de       	rcall	.-780    	; 0xb6e <sendCDCbyte>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	80 e3       	ldi	r24, 0x30	; 48
     e82:	65 df       	rcall	.-310    	; 0xd4e <spi_transaction>
     e84:	74 de       	rcall	.-792    	; 0xb6e <sendCDCbyte>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     e8e:	5f df       	rcall	.-322    	; 0xd4e <spi_transaction>
     e90:	6e de       	rcall	.-804    	; 0xb6e <sendCDCbyte>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	42 e0       	ldi	r20, 0x02	; 2
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     e9a:	59 df       	rcall	.-334    	; 0xd4e <spi_transaction>
     e9c:	68 de       	rcall	.-816    	; 0xb6e <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     e9e:	80 e1       	ldi	r24, 0x10	; 16
     ea0:	66 ce       	rjmp	.-820    	; 0xb6e <sendCDCbyte>

00000ea2 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
	sendCDCbyte(STK_OK);
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	d8 2f       	mov	r29, r24
     eb4:	c9 2f       	mov	r28, r25
     eb6:	7b 01       	movw	r14, r22
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     eb8:	cb 01       	movw	r24, r22
     eba:	85 de       	rcall	.-758    	; 0xbc6 <fill>
     ebc:	5d 9a       	sbi	0x0b, 5	; 11
     ebe:	86 e4       	ldi	r24, 0x46	; 70
     ec0:	c8 2e       	mov	r12, r24
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	d8 2e       	mov	r13, r24
     ec6:	0d 2f       	mov	r16, r29
     ec8:	1c 2f       	mov	r17, r28
     eca:	e8 01       	movw	r28, r16
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <write_eeprom_chunk+0x4e>
     ece:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
     ed0:	21 91       	ld	r18, Z+
     ed2:	6f 01       	movw	r12, r30
     ed4:	4c 2f       	mov	r20, r28
     ed6:	6d 2f       	mov	r22, r29
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	39 df       	rcall	.-398    	; 0xd4e <spi_transaction>
     edc:	ff e7       	ldi	r31, 0x7F	; 127
     ede:	22 e3       	ldi	r18, 0x32	; 50
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	f1 50       	subi	r31, 0x01	; 1
     ee4:	20 40       	sbci	r18, 0x00	; 0
     ee6:	80 40       	sbci	r24, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <write_eeprom_chunk+0x40>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <write_eeprom_chunk+0x4a>
     eec:	00 00       	nop
     eee:	21 96       	adiw	r28, 0x01	; 1
     ef0:	ce 01       	movw	r24, r28
     ef2:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     ef4:	91 0b       	sbc	r25, r17
     ef6:	8e 15       	cp	r24, r14
     ef8:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
     efa:	4c f3       	brlt	.-46     	; 0xece <write_eeprom_chunk+0x2c>
     efc:	80 e2       	ldi	r24, 0x20	; 32
     efe:	27 de       	rcall	.-946    	; 0xb4e <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
     f00:	80 e1       	ldi	r24, 0x10	; 16
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
	return STK_OK;
}
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <write_eeprom>:
	}
}


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     f1c:	c0 91 3f 01 	lds	r28, 0x013F
     f20:	d0 91 40 01 	lds	r29, 0x0140
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
     f24:	20 91 43 01 	lds	r18, 0x0143
     f28:	30 91 44 01 	lds	r19, 0x0144
     f2c:	28 17       	cp	r18, r24
     f2e:	39 07       	cpc	r19, r25
     f30:	24 f0       	brlt	.+8      	; 0xf3a <write_eeprom+0x26>


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     f32:	cc 0f       	add	r28, r28
     f34:	dd 1f       	adc	r29, r29
     f36:	8c 01       	movw	r16, r24
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
     f3a:	80 91 3c 01 	lds	r24, 0x013C
     f3e:	90 91 3d 01 	lds	r25, 0x013D
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	90 93 3d 01 	sts	0x013D, r25
     f48:	80 93 3c 01 	sts	0x013C, r24
		return STK_FAILED;
     f4c:	81 e1       	ldi	r24, 0x11	; 17
     f4e:	0e c0       	rjmp	.+28     	; 0xf6c <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
     f50:	60 e2       	ldi	r22, 0x20	; 32
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	ce 01       	movw	r24, r28
     f56:	a5 df       	rcall	.-182    	; 0xea2 <write_eeprom_chunk>
     f58:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
     f5a:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
     f5c:	11 09       	sbc	r17, r1
     f5e:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
     f60:	11 05       	cpc	r17, r1
     f62:	b4 f7       	brge	.-20     	; 0xf50 <write_eeprom+0x3c>
     f64:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
     f66:	ce 01       	movw	r24, r28
     f68:	9c df       	rcall	.-200    	; 0xea2 <write_eeprom_chunk>
     f6a:	80 e1       	ldi	r24, 0x10	; 16
     f6c:	df 91       	pop	r29
	return STK_OK;
     f6e:	cf 91       	pop	r28
}
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <eeprom_read_page>:
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     f84:	00 91 3f 01 	lds	r16, 0x013F
     f88:	10 91 40 01 	lds	r17, 0x0140
     f8c:	00 0f       	add	r16, r16
     f8e:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     f90:	e8 01       	movw	r28, r16
     f92:	07 c0       	rjmp	.+14     	; 0xfa2 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	4c 2f       	mov	r20, r28
     f98:	6d 2f       	mov	r22, r29
     f9a:	80 ea       	ldi	r24, 0xA0	; 160
     f9c:	d8 de       	rcall	.-592    	; 0xd4e <spi_transaction>
     f9e:	e7 dd       	rcall	.-1074   	; 0xb6e <sendCDCbyte>
		sendCDCbyte(ee);
     fa0:	21 96       	adiw	r28, 0x01	; 1
     fa2:	ce 01       	movw	r24, r28
     fa4:	80 1b       	sub	r24, r16
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     fa6:	91 0b       	sbc	r25, r17
     fa8:	8e 15       	cp	r24, r14
     faa:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     fac:	9c f3       	brlt	.-26     	; 0xf94 <eeprom_read_page+0x1e>
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret

00000fbe <read_page>:
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void read_page(void) {
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     fc4:	f9 dd       	rcall	.-1038   	; 0xbb8 <getch>
     fc6:	d8 2f       	mov	r29, r24
     fc8:	f7 dd       	rcall	.-1042   	; 0xbb8 <getch>
	length += getch();
     fca:	c8 2f       	mov	r28, r24
     fcc:	f5 dd       	rcall	.-1046   	; 0xbb8 <getch>
     fce:	18 2f       	mov	r17, r24
	char memtype = getch();
     fd0:	f3 dd       	rcall	.-1050   	; 0xbb8 <getch>
     fd2:	80 32       	cpi	r24, 0x20	; 32
     fd4:	59 f0       	breq	.+22     	; 0xfec <read_page+0x2e>
	if (CRC_EOP != getch()) {
     fd6:	80 91 3c 01 	lds	r24, 0x013C
     fda:	90 91 3d 01 	lds	r25, 0x013D
		ram.isp.error++;
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	90 93 3d 01 	sts	0x013D, r25
     fe4:	80 93 3c 01 	sts	0x013C, r24
     fe8:	85 e1       	ldi	r24, 0x15	; 21
     fea:	13 c0       	rjmp	.+38     	; 0x1012 <read_page+0x54>
     fec:	3d 2f       	mov	r19, r29
     fee:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     ff0:	c9 01       	movw	r24, r18
     ff2:	8c 0f       	add	r24, r28
	sendCDCbyte(STK_OK);
}

void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     ff4:	91 1d       	adc	r25, r1
     ff6:	ec 01       	movw	r28, r24
	length += getch();
     ff8:	84 e1       	ldi	r24, 0x14	; 20
     ffa:	b9 dd       	rcall	.-1166   	; 0xb6e <sendCDCbyte>
     ffc:	16 34       	cpi	r17, 0x46	; 70
     ffe:	19 f4       	brne	.+6      	; 0x1006 <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
    1000:	ce 01       	movw	r24, r28
    1002:	f4 de       	rcall	.-536    	; 0xdec <flash_read_page>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
    1006:	15 34       	cpi	r17, 0x45	; 69
    1008:	19 f4       	brne	.+6      	; 0x1010 <read_page+0x52>
    100a:	ce 01       	movw	r24, r28
    100c:	b4 df       	rcall	.-152    	; 0xf76 <eeprom_read_page>
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <read_page+0x54>
    1010:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	aa cd       	rjmp	.-1196   	; 0xb6e <sendCDCbyte>

0000101a <commit>:
	}
	commit(page);
	return STK_OK;
}

void commit(int addr) {
    101a:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
    101c:	20 e0       	ldi	r18, 0x00	; 0
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void read_page(void) {
	char result = (char)STK_FAILED;
    101e:	48 2f       	mov	r20, r24
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
    1020:	69 2f       	mov	r22, r25
    1022:	8c e4       	ldi	r24, 0x4C	; 76
    1024:	94 de       	rcall	.-728    	; 0xd4e <spi_transaction>
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	86 e7       	ldi	r24, 0x76	; 118
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	80 40       	sbci	r24, 0x00	; 0
    1030:	90 40       	sbci	r25, 0x00	; 0
    1032:	e1 f7       	brne	.-8      	; 0x102c <commit+0x12>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <commit+0x1c>
    1036:	00 00       	nop
    1038:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
    103a:	89 cd       	rjmp	.-1262   	; 0xb4e <LEDs_TurnOnLEDs>

0000103c <current_page>:
}

int current_page(void) {
    103c:	80 91 41 01 	lds	r24, 0x0141
    1040:	90 91 42 01 	lds	r25, 0x0142
    1044:	20 91 3f 01 	lds	r18, 0x013F
    1048:	30 91 40 01 	lds	r19, 0x0140
    104c:	80 32       	cpi	r24, 0x20	; 32
    104e:	91 05       	cpc	r25, r1
    1050:	11 f4       	brne	.+4      	; 0x1056 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
    1052:	20 7f       	andi	r18, 0xF0	; 240
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
    1056:	80 34       	cpi	r24, 0x40	; 64
    1058:	91 05       	cpc	r25, r1
    105a:	11 f4       	brne	.+4      	; 0x1060 <current_page+0x24>
    105c:	20 7e       	andi	r18, 0xE0	; 224
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
    1060:	80 38       	cpi	r24, 0x80	; 128
    1062:	91 05       	cpc	r25, r1
    1064:	11 f4       	brne	.+4      	; 0x106a <current_page+0x2e>
    1066:	20 7c       	andi	r18, 0xC0	; 192
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
    106a:	81 15       	cp	r24, r1
    106c:	91 40       	sbci	r25, 0x01	; 1
    106e:	09 f4       	brne	.+2      	; 0x1072 <current_page+0x36>
    1070:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
    1072:	c9 01       	movw	r24, r18
    1074:	08 95       	ret

00001076 <flash>:

void flash(uint8_t hilo, int addr, uint8_t data) {
    1076:	96 2f       	mov	r25, r22
    1078:	67 2f       	mov	r22, r23
    107a:	24 2f       	mov	r18, r20
	spi_transaction(0x40 + 8 * hilo,
    107c:	88 0f       	add	r24, r24
    107e:	88 0f       	add	r24, r24
    1080:	88 0f       	add	r24, r24
    1082:	49 2f       	mov	r20, r25
    1084:	80 5c       	subi	r24, 0xC0	; 192
    1086:	63 ce       	rjmp	.-826    	; 0xd4e <spi_transaction>

00001088 <write_flash_pages>:
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	6c 01       	movw	r12, r24
	int x = 0;
	int page = current_page();
    109a:	d0 df       	rcall	.-96     	; 0x103c <current_page>
    109c:	8c 01       	movw	r16, r24
    109e:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
	int x = 0;
    10a0:	d0 e0       	ldi	r29, 0x00	; 0
    10a2:	29 c0       	rjmp	.+82     	; 0x10f6 <write_flash_pages+0x6e>
	int page = current_page();
	while (x < length) {
    10a4:	cb df       	rcall	.-106    	; 0x103c <current_page>
		if (page != current_page()) {
    10a6:	08 17       	cp	r16, r24
    10a8:	19 07       	cpc	r17, r25
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <write_flash_pages+0x2c>
    10ac:	c8 01       	movw	r24, r16
    10ae:	b5 df       	rcall	.-150    	; 0x101a <commit>
			commit(page);
    10b0:	c5 df       	rcall	.-118    	; 0x103c <current_page>
    10b2:	8c 01       	movw	r16, r24
    10b4:	46 e3       	ldi	r20, 0x36	; 54
			page = current_page();
    10b6:	e4 2e       	mov	r14, r20
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	f4 2e       	mov	r15, r20
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
    10bc:	ec 0e       	add	r14, r28
    10be:	fd 1e       	adc	r15, r29
    10c0:	60 91 3f 01 	lds	r22, 0x013F
    10c4:	70 91 40 01 	lds	r23, 0x0140
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
    10c8:	f7 01       	movw	r30, r14
    10ca:	40 89       	ldd	r20, Z+16	; 0x10
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	d3 df       	rcall	.-90     	; 0x1076 <flash>
    10d0:	22 96       	adiw	r28, 0x02	; 2
    10d2:	60 91 3f 01 	lds	r22, 0x013F
    10d6:	70 91 40 01 	lds	r23, 0x0140
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
    10da:	f7 01       	movw	r30, r14
    10dc:	41 89       	ldd	r20, Z+17	; 0x11
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	ca df       	rcall	.-108    	; 0x1076 <flash>
    10e2:	20 91 3f 01 	lds	r18, 0x013F
    10e6:	30 91 40 01 	lds	r19, 0x0140
    10ea:	2f 5f       	subi	r18, 0xFF	; 255
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
		ram.isp._addr++;
    10ee:	30 93 40 01 	sts	0x0140, r19
    10f2:	20 93 3f 01 	sts	0x013F, r18
    10f6:	cc 15       	cp	r28, r12
    10f8:	dd 05       	cpc	r29, r13
    10fa:	a4 f2       	brlt	.-88     	; 0x10a4 <write_flash_pages+0x1c>
    10fc:	c8 01       	movw	r24, r16
    10fe:	8d df       	rcall	.-230    	; 0x101a <commit>
    1100:	80 e1       	ldi	r24, 0x10	; 16
}

uint8_t write_flash_pages(int length) {
	int x = 0;
	int page = current_page();
	while (x < length) {
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
	return STK_OK;
}
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret

00001114 <write_flash>:
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}

void write_flash(int length) {
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	ec 01       	movw	r28, r24
	// TODO compare with ada <--
	fill(length);
    111a:	55 dd       	rcall	.-1366   	; 0xbc6 <fill>
    111c:	4d dd       	rcall	.-1382   	; 0xbb8 <getch>
	if (CRC_EOP == getch()) {
    111e:	80 32       	cpi	r24, 0x20	; 32
    1120:	29 f4       	brne	.+10     	; 0x112c <write_flash+0x18>
    1122:	84 e1       	ldi	r24, 0x14	; 20
    1124:	24 dd       	rcall	.-1464   	; 0xb6e <sendCDCbyte>
		sendCDCbyte(STK_INSYNC);
    1126:	ce 01       	movw	r24, r28
    1128:	af df       	rcall	.-162    	; 0x1088 <write_flash_pages>
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <write_flash+0x2c>
		sendCDCbyte(write_flash_pages(length));
    112c:	80 91 3c 01 	lds	r24, 0x013C
    1130:	90 91 3d 01 	lds	r25, 0x013D
	}
	else {
		ram.isp.error++;
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	90 93 3d 01 	sts	0x013D, r25
    113a:	80 93 3c 01 	sts	0x013C, r24
    113e:	85 e1       	ldi	r24, 0x15	; 21
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	14 cd       	rjmp	.-1496   	; 0xb6e <sendCDCbyte>

00001146 <program_page>:
		sendCDCbyte(STK_NOSYNC);
    1146:	cf 93       	push	r28
	}
}
    1148:	df 93       	push	r29
	} while (!(SPSR & (1 << SPIF)));
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    114a:	36 dd       	rcall	.-1428   	; 0xbb8 <getch>
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(write_flash_pages(length));
	}
	else {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
    114c:	d8 2f       	mov	r29, r24
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	c8 2f       	mov	r28, r24
    1152:	32 dd       	rcall	.-1436   	; 0xbb8 <getch>
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
	length += getch();
    1154:	c8 0f       	add	r28, r24
    1156:	d1 1d       	adc	r29, r1
    1158:	c1 30       	cpi	r28, 0x01	; 1
    115a:	81 e0       	ldi	r24, 0x01	; 1

	// added from ada <--
	if (length > 256) {
    115c:	d8 07       	cpc	r29, r24
    115e:	64 f0       	brlt	.+24     	; 0x1178 <program_page+0x32>
    1160:	81 e1       	ldi	r24, 0x11	; 17
    1162:	05 dd       	rcall	.-1526   	; 0xb6e <sendCDCbyte>
		sendCDCbyte(STK_FAILED);
    1164:	80 91 3c 01 	lds	r24, 0x013C
    1168:	90 91 3d 01 	lds	r25, 0x013D
		ram.isp.error++;
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	90 93 3d 01 	sts	0x013D, r25
    1172:	80 93 3c 01 	sts	0x013C, r24
    1176:	22 c0       	rjmp	.+68     	; 0x11bc <program_page+0x76>
    1178:	1f dd       	rcall	.-1474   	; 0xbb8 <getch>
    117a:	86 34       	cpi	r24, 0x46	; 70
		return;
    117c:	21 f4       	brne	.+8      	; 0x1186 <program_page+0x40>
	}

	// todo compare with ada <--

	char memtype = getch();
    117e:	ce 01       	movw	r24, r28
    1180:	df 91       	pop	r29
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    1182:	cf 91       	pop	r28
    1184:	c7 cf       	rjmp	.-114    	; 0x1114 <write_flash>
		write_flash(length);
    1186:	85 34       	cpi	r24, 0x45	; 69
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
    1188:	a9 f4       	brne	.+42     	; 0x11b4 <program_page+0x6e>
    118a:	ce 01       	movw	r24, r28
	// todo compare with ada <--

	char memtype = getch();
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
		write_flash(length);
    118c:	c3 de       	rcall	.-634    	; 0xf14 <write_eeprom>
    118e:	c8 2f       	mov	r28, r24
		return;
	}
	if (memtype == 'E') {
    1190:	13 dd       	rcall	.-1498   	; 0xbb8 <getch>
    1192:	80 32       	cpi	r24, 0x20	; 32
		result = (char)write_eeprom(length);
    1194:	21 f4       	brne	.+8      	; 0x119e <program_page+0x58>
    1196:	84 e1       	ldi	r24, 0x14	; 20
    1198:	ea dc       	rcall	.-1580   	; 0xb6e <sendCDCbyte>
    119a:	8c 2f       	mov	r24, r28
		if (CRC_EOP == getch()) {
    119c:	0c c0       	rjmp	.+24     	; 0x11b6 <program_page+0x70>
    119e:	80 91 3c 01 	lds	r24, 0x013C
    11a2:	90 91 3d 01 	lds	r25, 0x013D
			sendCDCbyte(STK_INSYNC);
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	90 93 3d 01 	sts	0x013D, r25
			sendCDCbyte(result);
    11ac:	80 93 3c 01 	sts	0x013C, r24
		}
		else {
			ram.isp.error++;
    11b0:	85 e1       	ldi	r24, 0x15	; 21
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <program_page+0x70>
    11b4:	81 e1       	ldi	r24, 0x11	; 17
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	d9 cc       	rjmp	.-1614   	; 0xb6e <sendCDCbyte>
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
			sendCDCbyte(STK_NOSYNC);
    11c0:	08 95       	ret

000011c2 <avrisp>:
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}


void avrisp(int ReceivedByte){
    11c2:	cf 93       	push	r28
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11c4:	df 93       	push	r29
	return;
}
    11c6:	ec 01       	movw	r28, r24
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11c8:	80 91 3e 01 	lds	r24, 0x013E
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11cc:	88 23       	and	r24, r24
	return;
}
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <avrisp+0x14>
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	bd dc       	rcall	.-1670   	; 0xb4e <LEDs_TurnOnLEDs>
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <avrisp+0x16>
    11d6:	5d 9a       	sbi	0x0b, 5	; 11
    11d8:	80 91 3c 01 	lds	r24, 0x013C
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    11dc:	90 91 3d 01 	lds	r25, 0x013D
    11e0:	89 2b       	or	r24, r25
    11e2:	19 f0       	breq	.+6      	; 0x11ea <avrisp+0x28>
    11e4:	80 e1       	ldi	r24, 0x10	; 16
    11e6:	b3 dc       	rcall	.-1690   	; 0xb4e <LEDs_TurnOnLEDs>
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <avrisp+0x2a>
    11ea:	5c 9a       	sbi	0x0b, 4	; 11
    11ec:	d7 fd       	sbrc	r29, 7
    11ee:	ae c0       	rjmp	.+348    	; 0x134c <avrisp+0x18a>
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    11f0:	c1 35       	cpi	r28, 0x51	; 81
    11f2:	d1 05       	cpc	r29, r1
		switch (ReceivedByte) {
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <avrisp+0x36>
    11f6:	85 c0       	rjmp	.+266    	; 0x1302 <avrisp+0x140>
    11f8:	e4 f4       	brge	.+56     	; 0x1232 <avrisp+0x70>
    11fa:	c1 34       	cpi	r28, 0x41	; 65
    11fc:	d1 05       	cpc	r29, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <avrisp+0x40>
    1200:	52 c0       	rjmp	.+164    	; 0x12a6 <avrisp+0xe4>
    1202:	54 f4       	brge	.+20     	; 0x1218 <avrisp+0x56>
    1204:	c0 33       	cpi	r28, 0x30	; 48
    1206:	d1 05       	cpc	r29, r1
    1208:	99 f1       	breq	.+102    	; 0x1270 <avrisp+0xae>
    120a:	c1 33       	cpi	r28, 0x31	; 49
    120c:	d1 05       	cpc	r29, r1
    120e:	a9 f1       	breq	.+106    	; 0x127a <avrisp+0xb8>
    1210:	a0 97       	sbiw	r28, 0x20	; 32
    1212:	09 f0       	breq	.+2      	; 0x1216 <avrisp+0x54>
    1214:	89 c0       	rjmp	.+274    	; 0x1328 <avrisp+0x166>
    1216:	7e c0       	rjmp	.+252    	; 0x1314 <avrisp+0x152>
    1218:	c5 34       	cpi	r28, 0x45	; 69
    121a:	d1 05       	cpc	r29, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <avrisp+0x5e>
    121e:	4e c0       	rjmp	.+156    	; 0x12bc <avrisp+0xfa>
    1220:	c0 35       	cpi	r28, 0x50	; 80
    1222:	d1 05       	cpc	r29, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <avrisp+0x66>
    1226:	4e c0       	rjmp	.+156    	; 0x12c4 <avrisp+0x102>
    1228:	c2 34       	cpi	r28, 0x42	; 66
    122a:	d1 05       	cpc	r29, r1
    122c:	09 f0       	breq	.+2      	; 0x1230 <avrisp+0x6e>
    122e:	7c c0       	rjmp	.+248    	; 0x1328 <avrisp+0x166>
    1230:	3e c0       	rjmp	.+124    	; 0x12ae <avrisp+0xec>
    1232:	c1 36       	cpi	r28, 0x61	; 97
    1234:	d1 05       	cpc	r29, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <avrisp+0x78>
    1238:	59 c0       	rjmp	.+178    	; 0x12ec <avrisp+0x12a>
    123a:	6c f4       	brge	.+26     	; 0x1256 <avrisp+0x94>
    123c:	c6 35       	cpi	r28, 0x56	; 86
    123e:	d1 05       	cpc	r29, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <avrisp+0x82>
    1242:	5c c0       	rjmp	.+184    	; 0x12fc <avrisp+0x13a>
    1244:	c0 36       	cpi	r28, 0x60	; 96
    1246:	d1 05       	cpc	r29, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <avrisp+0x8a>
    124a:	4f c0       	rjmp	.+158    	; 0x12ea <avrisp+0x128>
    124c:	c5 35       	cpi	r28, 0x55	; 85
    124e:	d1 05       	cpc	r29, r1
    1250:	09 f0       	breq	.+2      	; 0x1254 <avrisp+0x92>
    1252:	6a c0       	rjmp	.+212    	; 0x1328 <avrisp+0x166>
    1254:	39 c0       	rjmp	.+114    	; 0x12c8 <avrisp+0x106>
    1256:	c4 37       	cpi	r28, 0x74	; 116
    1258:	d1 05       	cpc	r29, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <avrisp+0x9c>
    125c:	4c c0       	rjmp	.+152    	; 0x12f6 <avrisp+0x134>
    125e:	c5 37       	cpi	r28, 0x75	; 117
    1260:	d1 05       	cpc	r29, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <avrisp+0xa4>
    1264:	54 c0       	rjmp	.+168    	; 0x130e <avrisp+0x14c>
    1266:	c4 36       	cpi	r28, 0x64	; 100
    1268:	d1 05       	cpc	r29, r1
    126a:	09 f0       	breq	.+2      	; 0x126e <avrisp+0xac>
    126c:	5d c0       	rjmp	.+186    	; 0x1328 <avrisp+0x166>
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <avrisp+0x12e>
    1270:	10 92 3d 01 	sts	0x013D, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    1274:	10 92 3c 01 	sts	0x013C, r1
    1278:	1e c0       	rjmp	.+60     	; 0x12b6 <avrisp+0xf4>
    127a:	9e dc       	rcall	.-1732   	; 0xbb8 <getch>
    127c:	80 32       	cpi	r24, 0x20	; 32
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    127e:	09 f0       	breq	.+2      	; 0x1282 <avrisp+0xc0>
    1280:	65 c0       	rjmp	.+202    	; 0x134c <avrisp+0x18a>
    1282:	84 e1       	ldi	r24, 0x14	; 20
    1284:	74 dc       	rcall	.-1816   	; 0xb6e <sendCDCbyte>
    1286:	81 e4       	ldi	r24, 0x41	; 65
				sendCDCbyte(STK_INSYNC);
    1288:	72 dc       	rcall	.-1820   	; 0xb6e <sendCDCbyte>
    128a:	86 e5       	ldi	r24, 0x56	; 86
    128c:	70 dc       	rcall	.-1824   	; 0xb6e <sendCDCbyte>
				sendCDCbyte('A');
    128e:	82 e5       	ldi	r24, 0x52	; 82
    1290:	6e dc       	rcall	.-1828   	; 0xb6e <sendCDCbyte>
    1292:	80 e2       	ldi	r24, 0x20	; 32
				sendCDCbyte('V');
    1294:	6c dc       	rcall	.-1832   	; 0xb6e <sendCDCbyte>
    1296:	89 e4       	ldi	r24, 0x49	; 73
    1298:	6a dc       	rcall	.-1836   	; 0xb6e <sendCDCbyte>
				sendCDCbyte('R');
    129a:	83 e5       	ldi	r24, 0x53	; 83
    129c:	68 dc       	rcall	.-1840   	; 0xb6e <sendCDCbyte>
    129e:	80 e5       	ldi	r24, 0x50	; 80
				sendCDCbyte(' ');
    12a0:	66 dc       	rcall	.-1844   	; 0xb6e <sendCDCbyte>
    12a2:	80 e1       	ldi	r24, 0x10	; 16
    12a4:	50 c0       	rjmp	.+160    	; 0x1346 <avrisp+0x184>
				sendCDCbyte('I');
    12a6:	88 dc       	rcall	.-1776   	; 0xbb8 <getch>
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
				sendCDCbyte('S');
    12ac:	d7 cc       	rjmp	.-1618   	; 0xc5c <get_parameters>
    12ae:	84 e1       	ldi	r24, 0x14	; 20
    12b0:	90 e0       	ldi	r25, 0x00	; 0
				sendCDCbyte('P');
    12b2:	89 dc       	rcall	.-1774   	; 0xbc6 <fill>
    12b4:	a3 dc       	rcall	.-1722   	; 0xbfc <set_parameters>
    12b6:	df 91       	pop	r29
				sendCDCbyte(STK_OK);
    12b8:	cf 91       	pop	r28
    12ba:	e5 cc       	rjmp	.-1590   	; 0xc86 <replyOK>
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	90 e0       	ldi	r25, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12c0:	82 dc       	rcall	.-1788   	; 0xbc6 <fill>
    12c2:	f9 cf       	rjmp	.-14     	; 0x12b6 <avrisp+0xf4>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12c4:	5c dd       	rcall	.-1352   	; 0xd7e <start_pmode>
    12c6:	f7 cf       	rjmp	.-18     	; 0x12b6 <avrisp+0xf4>
			break;
		case STK_SET_PARM:
			fill(20);
    12c8:	77 dc       	rcall	.-1810   	; 0xbb8 <getch>
    12ca:	c8 2f       	mov	r28, r24
    12cc:	d0 e0       	ldi	r29, 0x00	; 0
    12ce:	d0 93 40 01 	sts	0x0140, r29
			set_parameters();
    12d2:	c0 93 3f 01 	sts	0x013F, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12d6:	70 dc       	rcall	.-1824   	; 0xbb8 <getch>
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    12d8:	38 2f       	mov	r19, r24
    12da:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    12dc:	2c 0f       	add	r18, r28
    12de:	3d 1f       	adc	r19, r29
    12e0:	30 93 40 01 	sts	0x0140, r19
    12e4:	20 93 3f 01 	sts	0x013F, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    12e8:	e6 cf       	rjmp	.-52     	; 0x12b6 <avrisp+0xf4>
    12ea:	66 dc       	rcall	.-1844   	; 0xbb8 <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    12ec:	65 dc       	rcall	.-1846   	; 0xbb8 <getch>
    12ee:	e3 cf       	rjmp	.-58     	; 0x12b6 <avrisp+0xf4>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	28 cf       	rjmp	.-432    	; 0x1146 <program_page>
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	61 ce       	rjmp	.-830    	; 0xfbe <read_page>
			ram.isp._addr += 256 * getch();
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	9f cd       	rjmp	.-1218   	; 0xe40 <universal>
    1302:	10 92 3d 01 	sts	0x013D, r1
    1306:	10 92 3c 01 	sts	0x013C, r1
    130a:	f1 dc       	rcall	.-1566   	; 0xcee <end_pmode>
    130c:	d4 cf       	rjmp	.-88     	; 0x12b6 <avrisp+0xf4>
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    1312:	a3 cd       	rjmp	.-1210   	; 0xe5a <read_signature>
    1314:	80 91 3c 01 	lds	r24, 0x013C
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1318:	90 91 3d 01 	lds	r25, 0x013D
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	90 93 3d 01 	sts	0x013D, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    1322:	80 93 3c 01 	sts	0x013C, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <avrisp+0x182>
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1328:	80 91 3c 01 	lds	r24, 0x013C
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    132c:	90 91 3d 01 	lds	r25, 0x013D
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	90 93 3d 01 	sts	0x013D, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    1336:	80 93 3c 01 	sts	0x013C, r24
    133a:	3e dc       	rcall	.-1924   	; 0xbb8 <getch>
			end_pmode();
    133c:	80 32       	cpi	r24, 0x20	; 32
    133e:	11 f4       	brne	.+4      	; 0x1344 <avrisp+0x182>
    1340:	82 e1       	ldi	r24, 0x12	; 18
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <avrisp+0x184>
    1344:	85 e1       	ldi	r24, 0x15	; 21
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    134a:	11 cc       	rjmp	.-2014   	; 0xb6e <sendCDCbyte>
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    1352:	fc 01       	movw	r30, r24
    1354:	20 81       	ld	r18, Z
	protocol->leadError = false;
    1356:	20 68       	ori	r18, 0x80	; 128
    1358:	2f 7b       	andi	r18, 0xBF	; 191
    135a:	20 83       	st	Z, r18
    135c:	08 95       	ret

0000135e <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    1364:	90 81       	ld	r25, Z
    1366:	96 ff       	sbrs	r25, 6
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    136a:	29 2f       	mov	r18, r25
    136c:	26 95       	lsr	r18
    136e:	26 95       	lsr	r18
    1370:	26 95       	lsr	r18
    1372:	27 70       	andi	r18, 0x07	; 7
    1374:	db 01       	movw	r26, r22
    1376:	a2 0f       	add	r26, r18
    1378:	b1 1d       	adc	r27, r1
    137a:	15 96       	adiw	r26, 0x05	; 5
    137c:	2c 91       	ld	r18, X
    137e:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    1380:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    1382:	98 60       	ori	r25, 0x08	; 8
    1384:	9f 7b       	andi	r25, 0xBF	; 191
    1386:	03 c0       	rjmp	.+6      	; 0x138e <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    1388:	97 ff       	sbrs	r25, 7
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    138c:	90 7c       	andi	r25, 0xC0	; 192
    138e:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    1390:	90 81       	ld	r25, Z
    1392:	96 95       	lsr	r25
    1394:	96 95       	lsr	r25
    1396:	96 95       	lsr	r25
    1398:	97 70       	andi	r25, 0x07	; 7
    139a:	df 01       	movw	r26, r30
    139c:	a9 0f       	add	r26, r25
    139e:	b1 1d       	adc	r27, r1
    13a0:	15 96       	adiw	r26, 0x05	; 5
    13a2:	8c 93       	st	X, r24
    13a4:	29 2f       	mov	r18, r25
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	27 70       	andi	r18, 0x07	; 7
    13aa:	22 0f       	add	r18, r18
    13ac:	22 0f       	add	r18, r18
    13ae:	22 0f       	add	r18, r18
    13b0:	40 81       	ld	r20, Z
    13b2:	47 7c       	andi	r20, 0xC7	; 199
    13b4:	42 2b       	or	r20, r18
    13b6:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    13b8:	28 2f       	mov	r18, r24
    13ba:	20 7c       	andi	r18, 0xC0	; 192
    13bc:	34 2f       	mov	r19, r20
    13be:	37 70       	andi	r19, 0x07	; 7
    13c0:	20 38       	cpi	r18, 0x80	; 128
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <NHPread+0x68>
    13c4:	63 c0       	rjmp	.+198    	; 0x148c <NHPread+0x12e>
    13c6:	20 3c       	cpi	r18, 0xC0	; 192
    13c8:	09 f0       	breq	.+2      	; 0x13cc <NHPread+0x6e>
    13ca:	45 c0       	rjmp	.+138    	; 0x1456 <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    13cc:	28 2f       	mov	r18, r24
    13ce:	28 73       	andi	r18, 0x38	; 56
    13d0:	26 95       	lsr	r18
    13d2:	26 95       	lsr	r18
    13d4:	26 95       	lsr	r18

		if (protocol->mBlocks){
    13d6:	33 23       	and	r19, r19
    13d8:	49 f0       	breq	.+18     	; 0x13ec <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    13da:	99 0f       	add	r25, r25
    13dc:	99 0f       	add	r25, r25
    13de:	99 0f       	add	r25, r25
    13e0:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    13e2:	49 2b       	or	r20, r25
    13e4:	40 64       	ori	r20, 0x40	; 64
    13e6:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    13e8:	9e ef       	ldi	r25, 0xFE	; 254
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    13ec:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	98 f4       	brcc	.+38     	; 0x1418 <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    13f2:	90 81       	ld	r25, Z
    13f4:	96 fb       	bst	r25, 6
    13f6:	22 27       	eor	r18, r18
    13f8:	20 f9       	bld	r18, 0
    13fa:	89 2f       	mov	r24, r25
    13fc:	86 95       	lsr	r24
    13fe:	86 95       	lsr	r24
    1400:	86 95       	lsr	r24
    1402:	82 0f       	add	r24, r18
    1404:	87 70       	andi	r24, 0x07	; 7
    1406:	88 0f       	add	r24, r24
    1408:	88 0f       	add	r24, r24
    140a:	88 0f       	add	r24, r24
    140c:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    140e:	98 2b       	or	r25, r24
    1410:	9f 7b       	andi	r25, 0xBF	; 191
    1412:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    1414:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <NHPread+0x138>
		}

		else if (blocks == 7){
    1418:	27 30       	cpi	r18, 0x07	; 7
    141a:	59 f4       	brne	.+22     	; 0x1432 <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    141c:	08 2f       	mov	r16, r24
    141e:	0f 70       	andi	r16, 0x0F	; 15
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	01 83       	std	Z+1, r16	; 0x01
    1428:	12 83       	std	Z+2, r17	; 0x02
    142a:	23 83       	std	Z+3, r18	; 0x03
    142c:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    142e:	25 e0       	ldi	r18, 0x05	; 5
    1430:	0a c0       	rjmp	.+20     	; 0x1446 <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    1432:	48 2f       	mov	r20, r24
    1434:	47 70       	andi	r20, 0x07	; 7
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	41 83       	std	Z+1, r20	; 0x01
    143e:	52 83       	std	Z+2, r21	; 0x02
    1440:	63 83       	std	Z+3, r22	; 0x03
    1442:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    1444:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1446:	27 70       	andi	r18, 0x07	; 7
    1448:	80 81       	ld	r24, Z
    144a:	88 7f       	andi	r24, 0xF8	; 248
    144c:	82 2b       	or	r24, r18
    144e:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    1450:	99 23       	and	r25, r25
    1452:	29 f1       	breq	.+74     	; 0x149e <NHPread+0x140>
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1456:	03 2f       	mov	r16, r19
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	02 30       	cpi	r16, 0x02	; 2
    145c:	11 05       	cpc	r17, r1
    145e:	24 f1       	brlt	.+72     	; 0x14a8 <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    1460:	39 5f       	subi	r19, 0xF9	; 249
    1462:	37 70       	andi	r19, 0x07	; 7
    1464:	48 7f       	andi	r20, 0xF8	; 248
    1466:	43 2b       	or	r20, r19
    1468:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    146a:	41 81       	ldd	r20, Z+1	; 0x01
    146c:	52 81       	ldd	r21, Z+2	; 0x02
    146e:	63 81       	ldd	r22, Z+3	; 0x03
    1470:	74 81       	ldd	r23, Z+4	; 0x04
    1472:	97 e0       	ldi	r25, 0x07	; 7
    1474:	44 0f       	add	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	66 1f       	adc	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	9a 95       	dec	r25
    147e:	d1 f7       	brne	.-12     	; 0x1474 <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    1480:	48 2b       	or	r20, r24
    1482:	41 83       	std	Z+1, r20	; 0x01
    1484:	52 83       	std	Z+2, r21	; 0x02
    1486:	63 83       	std	Z+3, r22	; 0x03
    1488:	74 83       	std	Z+4, r23	; 0x04
    148a:	09 c0       	rjmp	.+18     	; 0x149e <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    148c:	31 30       	cpi	r19, 0x01	; 1
    148e:	71 f4       	brne	.+28     	; 0x14ac <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    1490:	98 2f       	mov	r25, r24
    1492:	9f 73       	andi	r25, 0x3F	; 63
    1494:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    1496:	80 81       	ld	r24, Z
    1498:	80 68       	ori	r24, 0x80	; 128
    149a:	80 83       	st	Z, r24
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    149e:	80 81       	ld	r24, Z
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	80 83       	st	Z, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    14a8:	9d ef       	ldi	r25, 0xFD	; 253
    14aa:	f5 cf       	rjmp	.-22     	; 0x1496 <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    14ac:	9c ef       	ldi	r25, 0xFC	; 252
    14ae:	f3 cf       	rjmp	.-26     	; 0x1496 <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    14b0:	89 2f       	mov	r24, r25
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    14c2:	4d df       	rcall	.-358    	; 0x135e <NHPread>
    14c4:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    14c6:	b4 f4       	brge	.+44     	; 0x14f4 <NHPreadChecksum+0x3c>
    14c8:	09 81       	ldd	r16, Y+1	; 0x01
    14ca:	1a 81       	ldd	r17, Y+2	; 0x02
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	a9 01       	movw	r20, r18
    14d2:	66 27       	eor	r22, r22
    14d4:	77 27       	eor	r23, r23
    14d6:	22 27       	eor	r18, r18
    14d8:	33 27       	eor	r19, r19
    14da:	40 27       	eor	r20, r16
    14dc:	51 27       	eor	r21, r17
    14de:	62 27       	eor	r22, r18
    14e0:	73 27       	eor	r23, r19
    14e2:	4f 3f       	cpi	r20, 0xFF	; 255
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	61 05       	cpc	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <NHPreadChecksum+0x3c>
    14ec:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	88 83       	st	Y, r24
    14f2:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    14f4:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    14fe:	fa 01       	movw	r30, r20
    1500:	2c e1       	ldi	r18, 0x1C	; 28
    1502:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    1504:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1506:	ab 01       	movw	r20, r22
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <NHPwriteChecksum+0x12>
    150c:	56 95       	lsr	r21
    150e:	47 95       	ror	r20
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    1514:	48 30       	cpi	r20, 0x08	; 8
    1516:	28 f0       	brcs	.+10     	; 0x1522 <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    1518:	97 30       	cpi	r25, 0x07	; 7
    151a:	59 f4       	brne	.+22     	; 0x1532 <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    151c:	40 83       	st	Z, r20
				blocks--;
    151e:	96 e0       	ldi	r25, 0x06	; 6
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    1522:	40 83       	st	Z, r20
			blocks--;
    1524:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1526:	41 11       	cpse	r20, r1
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <NHPwriteChecksum+0x34>
    152a:	27 50       	subi	r18, 0x07	; 7
    152c:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    152e:	92 30       	cpi	r25, 0x02	; 2
    1530:	51 f7       	brne	.-44     	; 0x1506 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    1532:	49 2f       	mov	r20, r25
    1534:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1538:	df 01       	movw	r26, r30
    153a:	a4 0f       	add	r26, r20
    153c:	b1 1d       	adc	r27, r1
    153e:	9b 01       	movw	r18, r22
    1540:	2f 77       	andi	r18, 0x7F	; 127
    1542:	33 27       	eor	r19, r19
    1544:	2c 93       	st	X, r18
		data >>= 7;
    1546:	66 0f       	add	r22, r22
    1548:	67 2f       	mov	r22, r23
    154a:	66 1f       	adc	r22, r22
    154c:	77 0b       	sbc	r23, r23
    154e:	71 95       	neg	r23
		datablocks--;
    1550:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    1552:	41 11       	cpse	r20, r1
    1554:	f1 cf       	rjmp	.-30     	; 0x1538 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1556:	49 2f       	mov	r20, r25
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	9a 01       	movw	r18, r20
    155c:	63 e0       	ldi	r22, 0x03	; 3
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	6a 95       	dec	r22
    1564:	e1 f7       	brne	.-8      	; 0x155e <NHPwriteChecksum+0x60>
    1566:	20 6c       	ori	r18, 0xC0	; 192
    1568:	3f 6f       	ori	r19, 0xFF	; 255
    156a:	30 81       	ld	r19, Z
    156c:	32 2b       	or	r19, r18
    156e:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    1570:	e4 0f       	add	r30, r20
    1572:	f5 1f       	adc	r31, r21
    1574:	31 97       	sbiw	r30, 0x01	; 1
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	8f 73       	andi	r24, 0x3F	; 63
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    157e:	89 2f       	mov	r24, r25
    1580:	08 95       	ret

00001582 <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    1582:	fc 01       	movw	r30, r24
    1584:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    1586:	20 ff       	sbrs	r18, 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    158a:	5f 98       	cbi	0x0b, 7	; 11
    158c:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    158e:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    1590:	8b b1       	in	r24, 0x0b	; 11
    1592:	80 63       	ori	r24, 0x30	; 48
    1594:	8b b9       	out	0x0b, r24	; 11
    1596:	08 95       	ret

00001598 <SerialInitHID>:
	//if (!ram.isp.pmode)
	//clearHIDReports();
}

// change Serial baud to 115200 for HID
void SerialInitHID(void){
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    159c:	80 e1       	ldi	r24, 0x10	; 16
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	90 93 cd 00 	sts	0x00CD, r25
    15a4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    15a8:	ca ec       	ldi	r28, 0xCA	; 202
    15aa:	d0 e0       	ldi	r29, 0x00	; 0
    15ac:	96 e0       	ldi	r25, 0x06	; 6
    15ae:	98 83       	st	Y, r25
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    15b0:	a8 ec       	ldi	r26, 0xC8	; 200
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	8c 93       	st	X, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    15b8:	e9 ec       	ldi	r30, 0xC9	; 201
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	28 e1       	ldi	r18, 0x18	; 24
    15be:	20 83       	st	Z, r18

				DDRD  |= (1 << 3);
    15c0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    15c2:	5a 9a       	sbi	0x0b, 2	; 11
	Serial_Init(115200, true);

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	// Added for correct Serial connection at baud 115200 <--
	// TODO PD3 ??
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    15c4:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    15c6:	10 82       	st	Z, r1
	UCSR1A = 0;
    15c8:	1c 92       	st	X, r1
	UCSR1C = 0;
    15ca:	18 82       	st	Y, r1

	// these are values for baud 115200. i just read them manual from change
	// its needed to start with baud 115200 on powerup
	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10)); //C: 0x06
    15cc:	98 83       	st	Y, r25
	UCSR1A = (1 << U2X1); //A: 0x02
    15ce:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1)); //B: 0x98
    15d0:	88 e9       	ldi	r24, 0x98	; 152
    15d2:	80 83       	st	Z, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    15d4:	5b 98       	cbi	0x0b, 3	; 11
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
    15e4:	e9 8d       	ldd	r30, Y+25	; 0x19
    15e6:	e1 50       	subi	r30, 0x01	; 1
    15e8:	e2 30       	cpi	r30, 0x02	; 2
    15ea:	28 f4       	brcc	.+10     	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	ec 5c       	subi	r30, 0xCC	; 204
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	10 81       	ld	r17, Z
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    15f6:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    15f8:	88 8d       	ldd	r24, Y+24	; 0x18
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	09 f4       	brne	.+2      	; 0x1600 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    15fe:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    1600:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1602:	87 30       	cpi	r24, 0x07	; 7
    1604:	31 f0       	breq	.+12     	; 0x1612 <EVENT_CDC_Device_LineEncodingChanged+0x36>
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	31 f0       	breq	.+12     	; 0x1616 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    160a:	86 30       	cpi	r24, 0x06	; 6
    160c:	29 f4       	brne	.+10     	; 0x1618 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    160e:	12 60       	ori	r17, 0x02	; 2
		break;
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    1612:	14 60       	ori	r17, 0x04	; 4
		break;
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    1616:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    1618:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    161a:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    161e:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    1622:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1626:	2c 89       	ldd	r18, Y+20	; 0x14
    1628:	3d 89       	ldd	r19, Y+21	; 0x15
    162a:	4e 89       	ldd	r20, Y+22	; 0x16
    162c:	5f 89       	ldd	r21, Y+23	; 0x17
    162e:	21 15       	cp	r18, r1
    1630:	81 ee       	ldi	r24, 0xE1	; 225
    1632:	38 07       	cpc	r19, r24
    1634:	41 05       	cpc	r20, r1
    1636:	51 05       	cpc	r21, r1
    1638:	79 f0       	breq	.+30     	; 0x1658 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    163a:	ca 01       	movw	r24, r20
    163c:	b9 01       	movw	r22, r18
    163e:	96 95       	lsr	r25
    1640:	87 95       	ror	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	60 58       	subi	r22, 0x80	; 128
    1648:	7b 47       	sbci	r23, 0x7B	; 123
    164a:	81 4e       	sbci	r24, 0xE1	; 225
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1652:	21 50       	subi	r18, 0x01	; 1
    1654:	31 09       	sbc	r19, r1
    1656:	02 c0       	rjmp	.+4      	; 0x165c <EVENT_CDC_Device_LineEncodingChanged+0x80>
    1658:	20 e1       	ldi	r18, 0x10	; 16
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	30 93 cd 00 	sts	0x00CD, r19
    1660:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    1664:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1668:	8c 89       	ldd	r24, Y+20	; 0x14
    166a:	9d 89       	ldd	r25, Y+21	; 0x15
    166c:	ae 89       	ldd	r26, Y+22	; 0x16
    166e:	bf 89       	ldd	r27, Y+23	; 0x17
    1670:	81 15       	cp	r24, r1
    1672:	91 4e       	sbci	r25, 0xE1	; 225
    1674:	a1 05       	cpc	r26, r1
    1676:	b1 05       	cpc	r27, r1
    1678:	11 f4       	brne	.+4      	; 0x167e <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	01 c0       	rjmp	.+2      	; 0x1680 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    1684:	88 e9       	ldi	r24, 0x98	; 152
    1686:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    168a:	5b 98       	cbi	0x0b, 3	; 11

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
    168c:	8c 89       	ldd	r24, Y+20	; 0x14
    168e:	9d 89       	ldd	r25, Y+21	; 0x15
    1690:	ae 89       	ldd	r26, Y+22	; 0x16
    1692:	bf 89       	ldd	r27, Y+23	; 0x17
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	a1 05       	cpc	r26, r1
    1698:	b1 05       	cpc	r27, r1
    169a:	61 f4       	brne	.+24     	; 0x16b4 <EVENT_CDC_Device_LineEncodingChanged+0xd8>
		SerialInitHID();
    169c:	7d df       	rcall	.-262    	; 0x1598 <SerialInitHID>
    169e:	e6 e3       	ldi	r30, 0x36	; 54
	}

	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
    16a0:	f1 e0       	ldi	r31, 0x01	; 1
    16a2:	8f b7       	in	r24, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16a4:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16a6:	11 82       	std	Z+1, r1	; 0x01

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
    16a8:	10 82       	st	Z, r1
    16aa:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Index = 0;
    16ac:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Size = 0;
    16ae:	14 82       	std	Z+4, r1	; 0x04
		Buffer->Count = 0;
    16b0:	8f bf       	out	0x3f, r24	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16b2:	52 da       	rcall	.-2908   	; 0xb58 <avrispReset>
		// disable the buffer until pmode has started
		LRingBuffer_DisableBuffer(&ram.USARTtoUSB_Buffer);

		avrispReset();
    16b4:	80 91 3e 01 	lds	r24, 0x013E
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
    16b8:	88 23       	and	r24, r24
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <EVENT_CDC_Device_LineEncodingChanged+0xe8>
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
		//TODO pmode break to get out of this loop
		end_pmode();
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16c0:	1f 91       	pop	r17
    16c2:	15 cb       	rjmp	.-2518   	; 0xcee <end_pmode>
    16c4:	df 91       	pop	r29
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
		//TODO pmode break to get out of this loop
		end_pmode();
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16ca:	6e c9       	rjmp	.-3364   	; 0x9a8 <clearHIDReports>

000016cc <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    16cc:	68 0f       	add	r22, r24
    16ce:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    16d2:	fc 01       	movw	r30, r24
    16d4:	21 91       	ld	r18, Z+
    16d6:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    16d8:	30 91 c8 00 	lds	r19, 0x00C8
    16dc:	35 ff       	sbrs	r19, 5
    16de:	fc cf       	rjmp	.-8      	; 0x16d8 <Serial_SendData+0xc>
				UDR1 = DataByte;
    16e0:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    16e4:	86 17       	cp	r24, r22
    16e6:	97 07       	cpc	r25, r23
    16e8:	a1 f7       	brne	.-24     	; 0x16d2 <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    16ea:	08 95       	ret

000016ec <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	7c 01       	movw	r14, r24
    1700:	8b 01       	movw	r16, r22
    1702:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1704:	d8 d1       	rcall	.+944    	; 0x1ab6 <Endpoint_WaitUntilReady>
    1706:	b8 2e       	mov	r11, r24
    1708:	81 11       	cpse	r24, r1
    170a:	33 c0       	rjmp	.+102    	; 0x1772 <Endpoint_Write_Stream_LE+0x86>
    170c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    170e:	31 f0       	breq	.+12     	; 0x171c <Endpoint_Write_Stream_LE+0x30>
    1710:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    1712:	39 81       	ldd	r19, Y+1	; 0x01
    1714:	02 1b       	sub	r16, r18
    1716:	13 0b       	sbc	r17, r19
    1718:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    171a:	f3 1e       	adc	r15, r19
    171c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    171e:	d1 2c       	mov	r13, r1
    1720:	23 c0       	rjmp	.+70     	; 0x1768 <Endpoint_Write_Stream_LE+0x7c>
    1722:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1726:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1728:	15 c0       	rjmp	.+42     	; 0x1754 <Endpoint_Write_Stream_LE+0x68>
    172a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    172e:	8e 77       	andi	r24, 0x7E	; 126
    1730:	80 93 e8 00 	sts	0x00E8, r24
    1734:	46 d4       	rcall	.+2188   	; 0x1fc2 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1736:	20 97       	sbiw	r28, 0x00	; 0
    1738:	49 f0       	breq	.+18     	; 0x174c <Endpoint_Write_Stream_LE+0x60>
			#endif

			if (BytesProcessed != NULL)
    173a:	88 81       	ld	r24, Y
    173c:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    173e:	8c 0d       	add	r24, r12
    1740:	9d 1d       	adc	r25, r13
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	88 83       	st	Y, r24
    1746:	25 e0       	ldi	r18, 0x05	; 5
    1748:	b2 2e       	mov	r11, r18
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <Endpoint_Write_Stream_LE+0x86>
    174c:	b4 d1       	rcall	.+872    	; 0x1ab6 <Endpoint_WaitUntilReady>
    174e:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1750:	59 f0       	breq	.+22     	; 0x1768 <Endpoint_Write_Stream_LE+0x7c>
    1752:	0e c0       	rjmp	.+28     	; 0x1770 <Endpoint_Write_Stream_LE+0x84>
    1754:	f7 01       	movw	r30, r14
    1756:	81 91       	ld	r24, Z+
    1758:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    175a:	80 93 f1 00 	sts	0x00F1, r24
    175e:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1760:	11 09       	sbc	r17, r1
    1762:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1764:	cf 1a       	sub	r12, r31
    1766:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1768:	01 15       	cp	r16, r1
    176a:	11 05       	cpc	r17, r1
    176c:	d1 f6       	brne	.-76     	; 0x1722 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <Endpoint_Write_Stream_LE+0x86>
    1770:	b8 2e       	mov	r11, r24
    1772:	8b 2d       	mov	r24, r11
    1774:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1776:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	bf 90       	pop	r11
    1786:	08 95       	ret

00001788 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1788:	20 91 51 02 	lds	r18, 0x0251
    178c:	30 91 52 02 	lds	r19, 0x0252
    1790:	26 17       	cp	r18, r22
    1792:	37 07       	cpc	r19, r23
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1796:	61 15       	cp	r22, r1
    1798:	71 05       	cpc	r23, r1
    179a:	39 f4       	brne	.+14     	; 0x17aa <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    179c:	20 91 e8 00 	lds	r18, 0x00E8
    17a0:	2e 77       	andi	r18, 0x7E	; 126
    17a2:	20 93 e8 00 	sts	0x00E8, r18
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17a8:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17aa:	9c 01       	movw	r18, r24
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	34 c0       	rjmp	.+104    	; 0x1818 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17b0:	90 91 4a 02 	lds	r25, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17b4:	99 23       	and	r25, r25
    17b6:	09 f4       	brne	.+2      	; 0x17ba <Endpoint_Write_Control_Stream_LE+0x32>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17ba:	95 30       	cpi	r25, 0x05	; 5
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <Endpoint_Write_Control_Stream_LE+0x38>
    17be:	42 c0       	rjmp	.+132    	; 0x1844 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17c0:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17c4:	93 fd       	sbrc	r25, 3
    17c6:	3a c0       	rjmp	.+116    	; 0x183c <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17c8:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    17cc:	92 fd       	sbrc	r25, 2
    17ce:	30 c0       	rjmp	.+96     	; 0x1830 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d0:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    17d4:	90 ff       	sbrs	r25, 0
    17d6:	20 c0       	rjmp	.+64     	; 0x1818 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    17d8:	80 91 f2 00 	lds	r24, 0x00F2
    17dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17de:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17e0:	82 1b       	sub	r24, r18
    17e2:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17e6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17e8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17f0:	9f 01       	movw	r18, r30
    17f2:	28 0f       	add	r18, r24
    17f4:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17f6:	61 15       	cp	r22, r1
    17f8:	71 05       	cpc	r23, r1
    17fa:	19 f0       	breq	.+6      	; 0x1802 <Endpoint_Write_Control_Stream_LE+0x7a>
    17fc:	28 30       	cpi	r18, 0x08	; 8
    17fe:	31 05       	cpc	r19, r1
    1800:	90 f3       	brcs	.-28     	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	28 30       	cpi	r18, 0x08	; 8
    1806:	31 05       	cpc	r19, r1
    1808:	09 f0       	breq	.+2      	; 0x180c <Endpoint_Write_Control_Stream_LE+0x84>
    180a:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    180c:	90 91 e8 00 	lds	r25, 0x00E8
    1810:	9e 77       	andi	r25, 0x7E	; 126
    1812:	90 93 e8 00 	sts	0x00E8, r25
    1816:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1818:	61 15       	cp	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	49 f6       	brne	.-110    	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x28>
    181e:	81 11       	cpse	r24, r1
    1820:	c7 cf       	rjmp	.-114    	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x28>
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1824:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1828:	88 23       	and	r24, r24
    182a:	51 f0       	breq	.+20     	; 0x1840 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    182c:	85 30       	cpi	r24, 0x05	; 5
    182e:	51 f0       	breq	.+20     	; 0x1844 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1830:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1834:	82 ff       	sbrs	r24, 2
    1836:	f6 cf       	rjmp	.-20     	; 0x1824 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1844:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1846:	08 95       	ret

00001848 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1848:	61 15       	cp	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	29 f4       	brne	.+10     	; 0x1858 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    184e:	20 91 e8 00 	lds	r18, 0x00E8
    1852:	2b 77       	andi	r18, 0x7B	; 123
    1854:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1858:	9c 01       	movw	r18, r24
    185a:	21 c0       	rjmp	.+66     	; 0x189e <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    185c:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1860:	88 23       	and	r24, r24
    1862:	81 f1       	breq	.+96     	; 0x18c4 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1864:	85 30       	cpi	r24, 0x05	; 5
    1866:	41 f1       	breq	.+80     	; 0x18b8 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1868:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    186c:	83 fd       	sbrc	r24, 3
    186e:	26 c0       	rjmp	.+76     	; 0x18bc <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1870:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1874:	82 ff       	sbrs	r24, 2
    1876:	f2 cf       	rjmp	.-28     	; 0x185c <Endpoint_Read_Control_Stream_LE+0x14>
    1878:	f9 01       	movw	r30, r18
    187a:	07 c0       	rjmp	.+14     	; 0x188a <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    187c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1880:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1882:	9f 01       	movw	r18, r30
				Length--;
    1884:	61 50       	subi	r22, 0x01	; 1
    1886:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1888:	29 f0       	breq	.+10     	; 0x1894 <Endpoint_Read_Control_Stream_LE+0x4c>
    188a:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    188c:	80 91 f2 00 	lds	r24, 0x00F2
    1890:	81 11       	cpse	r24, r1
    1892:	f4 cf       	rjmp	.-24     	; 0x187c <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1894:	80 91 e8 00 	lds	r24, 0x00E8
    1898:	8b 77       	andi	r24, 0x7B	; 123
    189a:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    189e:	61 15       	cp	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	e1 f6       	brne	.-72     	; 0x185c <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    18a8:	80 fd       	sbrc	r24, 0
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18ac:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18b0:	88 23       	and	r24, r24
    18b2:	41 f0       	breq	.+16     	; 0x18c4 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18b4:	85 30       	cpi	r24, 0x05	; 5
    18b6:	b1 f7       	brne	.-20     	; 0x18a4 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18c4:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18c6:	08 95       	ret

000018c8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18c8:	20 91 51 02 	lds	r18, 0x0251
    18cc:	30 91 52 02 	lds	r19, 0x0252
    18d0:	26 17       	cp	r18, r22
    18d2:	37 07       	cpc	r19, r23
    18d4:	48 f0       	brcs	.+18     	; 0x18e8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18d6:	61 15       	cp	r22, r1
    18d8:	71 05       	cpc	r23, r1
    18da:	39 f4       	brne	.+14     	; 0x18ea <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18dc:	20 91 e8 00 	lds	r18, 0x00E8
    18e0:	2e 77       	andi	r18, 0x7E	; 126
    18e2:	20 93 e8 00 	sts	0x00E8, r18
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18e8:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ea:	9c 01       	movw	r18, r24
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	35 c0       	rjmp	.+106    	; 0x195a <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18f0:	90 91 4a 02 	lds	r25, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18f4:	99 23       	and	r25, r25
    18f6:	09 f4       	brne	.+2      	; 0x18fa <Endpoint_Write_Control_PStream_LE+0x32>
    18f8:	44 c0       	rjmp	.+136    	; 0x1982 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18fa:	95 30       	cpi	r25, 0x05	; 5
    18fc:	09 f4       	brne	.+2      	; 0x1900 <Endpoint_Write_Control_PStream_LE+0x38>
    18fe:	43 c0       	rjmp	.+134    	; 0x1986 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1900:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1904:	93 fd       	sbrc	r25, 3
    1906:	3b c0       	rjmp	.+118    	; 0x197e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1908:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    190c:	92 fd       	sbrc	r25, 2
    190e:	31 c0       	rjmp	.+98     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1910:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1914:	90 ff       	sbrs	r25, 0
    1916:	21 c0       	rjmp	.+66     	; 0x195a <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1918:	80 91 f2 00 	lds	r24, 0x00F2
    191c:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    191e:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1920:	82 1b       	sub	r24, r18
    1922:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1926:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1928:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    192c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1932:	9c 01       	movw	r18, r24
    1934:	2e 0f       	add	r18, r30
    1936:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	19 f0       	breq	.+6      	; 0x1944 <Endpoint_Write_Control_PStream_LE+0x7c>
    193e:	28 30       	cpi	r18, 0x08	; 8
    1940:	31 05       	cpc	r19, r1
    1942:	88 f3       	brcs	.-30     	; 0x1926 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	28 30       	cpi	r18, 0x08	; 8
    1948:	31 05       	cpc	r19, r1
    194a:	09 f0       	breq	.+2      	; 0x194e <Endpoint_Write_Control_PStream_LE+0x86>
    194c:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    194e:	90 91 e8 00 	lds	r25, 0x00E8
    1952:	9e 77       	andi	r25, 0x7E	; 126
    1954:	90 93 e8 00 	sts	0x00E8, r25
    1958:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    195a:	61 15       	cp	r22, r1
    195c:	71 05       	cpc	r23, r1
    195e:	41 f6       	brne	.-112    	; 0x18f0 <Endpoint_Write_Control_PStream_LE+0x28>
    1960:	81 11       	cpse	r24, r1
    1962:	c6 cf       	rjmp	.-116    	; 0x18f0 <Endpoint_Write_Control_PStream_LE+0x28>
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1966:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    196a:	88 23       	and	r24, r24
    196c:	51 f0       	breq	.+20     	; 0x1982 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    196e:	85 30       	cpi	r24, 0x05	; 5
    1970:	51 f0       	breq	.+20     	; 0x1986 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1972:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1976:	82 ff       	sbrs	r24, 2
    1978:	f6 cf       	rjmp	.-20     	; 0x1966 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1986:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1988:	08 95       	ret

0000198a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    198a:	98 2f       	mov	r25, r24
    198c:	2c c0       	rjmp	.+88     	; 0x19e6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    198e:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1992:	98 17       	cp	r25, r24
    1994:	39 f0       	breq	.+14     	; 0x19a4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1996:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    199a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    199e:	50 91 f0 00 	lds	r21, 0x00F0
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    19a4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    19a6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    19a8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    19aa:	21 fd       	sbrc	r18, 1
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	1a c0       	rjmp	.+52     	; 0x19e6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    19b2:	30 91 eb 00 	lds	r19, 0x00EB
    19b6:	3e 7f       	andi	r19, 0xFE	; 254
    19b8:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19bc:	30 91 ed 00 	lds	r19, 0x00ED
    19c0:	3d 7f       	andi	r19, 0xFD	; 253
    19c2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19c6:	30 91 eb 00 	lds	r19, 0x00EB
    19ca:	31 60       	ori	r19, 0x01	; 1
    19cc:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    19d0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    19d4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    19d8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19dc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19e0:	27 fd       	sbrc	r18, 7
    19e2:	e5 cf       	rjmp	.-54     	; 0x19ae <Endpoint_ConfigureEndpoint_Prv+0x24>
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19e6:	95 30       	cpi	r25, 0x05	; 5
    19e8:	90 f2       	brcs	.-92     	; 0x198e <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19ea:	8f 70       	andi	r24, 0x0F	; 15
    19ec:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    19f6:	08 95       	ret

000019f8 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	06 2f       	mov	r16, r22
    1a02:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	2e c0       	rjmp	.+92     	; 0x1a64 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    1a08:	98 81       	ld	r25, Y
    1a0a:	91 11       	cpse	r25, r1
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a0e:	1f 5f       	subi	r17, 0xFF	; 255
    1a10:	25 96       	adiw	r28, 0x05	; 5
    1a12:	28 c0       	rjmp	.+80     	; 0x1a64 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1a1c:	89 2f       	mov	r24, r25
    1a1e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1a20:	85 30       	cpi	r24, 0x05	; 5
    1a22:	10 f0       	brcs	.+4      	; 0x1a28 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	21 c0       	rjmp	.+66     	; 0x1a6a <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	10 f0       	brcs	.+4      	; 0x1a30 <Endpoint_ConfigureEndpointTable+0x38>
    1a2c:	56 e0       	ldi	r21, 0x06	; 6
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <Endpoint_ConfigureEndpointTable+0x3a>
    1a30:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1a32:	28 e0       	ldi	r18, 0x08	; 8
    1a34:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a3a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1a3c:	22 0f       	add	r18, r18
    1a3e:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a40:	2e 17       	cp	r18, r30
    1a42:	3f 07       	cpc	r19, r31
    1a44:	d0 f3       	brcs	.-12     	; 0x1a3a <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1a46:	42 95       	swap	r20
    1a48:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a4a:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	99 27       	eor	r25, r25
    1a50:	99 1f       	adc	r25, r25
    1a52:	62 95       	swap	r22
    1a54:	66 0f       	add	r22, r22
    1a56:	66 0f       	add	r22, r22
    1a58:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a5a:	69 2b       	or	r22, r25
    1a5c:	96 df       	rcall	.-212    	; 0x198a <Endpoint_ConfigureEndpoint_Prv>
    1a5e:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a60:	d6 cf       	rjmp	.-84     	; 0x1a0e <Endpoint_ConfigureEndpointTable+0x16>
    1a62:	e0 cf       	rjmp	.-64     	; 0x1a24 <Endpoint_ConfigureEndpointTable+0x2c>
    1a64:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a66:	d0 cf       	rjmp	.-96     	; 0x1a08 <Endpoint_ConfigureEndpointTable+0x10>
    1a68:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1a6a:	df 91       	pop	r29
}
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1a74:	80 91 4b 02 	lds	r24, 0x024B
    1a78:	87 fd       	sbrc	r24, 7
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a80:	80 ff       	sbrs	r24, 0
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <Endpoint_ClearStatusStage+0x2c>
    1a84:	12 c0       	rjmp	.+36     	; 0x1aaa <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a86:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a8a:	82 fd       	sbrc	r24, 2
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a8e:	80 91 4a 02 	lds	r24, 0x024A
    1a92:	81 11       	cpse	r24, r1
    1a94:	f8 cf       	rjmp	.-16     	; 0x1a86 <Endpoint_ClearStatusStage+0x12>
    1a96:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a98:	80 91 e8 00 	lds	r24, 0x00E8
    1a9c:	8b 77       	andi	r24, 0x7B	; 123
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1aa0:	80 91 4a 02 	lds	r24, 0x024A
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	ea cf       	rjmp	.-44     	; 0x1a7c <Endpoint_ClearStatusStage+0x8>
    1aa8:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1aaa:	80 91 e8 00 	lds	r24, 0x00E8
    1aae:	8e 77       	andi	r24, 0x7E	; 126
    1ab0:	80 93 e8 00 	sts	0x00E8, r24
    1ab4:	08 95       	ret

00001ab6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ab6:	80 91 e4 00 	lds	r24, 0x00E4
    1aba:	90 91 e5 00 	lds	r25, 0x00E5
    1abe:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ac0:	20 91 ec 00 	lds	r18, 0x00EC
    1ac4:	20 fd       	sbrc	r18, 0
    1ac6:	1f c0       	rjmp	.+62     	; 0x1b06 <Endpoint_WaitUntilReady+0x50>
    1ac8:	23 c0       	rjmp	.+70     	; 0x1b10 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1aca:	20 91 4a 02 	lds	r18, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ace:	22 23       	and	r18, r18
    1ad0:	91 f0       	breq	.+36     	; 0x1af6 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ad2:	25 30       	cpi	r18, 0x05	; 5
    1ad4:	91 f0       	breq	.+36     	; 0x1afa <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ad6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1ada:	25 fd       	sbrc	r18, 5
    1adc:	10 c0       	rjmp	.+32     	; 0x1afe <Endpoint_WaitUntilReady+0x48>
    1ade:	20 91 e4 00 	lds	r18, 0x00E4
    1ae2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ae6:	28 17       	cp	r18, r24
    1ae8:	39 07       	cpc	r19, r25
    1aea:	51 f3       	breq	.-44     	; 0x1ac0 <Endpoint_WaitUntilReady+0xa>
    1aec:	41 50       	subi	r20, 0x01	; 1
    1aee:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1af0:	39 f7       	brne	.-50     	; 0x1ac0 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b06:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b0a:	20 ff       	sbrs	r18, 0
    1b0c:	de cf       	rjmp	.-68     	; 0x1aca <Endpoint_WaitUntilReady+0x14>
    1b0e:	f9 cf       	rjmp	.-14     	; 0x1b02 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b10:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b14:	22 ff       	sbrs	r18, 2
    1b16:	d9 cf       	rjmp	.-78     	; 0x1aca <Endpoint_WaitUntilReady+0x14>
    1b18:	f4 cf       	rjmp	.-24     	; 0x1b02 <Endpoint_WaitUntilReady+0x4c>

00001b1a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b1a:	41 d0       	rcall	.+130    	; 0x1b9e <USB_INT_DisableAllInterrupts>
    1b1c:	43 d0       	rcall	.+134    	; 0x1ba4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b1e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b22:	8f 77       	andi	r24, 0x7F	; 127
    1b24:	80 93 d8 00 	sts	0x00D8, r24
    1b28:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1b2c:	80 68       	ori	r24, 0x80	; 128
    1b2e:	80 93 d8 00 	sts	0x00D8, r24
    1b32:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b36:	8f 7d       	andi	r24, 0xDF	; 223
    1b38:	80 93 d8 00 	sts	0x00D8, r24
    1b3c:	84 e0       	ldi	r24, 0x04	; 4
    1b3e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b40:	86 e0       	ldi	r24, 0x06	; 6
    1b42:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b44:	09 b4       	in	r0, 0x29	; 41
    1b46:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b48:	fd cf       	rjmp	.-6      	; 0x1b44 <USB_ResetInterface+0x2a>
    1b4a:	10 92 4a 02 	sts	0x024A, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b4e:	10 92 46 02 	sts	0x0246, r1
	USB_Device_ConfigurationNumber  = 0;
    1b52:	10 92 48 02 	sts	0x0248, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b56:	10 92 47 02 	sts	0x0247, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b5a:	42 e0       	ldi	r20, 0x02	; 2
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	14 df       	rcall	.-472    	; 0x198a <Endpoint_ConfigureEndpoint_Prv>
    1b62:	80 91 e1 00 	lds	r24, 0x00E1
    1b66:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b68:	80 93 e1 00 	sts	0x00E1, r24
    1b6c:	80 91 e2 00 	lds	r24, 0x00E2
    1b70:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b72:	80 93 e2 00 	sts	0x00E2, r24
    1b76:	80 91 e2 00 	lds	r24, 0x00E2
    1b7a:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b7c:	80 93 e2 00 	sts	0x00E2, r24
    1b80:	80 91 e0 00 	lds	r24, 0x00E0
    1b84:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b86:	80 93 e0 00 	sts	0x00E0, r24
    1b8a:	08 95       	ret

00001b8c <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1b8c:	e3 e6       	ldi	r30, 0x63	; 99
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 49 02 	sts	0x0249, r24

	USB_ResetInterface();
    1b9c:	be cf       	rjmp	.-132    	; 0x1b1a <USB_ResetInterface>

00001b9e <USB_INT_DisableAllInterrupts>:
    1b9e:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1ba2:	08 95       	ret

00001ba4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ba4:	10 92 e1 00 	sts	0x00E1, r1
    1ba8:	08 95       	ret

00001baa <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1baa:	1f 92       	push	r1
    1bac:	0f 92       	push	r0
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	0f 92       	push	r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	2f 93       	push	r18
    1bb6:	3f 93       	push	r19
    1bb8:	4f 93       	push	r20
    1bba:	5f 93       	push	r21
    1bbc:	6f 93       	push	r22
    1bbe:	7f 93       	push	r23
    1bc0:	8f 93       	push	r24
    1bc2:	9f 93       	push	r25
    1bc4:	af 93       	push	r26
    1bc6:	bf 93       	push	r27
    1bc8:	ef 93       	push	r30
    1bca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1bcc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1bd0:	82 ff       	sbrs	r24, 2
    1bd2:	0b c0       	rjmp	.+22     	; 0x1bea <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1bd4:	80 91 e2 00 	lds	r24, 0x00E2
    1bd8:	82 ff       	sbrs	r24, 2
    1bda:	07 c0       	rjmp	.+14     	; 0x1bea <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bdc:	80 91 e1 00 	lds	r24, 0x00E1
    1be0:	8b 7f       	andi	r24, 0xFB	; 251
    1be2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1be6:	0e 94 b0 03 	call	0x760	; 0x760 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1bea:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1bee:	80 ff       	sbrs	r24, 0
    1bf0:	18 c0       	rjmp	.+48     	; 0x1c22 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1bf2:	80 91 e2 00 	lds	r24, 0x00E2
    1bf6:	80 ff       	sbrs	r24, 0
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1bfa:	80 91 e2 00 	lds	r24, 0x00E2
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c04:	80 91 e2 00 	lds	r24, 0x00E2
    1c08:	80 61       	ori	r24, 0x10	; 16
    1c0a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c0e:	80 91 d8 00 	lds	r24, 0x00D8
    1c12:	80 62       	ori	r24, 0x20	; 32
    1c14:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c18:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1c1a:	10 92 4a 02 	sts	0x024A, r1
		EVENT_USB_Device_Disconnect();
    1c1e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c22:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c26:	84 ff       	sbrs	r24, 4
    1c28:	30 c0       	rjmp	.+96     	; 0x1c8a <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c2a:	80 91 e2 00 	lds	r24, 0x00E2
    1c2e:	84 ff       	sbrs	r24, 4
    1c30:	2c c0       	rjmp	.+88     	; 0x1c8a <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c32:	84 e0       	ldi	r24, 0x04	; 4
    1c34:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c36:	86 e0       	ldi	r24, 0x06	; 6
    1c38:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c3a:	09 b4       	in	r0, 0x29	; 41
    1c3c:	00 fe       	sbrs	r0, 0
    1c3e:	fd cf       	rjmp	.-6      	; 0x1c3a <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c40:	80 91 d8 00 	lds	r24, 0x00D8
    1c44:	8f 7d       	andi	r24, 0xDF	; 223
    1c46:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c4a:	80 91 e1 00 	lds	r24, 0x00E1
    1c4e:	8f 7e       	andi	r24, 0xEF	; 239
    1c50:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c54:	80 91 e2 00 	lds	r24, 0x00E2
    1c58:	8f 7e       	andi	r24, 0xEF	; 239
    1c5a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c5e:	80 91 e2 00 	lds	r24, 0x00E2
    1c62:	81 60       	ori	r24, 0x01	; 1
    1c64:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c68:	80 91 46 02 	lds	r24, 0x0246
    1c6c:	88 23       	and	r24, r24
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c74:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c78:	87 ff       	sbrs	r24, 7
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <__vector_11+0xd6>
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <__vector_11+0xd8>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 4a 02 	sts	0x024A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1c86:	0e 94 57 03 	call	0x6ae	; 0x6ae <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c8a:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c8e:	83 ff       	sbrs	r24, 3
    1c90:	22 c0       	rjmp	.+68     	; 0x1cd6 <__vector_11+0x12c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c92:	80 91 e2 00 	lds	r24, 0x00E2
    1c96:	83 ff       	sbrs	r24, 3
    1c98:	1e c0       	rjmp	.+60     	; 0x1cd6 <__vector_11+0x12c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c9a:	80 91 e1 00 	lds	r24, 0x00E1
    1c9e:	87 7f       	andi	r24, 0xF7	; 247
    1ca0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	80 93 4a 02 	sts	0x024A, r24
		USB_Device_ConfigurationNumber = 0;
    1caa:	10 92 46 02 	sts	0x0246, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cae:	80 91 e1 00 	lds	r24, 0x00E1
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cb8:	80 91 e2 00 	lds	r24, 0x00E2
    1cbc:	8e 7f       	andi	r24, 0xFE	; 254
    1cbe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cc2:	80 91 e2 00 	lds	r24, 0x00E2
    1cc6:	80 61       	ori	r24, 0x10	; 16
    1cc8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ccc:	42 e0       	ldi	r20, 0x02	; 2
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	5b de       	rcall	.-842    	; 0x198a <Endpoint_ConfigureEndpoint_Prv>
    1cd4:	75 d1       	rcall	.+746    	; 0x1fc0 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <USB_Device_ProcessControlRequest>:
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	ac 97       	sbiw	r28, 0x2c	; 44
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1d0e:	eb e4       	ldi	r30, 0x4B	; 75
    1d10:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d12:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d16:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d18:	22 e0       	ldi	r18, 0x02	; 2
    1d1a:	e3 35       	cpi	r30, 0x53	; 83
    1d1c:	f2 07       	cpc	r31, r18
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d20:	0e 94 a8 03 	call	0x750	; 0x750 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d24:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d28:	83 ff       	sbrs	r24, 3
    1d2a:	32 c1       	rjmp	.+612    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d2c:	80 91 4b 02 	lds	r24, 0x024B

		switch (USB_ControlRequest.bRequest)
    1d30:	90 91 4c 02 	lds	r25, 0x024C
    1d34:	95 30       	cpi	r25, 0x05	; 5
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <USB_Device_ProcessControlRequest+0x42>
    1d38:	87 c0       	rjmp	.+270    	; 0x1e48 <USB_Device_ProcessControlRequest+0x150>
    1d3a:	38 f4       	brcc	.+14     	; 0x1d4a <USB_Device_ProcessControlRequest+0x52>
    1d3c:	91 30       	cpi	r25, 0x01	; 1
    1d3e:	b1 f1       	breq	.+108    	; 0x1dac <USB_Device_ProcessControlRequest+0xb4>
    1d40:	70 f0       	brcs	.+28     	; 0x1d5e <USB_Device_ProcessControlRequest+0x66>
    1d42:	93 30       	cpi	r25, 0x03	; 3
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <USB_Device_ProcessControlRequest+0x50>
    1d46:	24 c1       	rjmp	.+584    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1d48:	31 c0       	rjmp	.+98     	; 0x1dac <USB_Device_ProcessControlRequest+0xb4>
    1d4a:	98 30       	cpi	r25, 0x08	; 8
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <USB_Device_ProcessControlRequest+0x58>
    1d4e:	f4 c0       	rjmp	.+488    	; 0x1f38 <USB_Device_ProcessControlRequest+0x240>
    1d50:	99 30       	cpi	r25, 0x09	; 9
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <USB_Device_ProcessControlRequest+0x5e>
    1d54:	00 c1       	rjmp	.+512    	; 0x1f56 <USB_Device_ProcessControlRequest+0x25e>
    1d56:	96 30       	cpi	r25, 0x06	; 6
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <USB_Device_ProcessControlRequest+0x64>
    1d5a:	1a c1       	rjmp	.+564    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1d5c:	9b c0       	rjmp	.+310    	; 0x1e94 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d5e:	80 38       	cpi	r24, 0x80	; 128
    1d60:	21 f0       	breq	.+8      	; 0x1d6a <USB_Device_ProcessControlRequest+0x72>
    1d62:	82 38       	cpi	r24, 0x82	; 130
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <USB_Device_ProcessControlRequest+0x70>
    1d66:	14 c1       	rjmp	.+552    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1d68:	08 c0       	rjmp	.+16     	; 0x1d7a <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d6a:	80 91 47 02 	lds	r24, 0x0247
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d6e:	90 91 48 02 	lds	r25, 0x0248
    1d72:	99 23       	and	r25, r25
    1d74:	89 f0       	breq	.+34     	; 0x1d98 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d76:	82 60       	ori	r24, 0x02	; 2
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d7a:	80 91 4f 02 	lds	r24, 0x024F
    1d7e:	90 91 50 02 	lds	r25, 0x0250
    1d82:	8f 70       	andi	r24, 0x0F	; 15
    1d84:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d86:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d8a:	80 91 eb 00 	lds	r24, 0x00EB
    1d8e:	85 fb       	bst	r24, 5
    1d90:	88 27       	eor	r24, r24
    1d92:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d94:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d98:	90 91 e8 00 	lds	r25, 0x00E8
    1d9c:	97 7f       	andi	r25, 0xF7	; 247
    1d9e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1da2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1da6:	10 92 f1 00 	sts	0x00F1, r1
    1daa:	d1 c0       	rjmp	.+418    	; 0x1f4e <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1dac:	88 23       	and	r24, r24
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <USB_Device_ProcessControlRequest+0xbe>
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <USB_Device_ProcessControlRequest+0xbe>
    1db4:	ed c0       	rjmp	.+474    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1db6:	8f 71       	andi	r24, 0x1F	; 31
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <USB_Device_ProcessControlRequest+0xca>
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <USB_Device_ProcessControlRequest+0xc8>
    1dbe:	e8 c0       	rjmp	.+464    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1dc0:	0b c0       	rjmp	.+22     	; 0x1dd8 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1dc2:	80 91 4d 02 	lds	r24, 0x024D
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <USB_Device_ProcessControlRequest+0xd4>
    1dca:	e2 c0       	rjmp	.+452    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1dcc:	93 30       	cpi	r25, 0x03	; 3
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <USB_Device_ProcessControlRequest+0xda>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	80 93 48 02 	sts	0x0248, r24
    1dd6:	2f c0       	rjmp	.+94     	; 0x1e36 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dd8:	80 91 4d 02 	lds	r24, 0x024D
    1ddc:	81 11       	cpse	r24, r1
    1dde:	2b c0       	rjmp	.+86     	; 0x1e36 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1de0:	80 91 4f 02 	lds	r24, 0x024F
    1de4:	90 91 50 02 	lds	r25, 0x0250
    1de8:	8f 70       	andi	r24, 0x0F	; 15
    1dea:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <USB_Device_ProcessControlRequest+0xfa>
    1df0:	cf c0       	rjmp	.+414    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1df2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1df6:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1dfa:	20 ff       	sbrs	r18, 0
    1dfc:	1c c0       	rjmp	.+56     	; 0x1e36 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1dfe:	20 91 4c 02 	lds	r18, 0x024C
    1e02:	23 30       	cpi	r18, 0x03	; 3
    1e04:	21 f4       	brne	.+8      	; 0x1e0e <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e06:	80 91 eb 00 	lds	r24, 0x00EB
    1e0a:	80 62       	ori	r24, 0x20	; 32
    1e0c:	12 c0       	rjmp	.+36     	; 0x1e32 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e0e:	90 91 eb 00 	lds	r25, 0x00EB
    1e12:	90 61       	ori	r25, 0x10	; 16
    1e14:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <USB_Device_ProcessControlRequest+0x128>
    1e1e:	22 0f       	add	r18, r18
    1e20:	8a 95       	dec	r24
    1e22:	ea f7       	brpl	.-6      	; 0x1e1e <USB_Device_ProcessControlRequest+0x126>
    1e24:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1e28:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e2c:	80 91 eb 00 	lds	r24, 0x00EB
    1e30:	88 60       	ori	r24, 0x08	; 8
    1e32:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e36:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e3a:	80 91 e8 00 	lds	r24, 0x00E8
    1e3e:	87 7f       	andi	r24, 0xF7	; 247
    1e40:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e44:	17 de       	rcall	.-978    	; 0x1a74 <Endpoint_ClearStatusStage>
    1e46:	a4 c0       	rjmp	.+328    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1e48:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e4a:	a2 c0       	rjmp	.+324    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1e4c:	80 91 4d 02 	lds	r24, 0x024D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e50:	90 91 4e 02 	lds	r25, 0x024E
    1e54:	8f 77       	andi	r24, 0x7F	; 127
    1e56:	99 27       	eor	r25, r25
    1e58:	18 2f       	mov	r17, r24
    1e5a:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e5e:	90 78       	andi	r25, 0x80	; 128
    1e60:	98 2b       	or	r25, r24
    1e62:	90 93 e3 00 	sts	0x00E3, r25
    1e66:	80 91 e8 00 	lds	r24, 0x00E8
    1e6a:	87 7f       	andi	r24, 0xF7	; 247
    1e6c:	80 93 e8 00 	sts	0x00E8, r24
    1e70:	01 de       	rcall	.-1022   	; 0x1a74 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e72:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e76:	80 ff       	sbrs	r24, 0
    1e78:	fc cf       	rjmp	.-8      	; 0x1e72 <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1e7a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e7e:	80 68       	ori	r24, 0x80	; 128
    1e80:	80 93 e3 00 	sts	0x00E3, r24
    1e84:	11 23       	and	r17, r17
    1e86:	11 f0       	breq	.+4      	; 0x1e8c <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <USB_Device_ProcessControlRequest+0x196>
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	80 93 4a 02 	sts	0x024A, r24
    1e92:	7e c0       	rjmp	.+252    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1e94:	80 58       	subi	r24, 0x80	; 128
    1e96:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <USB_Device_ProcessControlRequest+0x1a4>
    1e9a:	7a c0       	rjmp	.+244    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1e9c:	80 91 4d 02 	lds	r24, 0x024D
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ea0:	90 91 4e 02 	lds	r25, 0x024E
    1ea4:	8c 3d       	cpi	r24, 0xDC	; 220
    1ea6:	23 e0       	ldi	r18, 0x03	; 3
    1ea8:	92 07       	cpc	r25, r18
    1eaa:	71 f5       	brne	.+92     	; 0x1f08 <USB_Device_ProcessControlRequest+0x210>
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1eb0:	8a e2       	ldi	r24, 0x2A	; 42
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1eb4:	4f b7       	in	r20, 0x3f	; 63
    1eb6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1eb8:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1eba:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ec0:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ec2:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	50 93 57 00 	sts	0x0057, r21
    1eca:	e4 91       	lpm	r30, Z+
    1ecc:	20 ff       	sbrs	r18, 0
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1ed0:	e2 95       	swap	r30
    1ed2:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1ed4:	3f 5f       	subi	r19, 0xFF	; 255
    1ed6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ed8:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	ea 30       	cpi	r30, 0x0A	; 10
    1ede:	10 f0       	brcs	.+4      	; 0x1ee4 <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ee0:	c7 96       	adiw	r24, 0x37	; 55
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <USB_Device_ProcessControlRequest+0x1ee>
    1ee4:	c0 96       	adiw	r24, 0x30	; 48
    1ee6:	8d 93       	st	X+, r24
    1ee8:	9d 93       	st	X+, r25
    1eea:	2f 5f       	subi	r18, 0xFF	; 255
    1eec:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1eee:	49 f7       	brne	.-46     	; 0x1ec2 <USB_Device_ProcessControlRequest+0x1ca>
    1ef0:	4f bf       	out	0x3f, r20	; 63
    1ef2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ef6:	87 7f       	andi	r24, 0xF7	; 247
    1ef8:	80 93 e8 00 	sts	0x00E8, r24
    1efc:	6a e2       	ldi	r22, 0x2A	; 42
    1efe:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	41 dc       	rcall	.-1918   	; 0x1788 <Endpoint_Write_Control_Stream_LE>
    1f06:	12 c0       	rjmp	.+36     	; 0x1f2c <USB_Device_ProcessControlRequest+0x234>
    1f08:	ae 01       	movw	r20, r28
    1f0a:	45 5d       	subi	r20, 0xD5	; 213
    1f0c:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f0e:	60 91 4f 02 	lds	r22, 0x024F
    1f12:	0e 94 bc 03 	call	0x778	; 0x778 <CALLBACK_USB_GetDescriptor>
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	d9 f1       	breq	.+118    	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1f1a:	20 91 e8 00 	lds	r18, 0x00E8
    1f1e:	27 7f       	andi	r18, 0xF7	; 247
    1f20:	20 93 e8 00 	sts	0x00E8, r18
    1f24:	bc 01       	movw	r22, r24
    1f26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f28:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f2a:	ce dc       	rcall	.-1636   	; 0x18c8 <Endpoint_Write_Control_PStream_LE>
    1f2c:	80 91 e8 00 	lds	r24, 0x00E8
    1f30:	8b 77       	andi	r24, 0x7B	; 123
    1f32:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f36:	2c c0       	rjmp	.+88     	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1f38:	80 38       	cpi	r24, 0x80	; 128
    1f3a:	51 f5       	brne	.+84     	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1f3c:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f40:	87 7f       	andi	r24, 0xF7	; 247
    1f42:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f46:	80 91 46 02 	lds	r24, 0x0246
    1f4a:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f52:	8e 77       	andi	r24, 0x7E	; 126
    1f54:	75 cf       	rjmp	.-278    	; 0x1e40 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f56:	81 11       	cpse	r24, r1
    1f58:	1b c0       	rjmp	.+54     	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
    1f5a:	90 91 4d 02 	lds	r25, 0x024D
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f5e:	92 30       	cpi	r25, 0x02	; 2
    1f60:	b8 f4       	brcc	.+46     	; 0x1f90 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f62:	80 91 e8 00 	lds	r24, 0x00E8
    1f66:	87 7f       	andi	r24, 0xF7	; 247
    1f68:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f6c:	90 93 46 02 	sts	0x0246, r25
    1f70:	81 dd       	rcall	.-1278   	; 0x1a74 <Endpoint_ClearStatusStage>
    1f72:	80 91 46 02 	lds	r24, 0x0246
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f76:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <USB_Device_ProcessControlRequest+0x28a>
    1f7a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1f7e:	87 ff       	sbrs	r24, 7
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <USB_Device_ProcessControlRequest+0x28e>
    1f82:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <USB_Device_ProcessControlRequest+0x290>
    1f86:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f88:	80 93 4a 02 	sts	0x024A, r24
    1f8c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <EVENT_USB_Device_ConfigurationChanged>
    1f90:	80 91 e8 00 	lds	r24, 0x00E8
    1f94:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1f96:	0a c0       	rjmp	.+20     	; 0x1fac <USB_Device_ProcessControlRequest+0x2b4>
    1f98:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f9c:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fa2:	80 91 eb 00 	lds	r24, 0x00EB
    1fa6:	80 62       	ori	r24, 0x20	; 32
    1fa8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fac:	ac 96       	adiw	r28, 0x2c	; 44
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	1f 91       	pop	r17
    1fbe:	08 95       	ret

00001fc0 <USB_Event_Stub>:
    1fc0:	08 95       	ret

00001fc2 <USB_USBTask>:
    1fc2:	cf 93       	push	r28
    1fc4:	80 91 4a 02 	lds	r24, 0x024A
    1fc8:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1fca:	a9 f0       	breq	.+42     	; 0x1ff6 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fcc:	80 91 e9 00 	lds	r24, 0x00E9
    1fd0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fd2:	90 91 ec 00 	lds	r25, 0x00EC
    1fd6:	90 ff       	sbrs	r25, 0
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <USB_USBTask+0x1c>
    1fda:	90 e8       	ldi	r25, 0x80	; 128
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <USB_USBTask+0x1e>
    1fde:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fe0:	c9 2f       	mov	r28, r25
    1fe2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fe8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1fec:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1fee:	84 de       	rcall	.-760    	; 0x1cf8 <USB_Device_ProcessControlRequest>
    1ff0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ff2:	c0 93 e9 00 	sts	0x00E9, r28
    1ff6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1ff8:	08 95       	ret

00001ffa <CDC_Device_ConfigureEndpoints>:
    1ffa:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1ffc:	df 93       	push	r29
    1ffe:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2000:	40 96       	adiw	r24, 0x10	; 16
    2002:	fc 01       	movw	r30, r24
    2004:	8b e0       	ldi	r24, 0x0B	; 11
    2006:	df 01       	movw	r26, r30
    2008:	1d 92       	st	X+, r1
    200a:	8a 95       	dec	r24
    200c:	e9 f7       	brne	.-6      	; 0x2008 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2012:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	ec dc       	rcall	.-1576   	; 0x19f8 <Endpoint_ConfigureEndpointTable>
    2020:	88 23       	and	r24, r24
    2022:	61 f0       	breq	.+24     	; 0x203c <CDC_Device_ConfigureEndpoints+0x42>
    2024:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    2026:	ce 01       	movw	r24, r28
    2028:	06 96       	adiw	r24, 0x06	; 6
    202a:	e6 dc       	rcall	.-1588   	; 0x19f8 <Endpoint_ConfigureEndpointTable>
    202c:	88 23       	and	r24, r24
    202e:	31 f0       	breq	.+12     	; 0x203c <CDC_Device_ConfigureEndpoints+0x42>
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2034:	0b 96       	adiw	r24, 0x0b	; 11
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
	  return false;

	return true;
}
    203a:	de cc       	rjmp	.-1604   	; 0x19f8 <Endpoint_ConfigureEndpointTable>
    203c:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
	  return false;

	return true;
}
    2042:	08 95       	ret

00002044 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    2044:	cf 93       	push	r28
    2046:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2048:	20 91 4a 02 	lds	r18, 0x024A
    204c:	24 30       	cpi	r18, 0x04	; 4
    204e:	f1 f4       	brne	.+60     	; 0x208c <CDC_Device_SendByte+0x48>
    2050:	fc 01       	movw	r30, r24
    2052:	44 89       	ldd	r20, Z+20	; 0x14
    2054:	55 89       	ldd	r21, Z+21	; 0x15
    2056:	66 89       	ldd	r22, Z+22	; 0x16
    2058:	77 89       	ldd	r23, Z+23	; 0x17
    205a:	45 2b       	or	r20, r21
    205c:	46 2b       	or	r20, r22
    205e:	47 2b       	or	r20, r23
    2060:	a9 f0       	breq	.+42     	; 0x208c <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2062:	81 81       	ldd	r24, Z+1	; 0x01
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    206a:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    206e:	85 ff       	sbrs	r24, 5
    2070:	04 c0       	rjmp	.+8      	; 0x207a <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2072:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0a c0       	rjmp	.+20     	; 0x208e <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    207a:	80 91 e8 00 	lds	r24, 0x00E8
    207e:	8e 77       	andi	r24, 0x7E	; 126
    2080:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2084:	18 dd       	rcall	.-1488   	; 0x1ab6 <Endpoint_WaitUntilReady>
    2086:	88 23       	and	r24, r24
    2088:	a1 f3       	breq	.-24     	; 0x2072 <CDC_Device_SendByte+0x2e>
    208a:	01 c0       	rjmp	.+2      	; 0x208e <CDC_Device_SendByte+0x4a>
    208c:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    208e:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2090:	08 95       	ret

00002092 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2092:	20 91 4a 02 	lds	r18, 0x024A
    2096:	24 30       	cpi	r18, 0x04	; 4
    2098:	29 f5       	brne	.+74     	; 0x20e4 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    209a:	fc 01       	movw	r30, r24
    209c:	44 89       	ldd	r20, Z+20	; 0x14
    209e:	55 89       	ldd	r21, Z+21	; 0x15
    20a0:	66 89       	ldd	r22, Z+22	; 0x16
    20a2:	77 89       	ldd	r23, Z+23	; 0x17
    20a4:	45 2b       	or	r20, r21
    20a6:	46 2b       	or	r20, r22
    20a8:	47 2b       	or	r20, r23
    20aa:	e1 f0       	breq	.+56     	; 0x20e4 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20ac:	81 81       	ldd	r24, Z+1	; 0x01
    20ae:	8f 70       	andi	r24, 0x0F	; 15
    20b0:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20b4:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    20b8:	81 11       	cpse	r24, r1
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20c0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20c4:	80 91 e8 00 	lds	r24, 0x00E8
    20c8:	8e 77       	andi	r24, 0x7E	; 126
    20ca:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    20ce:	95 fd       	sbrc	r25, 5
    20d0:	f5 cf       	rjmp	.-22     	; 0x20bc <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    20d2:	f1 dc       	rcall	.-1566   	; 0x1ab6 <Endpoint_WaitUntilReady>
    20d4:	81 11       	cpse	r24, r1
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <CDC_Device_Flush+0x54>
    20d8:	90 91 e8 00 	lds	r25, 0x00E8
    20dc:	9e 77       	andi	r25, 0x7E	; 126
    20de:	90 93 e8 00 	sts	0x00E8, r25
    20e2:	08 95       	ret
    20e4:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    20e6:	08 95       	ret

000020e8 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    20e8:	20 91 4a 02 	lds	r18, 0x024A
    20ec:	24 30       	cpi	r18, 0x04	; 4
    20ee:	89 f4       	brne	.+34     	; 0x2112 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20f0:	fc 01       	movw	r30, r24
    20f2:	44 89       	ldd	r20, Z+20	; 0x14
    20f4:	55 89       	ldd	r21, Z+21	; 0x15
    20f6:	66 89       	ldd	r22, Z+22	; 0x16
    20f8:	77 89       	ldd	r23, Z+23	; 0x17
    20fa:	45 2b       	or	r20, r21
    20fc:	46 2b       	or	r20, r22
    20fe:	47 2b       	or	r20, r23
    2100:	41 f0       	breq	.+16     	; 0x2112 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2102:	21 81       	ldd	r18, Z+1	; 0x01
    2104:	2f 70       	andi	r18, 0x0F	; 15
    2106:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    210a:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    210e:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    2110:	c0 cf       	rjmp	.-128    	; 0x2092 <CDC_Device_Flush>
    2112:	08 95       	ret

00002114 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2114:	20 91 4a 02 	lds	r18, 0x024A
    2118:	24 30       	cpi	r18, 0x04	; 4
    211a:	19 f0       	breq	.+6      	; 0x2122 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    211c:	2f ef       	ldi	r18, 0xFF	; 255
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	24 c0       	rjmp	.+72     	; 0x216a <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2122:	fc 01       	movw	r30, r24
    2124:	44 89       	ldd	r20, Z+20	; 0x14
    2126:	55 89       	ldd	r21, Z+21	; 0x15
    2128:	66 89       	ldd	r22, Z+22	; 0x16
    212a:	77 89       	ldd	r23, Z+23	; 0x17
    212c:	45 2b       	or	r20, r21
    212e:	46 2b       	or	r20, r22
    2130:	47 2b       	or	r20, r23
    2132:	a1 f3       	breq	.-24     	; 0x211c <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2134:	86 81       	ldd	r24, Z+6	; 0x06
    2136:	8f 70       	andi	r24, 0x0F	; 15
    2138:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    213c:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2140:	82 ff       	sbrs	r24, 2
    2142:	ec cf       	rjmp	.-40     	; 0x211c <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2144:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    2148:	88 23       	and	r24, r24
    214a:	21 f0       	breq	.+8      	; 0x2154 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    214c:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    2154:	2f ef       	ldi	r18, 0xFF	; 255
    2156:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2158:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    215c:	81 11       	cpse	r24, r1
    215e:	05 c0       	rjmp	.+10     	; 0x216a <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2160:	80 91 e8 00 	lds	r24, 0x00E8
    2164:	8b 77       	andi	r24, 0x7B	; 123
    2166:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    216a:	c9 01       	movw	r24, r18
    216c:	08 95       	ret

0000216e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    216e:	08 95       	ret

00002170 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2176:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    217a:	83 ff       	sbrs	r24, 3
    217c:	a7 c0       	rjmp	.+334    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    217e:	88 81       	ld	r24, Y
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	20 91 4f 02 	lds	r18, 0x024F
    2186:	30 91 50 02 	lds	r19, 0x0250
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	09 f0       	breq	.+2      	; 0x2192 <CDC_Device_ProcessControlRequest+0x22>
    2190:	9d c0       	rjmp	.+314    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    2192:	80 91 4c 02 	lds	r24, 0x024C
    2196:	81 32       	cpi	r24, 0x21	; 33
    2198:	61 f0       	breq	.+24     	; 0x21b2 <CDC_Device_ProcessControlRequest+0x42>
    219a:	20 f4       	brcc	.+8      	; 0x21a4 <CDC_Device_ProcessControlRequest+0x34>
    219c:	80 32       	cpi	r24, 0x20	; 32
    219e:	09 f0       	breq	.+2      	; 0x21a2 <CDC_Device_ProcessControlRequest+0x32>
    21a0:	95 c0       	rjmp	.+298    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    21a2:	3d c0       	rjmp	.+122    	; 0x221e <CDC_Device_ProcessControlRequest+0xae>
    21a4:	82 32       	cpi	r24, 0x22	; 34
    21a6:	09 f4       	brne	.+2      	; 0x21aa <CDC_Device_ProcessControlRequest+0x3a>
    21a8:	6d c0       	rjmp	.+218    	; 0x2284 <CDC_Device_ProcessControlRequest+0x114>
    21aa:	83 32       	cpi	r24, 0x23	; 35
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <CDC_Device_ProcessControlRequest+0x40>
    21ae:	8e c0       	rjmp	.+284    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    21b0:	7d c0       	rjmp	.+250    	; 0x22ac <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21b2:	80 91 4b 02 	lds	r24, 0x024B
    21b6:	81 3a       	cpi	r24, 0xA1	; 161
    21b8:	09 f0       	breq	.+2      	; 0x21bc <CDC_Device_ProcessControlRequest+0x4c>
    21ba:	88 c0       	rjmp	.+272    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21bc:	80 91 e8 00 	lds	r24, 0x00E8
    21c0:	87 7f       	andi	r24, 0xF7	; 247
    21c2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21c6:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    21ca:	80 ff       	sbrs	r24, 0
    21cc:	fc cf       	rjmp	.-8      	; 0x21c6 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    21ce:	4c 89       	ldd	r20, Y+20	; 0x14
    21d0:	5d 89       	ldd	r21, Y+21	; 0x15
    21d2:	6e 89       	ldd	r22, Y+22	; 0x16
    21d4:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    21d6:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    21da:	bb 27       	eor	r27, r27
    21dc:	a7 2f       	mov	r26, r23
    21de:	96 2f       	mov	r25, r22
    21e0:	85 2f       	mov	r24, r21
    21e2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    21e6:	cb 01       	movw	r24, r22
    21e8:	aa 27       	eor	r26, r26
    21ea:	bb 27       	eor	r27, r27
    21ec:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    21f0:	47 2f       	mov	r20, r23
    21f2:	55 27       	eor	r21, r21
    21f4:	66 27       	eor	r22, r22
    21f6:	77 27       	eor	r23, r23
    21f8:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    21fc:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21fe:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    2202:	89 8d       	ldd	r24, Y+25	; 0x19
    2204:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2208:	8a 8d       	ldd	r24, Y+26	; 0x1a
    220a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    220e:	80 91 e8 00 	lds	r24, 0x00E8
    2212:	8e 77       	andi	r24, 0x7E	; 126
    2214:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    221c:	2b cc       	rjmp	.-1962   	; 0x1a74 <Endpoint_ClearStatusStage>
    221e:	80 91 4b 02 	lds	r24, 0x024B
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2222:	81 32       	cpi	r24, 0x21	; 33
    2224:	09 f0       	breq	.+2      	; 0x2228 <CDC_Device_ProcessControlRequest+0xb8>
    2226:	52 c0       	rjmp	.+164    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    2228:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    222c:	87 7f       	andi	r24, 0xF7	; 247
    222e:	80 93 e8 00 	sts	0x00E8, r24
    2232:	05 c0       	rjmp	.+10     	; 0x223e <CDC_Device_ProcessControlRequest+0xce>
    2234:	80 91 4a 02 	lds	r24, 0x024A
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2238:	88 23       	and	r24, r24
    223a:	09 f4       	brne	.+2      	; 0x223e <CDC_Device_ProcessControlRequest+0xce>
    223c:	47 c0       	rjmp	.+142    	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    223e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2242:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2244:	f7 cf       	rjmp	.-18     	; 0x2234 <CDC_Device_ProcessControlRequest+0xc4>
    2246:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    224a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    224e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    2252:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    2256:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2258:	2d 8b       	std	Y+21, r18	; 0x15
    225a:	9e 8b       	std	Y+22, r25	; 0x16
    225c:	8f 8b       	std	Y+23, r24	; 0x17
    225e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2262:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2264:	80 91 f1 00 	lds	r24, 0x00F1
    2268:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    226a:	80 91 f1 00 	lds	r24, 0x00F1
    226e:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2270:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2274:	8b 77       	andi	r24, 0x7B	; 123
    2276:	80 93 e8 00 	sts	0x00E8, r24
    227a:	fc db       	rcall	.-2056   	; 0x1a74 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    227c:	ce 01       	movw	r24, r28
    227e:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2280:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2282:	ac c9       	rjmp	.-3240   	; 0x15dc <EVENT_CDC_Device_LineEncodingChanged>
    2284:	80 91 4b 02 	lds	r24, 0x024B
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2288:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    228a:	01 f5       	brne	.+64     	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    228c:	80 91 e8 00 	lds	r24, 0x00E8
    2290:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2292:	80 93 e8 00 	sts	0x00E8, r24
    2296:	ee db       	rcall	.-2084   	; 0x1a74 <Endpoint_ClearStatusStage>
    2298:	80 91 4d 02 	lds	r24, 0x024D
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    229c:	90 91 4e 02 	lds	r25, 0x024E

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    22a0:	99 8b       	std	Y+17, r25	; 0x11
    22a2:	88 8b       	std	Y+16, r24	; 0x10
    22a4:	ce 01       	movw	r24, r28
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	6b c9       	rjmp	.-3370   	; 0x1582 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22ac:	80 91 4b 02 	lds	r24, 0x024B
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22b0:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22b2:	61 f4       	brne	.+24     	; 0x22cc <CDC_Device_ProcessControlRequest+0x15c>
    22b4:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22b8:	87 7f       	andi	r24, 0xF7	; 247
    22ba:	80 93 e8 00 	sts	0x00E8, r24
    22be:	da db       	rcall	.-2124   	; 0x1a74 <Endpoint_ClearStatusStage>
    22c0:	60 91 4d 02 	lds	r22, 0x024D
    22c4:	ce 01       	movw	r24, r28
    22c6:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22c8:	cf 91       	pop	r28
    22ca:	51 cf       	rjmp	.-350    	; 0x216e <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
			}

			break;
	}
}
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <HID_Device_ProcessControlRequest+0x1e>
    22f0:	1f 92       	push	r1
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    22f8:	ad b6       	in	r10, 0x3d	; 61
    22fa:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22fc:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2300:	83 ff       	sbrs	r24, 3
    2302:	07 c1       	rjmp	.+526    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    2304:	f7 01       	movw	r30, r14
    2306:	80 81       	ld	r24, Z
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	20 91 4f 02 	lds	r18, 0x024F
    230e:	30 91 50 02 	lds	r19, 0x0250
    2312:	28 17       	cp	r18, r24
    2314:	39 07       	cpc	r19, r25
    2316:	09 f0       	breq	.+2      	; 0x231a <HID_Device_ProcessControlRequest+0x48>
    2318:	fc c0       	rjmp	.+504    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    231a:	80 91 4c 02 	lds	r24, 0x024C
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	09 f4       	brne	.+2      	; 0x2324 <HID_Device_ProcessControlRequest+0x52>
    2322:	9e c0       	rjmp	.+316    	; 0x2460 <HID_Device_ProcessControlRequest+0x18e>
    2324:	30 f4       	brcc	.+12     	; 0x2332 <HID_Device_ProcessControlRequest+0x60>
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	71 f0       	breq	.+28     	; 0x2346 <HID_Device_ProcessControlRequest+0x74>
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	09 f0       	breq	.+2      	; 0x2330 <HID_Device_ProcessControlRequest+0x5e>
    232e:	f1 c0       	rjmp	.+482    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    2330:	d4 c0       	rjmp	.+424    	; 0x24da <HID_Device_ProcessControlRequest+0x208>
    2332:	8a 30       	cpi	r24, 0x0A	; 10
    2334:	09 f4       	brne	.+2      	; 0x2338 <HID_Device_ProcessControlRequest+0x66>
    2336:	b9 c0       	rjmp	.+370    	; 0x24aa <HID_Device_ProcessControlRequest+0x1d8>
    2338:	8b 30       	cpi	r24, 0x0B	; 11
    233a:	09 f4       	brne	.+2      	; 0x233e <HID_Device_ProcessControlRequest+0x6c>
    233c:	a2 c0       	rjmp	.+324    	; 0x2482 <HID_Device_ProcessControlRequest+0x1b0>
    233e:	89 30       	cpi	r24, 0x09	; 9
    2340:	09 f0       	breq	.+2      	; 0x2344 <HID_Device_ProcessControlRequest+0x72>
    2342:	e7 c0       	rjmp	.+462    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    2344:	4c c0       	rjmp	.+152    	; 0x23de <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2346:	80 91 4b 02 	lds	r24, 0x024B
    234a:	81 3a       	cpi	r24, 0xA1	; 161
    234c:	09 f0       	breq	.+2      	; 0x2350 <HID_Device_ProcessControlRequest+0x7e>
    234e:	e1 c0       	rjmp	.+450    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    2350:	8d b6       	in	r8, 0x3d	; 61
    2352:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2354:	1a 82       	std	Y+2, r1	; 0x02
    2356:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2358:	80 91 4d 02 	lds	r24, 0x024D
    235c:	10 91 4e 02 	lds	r17, 0x024E
    2360:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2362:	f7 01       	movw	r30, r14
    2364:	40 85       	ldd	r20, Z+8	; 0x08
    2366:	8d b7       	in	r24, 0x3d	; 61
    2368:	9e b7       	in	r25, 0x3e	; 62
    236a:	84 1b       	sub	r24, r20
    236c:	91 09       	sbc	r25, r1
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	9e bf       	out	0x3e, r25	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	8d bf       	out	0x3d, r24	; 61
    2378:	cd b6       	in	r12, 0x3d	; 61
    237a:	de b6       	in	r13, 0x3e	; 62
    237c:	ef ef       	ldi	r30, 0xFF	; 255
    237e:	ce 1a       	sub	r12, r30
    2380:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    2382:	36 01       	movw	r6, r12
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	c6 01       	movw	r24, r12
    238c:	e9 d1       	rcall	.+978    	; 0x2760 <memset>
    238e:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2390:	41 50       	subi	r20, 0x01	; 1
    2392:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    2394:	0f 5f       	subi	r16, 0xFF	; 255
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	96 01       	movw	r18, r12
    239a:	be 01       	movw	r22, r28
    239c:	6d 5f       	subi	r22, 0xFD	; 253
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	c7 01       	movw	r24, r14
    23a2:	0e 94 4f 04 	call	0x89e	; 0x89e <CALLBACK_HID_Device_CreateHIDReport>
    23a6:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    23a8:	26 81       	ldd	r18, Z+6	; 0x06
    23aa:	37 81       	ldd	r19, Z+7	; 0x07
    23ac:	21 15       	cp	r18, r1
    23ae:	31 05       	cpc	r19, r1
    23b0:	29 f0       	breq	.+10     	; 0x23bc <HID_Device_ProcessControlRequest+0xea>
    23b2:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	b6 01       	movw	r22, r12
    23b8:	c9 01       	movw	r24, r18
    23ba:	c9 d1       	rcall	.+914    	; 0x274e <memcpy>
    23bc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23c0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23c4:	87 7f       	andi	r24, 0xF7	; 247
    23c6:	80 93 e8 00 	sts	0x00E8, r24
    23ca:	69 81       	ldd	r22, Y+1	; 0x01
    23cc:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    23ce:	c3 01       	movw	r24, r6
    23d0:	db d9       	rcall	.-3146   	; 0x1788 <Endpoint_Write_Control_Stream_LE>
    23d2:	80 91 e8 00 	lds	r24, 0x00E8
    23d6:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    23d8:	80 93 e8 00 	sts	0x00E8, r24
    23dc:	39 c0       	rjmp	.+114    	; 0x2450 <HID_Device_ProcessControlRequest+0x17e>
    23de:	80 91 4b 02 	lds	r24, 0x024B
    23e2:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <HID_Device_ProcessControlRequest+0x116>
    23e6:	95 c0       	rjmp	.+298    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    23e8:	8d b6       	in	r8, 0x3d	; 61
    23ea:	9e b6       	in	r9, 0x3e	; 62
    23ec:	00 91 51 02 	lds	r16, 0x0251
    23f0:	10 91 52 02 	lds	r17, 0x0252
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    23f4:	70 90 4d 02 	lds	r7, 0x024D
    23f8:	60 90 4e 02 	lds	r6, 0x024E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    23fc:	8d b7       	in	r24, 0x3d	; 61
    23fe:	9e b7       	in	r25, 0x3e	; 62
    2400:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2402:	91 0b       	sbc	r25, r17
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	9e bf       	out	0x3e, r25	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	8d bf       	out	0x3d, r24	; 61
    240e:	cd b6       	in	r12, 0x3d	; 61
    2410:	de b6       	in	r13, 0x3e	; 62
    2412:	ef ef       	ldi	r30, 0xFF	; 255
    2414:	ce 1a       	sub	r12, r30
    2416:	de 0a       	sbc	r13, r30
    2418:	80 91 e8 00 	lds	r24, 0x00E8
    241c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    241e:	80 93 e8 00 	sts	0x00E8, r24
    2422:	b8 01       	movw	r22, r16
    2424:	c6 01       	movw	r24, r12
    2426:	10 da       	rcall	.-3040   	; 0x1848 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2428:	80 91 e8 00 	lds	r24, 0x00E8
    242c:	8e 77       	andi	r24, 0x7E	; 126
    242e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2432:	21 e0       	ldi	r18, 0x01	; 1
    2434:	71 10       	cpse	r7, r1
    2436:	01 c0       	rjmp	.+2      	; 0x243a <HID_Device_ProcessControlRequest+0x168>
    2438:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	02 1b       	sub	r16, r18
    243e:	13 0b       	sbc	r17, r19
    2440:	2c 0d       	add	r18, r12
    2442:	3d 1d       	adc	r19, r13
    2444:	46 2d       	mov	r20, r6
    2446:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    2448:	67 2d       	mov	r22, r7
    244a:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    244c:	0e 94 80 04 	call	0x900	; 0x900 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2450:	88 2d       	mov	r24, r8
    2452:	99 2d       	mov	r25, r9
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	9e bf       	out	0x3e, r25	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	8d bf       	out	0x3d, r24	; 61
    245e:	59 c0       	rjmp	.+178    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    2460:	80 91 4b 02 	lds	r24, 0x024B
    2464:	81 3a       	cpi	r24, 0xA1	; 161
    2466:	09 f0       	breq	.+2      	; 0x246a <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2468:	54 c0       	rjmp	.+168    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    246a:	80 91 e8 00 	lds	r24, 0x00E8
    246e:	87 7f       	andi	r24, 0xF7	; 247
    2470:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2474:	80 91 e8 00 	lds	r24, 0x00E8
    2478:	80 ff       	sbrs	r24, 0
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    247c:	f7 01       	movw	r30, r14
    247e:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2480:	40 c0       	rjmp	.+128    	; 0x2502 <HID_Device_ProcessControlRequest+0x230>
    2482:	80 91 4b 02 	lds	r24, 0x024B
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2486:	81 32       	cpi	r24, 0x21	; 33
    2488:	09 f0       	breq	.+2      	; 0x248c <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    248a:	43 c0       	rjmp	.+134    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    248c:	80 91 e8 00 	lds	r24, 0x00E8
    2490:	87 7f       	andi	r24, 0xF7	; 247
    2492:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2496:	ee da       	rcall	.-2596   	; 0x1a74 <Endpoint_ClearStatusStage>
    2498:	90 91 4d 02 	lds	r25, 0x024D
    249c:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    249e:	91 11       	cpse	r25, r1
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	f7 01       	movw	r30, r14
    24a6:	81 87       	std	Z+9, r24	; 0x09
    24a8:	34 c0       	rjmp	.+104    	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    24aa:	80 91 4b 02 	lds	r24, 0x024B
    24ae:	81 32       	cpi	r24, 0x21	; 33
    24b0:	81 f5       	brne	.+96     	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    24b2:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24b6:	87 7f       	andi	r24, 0xF7	; 247
    24b8:	80 93 e8 00 	sts	0x00E8, r24
    24bc:	db da       	rcall	.-2634   	; 0x1a74 <Endpoint_ClearStatusStage>
    24be:	80 91 4d 02 	lds	r24, 0x024D
    24c2:	90 91 4e 02 	lds	r25, 0x024E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24c6:	88 27       	eor	r24, r24
    24c8:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    24ca:	96 95       	lsr	r25
    24cc:	87 95       	ror	r24
    24ce:	3a 95       	dec	r19
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <HID_Device_ProcessControlRequest+0x1f8>
    24d2:	f7 01       	movw	r30, r14
    24d4:	95 87       	std	Z+13, r25	; 0x0d
    24d6:	84 87       	std	Z+12, r24	; 0x0c
    24d8:	1c c0       	rjmp	.+56     	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    24da:	80 91 4b 02 	lds	r24, 0x024B
    24de:	81 3a       	cpi	r24, 0xA1	; 161
    24e0:	c1 f4       	brne	.+48     	; 0x2512 <HID_Device_ProcessControlRequest+0x240>
    24e2:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24e6:	87 7f       	andi	r24, 0xF7	; 247
    24e8:	80 93 e8 00 	sts	0x00E8, r24
    24ec:	80 91 e8 00 	lds	r24, 0x00E8
    24f0:	80 ff       	sbrs	r24, 0
    24f2:	fc cf       	rjmp	.-8      	; 0x24ec <HID_Device_ProcessControlRequest+0x21a>
    24f4:	f7 01       	movw	r30, r14
    24f6:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24f8:	95 85       	ldd	r25, Z+13	; 0x0d
    24fa:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24fc:	87 95       	ror	r24
    24fe:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2500:	87 95       	ror	r24
    2502:	80 93 f1 00 	sts	0x00F1, r24
    2506:	80 91 e8 00 	lds	r24, 0x00E8
    250a:	8e 77       	andi	r24, 0x7E	; 126
    250c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2510:	b1 da       	rcall	.-2718   	; 0x1a74 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	be be       	out	0x3e, r11	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
			}

			break;
	}
}
    2520:	0f 90       	pop	r0
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	cf 90       	pop	r12
    2532:	bf 90       	pop	r11
    2534:	af 90       	pop	r10
    2536:	9f 90       	pop	r9
    2538:	8f 90       	pop	r8
    253a:	7f 90       	pop	r7
    253c:	6f 90       	pop	r6
    253e:	08 95       	ret

00002540 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2540:	9c 01       	movw	r18, r24
    2542:	27 5f       	subi	r18, 0xF7	; 247
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	f9 01       	movw	r30, r18
    2548:	27 e0       	ldi	r18, 0x07	; 7
    254a:	df 01       	movw	r26, r30
    254c:	1d 92       	st	X+, r1
    254e:	2a 95       	dec	r18
    2550:	e9 f7       	brne	.-6      	; 0x254c <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2552:	21 e0       	ldi	r18, 0x01	; 1
    2554:	fc 01       	movw	r30, r24
    2556:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    2558:	24 ef       	ldi	r18, 0xF4	; 244
    255a:	31 e0       	ldi	r19, 0x01	; 1
    255c:	35 87       	std	Z+13, r19	; 0x0d
    255e:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2560:	23 e0       	ldi	r18, 0x03	; 3
    2562:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	47 ca       	rjmp	.-2930   	; 0x19f8 <Endpoint_ConfigureEndpointTable>

0000256a <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    256a:	4f 92       	push	r4
    256c:	5f 92       	push	r5
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	00 d0       	rcall	.+0      	; 0x258c <HID_Device_USBTask+0x22>
    258c:	1f 92       	push	r1
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2594:	ad b6       	in	r10, 0x3d	; 61
    2596:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2598:	80 91 4a 02 	lds	r24, 0x024A
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	09 f0       	breq	.+2      	; 0x25a2 <HID_Device_USBTask+0x38>
    25a0:	8e c0       	rjmp	.+284    	; 0x26be <HID_Device_USBTask+0x154>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    25a2:	80 91 e4 00 	lds	r24, 0x00E4
    25a6:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    25aa:	f7 01       	movw	r30, r14
    25ac:	22 85       	ldd	r18, Z+10	; 0x0a
    25ae:	33 85       	ldd	r19, Z+11	; 0x0b
    25b0:	28 17       	cp	r18, r24
    25b2:	39 07       	cpc	r19, r25
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <HID_Device_USBTask+0x4e>
    25b6:	83 c0       	rjmp	.+262    	; 0x26be <HID_Device_USBTask+0x154>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	8f 70       	andi	r24, 0x0F	; 15
    25bc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    25c0:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    25c4:	85 ff       	sbrs	r24, 5
    25c6:	7b c0       	rjmp	.+246    	; 0x26be <HID_Device_USBTask+0x154>
    25c8:	6d b6       	in	r6, 0x3d	; 61
    25ca:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    25cc:	40 85       	ldd	r20, Z+8	; 0x08
    25ce:	8d b7       	in	r24, 0x3d	; 61
    25d0:	9e b7       	in	r25, 0x3e	; 62
    25d2:	84 1b       	sub	r24, r20
    25d4:	91 09       	sbc	r25, r1
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	9e bf       	out	0x3e, r25	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	8d bf       	out	0x3d, r24	; 61
    25e0:	cd b6       	in	r12, 0x3d	; 61
    25e2:	de b6       	in	r13, 0x3e	; 62
    25e4:	ef ef       	ldi	r30, 0xFF	; 255
    25e6:	ce 1a       	sub	r12, r30
    25e8:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    25ea:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    25ec:	1a 82       	std	Y+2, r1	; 0x02
    25ee:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    25f0:	46 01       	movw	r8, r12
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	c6 01       	movw	r24, r12
    25fa:	b2 d0       	rcall	.+356    	; 0x2760 <memset>
    25fc:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    25fe:	0f 5f       	subi	r16, 0xFF	; 255
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	96 01       	movw	r18, r12
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	be 01       	movw	r22, r28
    2608:	6d 5f       	subi	r22, 0xFD	; 253
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	c7 01       	movw	r24, r14
    260e:	0e 94 4f 04 	call	0x89e	; 0x89e <CALLBACK_HID_Device_CreateHIDReport>
    2612:	58 2e       	mov	r5, r24
    2614:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2616:	84 85       	ldd	r24, Z+12	; 0x0c
    2618:	95 85       	ldd	r25, Z+13	; 0x0d
    261a:	89 2b       	or	r24, r25
    261c:	31 f0       	breq	.+12     	; 0x262a <HID_Device_USBTask+0xc0>
    261e:	01 e0       	ldi	r16, 0x01	; 1
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	86 85       	ldd	r24, Z+14	; 0x0e
    2624:	97 85       	ldd	r25, Z+15	; 0x0f
    2626:	89 2b       	or	r24, r25
    2628:	11 f0       	breq	.+4      	; 0x262e <HID_Device_USBTask+0xc4>
    262a:	00 e0       	ldi	r16, 0x00	; 0
    262c:	10 e0       	ldi	r17, 0x00	; 0
    262e:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2630:	c6 80       	ldd	r12, Z+6	; 0x06
    2632:	d7 80       	ldd	r13, Z+7	; 0x07
    2634:	c1 14       	cp	r12, r1
    2636:	d1 04       	cpc	r13, r1
    2638:	89 f0       	breq	.+34     	; 0x265c <HID_Device_USBTask+0xf2>
    263a:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    263c:	5a 81       	ldd	r21, Y+2	; 0x02
    263e:	b6 01       	movw	r22, r12
    2640:	c4 01       	movw	r24, r8
    2642:	78 d0       	rcall	.+240    	; 0x2734 <memcmp>
    2644:	44 24       	eor	r4, r4
    2646:	43 94       	inc	r4
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	09 f4       	brne	.+2      	; 0x264e <HID_Device_USBTask+0xe4>
    264c:	41 2c       	mov	r4, r1
    264e:	f7 01       	movw	r30, r14
    2650:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	b4 01       	movw	r22, r8
    2656:	c6 01       	movw	r24, r12
    2658:	7a d0       	rcall	.+244    	; 0x274e <memcpy>
    265a:	01 c0       	rjmp	.+2      	; 0x265e <HID_Device_USBTask+0xf4>
    265c:	41 2c       	mov	r4, r1
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2662:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2664:	f1 f0       	breq	.+60     	; 0x26a2 <HID_Device_USBTask+0x138>
    2666:	51 10       	cpse	r5, r1
    2668:	04 c0       	rjmp	.+8      	; 0x2672 <HID_Device_USBTask+0x108>
    266a:	41 10       	cpse	r4, r1
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <HID_Device_USBTask+0x108>
    266e:	00 ff       	sbrs	r16, 0
    2670:	18 c0       	rjmp	.+48     	; 0x26a2 <HID_Device_USBTask+0x138>
    2672:	f7 01       	movw	r30, r14
    2674:	84 85       	ldd	r24, Z+12	; 0x0c
    2676:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2678:	97 87       	std	Z+15, r25	; 0x0f
    267a:	86 87       	std	Z+14, r24	; 0x0e
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	8f 70       	andi	r24, 0x0F	; 15
    2680:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	81 11       	cpse	r24, r1
    2688:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    268c:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    268e:	7a 81       	ldd	r23, Y+2	; 0x02
    2690:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	c4 01       	movw	r24, r8
    2696:	2a d8       	rcall	.-4012   	; 0x16ec <Endpoint_Write_Stream_LE>
    2698:	80 91 e8 00 	lds	r24, 0x00E8
    269c:	8e 77       	andi	r24, 0x7E	; 126
    269e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    26a2:	80 91 e4 00 	lds	r24, 0x00E4
    26a6:	90 91 e5 00 	lds	r25, 0x00E5
    26aa:	f7 01       	movw	r30, r14
    26ac:	93 87       	std	Z+11, r25	; 0x0b
    26ae:	82 87       	std	Z+10, r24	; 0x0a
    26b0:	86 2d       	mov	r24, r6

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    26b2:	97 2d       	mov	r25, r7
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	9e bf       	out	0x3e, r25	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	8d bf       	out	0x3d, r24	; 61
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	be be       	out	0x3e, r11	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
	}
}
    26c6:	ad be       	out	0x3d, r10	; 61
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	df 90       	pop	r13
    26dc:	cf 90       	pop	r12
    26de:	bf 90       	pop	r11
    26e0:	af 90       	pop	r10
    26e2:	9f 90       	pop	r9
    26e4:	8f 90       	pop	r8
    26e6:	7f 90       	pop	r7
    26e8:	6f 90       	pop	r6
    26ea:	5f 90       	pop	r5
    26ec:	4f 90       	pop	r4
    26ee:	08 95       	ret

000026f0 <__udivmodsi4>:
    26f0:	a1 e2       	ldi	r26, 0x21	; 33
    26f2:	1a 2e       	mov	r1, r26
    26f4:	aa 1b       	sub	r26, r26
    26f6:	bb 1b       	sub	r27, r27
    26f8:	fd 01       	movw	r30, r26
    26fa:	0d c0       	rjmp	.+26     	; 0x2716 <__udivmodsi4_ep>

000026fc <__udivmodsi4_loop>:
    26fc:	aa 1f       	adc	r26, r26
    26fe:	bb 1f       	adc	r27, r27
    2700:	ee 1f       	adc	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	a2 17       	cp	r26, r18
    2706:	b3 07       	cpc	r27, r19
    2708:	e4 07       	cpc	r30, r20
    270a:	f5 07       	cpc	r31, r21
    270c:	20 f0       	brcs	.+8      	; 0x2716 <__udivmodsi4_ep>
    270e:	a2 1b       	sub	r26, r18
    2710:	b3 0b       	sbc	r27, r19
    2712:	e4 0b       	sbc	r30, r20
    2714:	f5 0b       	sbc	r31, r21

00002716 <__udivmodsi4_ep>:
    2716:	66 1f       	adc	r22, r22
    2718:	77 1f       	adc	r23, r23
    271a:	88 1f       	adc	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	1a 94       	dec	r1
    2720:	69 f7       	brne	.-38     	; 0x26fc <__udivmodsi4_loop>
    2722:	60 95       	com	r22
    2724:	70 95       	com	r23
    2726:	80 95       	com	r24
    2728:	90 95       	com	r25
    272a:	9b 01       	movw	r18, r22
    272c:	ac 01       	movw	r20, r24
    272e:	bd 01       	movw	r22, r26
    2730:	cf 01       	movw	r24, r30
    2732:	08 95       	ret

00002734 <memcmp>:
    2734:	fb 01       	movw	r30, r22
    2736:	dc 01       	movw	r26, r24
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <memcmp+0xe>
    273a:	8d 91       	ld	r24, X+
    273c:	01 90       	ld	r0, Z+
    273e:	80 19       	sub	r24, r0
    2740:	21 f4       	brne	.+8      	; 0x274a <memcmp+0x16>
    2742:	41 50       	subi	r20, 0x01	; 1
    2744:	50 40       	sbci	r21, 0x00	; 0
    2746:	c8 f7       	brcc	.-14     	; 0x273a <memcmp+0x6>
    2748:	88 1b       	sub	r24, r24
    274a:	99 0b       	sbc	r25, r25
    274c:	08 95       	ret

0000274e <memcpy>:
    274e:	fb 01       	movw	r30, r22
    2750:	dc 01       	movw	r26, r24
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <memcpy+0xa>
    2754:	01 90       	ld	r0, Z+
    2756:	0d 92       	st	X+, r0
    2758:	41 50       	subi	r20, 0x01	; 1
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	d8 f7       	brcc	.-10     	; 0x2754 <memcpy+0x6>
    275e:	08 95       	ret

00002760 <memset>:
    2760:	dc 01       	movw	r26, r24
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <memset+0x6>
    2764:	6d 93       	st	X+, r22
    2766:	41 50       	subi	r20, 0x01	; 1
    2768:	50 40       	sbci	r21, 0x00	; 0
    276a:	e0 f7       	brcc	.-8      	; 0x2764 <memset+0x4>
    276c:	08 95       	ret

0000276e <_exit>:
    276e:	f8 94       	cli

00002770 <__stop_program>:
    2770:	ff cf       	rjmp	.-2      	; 0x2770 <__stop_program>
