
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000025ec  00002680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  00800136  00800136  000026b6  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e0fc  00000000  00000000  00004629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039bd  00000000  00000000  00012725  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000586d  00000000  00000000  000160e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000155c  00000000  00000000  0001b950  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004881  00000000  00000000  0001ceac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000084ea  00000000  00000000  0002172d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a78  00000000  00000000  00029c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 73 01 01 02     ..........hns...
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 3f 09 01 81 02 95 3f     .u...&...?.....?
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 05 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	05 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	ec ee       	ldi	r30, 0xEC	; 236
     2fc:	f5 e2       	ldi	r31, 0x25	; 37
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	ae 34       	cpi	r26, 0x4E	; 78
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	9c d1       	rcall	.+824    	; 0x654 <main>
				break;
     31c:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <SetupHardware>:
     322:	cf 93       	push	r28
				break;
     324:	df 93       	push	r29

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	84 b7       	in	r24, 0x34	; 52
     328:	87 7f       	andi	r24, 0xF7	; 247
     32a:	84 bf       	out	0x34, r24	; 52

				if (ParserData->UsingReportIDs)
     32c:	28 e1       	ldi	r18, 0x18	; 24
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	20 93 60 00 	sts	0x0060, r18
     336:	10 92 60 00 	sts	0x0060, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25
     344:	80 93 cc 00 	sts	0x00CC, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	ca ec       	ldi	r28, 0xCA	; 202

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	d0 e0       	ldi	r29, 0x00	; 0
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	98 83       	st	Y, r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	a8 ec       	ldi	r26, 0xC8	; 200
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	8c 93       	st	X, r24
     358:	e9 ec       	ldi	r30, 0xC9	; 201
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	20 83       	st	Z, r18
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	53 9a       	sbi	0x0a, 3	; 10
     360:	5a 9a       	sbi	0x0b, 2	; 11
     362:	5b 9a       	sbi	0x0b, 3	; 11
     364:	10 82       	st	Z, r1
     366:	1c 92       	st	X, r1
     368:	18 82       	st	Y, r1
     36a:	98 83       	st	Y, r25
     36c:	8c 93       	st	X, r24
     36e:	88 e9       	ldi	r24, 0x98	; 152
     370:	80 83       	st	Z, r24
     372:	5b 98       	cbi	0x0b, 3	; 11
     374:	8a b1       	in	r24, 0x0a	; 10
     376:	80 63       	ori	r24, 0x30	; 48

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	8a b9       	out	0x0a, r24	; 10
     37a:	8b b1       	in	r24, 0x0b	; 11
     37c:	80 63       	ori	r24, 0x30	; 48
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	8b b9       	out	0x0b, r24	; 11
     380:	0e 94 9c 0c 	call	0x1938	; 0x1938 <USB_Init>
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	85 bd       	out	0x25, r24	; 37
     388:	5f 9a       	sbi	0x0b, 7	; 11
     38a:	57 9a       	sbi	0x0a, 7	; 10
     38c:	20 9a       	sbi	0x04, 0	; 4
     38e:	22 98       	cbi	0x04, 2	; 4
     390:	2a 9a       	sbi	0x05, 2	; 5
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <selectMode>:
     398:	20 91 36 01 	lds	r18, 0x0136
     39c:	80 91 24 01 	lds	r24, 0x0124
     3a0:	90 91 25 01 	lds	r25, 0x0125
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	a0 91 26 01 	lds	r26, 0x0126
     3a8:	b0 91 27 01 	lds	r27, 0x0127
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	a1 05       	cpc	r26, r1
     3b0:	b1 05       	cpc	r27, r1
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <selectMode+0x2a>
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	81 15       	cp	r24, r1
     3b6:	32 ec       	ldi	r19, 0xC2	; 194
     3b8:	93 07       	cpc	r25, r19
     3ba:	31 e0       	ldi	r19, 0x01	; 1
     3bc:	a3 07       	cpc	r26, r19

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	b1 05       	cpc	r27, r1
     3c0:	21 f4       	brne	.+8      	; 0x3ca <selectMode+0x32>
     3c2:	1a 9b       	sbis	0x03, 2	; 3
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <selectMode+0x32>
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <selectMode+0x40>
     3ca:	01 97       	sbiw	r24, 0x01	; 1
				break;
     3cc:	a1 05       	cpc	r26, r1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	b1 05       	cpc	r27, r1
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <selectMode+0x3e>
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <selectMode+0x40>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 36 01 	sts	0x0136, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3dc:	80 91 36 01 	lds	r24, 0x0136
     3e0:	28 17       	cp	r18, r24
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <selectMode+0x4e>
     3e4:	41 c0       	rjmp	.+130    	; 0x468 <selectMode+0xd0>
     3e6:	23 30       	cpi	r18, 0x03	; 3
     3e8:	11 f0       	breq	.+4      	; 0x3ee <selectMode+0x56>
     3ea:	21 11       	cpse	r18, r1
     3ec:	1e c0       	rjmp	.+60     	; 0x42a <selectMode+0x92>
     3ee:	e7 e3       	ldi	r30, 0x37	; 55
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	2f b7       	in	r18, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	83 e4       	ldi	r24, 0x43	; 67
     3f8:	91 e0       	ldi	r25, 0x01	; 1
				break;
     3fa:	91 83       	std	Z+1, r25	; 0x01
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	80 83       	st	Z, r24
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	95 83       	std	Z+5, r25	; 0x05
     404:	84 83       	std	Z+4, r24	; 0x04
     406:	83 ec       	ldi	r24, 0xC3	; 195
     408:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	97 83       	std	Z+7, r25	; 0x07
     40c:	86 83       	std	Z+6, r24	; 0x06
     40e:	80 e8       	ldi	r24, 0x80	; 128
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	91 87       	std	Z+9, r25	; 0x09
     414:	80 87       	std	Z+8, r24	; 0x08
     416:	13 86       	std	Z+11, r1	; 0x0b
     418:	12 86       	std	Z+10, r1	; 0x0a
     41a:	2f bf       	out	0x3f, r18	; 63
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	10 92 c3 01 	sts	0x01C3, r1
     420:	10 92 c4 01 	sts	0x01C4, r1
     424:	8b b1       	in	r24, 0x0b	; 11
     426:	80 63       	ori	r24, 0x30	; 48

					while (CurrCollectionPath->Parent != NULL)
     428:	8b b9       	out	0x0b, r24	; 11
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	80 91 36 01 	lds	r24, 0x0136
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	21 f4       	brne	.+8      	; 0x43a <selectMode+0xa2>
     432:	0b d2       	rcall	.+1046   	; 0x84a <resetNHPbuffer>
     434:	10 92 c5 01 	sts	0x01C5, r1
     438:	08 95       	ret
     43a:	0c d2       	rcall	.+1048   	; 0x854 <flushHID>
     43c:	91 d2       	rcall	.+1314   	; 0x960 <clearHIDReports>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	80 91 36 01 	lds	r24, 0x0136
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     442:	83 30       	cpi	r24, 0x03	; 3
     444:	89 f4       	brne	.+34     	; 0x468 <selectMode+0xd0>
     446:	10 92 38 01 	sts	0x0138, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     44a:	10 92 37 01 	sts	0x0137, r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	10 92 3a 01 	sts	0x013A, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	10 92 39 01 	sts	0x0139, r1
     456:	10 92 3c 01 	sts	0x013C, r1
     45a:	10 92 3b 01 	sts	0x013B, r1
     45e:	8b b1       	in	r24, 0x0b	; 11

				if (UsageListSize)
     460:	80 63       	ori	r24, 0x30	; 48
     462:	8b b9       	out	0x0b, r24	; 11
     464:	22 98       	cbi	0x04, 2	; 4
     466:	2a 9a       	sbi	0x05, 2	; 5
     468:	08 95       	ret

0000046a <EVENT_USB_Device_Connect>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	08 95       	ret

0000046c <EVENT_USB_Device_Disconnect>:
     46c:	08 95       	ret

0000046e <EVENT_USB_Device_ConfigurationChanged>:
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <HID_Device_ConfigureEndpoints>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <CDC_Device_ConfigureEndpoints>
     47e:	e2 ee       	ldi	r30, 0xE2	; 226

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
					  UsageList[i - 1] = UsageList[i];
     484:	84 60       	ori	r24, 0x04	; 4
     486:	80 83       	st	Z, r24
     488:	08 95       	ret

0000048a <__vector_23>:
     48a:	1f 92       	push	r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	ff 93       	push	r31
     4a4:	80 91 ce 00 	lds	r24, 0x00CE
     4a8:	90 91 36 01 	lds	r25, 0x0136
     4ac:	93 30       	cpi	r25, 0x03	; 3
     4ae:	f9 f0       	breq	.+62     	; 0x4ee <__vector_23+0x64>
     4b0:	90 91 45 02 	lds	r25, 0x0245
     4b4:	94 30       	cpi	r25, 0x04	; 4
     4b6:	d9 f4       	brne	.+54     	; 0x4ee <__vector_23+0x64>
     4b8:	e7 e3       	ldi	r30, 0x37	; 55
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	a0 81       	ld	r26, Z
     4be:	b1 81       	ldd	r27, Z+1	; 0x01
     4c0:	8c 93       	st	X, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	91 83       	std	Z+1, r25	; 0x01
     4ca:	80 83       	st	Z, r24
     4cc:	26 81       	ldd	r18, Z+6	; 0x06
     4ce:	37 81       	ldd	r19, Z+7	; 0x07
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	82 17       	cp	r24, r18
     4d2:	93 07       	cpc	r25, r19
     4d4:	21 f4       	brne	.+8      	; 0x4de <__vector_23+0x54>
     4d6:	84 81       	ldd	r24, Z+4	; 0x04
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	95 81       	ldd	r25, Z+5	; 0x05
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
				break;
     4de:	2f b7       	in	r18, 0x3f	; 63
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	f8 94       	cli
     4e2:	82 85       	ldd	r24, Z+10	; 0x0a
     4e4:	93 85       	ldd	r25, Z+11	; 0x0b
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	93 87       	std	Z+11, r25	; 0x0b
     4ea:	82 87       	std	Z+10, r24	; 0x0a
     4ec:	2f bf       	out	0x3f, r18	; 63
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1

					if (UsageListSize)
     506:	18 95       	reti

00000508 <EVENT_USB_Device_ControlRequest>:
     508:	80 e1       	ldi	r24, 0x10	; 16
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <CDC_Device_ProcessControlRequest>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0c 94 a5 10 	jmp	0x214a	; 0x214a <HID_Device_ProcessControlRequest>

00000518 <EVENT_USB_Device_StartOfFrame>:
     518:	80 91 0e 01 	lds	r24, 0x010E
     51c:	90 91 0f 01 	lds	r25, 0x010F
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	29 f0       	breq	.+10     	; 0x52e <EVENT_USB_Device_StartOfFrame+0x16>
     524:	01 97       	sbiw	r24, 0x01	; 1

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	90 93 0f 01 	sts	0x010F, r25
						  UsageList[i - 1] = UsageList[i];
     52a:	80 93 0e 01 	sts	0x010E, r24
     52e:	08 95       	ret

00000530 <checkNHPControlAddressError>:
     530:	cf 93       	push	r28

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	df 93       	push	r29
     534:	00 d0       	rcall	.+0      	; 0x536 <checkNHPControlAddressError+0x6>
     536:	00 d0       	rcall	.+0      	; 0x538 <checkNHPControlAddressError+0x8>
     538:	00 d0       	rcall	.+0      	; 0x53a <checkNHPControlAddressError+0xa>
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	60 91 c5 01 	lds	r22, 0x01C5
     542:	66 23       	and	r22, r22
     544:	79 f0       	breq	.+30     	; 0x564 <checkNHPControlAddressError+0x34>
     546:	80 91 c7 01 	lds	r24, 0x01C7
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     54a:	81 11       	cpse	r24, r1
     54c:	0b c0       	rjmp	.+22     	; 0x564 <checkNHPControlAddressError+0x34>
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	71 60       	ori	r23, 0x01	; 1
     552:	ae 01       	movw	r20, r28
     554:	4f 5f       	subi	r20, 0xFF	; 255
     556:	5f 4f       	sbci	r21, 0xFF	; 255
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	c1 d6       	rcall	.+3458   	; 0x12de <NHPwriteChecksum>
     55c:	68 2f       	mov	r22, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	17 d2       	rcall	.+1070   	; 0x992 <writeToCDC>
     564:	77 d1       	rcall	.+750    	; 0x854 <flushHID>
     566:	10 92 c5 01 	sts	0x01C5, r1
     56a:	10 92 c7 01 	sts	0x01C7, r1
     56e:	10 92 c6 01 	sts	0x01C6, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     572:	26 96       	adiw	r28, 0x06	; 6
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	08 95       	ret

00000584 <checkNHPProtocol>:
     584:	cf 93       	push	r28

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	df 93       	push	r29
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	06 d6       	rcall	.+3084   	; 0x119c <NHPreadChecksum>
     590:	88 23       	and	r24, r24
     592:	09 f4       	brne	.+2      	; 0x596 <checkNHPProtocol+0x12>
     594:	5b c0       	rjmp	.+182    	; 0x64c <checkNHPProtocol+0xc8>
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	5d d1       	rcall	.+698    	; 0x854 <flushHID>
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	c9 f4       	brne	.+50     	; 0x5d2 <checkNHPProtocol+0x4e>
     5a0:	90 91 13 02 	lds	r25, 0x0213

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a4:	91 30       	cpi	r25, 0x01	; 1
     5a6:	a9 f4       	brne	.+42     	; 0x5d2 <checkNHPProtocol+0x4e>
     5a8:	c3 df       	rcall	.-122    	; 0x530 <checkNHPControlAddressError>
     5aa:	80 91 12 02 	lds	r24, 0x0212
     5ae:	80 93 c5 01 	sts	0x01C5, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	10 92 c7 01 	sts	0x01C7, r1
     5b6:	9f e3       	ldi	r25, 0x3F	; 63
     5b8:	e8 ec       	ldi	r30, 0xC8	; 200
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	df 01       	movw	r26, r30
     5be:	1d 92       	st	X+, r1
     5c0:	9a 95       	dec	r25
     5c2:	e9 f7       	brne	.-6      	; 0x5be <checkNHPProtocol+0x3a>
     5c4:	a0 d1       	rcall	.+832    	; 0x906 <getHIDReportLength>
     5c6:	80 93 c6 01 	sts	0x01C6, r24
     5ca:	81 11       	cpse	r24, r1
     5cc:	3b c0       	rjmp	.+118    	; 0x644 <checkNHPProtocol+0xc0>
     5ce:	b0 df       	rcall	.-160    	; 0x530 <checkNHPControlAddressError>
     5d0:	39 c0       	rjmp	.+114    	; 0x644 <checkNHPProtocol+0xc0>
     5d2:	90 91 c5 01 	lds	r25, 0x01C5
     5d6:	99 23       	and	r25, r25
     5d8:	79 f1       	breq	.+94     	; 0x638 <checkNHPProtocol+0xb4>
     5da:	60 91 c7 01 	lds	r22, 0x01C7
     5de:	46 2f       	mov	r20, r22
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9a 01       	movw	r18, r20
     5e6:	2e 5f       	subi	r18, 0xFE	; 254
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	35 95       	asr	r19
     5ec:	27 95       	ror	r18
     5ee:	2f 5f       	subi	r18, 0xFF	; 255
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	82 17       	cp	r24, r18
     5f4:	93 07       	cpc	r25, r19
     5f6:	01 f5       	brne	.+64     	; 0x638 <checkNHPProtocol+0xb4>
     5f8:	fa 01       	movw	r30, r20
					  return HID_PARSE_InsufficientReportItems;
     5fa:	e8 53       	subi	r30, 0x38	; 56
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	80 91 12 02 	lds	r24, 0x0212
     602:	80 83       	st	Z, r24
     604:	e6 2f       	mov	r30, r22
     606:	ef 5f       	subi	r30, 0xFF	; 255
     608:	e0 93 c7 01 	sts	0x01C7, r30
     60c:	80 91 c6 01 	lds	r24, 0x01C6
     610:	8e 17       	cp	r24, r30
     612:	49 f0       	breq	.+18     	; 0x626 <checkNHPProtocol+0xa2>
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	e8 53       	subi	r30, 0x38	; 56
     618:	fe 4f       	sbci	r31, 0xFE	; 254
     61a:	90 91 13 02 	lds	r25, 0x0213
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	90 83       	st	Z, r25
     620:	6e 5f       	subi	r22, 0xFE	; 254
     622:	60 93 c7 01 	sts	0x01C7, r22
     626:	90 91 c7 01 	lds	r25, 0x01C7
     62a:	89 13       	cpse	r24, r25
     62c:	0b c0       	rjmp	.+22     	; 0x644 <checkNHPProtocol+0xc0>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <HID_Device_USBTask>
     636:	06 c0       	rjmp	.+12     	; 0x644 <checkNHPProtocol+0xc0>
     638:	7b df       	rcall	.-266    	; 0x530 <checkNHPControlAddressError>
     63a:	60 91 1c 02 	lds	r22, 0x021C
     63e:	86 e1       	ldi	r24, 0x16	; 22
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	a7 d1       	rcall	.+846    	; 0x992 <writeToCDC>
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	ff c0       	rjmp	.+510    	; 0x84a <resetNHPbuffer>
     64c:	0f 90       	pop	r0
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <main>:
     654:	10 92 36 01 	sts	0x0136, r1
     658:	4a e0       	ldi	r20, 0x0A	; 10
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	0e 94 ed 12 	call	0x25da	; 0x25da <memset>
     668:	5c de       	rcall	.-840    	; 0x322 <SetupHardware>
     66a:	78 94       	sei
     66c:	e3 e0       	ldi	r30, 0x03	; 3
     66e:	fe 2e       	mov	r15, r30
     670:	07 e3       	ldi	r16, 0x37	; 55
     672:	11 e0       	ldi	r17, 0x01	; 1
     674:	91 de       	rcall	.-734    	; 0x398 <selectMode>
     676:	4f 9b       	sbis	0x09, 7	; 9
     678:	73 d1       	rcall	.+742    	; 0x960 <clearHIDReports>
     67a:	80 91 36 01 	lds	r24, 0x0136
					  ParserData->TotalReportItems++;
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	11 f4       	brne	.+4      	; 0x686 <main+0x32>
     682:	c0 d4       	rcall	.+2432   	; 0x1004 <avrisp>
     684:	8a c0       	rjmp	.+276    	; 0x79a <main+0x146>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	80 e1       	ldi	r24, 0x10	; 16
     688:	91 e0       	ldi	r25, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <CDC_Device_ReceiveByte>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	97 fd       	sbrc	r25, 7
     690:	09 c0       	rjmp	.+18     	; 0x6a4 <main+0x50>
     692:	5c 98       	cbi	0x0b, 4	; 11
     694:	f0 92 c4 01 	sts	0x01C4, r15
     698:	90 91 c8 00 	lds	r25, 0x00C8
     69c:	95 ff       	sbrs	r25, 5
     69e:	fc cf       	rjmp	.-8      	; 0x698 <main+0x44>
     6a0:	80 93 ce 00 	sts	0x00CE, r24
     6a4:	2f b7       	in	r18, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	80 91 41 01 	lds	r24, 0x0141
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6ac:	90 91 42 01 	lds	r25, 0x0142
     6b0:	2f bf       	out	0x3f, r18	; 63
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	19 f4       	brne	.+6      	; 0x6bc <main+0x68>
     6b6:	a8 99       	sbic	0x15, 0	; 21
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	48 c0       	rjmp	.+144    	; 0x74a <main+0xf6>
     6ba:	67 c0       	rjmp	.+206    	; 0x78a <main+0x136>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	5d 98       	cbi	0x0b, 5	; 11
     6be:	f0 92 c3 01 	sts	0x01C3, r15
     6c2:	20 91 11 01 	lds	r18, 0x0111
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	2f 70       	andi	r18, 0x0F	; 15
     6c8:	20 93 e9 00 	sts	0x00E9, r18
     6cc:	20 91 e8 00 	lds	r18, 0x00E8
     6d0:	20 ff       	sbrs	r18, 0
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	f1 cf       	rjmp	.-30     	; 0x6b6 <main+0x62>
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	10 f0       	brcs	.+4      	; 0x6de <main+0x8a>
     6da:	8f e3       	ldi	r24, 0x3F	; 63
     6dc:	90 e0       	ldi	r25, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	e8 2e       	mov	r14, r24
     6e0:	c0 e0       	ldi	r28, 0x00	; 0
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
     6e4:	2f c0       	rjmp	.+94     	; 0x744 <main+0xf0>
     6e6:	80 91 36 01 	lds	r24, 0x0136
     6ea:	81 30       	cpi	r24, 0x01	; 1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	61 f0       	breq	.+24     	; 0x706 <main+0xb2>
     6ee:	f8 01       	movw	r30, r16
     6f0:	a2 81       	ldd	r26, Z+2	; 0x02
     6f2:	b3 81       	ldd	r27, Z+3	; 0x03
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	8d 91       	ld	r24, X+
     6f6:	b3 83       	std	Z+3, r27	; 0x03

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	a2 83       	std	Z+2, r26	; 0x02
     6fa:	26 81       	ldd	r18, Z+6	; 0x06
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	37 81       	ldd	r19, Z+7	; 0x07
     6fe:	a2 17       	cp	r26, r18
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	b3 07       	cpc	r27, r19
     702:	89 f4       	brne	.+34     	; 0x726 <main+0xd2>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	0c c0       	rjmp	.+24     	; 0x71e <main+0xca>
     706:	e0 91 39 01 	lds	r30, 0x0139

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     70a:	f0 91 3a 01 	lds	r31, 0x013A
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70e:	60 81       	ld	r22, Z
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	80 e1       	ldi	r24, 0x10	; 16
     712:	91 e0       	ldi	r25, 0x01	; 1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <CDC_Device_SendByte>
     718:	88 23       	and	r24, r24
     71a:	49 f3       	breq	.-46     	; 0x6ee <main+0x9a>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	cc cf       	rjmp	.-104    	; 0x6b6 <main+0x62>
     71e:	24 81       	ldd	r18, Z+4	; 0x04
     720:	35 81       	ldd	r19, Z+5	; 0x05
     722:	33 83       	std	Z+3, r19	; 0x03
     724:	22 83       	std	Z+2, r18	; 0x02
     726:	9f b7       	in	r25, 0x3f	; 63
     728:	f8 94       	cli
     72a:	22 85       	ldd	r18, Z+10	; 0x0a
     72c:	33 85       	ldd	r19, Z+11	; 0x0b
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	31 09       	sbc	r19, r1
     732:	33 87       	std	Z+11, r19	; 0x0b
     734:	22 87       	std	Z+10, r18	; 0x0a
     736:	9f bf       	out	0x3f, r25	; 63
     738:	90 91 36 01 	lds	r25, 0x0136
     73c:	92 30       	cpi	r25, 0x02	; 2
     73e:	09 f4       	brne	.+2      	; 0x742 <main+0xee>
     740:	21 df       	rcall	.-446    	; 0x584 <checkNHPProtocol>
     742:	21 96       	adiw	r28, 0x01	; 1
     744:	ec 12       	cpse	r14, r28
     746:	cf cf       	rjmp	.-98     	; 0x6e6 <main+0x92>
     748:	b6 cf       	rjmp	.-148    	; 0x6b6 <main+0x62>
     74a:	a8 9a       	sbi	0x15, 0	; 21
     74c:	80 91 c3 01 	lds	r24, 0x01C3
					// Never send more than one bank size less one byte to the host at a time, so that we don't block
					// while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening
					uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

					/// Read bytes from the USART receive buffer into the USB IN endpoint */
					while (BytesToSend--)
     750:	88 23       	and	r24, r24
     752:	89 f0       	breq	.+34     	; 0x776 <main+0x122>
			}

			// Check if the led flush timer has expired
			if (TIFR0 & (1 << TOV0)){
				// reset the timer
				TIFR0 |= (1 << TOV0);
     754:	81 50       	subi	r24, 0x01	; 1

				// Turn off TX LED(s) once the TX pulse period has elapsed
				if (ram.PulseMSRemaining.TxLEDPulse && !(--ram.PulseMSRemaining.TxLEDPulse)){
     756:	80 93 c3 01 	sts	0x01C3, r24
     75a:	81 11       	cpse	r24, r1
     75c:	0c c0       	rjmp	.+24     	; 0x776 <main+0x122>
     75e:	80 91 36 01 	lds	r24, 0x0136
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	39 f4       	brne	.+14     	; 0x774 <main+0x120>
     766:	e4 de       	rcall	.-568    	; 0x530 <checkNHPControlAddressError>

					// if reading has timed out write the buffers down the serial
					if (ram.mode == MODE_HID){
     768:	60 91 1c 02 	lds	r22, 0x021C
     76c:	86 e1       	ldi	r24, 0x16	; 22
     76e:	92 e0       	ldi	r25, 0x02	; 2
						// check if previous reading was a valid Control Address and write it down
						checkNHPControlAddressError();
     770:	10 d1       	rcall	.+544    	; 0x992 <writeToCDC>
     772:	6b d0       	rcall	.+214    	; 0x84a <resetNHPbuffer>

						// write the rest of the cached NHP buffer down
						writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
     774:	5d 9a       	sbi	0x0b, 5	; 11
     776:	80 91 c4 01 	lds	r24, 0x01C4
     77a:	88 23       	and	r24, r24
     77c:	31 f0       	breq	.+12     	; 0x78a <main+0x136>
     77e:	81 50       	subi	r24, 0x01	; 1
						resetNHPbuffer();
     780:	80 93 c4 01 	sts	0x01C4, r24
		PORTD &= ~LEDMask;
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     784:	81 11       	cpse	r24, r1

					LEDs_TurnOffLEDs(LEDMASK_TX);
				}

				// Turn off RX LED(s) once the RX pulse period has elapsed
				if (ram.PulseMSRemaining.RxLEDPulse && !(--ram.PulseMSRemaining.RxLEDPulse))
     786:	01 c0       	rjmp	.+2      	; 0x78a <main+0x136>
     788:	5c 9a       	sbi	0x0b, 4	; 11
     78a:	80 91 36 01 	lds	r24, 0x0136
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	21 f4       	brne	.+8      	; 0x79a <main+0x146>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <HID_Device_USBTask>
					LEDs_TurnOffLEDs(LEDMASK_RX);
			}

			// get new reports from the PC side and try to send pending reports
			if (ram.mode == MODE_HID)
     79a:	80 e1       	ldi	r24, 0x10	; 16
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <CDC_Device_USBTask>
				HID_Device_USBTask(&Device_HID_Interface);
     7a2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <USB_USBTask>
     7a6:	66 cf       	rjmp	.-308    	; 0x674 <main+0x20>

000007a8 <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7a8:	29 2f       	mov	r18, r25
     7aa:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     7ac:	23 30       	cpi	r18, 0x03	; 3
     7ae:	31 05       	cpc	r19, r1
     7b0:	b1 f0       	breq	.+44     	; 0x7de <CALLBACK_USB_GetDescriptor+0x36>
     7b2:	4c f4       	brge	.+18     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x1e>
     7b4:	21 30       	cpi	r18, 0x01	; 1
     7b6:	31 05       	cpc	r19, r1
     7b8:	09 f4       	brne	.+2      	; 0x7bc <CALLBACK_USB_GetDescriptor+0x14>
     7ba:	39 c0       	rjmp	.+114    	; 0x82e <CALLBACK_USB_GetDescriptor+0x86>
     7bc:	22 30       	cpi	r18, 0x02	; 2
     7be:	31 05       	cpc	r19, r1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <CALLBACK_USB_GetDescriptor+0x1c>
     7c2:	3a c0       	rjmp	.+116    	; 0x838 <CALLBACK_USB_GetDescriptor+0x90>
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <CALLBACK_USB_GetDescriptor+0x2c>
     7c6:	21 32       	cpi	r18, 0x21	; 33
     7c8:	31 05       	cpc	r19, r1
     7ca:	39 f1       	breq	.+78     	; 0x81a <CALLBACK_USB_GetDescriptor+0x72>
     7cc:	22 32       	cpi	r18, 0x22	; 34
     7ce:	31 05       	cpc	r19, r1
     7d0:	49 f1       	breq	.+82     	; 0x824 <CALLBACK_USB_GetDescriptor+0x7c>
     7d2:	32 c0       	rjmp	.+100    	; 0x838 <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7d4:	ef e5       	ldi	r30, 0x5F	; 95
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7d8:	8e eb       	ldi	r24, 0xBE	; 190
     7da:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7dc:	31 c0       	rjmp	.+98     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7de:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 05       	cpc	r25, r1
     7e4:	61 f0       	breq	.+24     	; 0x7fe <CALLBACK_USB_GetDescriptor+0x56>
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	91 05       	cpc	r25, r1
     7ea:	81 f0       	breq	.+32     	; 0x80c <CALLBACK_USB_GetDescriptor+0x64>
     7ec:	89 2b       	or	r24, r25
     7ee:	21 f5       	brne	.+72     	; 0x838 <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7f0:	ea eb       	ldi	r30, 0xBA	; 186
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	e4 91       	lpm	r30, Z+
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     7f8:	8a eb       	ldi	r24, 0xBA	; 186
     7fa:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     7fc:	21 c0       	rjmp	.+66     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     7fe:	e6 ea       	ldi	r30, 0xA6	; 166
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	e4 91       	lpm	r30, Z+
     804:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     806:	86 ea       	ldi	r24, 0xA6	; 166
     808:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     80a:	1a c0       	rjmp	.+52     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     80c:	e4 e7       	ldi	r30, 0x74	; 116
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	e4 91       	lpm	r30, Z+
     812:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     814:	84 e7       	ldi	r24, 0x74	; 116
     816:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     818:	13 c0       	rjmp	.+38     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     81a:	e9 e0       	ldi	r30, 0x09	; 9
     81c:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     822:	0e c0       	rjmp	.+28     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     824:	e8 eb       	ldi	r30, 0xB8	; 184
     826:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     828:	8f e2       	ldi	r24, 0x2F	; 47
     82a:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     82c:	09 c0       	rjmp	.+18     	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     82e:	e2 e1       	ldi	r30, 0x12	; 18
     830:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     832:	8d e1       	ldi	r24, 0x1D	; 29
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	04 c0       	rjmp	.+8      	; 0x840 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     838:	e0 e0       	ldi	r30, 0x00	; 0
     83a:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     840:	da 01       	movw	r26, r20
     842:	8d 93       	st	X+, r24
     844:	9c 93       	st	X, r25
	return Size;
}
     846:	cf 01       	movw	r24, r30
     848:	08 95       	ret

0000084a <resetNHPbuffer>:
	},
};


void resetNHPbuffer(void){
	ram.NHP.readlength = 0;
     84a:	10 92 1c 02 	sts	0x021C, r1
	ram.NHP.mBlocks = 0;
     84e:	10 92 11 02 	sts	0x0211, r1
     852:	08 95       	ret

00000854 <flushHID>:
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     854:	04 c0       	rjmp	.+8      	; 0x85e <flushHID+0xa>
		HID_Device_USBTask(&Device_HID_Interface);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <HID_Device_USBTask>
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     85e:	80 91 c5 01 	lds	r24, 0x01C5
     862:	88 23       	and	r24, r24
     864:	31 f0       	breq	.+12     	; 0x872 <flushHID+0x1e>
     866:	90 91 c6 01 	lds	r25, 0x01C6
     86a:	80 91 c7 01 	lds	r24, 0x01C7
     86e:	98 17       	cp	r25, r24
     870:	91 f3       	breq	.-28     	; 0x856 <flushHID+0x2>
     872:	08 95       	ret

00000874 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	7b 01       	movw	r14, r22
     882:	c9 01       	movw	r24, r18
     884:	e8 01       	movw	r28, r16
	// only send report if there is actually a new report
	if (ram.HID.ID && ram.HID.length == ram.HID.recvlength){
     886:	e0 91 c5 01 	lds	r30, 0x01C5
     88a:	ee 23       	and	r30, r30
     88c:	29 f1       	breq	.+74     	; 0x8d8 <CALLBACK_HID_Device_CreateHIDReport+0x64>
     88e:	40 91 c6 01 	lds	r20, 0x01C6
     892:	20 91 c7 01 	lds	r18, 0x01C7
     896:	42 13       	cpse	r20, r18
     898:	1f c0       	rjmp	.+62     	; 0x8d8 <CALLBACK_HID_Device_CreateHIDReport+0x64>
		// set a general and specific flag that a report was made, ignore rawHID
		if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     89a:	e3 30       	cpi	r30, 0x03	; 3
     89c:	39 f0       	breq	.+14     	; 0x8ac <CALLBACK_HID_Device_CreateHIDReport+0x38>
			ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     89e:	51 e0       	ldi	r21, 0x01	; 1
     8a0:	50 93 07 02 	sts	0x0207, r21
			ram.HID.isEmpty[ram.HID.ID] = true;
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e9 5f       	subi	r30, 0xF9	; 249
     8a8:	fd 4f       	sbci	r31, 0xFD	; 253
     8aa:	50 83       	st	Z, r21
		}

		//write report and reset ID
		memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     8ac:	e8 ec       	ldi	r30, 0xC8	; 200
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	bf 01       	movw	r22, r30
     8b4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <memcpy>
		*ReportID = ram.HID.ID;
     8b8:	80 91 c5 01 	lds	r24, 0x01C5
     8bc:	f7 01       	movw	r30, r14
     8be:	80 83       	st	Z, r24
		*ReportSize = ram.HID.length;
     8c0:	80 91 c6 01 	lds	r24, 0x01C6
     8c4:	88 83       	st	Y, r24
     8c6:	19 82       	std	Y+1, r1	; 0x01
		ram.HID.ID = 0;
     8c8:	10 92 c5 01 	sts	0x01C5, r1
		ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     8cc:	10 92 c7 01 	sts	0x01C7, r1
		ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     8d0:	10 92 c6 01 	sts	0x01C6, r1

		// always return true, because we cannot compare with >1 report due to ram limit
		// this will forcewrite the report every time
		return true;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <CALLBACK_HID_Device_CreateHIDReport+0x66>
	}
	else return false;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	08 95       	ret

000008e8 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     8ee:	63 30       	cpi	r22, 0x03	; 3
     8f0:	39 f4       	brne	.+14     	; 0x900 <CALLBACK_HID_Device_ProcessHIDReport+0x18>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     8f2:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     8f4:	60 93 c4 01 	sts	0x01C4, r22

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     8f8:	b8 01       	movw	r22, r16
	}
}
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     8fe:	bd c5       	rjmp	.+2938   	; 0x147a <Serial_SendData>
     900:	1f 91       	pop	r17
	}
}
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <getHIDReportLength>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

uint8_t getHIDReportLength(uint8_t ID){
     906:	e0 91 c5 01 	lds	r30, 0x01C5
     90a:	e1 50       	subi	r30, 0x01	; 1
     90c:	e9 30       	cpi	r30, 0x09	; 9
     90e:	28 f4       	brcc	.+10     	; 0x91a <getHIDReportLength+0x14>
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e5 5d       	subi	r30, 0xD5	; 213
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	08 95       	ret
	// Get the length of the report
	switch (ram.HID.ID){
     91a:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     91c:	08 95       	ret

0000091e <clearHIDReport>:
		Serial_SendData(ReportData, ReportSize);
	}
}


void clearHIDReport(uint8_t ID){
     91e:	cf 93       	push	r28
     920:	c8 2f       	mov	r28, r24
	// RAW HID cannot be cleared
	if (ID == HID_REPORTID_RawKeyboardReport) return;
     922:	83 30       	cpi	r24, 0x03	; 3
     924:	d9 f0       	breq	.+54     	; 0x95c <clearHIDReport+0x3e>

	// we have a pending HID report, flush it first
	flushHID();
     926:	96 df       	rcall	.-212    	; 0x854 <flushHID>
     928:	8c 2f       	mov	r24, r28

	// get length of the report if its a valid report
	uint8_t length = getHIDReportLength(ID);
     92a:	ed df       	rcall	.-38     	; 0x906 <getHIDReportLength>
     92c:	88 23       	and	r24, r24
     92e:	b1 f0       	breq	.+44     	; 0x95c <clearHIDReport+0x3e>
	if (!length) return;
     930:	80 93 c7 01 	sts	0x01C7, r24

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
     934:	80 93 c6 01 	sts	0x01C6, r24
     938:	c0 93 c5 01 	sts	0x01C5, r28
	ram.HID.ID = ID;
     93c:	28 ec       	ldi	r18, 0xC8	; 200
     93e:	31 e0       	ldi	r19, 0x01	; 1
	memset(&ram.HID.buffer, 0x00, length);
     940:	48 2f       	mov	r20, r24
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	c9 01       	movw	r24, r18
     94a:	0e 94 ed 12 	call	0x25da	; 0x25da <memset>
     94e:	82 df       	rcall	.-252    	; 0x854 <flushHID>
     950:	ec 2f       	mov	r30, r28

	// flush HID
	flushHID();
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	e9 5f       	subi	r30, 0xF9	; 249

	// save new empty state
	ram.HID.isEmpty[ID] = true;
     956:	fd 4f       	sbci	r31, 0xFD	; 253
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	80 83       	st	Z, r24
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <clearHIDReports>:
	ram.NHP.readlength = 0;
	ram.NHP.mBlocks = 0;
}


void clearHIDReports(void){
     960:	1f 93       	push	r17
	// flush HID
	flushHID();

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
}


void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;
     966:	80 91 07 02 	lds	r24, 0x0207
     96a:	81 11       	cpse	r24, r1
     96c:	0e c0       	rjmp	.+28     	; 0x98a <clearHIDReports+0x2a>
     96e:	c8 e0       	ldi	r28, 0x08	; 8
     970:	d2 e0       	ldi	r29, 0x02	; 2
     972:	11 e0       	ldi	r17, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++){

		if (!ram.HID.isEmpty[i])
     974:	89 91       	ld	r24, Y+
     976:	81 11       	cpse	r24, r1
     978:	02 c0       	rjmp	.+4      	; 0x97e <clearHIDReports+0x1e>
			clearHIDReport(i);
     97a:	81 2f       	mov	r24, r17
     97c:	d0 df       	rcall	.-96     	; 0x91e <clearHIDReport>
     97e:	1f 5f       	subi	r17, 0xFF	; 255
     980:	1a 30       	cpi	r17, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++){
     982:	c1 f7       	brne	.-16     	; 0x974 <clearHIDReports+0x14>
     984:	81 e0       	ldi	r24, 0x01	; 1

		if (!ram.HID.isEmpty[i])
			clearHIDReport(i);
	}
	// clear the flag that >0 reports were set
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     986:	80 93 07 02 	sts	0x0207, r24
     98a:	df 91       	pop	r29
}
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	08 95       	ret

00000992 <writeToCDC>:
	} //end switch
	return 0;
}


void writeToCDC(uint8_t buffer[], uint8_t length){
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	1f 92       	push	r1
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	8c 01       	movw	r16, r24
	// refresh DTR state
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	69 83       	std	Y+1, r22	; 0x01
     9a8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <CDC_Device_USBTask>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ac:	80 91 11 01 	lds	r24, 0x0111
     9b0:	8f 70       	andi	r24, 0x0F	; 15
     9b2:	80 93 e9 00 	sts	0x00E9, r24
     9b6:	49 81       	ldd	r20, Y+1	; 0x01
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9b8:	80 91 e8 00 	lds	r24, 0x00E8

	// Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
	// until it completes as there is a chance nothing is listening and a lengthy timeout could occur
	Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);
	while (!Endpoint_IsINReady());
     9bc:	80 ff       	sbrs	r24, 0
     9be:	fc cf       	rjmp	.-8      	; 0x9b8 <writeToCDC+0x26>

	// Try to send the next bytes to the host, abort if DTR isnt set to not block serial reading
	bool CurrentDTRState = (VirtualSerial_CDC_Interface.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     9c0:	80 91 20 01 	lds	r24, 0x0120
	if (CurrentDTRState)
     9c4:	80 ff       	sbrs	r24, 0
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <writeToCDC+0x4c>
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	b8 01       	movw	r22, r16
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
	while (!Endpoint_IsINReady());

	// Try to send the next bytes to the host, abort if DTR isnt set to not block serial reading
	bool CurrentDTRState = (VirtualSerial_CDC_Interface.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
	if (CurrentDTRState)
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
     9da:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <CDC_Device_SendData>
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <LEDs_TurnOnLEDs>:
     9ea:	9b b1       	in	r25, 0x0b	; 11
     9ec:	80 95       	com	r24
     9ee:	89 23       	and	r24, r25
     9f0:	8b b9       	out	0x0b, r24	; 11
     9f2:	08 95       	ret

000009f4 <sendCDCbyte>:

}

void sendCDCbyte(uint8_t b){
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     9f4:	68 2f       	mov	r22, r24
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <CDC_Device_SendByte>
     9fe:	88 23       	and	r24, r24
     a00:	e9 f0       	breq	.+58     	; 0xa3c <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     a02:	80 e1       	ldi	r24, 0x10	; 16
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <CDC_Device_USBTask>
		USB_USBTask();
     a0a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     a0e:	80 e1       	ldi	r24, 0x10	; 16
     a10:	ec df       	rcall	.-40     	; 0x9ea <LEDs_TurnOnLEDs>
     a12:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a14:	81 ee       	ldi	r24, 0xE1	; 225
     a16:	94 e0       	ldi	r25, 0x04	; 4
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <sendCDCbyte+0x24>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <sendCDCbyte+0x2e>
     a22:	00 00       	nop
     a24:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     a26:	e1 df       	rcall	.-62     	; 0x9ea <LEDs_TurnOnLEDs>
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	81 ee       	ldi	r24, 0xE1	; 225
     a2c:	94 e0       	ldi	r25, 0x04	; 4
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <sendCDCbyte+0x3a>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <sendCDCbyte+0x44>
     a38:	00 00       	nop
     a3a:	e9 cf       	rjmp	.-46     	; 0xa0e <sendCDCbyte+0x1a>
     a3c:	08 95       	ret

00000a3e <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     a3e:	80 e1       	ldi	r24, 0x10	; 16
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     a46:	97 fd       	sbrc	r25, 7
     a48:	fa cf       	rjmp	.-12     	; 0xa3e <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     a4a:	08 95       	ret

00000a4c <fill>:

void fill(int n) {
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	7c 01       	movw	r14, r24
     a5a:	01 e4       	ldi	r16, 0x41	; 65
     a5c:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     a5e:	c0 e0       	ldi	r28, 0x00	; 0
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <fill+0x22>
		ram.isp.buff[x] = getch();
     a64:	ec df       	rcall	.-40     	; 0xa3e <getch>
     a66:	f8 01       	movw	r30, r16
     a68:	81 93       	st	Z+, r24
     a6a:	8f 01       	movw	r16, r30
     a6c:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     a6e:	ce 15       	cp	r28, r14
     a70:	df 05       	cpc	r29, r15
     a72:	c4 f3       	brlt	.-16     	; 0xa64 <fill+0x18>
     a74:	df 91       	pop	r29
		ram.isp.buff[x] = getch();
}
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     a82:	90 91 4d 01 	lds	r25, 0x014D
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	20 91 4e 01 	lds	r18, 0x014E
     a8c:	82 0f       	add	r24, r18
     a8e:	91 1d       	adc	r25, r1
     a90:	90 93 3e 01 	sts	0x013E, r25
     a94:	80 93 3d 01 	sts	0x013D, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.isp.buff[12]);
	ram.isp.param.eepromsize = beget16(&ram.isp.buff[14]);
     a98:	90 91 4f 01 	lds	r25, 0x014F
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	20 91 50 01 	lds	r18, 0x0150
     aa2:	82 0f       	add	r24, r18
     aa4:	91 1d       	adc	r25, r1
     aa6:	90 93 40 01 	sts	0x0140, r25
     aaa:	80 93 3f 01 	sts	0x013F, r24
     aae:	08 95       	ret

00000ab0 <breply>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void breply(uint8_t b) {
     ab0:	cf 93       	push	r28
     ab2:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     ab4:	c4 df       	rcall	.-120    	; 0xa3e <getch>
     ab6:	80 32       	cpi	r24, 0x20	; 32
     ab8:	39 f4       	brne	.+14     	; 0xac8 <breply+0x18>
     aba:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     abc:	9b df       	rcall	.-202    	; 0x9f4 <sendCDCbyte>
     abe:	8c 2f       	mov	r24, r28
     ac0:	99 df       	rcall	.-206    	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(b);
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	cf 91       	pop	r28
     ac6:	96 cf       	rjmp	.-212    	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     ac8:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     aca:	94 df       	rcall	.-216    	; 0x9f4 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     acc:	80 91 37 01 	lds	r24, 0x0137
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     ad0:	90 91 38 01 	lds	r25, 0x0138
     ad4:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     ad6:	90 93 38 01 	sts	0x0138, r25
     ada:	80 93 37 01 	sts	0x0137, r24
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <get_parameters>:
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.isp.buff[x] = getch();
}

void get_parameters(uint8_t c) {
     ae2:	81 38       	cpi	r24, 0x81	; 129
     ae4:	59 f0       	breq	.+22     	; 0xafc <get_parameters+0x1a>
     ae6:	18 f4       	brcc	.+6      	; 0xaee <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     ae8:	80 38       	cpi	r24, 0x80	; 128
     aea:	71 f4       	brne	.+28     	; 0xb08 <get_parameters+0x26>
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <get_parameters+0x16>
     aee:	82 38       	cpi	r24, 0x82	; 130
     af0:	39 f0       	breq	.+14     	; 0xb00 <get_parameters+0x1e>
     af2:	83 39       	cpi	r24, 0x93	; 147
     af4:	49 f4       	brne	.+18     	; 0xb08 <get_parameters+0x26>
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <get_parameters+0x22>
}

void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	07 c0       	rjmp	.+14     	; 0xb0a <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     b00:	82 e1       	ldi	r24, 0x12	; 18
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     b04:	83 e5       	ldi	r24, 0x53	; 83
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <get_parameters+0x28>
		break;
	default:
		breply(0);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	d2 cf       	rjmp	.-92     	; 0xab0 <breply>

00000b0c <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     b0c:	98 df       	rcall	.-208    	; 0xa3e <getch>
     b0e:	80 32       	cpi	r24, 0x20	; 32
     b10:	21 f4       	brne	.+8      	; 0xb1a <replyOK+0xe>
     b12:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     b14:	6f df       	rcall	.-290    	; 0x9f4 <sendCDCbyte>
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	6d cf       	rjmp	.-294    	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     b1a:	80 e2       	ldi	r24, 0x20	; 32
     b1c:	66 df       	rcall	.-308    	; 0x9ea <LEDs_TurnOnLEDs>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     b20:	80 e7       	ldi	r24, 0x70	; 112
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <replyOK+0x18>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <replyOK+0x22>
     b2e:	00 00       	nop
     b30:	5d 9a       	sbi	0x0b, 5	; 11
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	80 e7       	ldi	r24, 0x70	; 112
     b36:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	80 40       	sbci	r24, 0x00	; 0
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <replyOK+0x2c>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <replyOK+0x36>
     b42:	00 00       	nop
     b44:	80 e2       	ldi	r24, 0x20	; 32
     b46:	51 df       	rcall	.-350    	; 0x9ea <LEDs_TurnOnLEDs>
     b48:	2f ef       	ldi	r18, 0xFF	; 255
     b4a:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	21 50       	subi	r18, 0x01	; 1
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	90 40       	sbci	r25, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <replyOK+0x42>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <replyOK+0x4c>
     b58:	00 00       	nop
     b5a:	5d 9a       	sbi	0x0b, 5	; 11
     b5c:	85 e1       	ldi	r24, 0x15	; 21
     b5e:	4a df       	rcall	.-364    	; 0x9f4 <sendCDCbyte>
     b60:	80 91 37 01 	lds	r24, 0x0137
     b64:	90 91 38 01 	lds	r25, 0x0138
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	90 93 38 01 	sts	0x0138, r25
		ram.isp.error++;
     b6e:	80 93 37 01 	sts	0x0137, r24
     b72:	08 95       	ret

00000b74 <spi_init>:
	DDRB |= (1 << AVR_MOSI); // OUTPUT
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = 1;
}

void spi_init(void) {
     b74:	83 e5       	ldi	r24, 0x53	; 83
     b76:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     b78:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     b7a:	8e b5       	in	r24, 0x2e	; 46
     b7c:	08 95       	ret

00000b7e <spi_wait>:
	sei();
#endif
	return reply;
}

void spi_wait(void) {
     b7e:	0d b4       	in	r0, 0x2d	; 45
     b80:	07 fe       	sbrs	r0, 7
     b82:	fd cf       	rjmp	.-6      	; 0xb7e <spi_wait>
	do {
	} while (!(SPSR & (1 << SPIF)));
}
     b84:	08 95       	ret

00000b86 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     b86:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     b88:	fa df       	rcall	.-12     	; 0xb7e <spi_wait>
     b8a:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     b8c:	08 95       	ret

00000b8e <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <spi_transaction+0x6>
     b94:	1f 92       	push	r1
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     b9a:	2b 83       	std	Y+3, r18	; 0x03
     b9c:	4a 83       	std	Y+2, r20	; 0x02
     b9e:	69 83       	std	Y+1, r22	; 0x01
     ba0:	f2 df       	rcall	.-28     	; 0xb86 <spi_send>
     ba2:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     ba4:	86 2f       	mov	r24, r22
     ba6:	ef df       	rcall	.-34     	; 0xb86 <spi_send>
     ba8:	4a 81       	ldd	r20, Y+2	; 0x02
     baa:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     bac:	ec df       	rcall	.-40     	; 0xb86 <spi_send>
     bae:	2b 81       	ldd	r18, Y+3	; 0x03
     bb0:	82 2f       	mov	r24, r18
     bb2:	0f 90       	pop	r0
	return spi_send(d);
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	e4 cf       	rjmp	.-56     	; 0xb86 <spi_send>

00000bbe <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     bbe:	da df       	rcall	.-76     	; 0xb74 <spi_init>
     bc0:	24 9a       	sbi	0x04, 4	; 4
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     bc2:	2c 9a       	sbi	0x05, 4	; 5

void start_pmode(void) {
	spi_init();
	// following delays may not work on all targets...
	DDRB |= (1 << AVR_SS); // OUTPUT
	PORTB |= (1 << AVR_SS); // HIGH
     bc4:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << AVR_SCK); // OUTPUT
     bc6:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1 << AVR_SCK); // LOW
     bc8:	2f ef       	ldi	r18, 0xFF	; 255
     bca:	80 e7       	ldi	r24, 0x70	; 112
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <start_pmode+0x10>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <start_pmode+0x1a>
     bd8:	00 00       	nop
     bda:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);
	PORTB &= ~(1 << AVR_SS); // LOW
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	80 e7       	ldi	r24, 0x70	; 112
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <start_pmode+0x24>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <start_pmode+0x2e>
     bec:	00 00       	nop
     bee:	23 98       	cbi	0x04, 3	; 4
	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	DDRB &= ~(1 << AVR_MISO); // INPUT
     bf0:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << AVR_MOSI); // OUTPUT
     bf2:	20 e0       	ldi	r18, 0x00	; 0
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	63 e5       	ldi	r22, 0x53	; 83
     bf8:	8c ea       	ldi	r24, 0xAC	; 172
     bfa:	c9 df       	rcall	.-110    	; 0xb8e <spi_transaction>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
	ram.isp.pmode = 1;
     c00:	90 93 3a 01 	sts	0x013A, r25
     c04:	80 93 39 01 	sts	0x0139, r24
     c08:	08 95       	ret

00000c0a <flash_read>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t flash_read(uint8_t hilo, int addr) {
     c0a:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     c0c:	88 0f       	add	r24, r24
     c0e:	88 0f       	add	r24, r24
     c10:	88 0f       	add	r24, r24
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	67 2f       	mov	r22, r23
     c16:	80 5e       	subi	r24, 0xE0	; 224
     c18:	ba cf       	rjmp	.-140    	; 0xb8e <spi_transaction>

00000c1a <flash_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     c24:	c0 e0       	ldi	r28, 0x00	; 0
     c26:	d0 e0       	ldi	r29, 0x00	; 0
     c28:	19 c0       	rjmp	.+50     	; 0xc5c <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     c2a:	60 91 3b 01 	lds	r22, 0x013B
     c2e:	70 91 3c 01 	lds	r23, 0x013C
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	ea df       	rcall	.-44     	; 0xc0a <flash_read>
     c36:	de de       	rcall	.-580    	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(low);
     c38:	60 91 3b 01 	lds	r22, 0x013B
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     c3c:	70 91 3c 01 	lds	r23, 0x013C
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	e3 df       	rcall	.-58     	; 0xc0a <flash_read>
     c44:	d7 de       	rcall	.-594    	; 0x9f4 <sendCDCbyte>
     c46:	20 91 3b 01 	lds	r18, 0x013B
		sendCDCbyte(high);
     c4a:	30 91 3c 01 	lds	r19, 0x013C
		ram.isp._addr++;
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	30 93 3c 01 	sts	0x013C, r19
     c56:	20 93 3b 01 	sts	0x013B, r18
     c5a:	22 96       	adiw	r28, 0x02	; 2
     c5c:	c0 17       	cp	r28, r16
     c5e:	d1 07       	cpc	r29, r17
     c60:	24 f3       	brlt	.-56     	; 0xc2a <flash_read_page+0x10>
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     c62:	80 e1       	ldi	r24, 0x10	; 16
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <universal>:

void universal(void) {
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	ec de       	rcall	.-552    	; 0xa4c <fill>
     c74:	20 91 44 01 	lds	r18, 0x0144
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.isp.buff[0], ram.isp.buff[1], ram.isp.buff[2], ram.isp.buff[3]);
     c78:	40 91 43 01 	lds	r20, 0x0143
     c7c:	60 91 42 01 	lds	r22, 0x0142
     c80:	80 91 41 01 	lds	r24, 0x0141
     c84:	84 df       	rcall	.-248    	; 0xb8e <spi_transaction>
     c86:	14 cf       	rjmp	.-472    	; 0xab0 <breply>

00000c88 <read_signature>:
	breply(ch);
}

void read_signature(void) {
     c88:	da de       	rcall	.-588    	; 0xa3e <getch>
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.isp.buff[0], ram.isp.buff[1], ram.isp.buff[2], ram.isp.buff[3]);
	breply(ch);
     c8a:	80 32       	cpi	r24, 0x20	; 32
     c8c:	59 f0       	breq	.+22     	; 0xca4 <read_signature+0x1c>
     c8e:	80 91 37 01 	lds	r24, 0x0137
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     c92:	90 91 38 01 	lds	r25, 0x0138
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	90 93 38 01 	sts	0x0138, r25
     c9c:	80 93 37 01 	sts	0x0137, r24
     ca0:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     ca2:	15 c0       	rjmp	.+42     	; 0xcce <read_signature+0x46>
     ca4:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     ca6:	a6 de       	rcall	.-692    	; 0x9f4 <sendCDCbyte>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	80 e3       	ldi	r24, 0x30	; 48
     cb0:	6e df       	rcall	.-292    	; 0xb8e <spi_transaction>
     cb2:	a0 de       	rcall	.-704    	; 0x9f4 <sendCDCbyte>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     cbc:	68 df       	rcall	.-304    	; 0xb8e <spi_transaction>
     cbe:	9a de       	rcall	.-716    	; 0x9f4 <sendCDCbyte>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	42 e0       	ldi	r20, 0x02	; 2
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     cc8:	62 df       	rcall	.-316    	; 0xb8e <spi_transaction>
     cca:	94 de       	rcall	.-728    	; 0x9f4 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     ccc:	80 e1       	ldi	r24, 0x10	; 16
     cce:	92 ce       	rjmp	.-732    	; 0x9f4 <sendCDCbyte>

00000cd0 <end_pmode>:
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void end_pmode(void) {
     cd0:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     cd2:	22 98       	cbi	0x04, 2	; 4

	// Hardwaresetup to turn off the HID function with shorting the MOSI pin with GND next to it
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP
     cd4:	22 9a       	sbi	0x04, 2	; 4

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
     cd6:	21 98       	cbi	0x04, 1	; 4
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     cd8:	24 98       	cbi	0x04, 4	; 4
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SS); // INPUT
	ram.isp.pmode = 0;
     cda:	10 92 3a 01 	sts	0x013A, r1
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
     cde:	10 92 39 01 	sts	0x0139, r1
     ce2:	08 95       	ret

00000ce4 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	d8 2f       	mov	r29, r24
     cf6:	c9 2f       	mov	r28, r25
     cf8:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     cfa:	cb 01       	movw	r24, r22
     cfc:	a7 de       	rcall	.-690    	; 0xa4c <fill>
     cfe:	5d 9a       	sbi	0x0b, 5	; 11
     d00:	81 e4       	ldi	r24, 0x41	; 65
     d02:	c8 2e       	mov	r12, r24
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	d8 2e       	mov	r13, r24
     d08:	0d 2f       	mov	r16, r29
     d0a:	1c 2f       	mov	r17, r28
     d0c:	e8 01       	movw	r28, r16
     d0e:	11 c0       	rjmp	.+34     	; 0xd32 <write_eeprom_chunk+0x4e>
     d10:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.isp.buff[x]);
     d12:	21 91       	ld	r18, Z+
     d14:	6f 01       	movw	r12, r30
     d16:	4c 2f       	mov	r20, r28
     d18:	6d 2f       	mov	r22, r29
     d1a:	80 ec       	ldi	r24, 0xC0	; 192
     d1c:	38 df       	rcall	.-400    	; 0xb8e <spi_transaction>
     d1e:	ff e7       	ldi	r31, 0x7F	; 127
     d20:	22 e3       	ldi	r18, 0x32	; 50
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	f1 50       	subi	r31, 0x01	; 1
     d26:	20 40       	sbci	r18, 0x00	; 0
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <write_eeprom_chunk+0x40>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <write_eeprom_chunk+0x4a>
     d2e:	00 00       	nop
     d30:	21 96       	adiw	r28, 0x01	; 1
     d32:	ce 01       	movw	r24, r28
     d34:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     d36:	91 0b       	sbc	r25, r17
     d38:	8e 15       	cp	r24, r14
     d3a:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
     d3c:	4c f3       	brlt	.-46     	; 0xd10 <write_eeprom_chunk+0x2c>
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	54 de       	rcall	.-856    	; 0x9ea <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.isp.buff[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
	return STK_OK;
}
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <write_eeprom>:
	}
}


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d5e:	c0 91 3b 01 	lds	r28, 0x013B
     d62:	d0 91 3c 01 	lds	r29, 0x013C
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
     d66:	20 91 3f 01 	lds	r18, 0x013F
     d6a:	30 91 40 01 	lds	r19, 0x0140
     d6e:	28 17       	cp	r18, r24
     d70:	39 07       	cpc	r19, r25
     d72:	24 f0       	brlt	.+8      	; 0xd7c <write_eeprom+0x26>


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d74:	cc 0f       	add	r28, r28
     d76:	dd 1f       	adc	r29, r29
     d78:	8c 01       	movw	r16, r24
     d7a:	12 c0       	rjmp	.+36     	; 0xda0 <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
     d7c:	80 91 37 01 	lds	r24, 0x0137
     d80:	90 91 38 01 	lds	r25, 0x0138
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	90 93 38 01 	sts	0x0138, r25
     d8a:	80 93 37 01 	sts	0x0137, r24
		return STK_FAILED;
     d8e:	81 e1       	ldi	r24, 0x11	; 17
     d90:	0e c0       	rjmp	.+28     	; 0xdae <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
     d92:	60 e2       	ldi	r22, 0x20	; 32
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	a5 df       	rcall	.-182    	; 0xce4 <write_eeprom_chunk>
     d9a:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
     d9c:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
     d9e:	11 09       	sbc	r17, r1
     da0:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
     da2:	11 05       	cpc	r17, r1
     da4:	b4 f7       	brge	.-20     	; 0xd92 <write_eeprom+0x3c>
     da6:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
     da8:	ce 01       	movw	r24, r28
     daa:	9c df       	rcall	.-200    	; 0xce4 <write_eeprom_chunk>
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	df 91       	pop	r29
	return STK_OK;
     db0:	cf 91       	pop	r28
}
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <eeprom_read_page>:
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     dc6:	00 91 3b 01 	lds	r16, 0x013B
     dca:	10 91 3c 01 	lds	r17, 0x013C
     dce:	00 0f       	add	r16, r16
     dd0:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     dd2:	e8 01       	movw	r28, r16
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     dd6:	2f ef       	ldi	r18, 0xFF	; 255
     dd8:	4c 2f       	mov	r20, r28
     dda:	6d 2f       	mov	r22, r29
     ddc:	80 ea       	ldi	r24, 0xA0	; 160
     dde:	d7 de       	rcall	.-594    	; 0xb8e <spi_transaction>
     de0:	09 de       	rcall	.-1006   	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(ee);
     de2:	21 96       	adiw	r28, 0x01	; 1
     de4:	ce 01       	movw	r24, r28
     de6:	80 1b       	sub	r24, r16
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     de8:	91 0b       	sbc	r25, r17
     dea:	8e 15       	cp	r24, r14
     dec:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     dee:	9c f3       	brlt	.-26     	; 0xdd6 <eeprom_read_page+0x1e>
     df0:	80 e1       	ldi	r24, 0x10	; 16
     df2:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	08 95       	ret

00000e00 <read_page>:
	//LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     e06:	1b de       	rcall	.-970    	; 0xa3e <getch>
     e08:	d8 2f       	mov	r29, r24
     e0a:	19 de       	rcall	.-974    	; 0xa3e <getch>
	length += getch();
     e0c:	c8 2f       	mov	r28, r24
     e0e:	17 de       	rcall	.-978    	; 0xa3e <getch>
     e10:	18 2f       	mov	r17, r24
	char memtype = getch();
     e12:	15 de       	rcall	.-982    	; 0xa3e <getch>
     e14:	80 32       	cpi	r24, 0x20	; 32
     e16:	59 f0       	breq	.+22     	; 0xe2e <read_page+0x2e>
	if (CRC_EOP != getch()) {
     e18:	80 91 37 01 	lds	r24, 0x0137
     e1c:	90 91 38 01 	lds	r25, 0x0138
		ram.isp.error++;
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	90 93 38 01 	sts	0x0138, r25
     e26:	80 93 37 01 	sts	0x0137, r24
     e2a:	85 e1       	ldi	r24, 0x15	; 21
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <read_page+0x54>
     e2e:	3d 2f       	mov	r19, r29
     e30:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     e32:	c9 01       	movw	r24, r18
     e34:	8c 0f       	add	r24, r28
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     e36:	91 1d       	adc	r25, r1
     e38:	ec 01       	movw	r28, r24
	length += getch();
     e3a:	84 e1       	ldi	r24, 0x14	; 20
     e3c:	db dd       	rcall	.-1098   	; 0x9f4 <sendCDCbyte>
     e3e:	16 34       	cpi	r17, 0x46	; 70
     e40:	19 f4       	brne	.+6      	; 0xe48 <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e42:	ce 01       	movw	r24, r28
     e44:	ea de       	rcall	.-556    	; 0xc1a <flash_read_page>
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
     e48:	15 34       	cpi	r17, 0x45	; 69
     e4a:	19 f4       	brne	.+6      	; 0xe52 <read_page+0x52>
     e4c:	ce 01       	movw	r24, r28
     e4e:	b4 df       	rcall	.-152    	; 0xdb8 <eeprom_read_page>
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <read_page+0x54>
     e52:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	cc cd       	rjmp	.-1128   	; 0x9f4 <sendCDCbyte>

00000e5c <commit>:
	}
	commit(page);
	return STK_OK;
}

void commit(int addr) {
     e5c:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
     e5e:	20 e0       	ldi	r18, 0x00	; 0
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
     e60:	48 2f       	mov	r20, r24
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
     e62:	69 2f       	mov	r22, r25
     e64:	8c e4       	ldi	r24, 0x4C	; 76
     e66:	93 de       	rcall	.-730    	; 0xb8e <spi_transaction>
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
     e68:	2f ef       	ldi	r18, 0xFF	; 255
     e6a:	86 e7       	ldi	r24, 0x76	; 118
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	80 40       	sbci	r24, 0x00	; 0
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <commit+0x12>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <commit+0x1c>
     e78:	00 00       	nop
     e7a:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
     e7c:	b6 cd       	rjmp	.-1172   	; 0x9ea <LEDs_TurnOnLEDs>

00000e7e <current_page>:
}

int current_page(void) {
     e7e:	80 91 3d 01 	lds	r24, 0x013D
     e82:	90 91 3e 01 	lds	r25, 0x013E
     e86:	20 91 3b 01 	lds	r18, 0x013B
     e8a:	30 91 3c 01 	lds	r19, 0x013C
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	91 05       	cpc	r25, r1
     e92:	11 f4       	brne	.+4      	; 0xe98 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     e94:	20 7f       	andi	r18, 0xF0	; 240
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     e98:	80 34       	cpi	r24, 0x40	; 64
     e9a:	91 05       	cpc	r25, r1
     e9c:	11 f4       	brne	.+4      	; 0xea2 <current_page+0x24>
     e9e:	20 7e       	andi	r18, 0xE0	; 224
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     ea2:	80 38       	cpi	r24, 0x80	; 128
     ea4:	91 05       	cpc	r25, r1
     ea6:	11 f4       	brne	.+4      	; 0xeac <current_page+0x2e>
     ea8:	20 7c       	andi	r18, 0xC0	; 192
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     eac:	81 15       	cp	r24, r1
     eae:	91 40       	sbci	r25, 0x01	; 1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <current_page+0x36>
     eb2:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     eb4:	c9 01       	movw	r24, r18
     eb6:	08 95       	ret

00000eb8 <flash>:

void flash(uint8_t hilo, int addr, uint8_t data) {
     eb8:	96 2f       	mov	r25, r22
     eba:	67 2f       	mov	r22, r23
     ebc:	24 2f       	mov	r18, r20
	spi_transaction(0x40 + 8 * hilo,
     ebe:	88 0f       	add	r24, r24
     ec0:	88 0f       	add	r24, r24
     ec2:	88 0f       	add	r24, r24
     ec4:	49 2f       	mov	r20, r25
     ec6:	80 5c       	subi	r24, 0xC0	; 192
     ec8:	62 ce       	rjmp	.-828    	; 0xb8e <spi_transaction>

00000eca <write_flash_pages>:
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	6c 01       	movw	r12, r24
	int x = 0;
	int page = current_page();
     edc:	d0 df       	rcall	.-96     	; 0xe7e <current_page>
     ede:	8c 01       	movw	r16, r24
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
	int x = 0;
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
     ee4:	29 c0       	rjmp	.+82     	; 0xf38 <write_flash_pages+0x6e>
	int page = current_page();
	while (x < length) {
     ee6:	cb df       	rcall	.-106    	; 0xe7e <current_page>
		if (page != current_page()) {
     ee8:	08 17       	cp	r16, r24
     eea:	19 07       	cpc	r17, r25
     eec:	21 f0       	breq	.+8      	; 0xef6 <write_flash_pages+0x2c>
     eee:	c8 01       	movw	r24, r16
     ef0:	b5 df       	rcall	.-150    	; 0xe5c <commit>
			commit(page);
     ef2:	c5 df       	rcall	.-118    	; 0xe7e <current_page>
     ef4:	8c 01       	movw	r16, r24
     ef6:	46 e3       	ldi	r20, 0x36	; 54
			page = current_page();
     ef8:	e4 2e       	mov	r14, r20
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	f4 2e       	mov	r15, r20
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     efe:	ec 0e       	add	r14, r28
     f00:	fd 1e       	adc	r15, r29
     f02:	60 91 3b 01 	lds	r22, 0x013B
     f06:	70 91 3c 01 	lds	r23, 0x013C
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.isp.buff[x++]);
     f0a:	f7 01       	movw	r30, r14
     f0c:	43 85       	ldd	r20, Z+11	; 0x0b
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	d3 df       	rcall	.-90     	; 0xeb8 <flash>
     f12:	22 96       	adiw	r28, 0x02	; 2
     f14:	60 91 3b 01 	lds	r22, 0x013B
     f18:	70 91 3c 01 	lds	r23, 0x013C
		flash(HIGH, ram.isp._addr, ram.isp.buff[x++]);
     f1c:	f7 01       	movw	r30, r14
     f1e:	44 85       	ldd	r20, Z+12	; 0x0c
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	ca df       	rcall	.-108    	; 0xeb8 <flash>
     f24:	20 91 3b 01 	lds	r18, 0x013B
     f28:	30 91 3c 01 	lds	r19, 0x013C
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
		ram.isp._addr++;
     f30:	30 93 3c 01 	sts	0x013C, r19
     f34:	20 93 3b 01 	sts	0x013B, r18
     f38:	cc 15       	cp	r28, r12
     f3a:	dd 05       	cpc	r29, r13
     f3c:	a4 f2       	brlt	.-88     	; 0xee6 <write_flash_pages+0x1c>
     f3e:	c8 01       	movw	r24, r16
     f40:	8d df       	rcall	.-230    	; 0xe5c <commit>
     f42:	80 e1       	ldi	r24, 0x10	; 16
}

uint8_t write_flash_pages(int length) {
	int x = 0;
	int page = current_page();
	while (x < length) {
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
		}
		flash(LOW, ram.isp._addr, ram.isp.buff[x++]);
		flash(HIGH, ram.isp._addr, ram.isp.buff[x++]);
		ram.isp._addr++;
	}
	commit(page);
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
	return STK_OK;
}
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	08 95       	ret

00000f56 <write_flash>:
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}

void write_flash(int length) {
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
	// TODO compare with ada <--
	fill(length);
     f5c:	77 dd       	rcall	.-1298   	; 0xa4c <fill>
     f5e:	6f dd       	rcall	.-1314   	; 0xa3e <getch>
	if (CRC_EOP == getch()) {
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	29 f4       	brne	.+10     	; 0xf6e <write_flash+0x18>
     f64:	84 e1       	ldi	r24, 0x14	; 20
     f66:	46 dd       	rcall	.-1396   	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(STK_INSYNC);
     f68:	ce 01       	movw	r24, r28
     f6a:	af df       	rcall	.-162    	; 0xeca <write_flash_pages>
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <write_flash+0x2c>
		sendCDCbyte(write_flash_pages(length));
     f6e:	80 91 37 01 	lds	r24, 0x0137
     f72:	90 91 38 01 	lds	r25, 0x0138
	}
	else {
		ram.isp.error++;
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	90 93 38 01 	sts	0x0138, r25
     f7c:	80 93 37 01 	sts	0x0137, r24
     f80:	85 e1       	ldi	r24, 0x15	; 21
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	36 cd       	rjmp	.-1428   	; 0x9f4 <sendCDCbyte>

00000f88 <program_page>:
		sendCDCbyte(STK_NOSYNC);
     f88:	cf 93       	push	r28
	}
}
     f8a:	df 93       	push	r29
	} while (!(SPSR & (1 << SPIF)));
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f8c:	58 dd       	rcall	.-1360   	; 0xa3e <getch>
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(write_flash_pages(length));
	}
	else {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
     f8e:	d8 2f       	mov	r29, r24
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	c8 2f       	mov	r28, r24
     f94:	54 dd       	rcall	.-1368   	; 0xa3e <getch>
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
	length += getch();
     f96:	c8 0f       	add	r28, r24
     f98:	d1 1d       	adc	r29, r1
     f9a:	c1 30       	cpi	r28, 0x01	; 1
     f9c:	81 e0       	ldi	r24, 0x01	; 1

	// added from ada <--
	if (length > 256) {
     f9e:	d8 07       	cpc	r29, r24
     fa0:	64 f0       	brlt	.+24     	; 0xfba <program_page+0x32>
     fa2:	81 e1       	ldi	r24, 0x11	; 17
     fa4:	27 dd       	rcall	.-1458   	; 0x9f4 <sendCDCbyte>
		sendCDCbyte(STK_FAILED);
     fa6:	80 91 37 01 	lds	r24, 0x0137
     faa:	90 91 38 01 	lds	r25, 0x0138
		ram.isp.error++;
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	90 93 38 01 	sts	0x0138, r25
     fb4:	80 93 37 01 	sts	0x0137, r24
     fb8:	22 c0       	rjmp	.+68     	; 0xffe <program_page+0x76>
     fba:	41 dd       	rcall	.-1406   	; 0xa3e <getch>
     fbc:	86 34       	cpi	r24, 0x46	; 70
		return;
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <program_page+0x40>
	}

	// todo compare with ada <--

	char memtype = getch();
     fc0:	ce 01       	movw	r24, r28
     fc2:	df 91       	pop	r29
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
     fc4:	cf 91       	pop	r28
     fc6:	c7 cf       	rjmp	.-114    	; 0xf56 <write_flash>
		write_flash(length);
     fc8:	85 34       	cpi	r24, 0x45	; 69
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
     fca:	a9 f4       	brne	.+42     	; 0xff6 <program_page+0x6e>
     fcc:	ce 01       	movw	r24, r28
	// todo compare with ada <--

	char memtype = getch();
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
		write_flash(length);
     fce:	c3 de       	rcall	.-634    	; 0xd56 <write_eeprom>
     fd0:	c8 2f       	mov	r28, r24
		return;
	}
	if (memtype == 'E') {
     fd2:	35 dd       	rcall	.-1430   	; 0xa3e <getch>
     fd4:	80 32       	cpi	r24, 0x20	; 32
		result = (char)write_eeprom(length);
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <program_page+0x58>
     fd8:	84 e1       	ldi	r24, 0x14	; 20
     fda:	0c dd       	rcall	.-1512   	; 0x9f4 <sendCDCbyte>
     fdc:	8c 2f       	mov	r24, r28
		if (CRC_EOP == getch()) {
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <program_page+0x70>
     fe0:	80 91 37 01 	lds	r24, 0x0137
     fe4:	90 91 38 01 	lds	r25, 0x0138
			sendCDCbyte(STK_INSYNC);
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	90 93 38 01 	sts	0x0138, r25
			sendCDCbyte(result);
     fee:	80 93 37 01 	sts	0x0137, r24
		}
		else {
			ram.isp.error++;
     ff2:	85 e1       	ldi	r24, 0x15	; 21
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <program_page+0x70>
     ff6:	81 e1       	ldi	r24, 0x11	; 17
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	fb cc       	rjmp	.-1546   	; 0x9f4 <sendCDCbyte>
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
			sendCDCbyte(STK_NOSYNC);
    1002:	08 95       	ret

00001004 <avrisp>:

//================================================================================
// AVRISP
//================================================================================

void avrisp(void){
    1004:	cf 93       	push	r28
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    1006:	df 93       	push	r29
	return;
}
    1008:	80 91 39 01 	lds	r24, 0x0139
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    100c:	90 91 3a 01 	lds	r25, 0x013A
	return;
}
    1010:	89 2b       	or	r24, r25
    1012:	19 f0       	breq	.+6      	; 0x101a <avrisp+0x16>
// AVRISP
//================================================================================

void avrisp(void){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	e9 dc       	rcall	.-1582   	; 0x9ea <LEDs_TurnOnLEDs>
    1018:	01 c0       	rjmp	.+2      	; 0x101c <avrisp+0x18>
    101a:	5d 9a       	sbi	0x0b, 5	; 11
    101c:	80 91 37 01 	lds	r24, 0x0137
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    1020:	90 91 38 01 	lds	r25, 0x0138
    1024:	89 2b       	or	r24, r25
    1026:	19 f0       	breq	.+6      	; 0x102e <avrisp+0x2a>
    1028:	80 e1       	ldi	r24, 0x10	; 16
    102a:	df dc       	rcall	.-1602   	; 0x9ea <LEDs_TurnOnLEDs>
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <avrisp+0x2c>
    102e:	5c 9a       	sbi	0x0b, 4	; 11
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	91 e0       	ldi	r25, 0x01	; 1
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1034:	ab d7       	rcall	.+3926   	; 0x1f8c <CDC_Device_ReceiveByte>
    1036:	97 fd       	sbrc	r25, 7
    1038:	ae c0       	rjmp	.+348    	; 0x1196 <avrisp+0x192>
    103a:	81 35       	cpi	r24, 0x51	; 81
	if (!(ReceivedByte < 0)){
    103c:	91 05       	cpc	r25, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <avrisp+0x3e>
		switch (ReceivedByte) {
    1040:	85 c0       	rjmp	.+266    	; 0x114c <avrisp+0x148>
    1042:	e4 f4       	brge	.+56     	; 0x107c <avrisp+0x78>
    1044:	81 34       	cpi	r24, 0x41	; 65
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <avrisp+0x48>
    104a:	52 c0       	rjmp	.+164    	; 0x10f0 <avrisp+0xec>
    104c:	54 f4       	brge	.+20     	; 0x1062 <avrisp+0x5e>
    104e:	80 33       	cpi	r24, 0x30	; 48
    1050:	91 05       	cpc	r25, r1
    1052:	99 f1       	breq	.+102    	; 0x10ba <avrisp+0xb6>
    1054:	81 33       	cpi	r24, 0x31	; 49
    1056:	91 05       	cpc	r25, r1
    1058:	a9 f1       	breq	.+106    	; 0x10c4 <avrisp+0xc0>
    105a:	80 97       	sbiw	r24, 0x20	; 32
    105c:	09 f0       	breq	.+2      	; 0x1060 <avrisp+0x5c>
    105e:	89 c0       	rjmp	.+274    	; 0x1172 <avrisp+0x16e>
    1060:	7e c0       	rjmp	.+252    	; 0x115e <avrisp+0x15a>
    1062:	85 34       	cpi	r24, 0x45	; 69
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <avrisp+0x66>
    1068:	4e c0       	rjmp	.+156    	; 0x1106 <avrisp+0x102>
    106a:	80 35       	cpi	r24, 0x50	; 80
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <avrisp+0x6e>
    1070:	4e c0       	rjmp	.+156    	; 0x110e <avrisp+0x10a>
    1072:	82 34       	cpi	r24, 0x42	; 66
    1074:	91 05       	cpc	r25, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <avrisp+0x76>
    1078:	7c c0       	rjmp	.+248    	; 0x1172 <avrisp+0x16e>
    107a:	3e c0       	rjmp	.+124    	; 0x10f8 <avrisp+0xf4>
    107c:	81 36       	cpi	r24, 0x61	; 97
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <avrisp+0x80>
    1082:	59 c0       	rjmp	.+178    	; 0x1136 <avrisp+0x132>
    1084:	6c f4       	brge	.+26     	; 0x10a0 <avrisp+0x9c>
    1086:	86 35       	cpi	r24, 0x56	; 86
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <avrisp+0x8a>
    108c:	5c c0       	rjmp	.+184    	; 0x1146 <avrisp+0x142>
    108e:	80 36       	cpi	r24, 0x60	; 96
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <avrisp+0x92>
    1094:	4f c0       	rjmp	.+158    	; 0x1134 <avrisp+0x130>
    1096:	85 35       	cpi	r24, 0x55	; 85
    1098:	91 05       	cpc	r25, r1
    109a:	09 f0       	breq	.+2      	; 0x109e <avrisp+0x9a>
    109c:	6a c0       	rjmp	.+212    	; 0x1172 <avrisp+0x16e>
    109e:	39 c0       	rjmp	.+114    	; 0x1112 <avrisp+0x10e>
    10a0:	84 37       	cpi	r24, 0x74	; 116
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <avrisp+0xa4>
    10a6:	4c c0       	rjmp	.+152    	; 0x1140 <avrisp+0x13c>
    10a8:	85 37       	cpi	r24, 0x75	; 117
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <avrisp+0xac>
    10ae:	54 c0       	rjmp	.+168    	; 0x1158 <avrisp+0x154>
    10b0:	84 36       	cpi	r24, 0x64	; 100
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <avrisp+0xb4>
    10b6:	5d c0       	rjmp	.+186    	; 0x1172 <avrisp+0x16e>
    10b8:	40 c0       	rjmp	.+128    	; 0x113a <avrisp+0x136>
    10ba:	10 92 38 01 	sts	0x0138, r1
    10be:	10 92 37 01 	sts	0x0137, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    10c2:	1e c0       	rjmp	.+60     	; 0x1100 <avrisp+0xfc>
    10c4:	bc dc       	rcall	.-1672   	; 0xa3e <getch>
    10c6:	80 32       	cpi	r24, 0x20	; 32
    10c8:	09 f0       	breq	.+2      	; 0x10cc <avrisp+0xc8>
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    10ca:	65 c0       	rjmp	.+202    	; 0x1196 <avrisp+0x192>
    10cc:	84 e1       	ldi	r24, 0x14	; 20
    10ce:	92 dc       	rcall	.-1756   	; 0x9f4 <sendCDCbyte>
    10d0:	81 e4       	ldi	r24, 0x41	; 65
    10d2:	90 dc       	rcall	.-1760   	; 0x9f4 <sendCDCbyte>
				sendCDCbyte(STK_INSYNC);
    10d4:	86 e5       	ldi	r24, 0x56	; 86
    10d6:	8e dc       	rcall	.-1764   	; 0x9f4 <sendCDCbyte>
    10d8:	82 e5       	ldi	r24, 0x52	; 82
				sendCDCbyte('A');
    10da:	8c dc       	rcall	.-1768   	; 0x9f4 <sendCDCbyte>
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	8a dc       	rcall	.-1772   	; 0x9f4 <sendCDCbyte>
				sendCDCbyte('V');
    10e0:	89 e4       	ldi	r24, 0x49	; 73
    10e2:	88 dc       	rcall	.-1776   	; 0x9f4 <sendCDCbyte>
    10e4:	83 e5       	ldi	r24, 0x53	; 83
				sendCDCbyte('R');
    10e6:	86 dc       	rcall	.-1780   	; 0x9f4 <sendCDCbyte>
    10e8:	80 e5       	ldi	r24, 0x50	; 80
    10ea:	84 dc       	rcall	.-1784   	; 0x9f4 <sendCDCbyte>
				sendCDCbyte(' ');
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	50 c0       	rjmp	.+160    	; 0x1190 <avrisp+0x18c>
    10f0:	a6 dc       	rcall	.-1716   	; 0xa3e <getch>
				sendCDCbyte('I');
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	f5 cc       	rjmp	.-1558   	; 0xae2 <get_parameters>
				sendCDCbyte('S');
    10f8:	84 e1       	ldi	r24, 0x14	; 20
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a7 dc       	rcall	.-1714   	; 0xa4c <fill>
				sendCDCbyte('P');
    10fe:	c1 dc       	rcall	.-1662   	; 0xa82 <set_parameters>
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
				sendCDCbyte(STK_OK);
    1104:	03 cd       	rjmp	.-1530   	; 0xb0c <replyOK>
    1106:	85 e0       	ldi	r24, 0x05	; 5
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 dc       	rcall	.-1728   	; 0xa4c <fill>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    110c:	f9 cf       	rjmp	.-14     	; 0x1100 <avrisp+0xfc>
    110e:	57 dd       	rcall	.-1362   	; 0xbbe <start_pmode>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    1110:	f7 cf       	rjmp	.-18     	; 0x1100 <avrisp+0xfc>
    1112:	95 dc       	rcall	.-1750   	; 0xa3e <getch>
			break;
		case STK_SET_PARM:
			fill(20);
    1114:	c8 2f       	mov	r28, r24
    1116:	d0 e0       	ldi	r29, 0x00	; 0
    1118:	d0 93 3c 01 	sts	0x013C, r29
			set_parameters();
    111c:	c0 93 3b 01 	sts	0x013B, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1120:	8e dc       	rcall	.-1764   	; 0xa3e <getch>
    1122:	38 2f       	mov	r19, r24
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	2c 0f       	add	r18, r28
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    1128:	3d 1f       	adc	r19, r29
    112a:	30 93 3c 01 	sts	0x013C, r19
    112e:	20 93 3b 01 	sts	0x013B, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    1132:	e6 cf       	rjmp	.-52     	; 0x1100 <avrisp+0xfc>
    1134:	84 dc       	rcall	.-1784   	; 0xa3e <getch>
    1136:	83 dc       	rcall	.-1786   	; 0xa3e <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    1138:	e3 cf       	rjmp	.-58     	; 0x1100 <avrisp+0xfc>
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	24 cf       	rjmp	.-440    	; 0xf88 <program_page>
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	5d ce       	rjmp	.-838    	; 0xe00 <read_page>
    1146:	df 91       	pop	r29
			ram.isp._addr += 256 * getch();
    1148:	cf 91       	pop	r28
    114a:	91 cd       	rjmp	.-1246   	; 0xc6e <universal>
    114c:	10 92 38 01 	sts	0x0138, r1
    1150:	10 92 37 01 	sts	0x0137, r1
    1154:	bd dd       	rcall	.-1158   	; 0xcd0 <end_pmode>
    1156:	d4 cf       	rjmp	.-88     	; 0x1100 <avrisp+0xfc>
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	95 cd       	rjmp	.-1238   	; 0xc88 <read_signature>
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    115e:	80 91 37 01 	lds	r24, 0x0137
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1162:	90 91 38 01 	lds	r25, 0x0138
    1166:	01 96       	adiw	r24, 0x01	; 1
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1168:	90 93 38 01 	sts	0x0138, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    116c:	80 93 37 01 	sts	0x0137, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1170:	0e c0       	rjmp	.+28     	; 0x118e <avrisp+0x18a>
    1172:	80 91 37 01 	lds	r24, 0x0137
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1176:	90 91 38 01 	lds	r25, 0x0138
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    117a:	01 96       	adiw	r24, 0x01	; 1
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    117c:	90 93 38 01 	sts	0x0138, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    1180:	80 93 37 01 	sts	0x0137, r24
    1184:	5c dc       	rcall	.-1864   	; 0xa3e <getch>
    1186:	80 32       	cpi	r24, 0x20	; 32
			end_pmode();
    1188:	11 f4       	brne	.+4      	; 0x118e <avrisp+0x18a>
    118a:	82 e1       	ldi	r24, 0x12	; 18
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <avrisp+0x18c>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    118e:	85 e1       	ldi	r24, 0x15	; 21
    1190:	df 91       	pop	r29
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1192:	cf 91       	pop	r28
    1194:	2f cc       	rjmp	.-1954   	; 0x9f4 <sendCDCbyte>
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <NHPreadChecksum>:
//================================================================================
// Read NHP
//================================================================================

// reads two bytes and check its inverse
uint8_t NHPreadChecksum(uint8_t input){
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	98 2f       	mov	r25, r24
	//write input to the buffer
	ram.NHP.readbuffer[ram.NHP.readlength] = input;
    11a2:	40 91 1c 02 	lds	r20, 0x021C
    11a6:	e4 2f       	mov	r30, r20
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ea 5e       	subi	r30, 0xEA	; 234
    11ac:	fd 4f       	sbci	r31, 0xFD	; 253
    11ae:	80 83       	st	Z, r24
	ram.NHP.readlength++;
    11b0:	80 91 1c 02 	lds	r24, 0x021C
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 1c 02 	sts	0x021C, r24

	// check the lead/end/data indicator
	switch (input & NHP_MASK_START){
    11ba:	89 2f       	mov	r24, r25
    11bc:	80 7c       	andi	r24, 0xC0	; 192
    11be:	80 38       	cpi	r24, 0x80	; 128
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <NHPreadChecksum+0x28>
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <NHPreadChecksum+0xb0>
    11c4:	80 3c       	cpi	r24, 0xC0	; 192
    11c6:	09 f0       	breq	.+2      	; 0x11ca <NHPreadChecksum+0x2e>
    11c8:	5f c0       	rjmp	.+190    	; 0x1288 <NHPreadChecksum+0xec>

	case(NHP_MASK_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    11ca:	29 2f       	mov	r18, r25
    11cc:	28 73       	andi	r18, 0x38	; 56
    11ce:	26 95       	lsr	r18
    11d0:	26 95       	lsr	r18
    11d2:	26 95       	lsr	r18

		// ignore command, return 0 write buff down completely
		if (blocks == 0 || blocks == 1)
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	08 f4       	brcc	.+2      	; 0x11da <NHPreadChecksum+0x3e>
    11d8:	77 c0       	rjmp	.+238    	; 0x12c8 <NHPreadChecksum+0x12c>
			break;

		else if (blocks == 7){
    11da:	27 30       	cpi	r18, 0x07	; 7
    11dc:	79 f4       	brne	.+30     	; 0x11fc <NHPreadChecksum+0x60>
			// save block length + first 4 data bits (special case)
			ram.NHP.mWorkData = input & NHP_MASK_DATA_4BIT;
    11de:	49 2f       	mov	r20, r25
    11e0:	4f 70       	andi	r20, 0x0F	; 15
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	40 93 12 02 	sts	0x0212, r20
    11ec:	50 93 13 02 	sts	0x0213, r21
    11f0:	60 93 14 02 	sts	0x0214, r22
    11f4:	70 93 15 02 	sts	0x0215, r23
			blocks -= 2;
    11f8:	15 e0       	ldi	r17, 0x05	; 5
    11fa:	0f c0       	rjmp	.+30     	; 0x121a <NHPreadChecksum+0x7e>
		}
		else{
			// save block length + first 3 data bits
			ram.NHP.mWorkData = input & NHP_MASK_DATA_3BIT;
    11fc:	89 2f       	mov	r24, r25
    11fe:	87 70       	andi	r24, 0x07	; 7
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	80 93 12 02 	sts	0x0212, r24
    120a:	90 93 13 02 	sts	0x0213, r25
    120e:	a0 93 14 02 	sts	0x0214, r26
    1212:	b0 93 15 02 	sts	0x0215, r27
			blocks--;
    1216:	12 2f       	mov	r17, r18
    1218:	11 50       	subi	r17, 0x01	; 1
		}

		// we were still reading!  Log an error
		if (ram.NHP.mBlocks){
    121a:	80 91 11 02 	lds	r24, 0x0211
    121e:	88 23       	and	r24, r24
    1220:	91 f0       	breq	.+36     	; 0x1246 <NHPreadChecksum+0xaa>
			// check if previous reading was a valid Control Address and write it down
			checkNHPControlAddressError();
    1222:	86 d9       	rcall	.-3316   	; 0x530 <checkNHPControlAddressError>
    1224:	60 91 1c 02 	lds	r22, 0x021C
			// write down the last signal but keep lead
			// substract 1 more because we already added the count
			writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength - 1);
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	86 e1       	ldi	r24, 0x16	; 22
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	b1 db       	rcall	.-2206   	; 0x992 <writeToCDC>
    1230:	e0 91 1c 02 	lds	r30, 0x021C
			ram.NHP.readbuffer[0] = ram.NHP.readbuffer[ram.NHP.readlength - 1];
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	eb 5e       	subi	r30, 0xEB	; 235
    1238:	fd 4f       	sbci	r31, 0xFD	; 253
    123a:	80 81       	ld	r24, Z
    123c:	80 93 16 02 	sts	0x0216, r24
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	80 93 1c 02 	sts	0x021C, r24
			ram.NHP.readlength = 1;
    1246:	10 93 11 02 	sts	0x0211, r17
		}
		// save new block length
		ram.NHP.mBlocks = blocks;
    124a:	45 c0       	rjmp	.+138    	; 0x12d6 <NHPreadChecksum+0x13a>
    124c:	80 91 11 02 	lds	r24, 0x0211
	}
						break;

	case(NHP_MASK_END) :
	{
		if (ram.NHP.mBlocks == 1){
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	d1 f5       	brne	.+116    	; 0x12c8 <NHPreadChecksum+0x12c>
    1254:	00 91 12 02 	lds	r16, 0x0212
			// save data + address
			// we know its a valid input, left some things out here
			if (((ram.NHP.mWorkData & 0xFFFF) ^ (ram.NHP.mWorkData >> 16)) == 0xFFFF){
    1258:	10 91 13 02 	lds	r17, 0x0213
    125c:	20 91 14 02 	lds	r18, 0x0214
    1260:	30 91 15 02 	lds	r19, 0x0215
    1264:	a9 01       	movw	r20, r18
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	22 27       	eor	r18, r18
    126c:	33 27       	eor	r19, r19
    126e:	40 27       	eor	r20, r16
    1270:	51 27       	eor	r21, r17
    1272:	62 27       	eor	r22, r18
    1274:	73 27       	eor	r23, r19
    1276:	4f 3f       	cpi	r20, 0xFF	; 255
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	61 05       	cpc	r22, r1
    127c:	71 05       	cpc	r23, r1
    127e:	21 f5       	brne	.+72     	; 0x12c8 <NHPreadChecksum+0x12c>
    1280:	89 2f       	mov	r24, r25
    1282:	8f 73       	andi	r24, 0x3F	; 63
				uint8_t address = (input & 0x3F) + 1;
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	28 c0       	rjmp	.+80     	; 0x12d8 <NHPreadChecksum+0x13c>
    1288:	80 91 11 02 	lds	r24, 0x0211
	}
					   break;

	default:
	{
		if (ram.NHP.mBlocks >= 2){
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	e0 f0       	brcs	.+56     	; 0x12c8 <NHPreadChecksum+0x12c>
    1290:	81 50       	subi	r24, 0x01	; 1
    1292:	80 93 11 02 	sts	0x0211, r24
			ram.NHP.mBlocks--;
    1296:	40 91 12 02 	lds	r20, 0x0212
			// get next 7 bits of data
			ram.NHP.mWorkData <<= 7;
    129a:	50 91 13 02 	lds	r21, 0x0213
    129e:	60 91 14 02 	lds	r22, 0x0214
    12a2:	70 91 15 02 	lds	r23, 0x0215
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	8a 95       	dec	r24
    12b2:	d1 f7       	brne	.-12     	; 0x12a8 <NHPreadChecksum+0x10c>
    12b4:	49 2b       	or	r20, r25
    12b6:	40 93 12 02 	sts	0x0212, r20
			// dont need &NHP_MASK_DATA_7BIT because first bit is zero!
			ram.NHP.mWorkData |= input;
    12ba:	50 93 13 02 	sts	0x0213, r21
    12be:	60 93 14 02 	sts	0x0214, r22
    12c2:	70 93 15 02 	sts	0x0215, r23
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <NHPreadChecksum+0x13a>
    12c8:	33 d9       	rcall	.-3482   	; 0x530 <checkNHPControlAddressError>
    12ca:	60 91 1c 02 	lds	r22, 0x021C
	}
		break;
	} // end switch

	// check if previous reading was a valid Control Address and write it down
	checkNHPControlAddressError();
    12ce:	86 e1       	ldi	r24, 0x16	; 22

	// invalid input, write down buffer
	writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	5f db       	rcall	.-2370   	; 0x992 <writeToCDC>
    12d4:	ba da       	rcall	.-2700   	; 0x84a <resetNHPbuffer>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
	resetNHPbuffer();
    12dc:	08 95       	ret

000012de <NHPwriteChecksum>:
//================================================================================
// Write NHP
//================================================================================

// writes two bytes with its inverse
uint8_t NHPwriteChecksum(uint8_t address, uint16_t indata, uint8_t* buff){
    12de:	cf 92       	push	r12
	checkNHPControlAddressError();

	// invalid input, write down buffer
	writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	resetNHPbuffer();
	return 0;
    12e0:	df 92       	push	r13
}
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	fa 01       	movw	r30, r20
//================================================================================

// writes two bytes with its inverse
uint8_t NHPwriteChecksum(uint8_t address, uint16_t indata, uint8_t* buff){
	// create checksum data
	uint32_t temp = ~indata;
    12ec:	8b 01       	movw	r16, r22
    12ee:	00 95       	com	r16
    12f0:	10 95       	com	r17
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
	uint32_t data = (temp << 16) | indata;
    12f6:	98 01       	movw	r18, r16
    12f8:	11 27       	eor	r17, r17
    12fa:	00 27       	eor	r16, r16
    12fc:	ab 01       	movw	r20, r22
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	04 2b       	or	r16, r20
    1304:	15 2b       	or	r17, r21
    1306:	26 2b       	or	r18, r22
    1308:	37 2b       	or	r19, r23
    130a:	4c e1       	ldi	r20, 0x1C	; 28
    130c:	50 e0       	ldi	r21, 0x00	; 0

	// start with the maximum size of blocks
	uint8_t blocks = 7;
    130e:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1310:	68 01       	movw	r12, r16
    1312:	79 01       	movw	r14, r18
    1314:	04 2e       	mov	r0, r20
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <NHPwriteChecksum+0x42>
    1318:	f6 94       	lsr	r15
    131a:	e7 94       	ror	r14
    131c:	d7 94       	ror	r13
    131e:	c7 94       	ror	r12
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <NHPwriteChecksum+0x3a>
    1324:	6c 2d       	mov	r22, r12
		if (nextvalue > NHP_MASK_DATA_3BIT){
    1326:	68 30       	cpi	r22, 0x08	; 8
    1328:	28 f0       	brcs	.+10     	; 0x1334 <NHPwriteChecksum+0x56>
			// special case for the MSB
			if (blocks == 7) {
    132a:	97 30       	cpi	r25, 0x07	; 7
    132c:	59 f4       	brne	.+22     	; 0x1344 <NHPwriteChecksum+0x66>
				buff[0] = nextvalue;
    132e:	c0 82       	st	Z, r12
				blocks--;
    1330:	96 e0       	ldi	r25, 0x06	; 6
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <NHPwriteChecksum+0x66>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    1334:	c0 82       	st	Z, r12
			blocks--;
    1336:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1338:	c1 10       	cpse	r12, r1
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <NHPwriteChecksum+0x66>
    133c:	47 50       	subi	r20, 0x07	; 7
    133e:	51 09       	sbc	r21, r1

	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    1340:	92 30       	cpi	r25, 0x02	; 2
    1342:	31 f7       	brne	.-52     	; 0x1310 <NHPwriteChecksum+0x32>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    1344:	49 2f       	mov	r20, r25
    1346:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1348:	13 c0       	rjmp	.+38     	; 0x1370 <NHPwriteChecksum+0x92>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    134a:	df 01       	movw	r26, r30
    134c:	a4 0f       	add	r26, r20
    134e:	b1 1d       	adc	r27, r1
    1350:	68 01       	movw	r12, r16
    1352:	79 01       	movw	r14, r18
    1354:	e8 94       	clt
    1356:	c7 f8       	bld	r12, 7
    1358:	dd 24       	eor	r13, r13
    135a:	ee 24       	eor	r14, r14
    135c:	ff 24       	eor	r15, r15
    135e:	cc 92       	st	X, r12
		data >>= 7;
    1360:	77 e0       	ldi	r23, 0x07	; 7
    1362:	36 95       	lsr	r19
    1364:	27 95       	ror	r18
    1366:	17 95       	ror	r17
    1368:	07 95       	ror	r16
    136a:	7a 95       	dec	r23
    136c:	d1 f7       	brne	.-12     	; 0x1362 <NHPwriteChecksum+0x84>
		datablocks--;
    136e:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    1370:	41 11       	cpse	r20, r1
    1372:	eb cf       	rjmp	.-42     	; 0x134a <NHPwriteChecksum+0x6c>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_MASK_LEAD | (blocks << 3);
    1374:	49 2f       	mov	r20, r25
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	9a 01       	movw	r18, r20
    137a:	63 e0       	ldi	r22, 0x03	; 3
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	6a 95       	dec	r22
    1382:	e1 f7       	brne	.-8      	; 0x137c <NHPwriteChecksum+0x9e>
    1384:	20 6c       	ori	r18, 0xC0	; 192
    1386:	3f 6f       	ori	r19, 0xFF	; 255
    1388:	30 81       	ld	r19, Z
    138a:	32 2b       	or	r19, r18
    138c:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_MASK_END | ((address - 1) & NHP_MASK_ADDRESS);
    138e:	e4 0f       	add	r30, r20
    1390:	f5 1f       	adc	r31, r21
    1392:	31 97       	sbiw	r30, 0x01	; 1
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	8f 73       	andi	r24, 0x3F	; 63
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    139c:	89 2f       	mov	r24, r25
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	08 95       	ret

000013ac <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	e9 8d       	ldd	r30, Y+25	; 0x19
    13b6:	e1 50       	subi	r30, 0x01	; 1
    13b8:	e2 30       	cpi	r30, 0x02	; 2
    13ba:	28 f4       	brcc	.+10     	; 0x13c6 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ec 5c       	subi	r30, 0xCC	; 204
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	10 81       	ld	r17, Z
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    13c6:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    13c8:	88 8d       	ldd	r24, Y+24	; 0x18
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    13ce:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    13d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13d2:	87 30       	cpi	r24, 0x07	; 7
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <EVENT_CDC_Device_LineEncodingChanged+0x36>
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    13da:	86 30       	cpi	r24, 0x06	; 6
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    13de:	12 60       	ori	r17, 0x02	; 2
		break;
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    13e2:	14 60       	ori	r17, 0x04	; 4
		break;
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    13e6:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    13e8:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    13ea:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    13ee:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    13f2:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    13f6:	2c 89       	ldd	r18, Y+20	; 0x14
    13f8:	3d 89       	ldd	r19, Y+21	; 0x15
    13fa:	4e 89       	ldd	r20, Y+22	; 0x16
    13fc:	5f 89       	ldd	r21, Y+23	; 0x17
    13fe:	21 15       	cp	r18, r1
    1400:	81 ee       	ldi	r24, 0xE1	; 225
    1402:	38 07       	cpc	r19, r24
    1404:	41 05       	cpc	r20, r1
    1406:	51 05       	cpc	r21, r1
    1408:	79 f0       	breq	.+30     	; 0x1428 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    140a:	ca 01       	movw	r24, r20
    140c:	b9 01       	movw	r22, r18
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	60 58       	subi	r22, 0x80	; 128
    1418:	7b 47       	sbci	r23, 0x7B	; 123
    141a:	81 4e       	sbci	r24, 0xE1	; 225
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	0e 94 b5 12 	call	0x256a	; 0x256a <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	31 09       	sbc	r19, r1
    1426:	02 c0       	rjmp	.+4      	; 0x142c <EVENT_CDC_Device_LineEncodingChanged+0x80>
    1428:	20 e1       	ldi	r18, 0x10	; 16
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	30 93 cd 00 	sts	0x00CD, r19
    1430:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    1434:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1438:	8c 89       	ldd	r24, Y+20	; 0x14
    143a:	9d 89       	ldd	r25, Y+21	; 0x15
    143c:	ae 89       	ldd	r26, Y+22	; 0x16
    143e:	bf 89       	ldd	r27, Y+23	; 0x17
    1440:	81 15       	cp	r24, r1
    1442:	91 4e       	sbci	r25, 0xE1	; 225
    1444:	a1 05       	cpc	r26, r1
    1446:	b1 05       	cpc	r27, r1
    1448:	11 f4       	brne	.+4      	; 0x144e <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    1454:	88 e9       	ldi	r24, 0x98	; 152
    1456:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    145a:	5b 98       	cbi	0x0b, 3	; 11
}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	08 95       	ret

00001464 <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    1464:	fc 01       	movw	r30, r24
    1466:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    1468:	20 ff       	sbrs	r18, 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    146c:	5f 98       	cbi	0x0b, 7	; 11
    146e:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    1470:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    1472:	8b b1       	in	r24, 0x0b	; 11
    1474:	80 63       	ori	r24, 0x30	; 48
    1476:	8b b9       	out	0x0b, r24	; 11
    1478:	08 95       	ret

0000147a <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    147a:	68 0f       	add	r22, r24
    147c:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    1480:	fc 01       	movw	r30, r24
    1482:	21 91       	ld	r18, Z+
    1484:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1486:	30 91 c8 00 	lds	r19, 0x00C8
    148a:	35 ff       	sbrs	r19, 5
    148c:	fc cf       	rjmp	.-8      	; 0x1486 <Serial_SendData+0xc>
				UDR1 = DataByte;
    148e:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    1492:	86 17       	cp	r24, r22
    1494:	97 07       	cpc	r25, r23
    1496:	a1 f7       	brne	.-24     	; 0x1480 <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    1498:	08 95       	ret

0000149a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	7c 01       	movw	r14, r24
    14ae:	8b 01       	movw	r16, r22
    14b0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14b2:	d7 d1       	rcall	.+942    	; 0x1862 <Endpoint_WaitUntilReady>
    14b4:	b8 2e       	mov	r11, r24
    14b6:	81 11       	cpse	r24, r1
    14b8:	32 c0       	rjmp	.+100    	; 0x151e <Endpoint_Write_Stream_LE+0x84>
    14ba:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14bc:	31 f0       	breq	.+12     	; 0x14ca <Endpoint_Write_Stream_LE+0x30>
    14be:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    14c0:	39 81       	ldd	r19, Y+1	; 0x01
    14c2:	02 1b       	sub	r16, r18
    14c4:	13 0b       	sbc	r17, r19
    14c6:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14c8:	f3 1e       	adc	r15, r19
    14ca:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14cc:	d1 2c       	mov	r13, r1
    14ce:	22 c0       	rjmp	.+68     	; 0x1514 <Endpoint_Write_Stream_LE+0x7a>
    14d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14d4:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <Endpoint_Write_Stream_LE+0x66>
    14d8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14dc:	8e 77       	andi	r24, 0x7E	; 126
    14de:	80 93 e8 00 	sts	0x00E8, r24
    14e2:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    14e4:	49 f0       	breq	.+18     	; 0x14f8 <Endpoint_Write_Stream_LE+0x5e>
    14e6:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    14e8:	99 81       	ldd	r25, Y+1	; 0x01
    14ea:	8c 0d       	add	r24, r12
    14ec:	9d 1d       	adc	r25, r13
    14ee:	99 83       	std	Y+1, r25	; 0x01
    14f0:	88 83       	st	Y, r24
    14f2:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    14f4:	b2 2e       	mov	r11, r18
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <Endpoint_Write_Stream_LE+0x84>
    14f8:	b4 d1       	rcall	.+872    	; 0x1862 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14fa:	88 23       	and	r24, r24
    14fc:	59 f0       	breq	.+22     	; 0x1514 <Endpoint_Write_Stream_LE+0x7a>
    14fe:	0e c0       	rjmp	.+28     	; 0x151c <Endpoint_Write_Stream_LE+0x82>
    1500:	f7 01       	movw	r30, r14
    1502:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1504:	7f 01       	movw	r14, r30
    1506:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    150a:	01 50       	subi	r16, 0x01	; 1
    150c:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    150e:	ff ef       	ldi	r31, 0xFF	; 255
    1510:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1512:	df 0a       	sbc	r13, r31
    1514:	01 15       	cp	r16, r1
    1516:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1518:	d9 f6       	brne	.-74     	; 0x14d0 <Endpoint_Write_Stream_LE+0x36>
    151a:	01 c0       	rjmp	.+2      	; 0x151e <Endpoint_Write_Stream_LE+0x84>
    151c:	b8 2e       	mov	r11, r24
    151e:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1520:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	08 95       	ret

00001534 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1534:	20 91 4c 02 	lds	r18, 0x024C
    1538:	30 91 4d 02 	lds	r19, 0x024D
    153c:	26 17       	cp	r18, r22
    153e:	37 07       	cpc	r19, r23
    1540:	48 f0       	brcs	.+18     	; 0x1554 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1542:	61 15       	cp	r22, r1
    1544:	71 05       	cpc	r23, r1
    1546:	39 f4       	brne	.+14     	; 0x1556 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1548:	20 91 e8 00 	lds	r18, 0x00E8
    154c:	2e 77       	andi	r18, 0x7E	; 126
    154e:	20 93 e8 00 	sts	0x00E8, r18
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1554:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1556:	9c 01       	movw	r18, r24
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	34 c0       	rjmp	.+104    	; 0x15c4 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    155c:	90 91 45 02 	lds	r25, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1560:	99 23       	and	r25, r25
    1562:	09 f4       	brne	.+2      	; 0x1566 <Endpoint_Write_Control_Stream_LE+0x32>
    1564:	43 c0       	rjmp	.+134    	; 0x15ec <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1566:	95 30       	cpi	r25, 0x05	; 5
    1568:	09 f4       	brne	.+2      	; 0x156c <Endpoint_Write_Control_Stream_LE+0x38>
    156a:	42 c0       	rjmp	.+132    	; 0x15f0 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    156c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1570:	93 fd       	sbrc	r25, 3
    1572:	3a c0       	rjmp	.+116    	; 0x15e8 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1574:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1578:	92 fd       	sbrc	r25, 2
    157a:	30 c0       	rjmp	.+96     	; 0x15dc <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    157c:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1580:	90 ff       	sbrs	r25, 0
    1582:	20 c0       	rjmp	.+64     	; 0x15c4 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1584:	80 91 f2 00 	lds	r24, 0x00F2
    1588:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    158a:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1590:	05 c0       	rjmp	.+10     	; 0x159c <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1592:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1594:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1598:	61 50       	subi	r22, 0x01	; 1
    159a:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    159c:	9f 01       	movw	r18, r30
    159e:	28 0f       	add	r18, r24
    15a0:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15a2:	61 15       	cp	r22, r1
    15a4:	71 05       	cpc	r23, r1
    15a6:	19 f0       	breq	.+6      	; 0x15ae <Endpoint_Write_Control_Stream_LE+0x7a>
    15a8:	28 30       	cpi	r18, 0x08	; 8
    15aa:	31 05       	cpc	r19, r1
    15ac:	90 f3       	brcs	.-28     	; 0x1592 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	28 30       	cpi	r18, 0x08	; 8
    15b2:	31 05       	cpc	r19, r1
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <Endpoint_Write_Control_Stream_LE+0x84>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15b8:	90 91 e8 00 	lds	r25, 0x00E8
    15bc:	9e 77       	andi	r25, 0x7E	; 126
    15be:	90 93 e8 00 	sts	0x00E8, r25
    15c2:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	49 f6       	brne	.-110    	; 0x155c <Endpoint_Write_Control_Stream_LE+0x28>
    15ca:	81 11       	cpse	r24, r1
    15cc:	c7 cf       	rjmp	.-114    	; 0x155c <Endpoint_Write_Control_Stream_LE+0x28>
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15d0:	80 91 45 02 	lds	r24, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15d4:	88 23       	and	r24, r24
    15d6:	51 f0       	breq	.+20     	; 0x15ec <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15d8:	85 30       	cpi	r24, 0x05	; 5
    15da:	51 f0       	breq	.+20     	; 0x15f0 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15dc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15e0:	82 ff       	sbrs	r24, 2
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    15f0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15f2:	08 95       	ret

000015f4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    15f4:	61 15       	cp	r22, r1
    15f6:	71 05       	cpc	r23, r1
    15f8:	29 f4       	brne	.+10     	; 0x1604 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15fa:	20 91 e8 00 	lds	r18, 0x00E8
    15fe:	2b 77       	andi	r18, 0x7B	; 123
    1600:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1604:	9c 01       	movw	r18, r24
    1606:	21 c0       	rjmp	.+66     	; 0x164a <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1608:	80 91 45 02 	lds	r24, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    160c:	88 23       	and	r24, r24
    160e:	81 f1       	breq	.+96     	; 0x1670 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1610:	85 30       	cpi	r24, 0x05	; 5
    1612:	41 f1       	breq	.+80     	; 0x1664 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1614:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1618:	83 fd       	sbrc	r24, 3
    161a:	26 c0       	rjmp	.+76     	; 0x1668 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    161c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1620:	82 ff       	sbrs	r24, 2
    1622:	f2 cf       	rjmp	.-28     	; 0x1608 <Endpoint_Read_Control_Stream_LE+0x14>
    1624:	f9 01       	movw	r30, r18
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1628:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    162c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    162e:	9f 01       	movw	r18, r30
				Length--;
    1630:	61 50       	subi	r22, 0x01	; 1
    1632:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1634:	29 f0       	breq	.+10     	; 0x1640 <Endpoint_Read_Control_Stream_LE+0x4c>
    1636:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1638:	80 91 f2 00 	lds	r24, 0x00F2
    163c:	81 11       	cpse	r24, r1
    163e:	f4 cf       	rjmp	.-24     	; 0x1628 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1640:	80 91 e8 00 	lds	r24, 0x00E8
    1644:	8b 77       	andi	r24, 0x7B	; 123
    1646:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    164a:	61 15       	cp	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	e1 f6       	brne	.-72     	; 0x1608 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1650:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1654:	80 fd       	sbrc	r24, 0
    1656:	0a c0       	rjmp	.+20     	; 0x166c <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1658:	80 91 45 02 	lds	r24, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    165c:	88 23       	and	r24, r24
    165e:	41 f0       	breq	.+16     	; 0x1670 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1660:	85 30       	cpi	r24, 0x05	; 5
    1662:	b1 f7       	brne	.-20     	; 0x1650 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1670:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1672:	08 95       	ret

00001674 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1674:	20 91 4c 02 	lds	r18, 0x024C
    1678:	30 91 4d 02 	lds	r19, 0x024D
    167c:	26 17       	cp	r18, r22
    167e:	37 07       	cpc	r19, r23
    1680:	48 f0       	brcs	.+18     	; 0x1694 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1682:	61 15       	cp	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	39 f4       	brne	.+14     	; 0x1696 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1688:	20 91 e8 00 	lds	r18, 0x00E8
    168c:	2e 77       	andi	r18, 0x7E	; 126
    168e:	20 93 e8 00 	sts	0x00E8, r18
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1694:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1696:	9c 01       	movw	r18, r24
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	35 c0       	rjmp	.+106    	; 0x1706 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    169c:	90 91 45 02 	lds	r25, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16a0:	99 23       	and	r25, r25
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <Endpoint_Write_Control_PStream_LE+0x32>
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16a6:	95 30       	cpi	r25, 0x05	; 5
    16a8:	09 f4       	brne	.+2      	; 0x16ac <Endpoint_Write_Control_PStream_LE+0x38>
    16aa:	43 c0       	rjmp	.+134    	; 0x1732 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16ac:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16b0:	93 fd       	sbrc	r25, 3
    16b2:	3b c0       	rjmp	.+118    	; 0x172a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16b4:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    16b8:	92 fd       	sbrc	r25, 2
    16ba:	31 c0       	rjmp	.+98     	; 0x171e <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16bc:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    16c0:	90 ff       	sbrs	r25, 0
    16c2:	21 c0       	rjmp	.+66     	; 0x1706 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    16c4:	80 91 f2 00 	lds	r24, 0x00F2
    16c8:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16ca:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    16cc:	82 1b       	sub	r24, r18
    16ce:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    16d2:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16d4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    16d8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    16de:	9c 01       	movw	r18, r24
    16e0:	2e 0f       	add	r18, r30
    16e2:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16e4:	61 15       	cp	r22, r1
    16e6:	71 05       	cpc	r23, r1
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <Endpoint_Write_Control_PStream_LE+0x7c>
    16ea:	28 30       	cpi	r18, 0x08	; 8
    16ec:	31 05       	cpc	r19, r1
    16ee:	88 f3       	brcs	.-30     	; 0x16d2 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	28 30       	cpi	r18, 0x08	; 8
    16f4:	31 05       	cpc	r19, r1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <Endpoint_Write_Control_PStream_LE+0x86>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16fa:	90 91 e8 00 	lds	r25, 0x00E8
    16fe:	9e 77       	andi	r25, 0x7E	; 126
    1700:	90 93 e8 00 	sts	0x00E8, r25
    1704:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1706:	61 15       	cp	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	41 f6       	brne	.-112    	; 0x169c <Endpoint_Write_Control_PStream_LE+0x28>
    170c:	81 11       	cpse	r24, r1
    170e:	c6 cf       	rjmp	.-116    	; 0x169c <Endpoint_Write_Control_PStream_LE+0x28>
    1710:	06 c0       	rjmp	.+12     	; 0x171e <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1712:	80 91 45 02 	lds	r24, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1716:	88 23       	and	r24, r24
    1718:	51 f0       	breq	.+20     	; 0x172e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    171a:	85 30       	cpi	r24, 0x05	; 5
    171c:	51 f0       	breq	.+20     	; 0x1732 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    171e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1722:	82 ff       	sbrs	r24, 2
    1724:	f6 cf       	rjmp	.-20     	; 0x1712 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1732:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1734:	08 95       	ret

00001736 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1736:	98 2f       	mov	r25, r24
    1738:	2c c0       	rjmp	.+88     	; 0x1792 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    173a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    173e:	98 17       	cp	r25, r24
    1740:	39 f0       	breq	.+14     	; 0x1750 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1742:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1746:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    174a:	50 91 f0 00 	lds	r21, 0x00F0
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1750:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1752:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1754:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1756:	21 fd       	sbrc	r18, 1
    1758:	02 c0       	rjmp	.+4      	; 0x175e <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    175a:	9f 5f       	subi	r25, 0xFF	; 255
    175c:	1a c0       	rjmp	.+52     	; 0x1792 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    175e:	30 91 eb 00 	lds	r19, 0x00EB
    1762:	3e 7f       	andi	r19, 0xFE	; 254
    1764:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1768:	30 91 ed 00 	lds	r19, 0x00ED
    176c:	3d 7f       	andi	r19, 0xFD	; 253
    176e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1772:	30 91 eb 00 	lds	r19, 0x00EB
    1776:	31 60       	ori	r19, 0x01	; 1
    1778:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    177c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1780:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1784:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1788:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    178c:	27 fd       	sbrc	r18, 7
    178e:	e5 cf       	rjmp	.-54     	; 0x175a <Endpoint_ConfigureEndpoint_Prv+0x24>
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1792:	95 30       	cpi	r25, 0x05	; 5
    1794:	90 f2       	brcs	.-92     	; 0x173a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    17a0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    17a2:	08 95       	ret

000017a4 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	06 2f       	mov	r16, r22
    17ae:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	2e c0       	rjmp	.+92     	; 0x1810 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    17b4:	98 81       	ld	r25, Y
    17b6:	91 11       	cpse	r25, r1
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    17ba:	1f 5f       	subi	r17, 0xFF	; 255
    17bc:	25 96       	adiw	r28, 0x05	; 5
    17be:	28 c0       	rjmp	.+80     	; 0x1810 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    17c8:	89 2f       	mov	r24, r25
    17ca:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    17cc:	85 30       	cpi	r24, 0x05	; 5
    17ce:	10 f0       	brcs	.+4      	; 0x17d4 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	21 c0       	rjmp	.+66     	; 0x1816 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <Endpoint_ConfigureEndpointTable+0x38>
    17d8:	56 e0       	ldi	r21, 0x06	; 6
    17da:	01 c0       	rjmp	.+2      	; 0x17de <Endpoint_ConfigureEndpointTable+0x3a>
    17dc:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    17de:	28 e0       	ldi	r18, 0x08	; 8
    17e0:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    17e6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    17ec:	2e 17       	cp	r18, r30
    17ee:	3f 07       	cpc	r19, r31
    17f0:	d0 f3       	brcs	.-12     	; 0x17e6 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    17f2:	42 95       	swap	r20
    17f4:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    17f6:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    17f8:	99 1f       	adc	r25, r25
    17fa:	99 27       	eor	r25, r25
    17fc:	99 1f       	adc	r25, r25
    17fe:	62 95       	swap	r22
    1800:	66 0f       	add	r22, r22
    1802:	66 0f       	add	r22, r22
    1804:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1806:	69 2b       	or	r22, r25
    1808:	96 df       	rcall	.-212    	; 0x1736 <Endpoint_ConfigureEndpoint_Prv>
    180a:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    180c:	d6 cf       	rjmp	.-84     	; 0x17ba <Endpoint_ConfigureEndpointTable+0x16>
    180e:	e0 cf       	rjmp	.-64     	; 0x17d0 <Endpoint_ConfigureEndpointTable+0x2c>
    1810:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1812:	d0 cf       	rjmp	.-96     	; 0x17b4 <Endpoint_ConfigureEndpointTable+0x10>
    1814:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1816:	df 91       	pop	r29
}
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1820:	80 91 46 02 	lds	r24, 0x0246
    1824:	87 fd       	sbrc	r24, 7
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1828:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    182c:	80 ff       	sbrs	r24, 0
    182e:	0e c0       	rjmp	.+28     	; 0x184c <Endpoint_ClearStatusStage+0x2c>
    1830:	12 c0       	rjmp	.+36     	; 0x1856 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1832:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1836:	82 fd       	sbrc	r24, 2
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    183a:	80 91 45 02 	lds	r24, 0x0245
    183e:	81 11       	cpse	r24, r1
    1840:	f8 cf       	rjmp	.-16     	; 0x1832 <Endpoint_ClearStatusStage+0x12>
    1842:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1844:	80 91 e8 00 	lds	r24, 0x00E8
    1848:	8b 77       	andi	r24, 0x7B	; 123
    184a:	08 c0       	rjmp	.+16     	; 0x185c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    184c:	80 91 45 02 	lds	r24, 0x0245
    1850:	81 11       	cpse	r24, r1
    1852:	ea cf       	rjmp	.-44     	; 0x1828 <Endpoint_ClearStatusStage+0x8>
    1854:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1856:	80 91 e8 00 	lds	r24, 0x00E8
    185a:	8e 77       	andi	r24, 0x7E	; 126
    185c:	80 93 e8 00 	sts	0x00E8, r24
    1860:	08 95       	ret

00001862 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1862:	80 91 e4 00 	lds	r24, 0x00E4
    1866:	90 91 e5 00 	lds	r25, 0x00E5
    186a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    186c:	20 91 ec 00 	lds	r18, 0x00EC
    1870:	20 fd       	sbrc	r18, 0
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <Endpoint_WaitUntilReady+0x50>
    1874:	23 c0       	rjmp	.+70     	; 0x18bc <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1876:	20 91 45 02 	lds	r18, 0x0245

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    187a:	22 23       	and	r18, r18
    187c:	91 f0       	breq	.+36     	; 0x18a2 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    187e:	25 30       	cpi	r18, 0x05	; 5
    1880:	91 f0       	breq	.+36     	; 0x18a6 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1882:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1886:	25 fd       	sbrc	r18, 5
    1888:	10 c0       	rjmp	.+32     	; 0x18aa <Endpoint_WaitUntilReady+0x48>
    188a:	20 91 e4 00 	lds	r18, 0x00E4
    188e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	51 f3       	breq	.-44     	; 0x186c <Endpoint_WaitUntilReady+0xa>
    1898:	41 50       	subi	r20, 0x01	; 1
    189a:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    189c:	39 f7       	brne	.-50     	; 0x186c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18b2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    18b6:	20 ff       	sbrs	r18, 0
    18b8:	de cf       	rjmp	.-68     	; 0x1876 <Endpoint_WaitUntilReady+0x14>
    18ba:	f9 cf       	rjmp	.-14     	; 0x18ae <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18bc:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    18c0:	22 ff       	sbrs	r18, 2
    18c2:	d9 cf       	rjmp	.-78     	; 0x1876 <Endpoint_WaitUntilReady+0x14>
    18c4:	f4 cf       	rjmp	.-24     	; 0x18ae <Endpoint_WaitUntilReady+0x4c>

000018c6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18c6:	41 d0       	rcall	.+130    	; 0x194a <USB_INT_DisableAllInterrupts>
    18c8:	43 d0       	rcall	.+134    	; 0x1950 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18ca:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18ce:	8f 77       	andi	r24, 0x7F	; 127
    18d0:	80 93 d8 00 	sts	0x00D8, r24
    18d4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    18d8:	80 68       	ori	r24, 0x80	; 128
    18da:	80 93 d8 00 	sts	0x00D8, r24
    18de:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18e2:	8f 7d       	andi	r24, 0xDF	; 223
    18e4:	80 93 d8 00 	sts	0x00D8, r24
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18ec:	86 e0       	ldi	r24, 0x06	; 6
    18ee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18f0:	09 b4       	in	r0, 0x29	; 41
    18f2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    18f4:	fd cf       	rjmp	.-6      	; 0x18f0 <USB_ResetInterface+0x2a>
    18f6:	10 92 45 02 	sts	0x0245, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    18fa:	10 92 41 02 	sts	0x0241, r1
	USB_Device_ConfigurationNumber  = 0;
    18fe:	10 92 43 02 	sts	0x0243, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1902:	10 92 42 02 	sts	0x0242, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	14 df       	rcall	.-472    	; 0x1736 <Endpoint_ConfigureEndpoint_Prv>
    190e:	80 91 e1 00 	lds	r24, 0x00E1
    1912:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1914:	80 93 e1 00 	sts	0x00E1, r24
    1918:	80 91 e2 00 	lds	r24, 0x00E2
    191c:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    191e:	80 93 e2 00 	sts	0x00E2, r24
    1922:	80 91 e2 00 	lds	r24, 0x00E2
    1926:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1928:	80 93 e2 00 	sts	0x00E2, r24
    192c:	80 91 e0 00 	lds	r24, 0x00E0
    1930:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1932:	80 93 e0 00 	sts	0x00E0, r24
    1936:	08 95       	ret

00001938 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1938:	e3 e6       	ldi	r30, 0x63	; 99
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 44 02 	sts	0x0244, r24

	USB_ResetInterface();
    1948:	be cf       	rjmp	.-132    	; 0x18c6 <USB_ResetInterface>

0000194a <USB_INT_DisableAllInterrupts>:
    194a:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    194e:	08 95       	ret

00001950 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1950:	10 92 e1 00 	sts	0x00E1, r1
    1954:	08 95       	ret

00001956 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1978:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    197c:	82 ff       	sbrs	r24, 2
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1980:	80 91 e2 00 	lds	r24, 0x00E2
    1984:	82 ff       	sbrs	r24, 2
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1988:	80 91 e1 00 	lds	r24, 0x00E1
    198c:	8b 7f       	andi	r24, 0xFB	; 251
    198e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1992:	0e 94 8c 02 	call	0x518	; 0x518 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1996:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    199a:	80 ff       	sbrs	r24, 0
    199c:	18 c0       	rjmp	.+48     	; 0x19ce <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    199e:	80 91 e2 00 	lds	r24, 0x00E2
    19a2:	80 ff       	sbrs	r24, 0
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    19a6:	80 91 e2 00 	lds	r24, 0x00E2
    19aa:	8e 7f       	andi	r24, 0xFE	; 254
    19ac:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    19b0:	80 91 e2 00 	lds	r24, 0x00E2
    19b4:	80 61       	ori	r24, 0x10	; 16
    19b6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    19ba:	80 91 d8 00 	lds	r24, 0x00D8
    19be:	80 62       	ori	r24, 0x20	; 32
    19c0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    19c4:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    19c6:	10 92 45 02 	sts	0x0245, r1
		EVENT_USB_Device_Disconnect();
    19ca:	0e 94 36 02 	call	0x46c	; 0x46c <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    19ce:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    19d2:	84 ff       	sbrs	r24, 4
    19d4:	30 c0       	rjmp	.+96     	; 0x1a36 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    19d6:	80 91 e2 00 	lds	r24, 0x00E2
    19da:	84 ff       	sbrs	r24, 4
    19dc:	2c c0       	rjmp	.+88     	; 0x1a36 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19e2:	86 e0       	ldi	r24, 0x06	; 6
    19e4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    19e6:	09 b4       	in	r0, 0x29	; 41
    19e8:	00 fe       	sbrs	r0, 0
    19ea:	fd cf       	rjmp	.-6      	; 0x19e6 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19ec:	80 91 d8 00 	lds	r24, 0x00D8
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    19f6:	80 91 e1 00 	lds	r24, 0x00E1
    19fa:	8f 7e       	andi	r24, 0xEF	; 239
    19fc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a00:	80 91 e2 00 	lds	r24, 0x00E2
    1a04:	8f 7e       	andi	r24, 0xEF	; 239
    1a06:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a0a:	80 91 e2 00 	lds	r24, 0x00E2
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a14:	80 91 41 02 	lds	r24, 0x0241
    1a18:	88 23       	and	r24, r24
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1a20:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1a24:	87 ff       	sbrs	r24, 7
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <__vector_11+0xd6>
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <__vector_11+0xd8>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 93 45 02 	sts	0x0245, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1a32:	0e 94 35 02 	call	0x46a	; 0x46a <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a36:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a3a:	83 ff       	sbrs	r24, 3
    1a3c:	27 c0       	rjmp	.+78     	; 0x1a8c <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a3e:	80 91 e2 00 	lds	r24, 0x00E2
    1a42:	83 ff       	sbrs	r24, 3
    1a44:	23 c0       	rjmp	.+70     	; 0x1a8c <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1a46:	80 91 e1 00 	lds	r24, 0x00E1
    1a4a:	87 7f       	andi	r24, 0xF7	; 247
    1a4c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 45 02 	sts	0x0245, r24
		USB_Device_ConfigurationNumber = 0;
    1a56:	10 92 41 02 	sts	0x0241, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a5a:	80 91 e1 00 	lds	r24, 0x00E1
    1a5e:	8e 7f       	andi	r24, 0xFE	; 254
    1a60:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a64:	80 91 e2 00 	lds	r24, 0x00E2
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a6e:	80 91 e2 00 	lds	r24, 0x00E2
    1a72:	80 61       	ori	r24, 0x10	; 16
    1a74:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a78:	42 e0       	ldi	r20, 0x02	; 2
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	5b de       	rcall	.-842    	; 0x1736 <Endpoint_ConfigureEndpoint_Prv>
    1a80:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1a84:	88 60       	ori	r24, 0x08	; 8
    1a86:	80 93 f0 00 	sts	0x00F0, r24
    1a8a:	b8 d1       	rcall	.+880    	; 0x1dfc <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	cf 93       	push	r28
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ad2:	80 91 e9 00 	lds	r24, 0x00E9
    1ad6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ad8:	90 91 ec 00 	lds	r25, 0x00EC
    1adc:	90 ff       	sbrs	r25, 0
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <__vector_12+0x36>
    1ae0:	90 e8       	ldi	r25, 0x80	; 128
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <__vector_12+0x38>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ae6:	c9 2f       	mov	r28, r25
    1ae8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aea:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1aee:	80 91 f0 00 	lds	r24, 0x00F0
    1af2:	87 7f       	andi	r24, 0xF7	; 247
    1af4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1af8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1afa:	1c d0       	rcall	.+56     	; 0x1b34 <USB_Device_ProcessControlRequest>
    1afc:	10 92 e9 00 	sts	0x00E9, r1
    1b00:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b04:	88 60       	ori	r24, 0x08	; 8
    1b06:	80 93 f0 00 	sts	0x00F0, r24
    1b0a:	cf 70       	andi	r28, 0x0F	; 15
    1b0c:	c0 93 e9 00 	sts	0x00E9, r28
    1b10:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1b12:	ef 91       	pop	r30
    1b14:	cf 91       	pop	r28
    1b16:	bf 91       	pop	r27
    1b18:	af 91       	pop	r26
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	7f 91       	pop	r23
    1b20:	6f 91       	pop	r22
    1b22:	5f 91       	pop	r21
    1b24:	4f 91       	pop	r20
    1b26:	3f 91       	pop	r19
    1b28:	2f 91       	pop	r18
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <USB_Device_ProcessControlRequest>:
    1b34:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	ac 97       	sbiw	r28, 0x2c	; 44
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1b4a:	e6 e4       	ldi	r30, 0x46	; 70
    1b4c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b4e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b52:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b54:	22 e0       	ldi	r18, 0x02	; 2
    1b56:	ee 34       	cpi	r30, 0x4E	; 78
    1b58:	f2 07       	cpc	r31, r18
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b5c:	0e 94 84 02 	call	0x508	; 0x508 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b60:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b64:	83 ff       	sbrs	r24, 3
    1b66:	32 c1       	rjmp	.+612    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b68:	80 91 46 02 	lds	r24, 0x0246

		switch (USB_ControlRequest.bRequest)
    1b6c:	90 91 47 02 	lds	r25, 0x0247
    1b70:	95 30       	cpi	r25, 0x05	; 5
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <USB_Device_ProcessControlRequest+0x42>
    1b74:	87 c0       	rjmp	.+270    	; 0x1c84 <USB_Device_ProcessControlRequest+0x150>
    1b76:	38 f4       	brcc	.+14     	; 0x1b86 <USB_Device_ProcessControlRequest+0x52>
    1b78:	91 30       	cpi	r25, 0x01	; 1
    1b7a:	b1 f1       	breq	.+108    	; 0x1be8 <USB_Device_ProcessControlRequest+0xb4>
    1b7c:	70 f0       	brcs	.+28     	; 0x1b9a <USB_Device_ProcessControlRequest+0x66>
    1b7e:	93 30       	cpi	r25, 0x03	; 3
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <USB_Device_ProcessControlRequest+0x50>
    1b82:	24 c1       	rjmp	.+584    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1b84:	31 c0       	rjmp	.+98     	; 0x1be8 <USB_Device_ProcessControlRequest+0xb4>
    1b86:	98 30       	cpi	r25, 0x08	; 8
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <USB_Device_ProcessControlRequest+0x58>
    1b8a:	f4 c0       	rjmp	.+488    	; 0x1d74 <USB_Device_ProcessControlRequest+0x240>
    1b8c:	99 30       	cpi	r25, 0x09	; 9
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <USB_Device_ProcessControlRequest+0x5e>
    1b90:	00 c1       	rjmp	.+512    	; 0x1d92 <USB_Device_ProcessControlRequest+0x25e>
    1b92:	96 30       	cpi	r25, 0x06	; 6
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <USB_Device_ProcessControlRequest+0x64>
    1b96:	1a c1       	rjmp	.+564    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1b98:	9b c0       	rjmp	.+310    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b9a:	80 38       	cpi	r24, 0x80	; 128
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <USB_Device_ProcessControlRequest+0x72>
    1b9e:	82 38       	cpi	r24, 0x82	; 130
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <USB_Device_ProcessControlRequest+0x70>
    1ba2:	14 c1       	rjmp	.+552    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ba6:	80 91 42 02 	lds	r24, 0x0242
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1baa:	90 91 43 02 	lds	r25, 0x0243
    1bae:	99 23       	and	r25, r25
    1bb0:	89 f0       	breq	.+34     	; 0x1bd4 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1bb6:	80 91 4a 02 	lds	r24, 0x024A
    1bba:	90 91 4b 02 	lds	r25, 0x024B
    1bbe:	8f 70       	andi	r24, 0x0F	; 15
    1bc0:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bc2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bc6:	80 91 eb 00 	lds	r24, 0x00EB
    1bca:	85 fb       	bst	r24, 5
    1bcc:	88 27       	eor	r24, r24
    1bce:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bd0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bd4:	90 91 e8 00 	lds	r25, 0x00E8
    1bd8:	97 7f       	andi	r25, 0xF7	; 247
    1bda:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1bde:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1be2:	10 92 f1 00 	sts	0x00F1, r1
    1be6:	d1 c0       	rjmp	.+418    	; 0x1d8a <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1be8:	88 23       	and	r24, r24
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <USB_Device_ProcessControlRequest+0xbe>
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <USB_Device_ProcessControlRequest+0xbe>
    1bf0:	ed c0       	rjmp	.+474    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1bf2:	8f 71       	andi	r24, 0x1F	; 31
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <USB_Device_ProcessControlRequest+0xca>
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <USB_Device_ProcessControlRequest+0xc8>
    1bfa:	e8 c0       	rjmp	.+464    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1bfc:	0b c0       	rjmp	.+22     	; 0x1c14 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1bfe:	80 91 48 02 	lds	r24, 0x0248
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <USB_Device_ProcessControlRequest+0xd4>
    1c06:	e2 c0       	rjmp	.+452    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c08:	93 30       	cpi	r25, 0x03	; 3
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <USB_Device_ProcessControlRequest+0xda>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	80 93 43 02 	sts	0x0243, r24
    1c12:	2f c0       	rjmp	.+94     	; 0x1c72 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1c14:	80 91 48 02 	lds	r24, 0x0248
    1c18:	81 11       	cpse	r24, r1
    1c1a:	2b c0       	rjmp	.+86     	; 0x1c72 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1c1c:	80 91 4a 02 	lds	r24, 0x024A
    1c20:	90 91 4b 02 	lds	r25, 0x024B
    1c24:	8f 70       	andi	r24, 0x0F	; 15
    1c26:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <USB_Device_ProcessControlRequest+0xfa>
    1c2c:	cf c0       	rjmp	.+414    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c2e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c32:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c36:	20 ff       	sbrs	r18, 0
    1c38:	1c c0       	rjmp	.+56     	; 0x1c72 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c3a:	20 91 47 02 	lds	r18, 0x0247
    1c3e:	23 30       	cpi	r18, 0x03	; 3
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c42:	80 91 eb 00 	lds	r24, 0x00EB
    1c46:	80 62       	ori	r24, 0x20	; 32
    1c48:	12 c0       	rjmp	.+36     	; 0x1c6e <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c4a:	90 91 eb 00 	lds	r25, 0x00EB
    1c4e:	90 61       	ori	r25, 0x10	; 16
    1c50:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <USB_Device_ProcessControlRequest+0x128>
    1c5a:	22 0f       	add	r18, r18
    1c5c:	8a 95       	dec	r24
    1c5e:	ea f7       	brpl	.-6      	; 0x1c5a <USB_Device_ProcessControlRequest+0x126>
    1c60:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c64:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c68:	80 91 eb 00 	lds	r24, 0x00EB
    1c6c:	88 60       	ori	r24, 0x08	; 8
    1c6e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c76:	80 91 e8 00 	lds	r24, 0x00E8
    1c7a:	87 7f       	andi	r24, 0xF7	; 247
    1c7c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c80:	cf dd       	rcall	.-1122   	; 0x1820 <Endpoint_ClearStatusStage>
    1c82:	a4 c0       	rjmp	.+328    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1c84:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c86:	a2 c0       	rjmp	.+324    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1c88:	80 91 48 02 	lds	r24, 0x0248
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c8c:	90 91 49 02 	lds	r25, 0x0249
    1c90:	8f 77       	andi	r24, 0x7F	; 127
    1c92:	99 27       	eor	r25, r25
    1c94:	18 2f       	mov	r17, r24
    1c96:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c9a:	90 78       	andi	r25, 0x80	; 128
    1c9c:	98 2b       	or	r25, r24
    1c9e:	90 93 e3 00 	sts	0x00E3, r25
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8
    1ca6:	87 7f       	andi	r24, 0xF7	; 247
    1ca8:	80 93 e8 00 	sts	0x00E8, r24
    1cac:	b9 dd       	rcall	.-1166   	; 0x1820 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1cae:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cb2:	80 ff       	sbrs	r24, 0
    1cb4:	fc cf       	rjmp	.-8      	; 0x1cae <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1cb6:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	80 93 e3 00 	sts	0x00E3, r24
    1cc0:	11 23       	and	r17, r17
    1cc2:	11 f0       	breq	.+4      	; 0x1cc8 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <USB_Device_ProcessControlRequest+0x196>
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	80 93 45 02 	sts	0x0245, r24
    1cce:	7e c0       	rjmp	.+252    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1cd0:	80 58       	subi	r24, 0x80	; 128
    1cd2:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <USB_Device_ProcessControlRequest+0x1a4>
    1cd6:	7a c0       	rjmp	.+244    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1cd8:	80 91 48 02 	lds	r24, 0x0248
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1cdc:	90 91 49 02 	lds	r25, 0x0249
    1ce0:	8c 3d       	cpi	r24, 0xDC	; 220
    1ce2:	23 e0       	ldi	r18, 0x03	; 3
    1ce4:	92 07       	cpc	r25, r18
    1ce6:	71 f5       	brne	.+92     	; 0x1d44 <USB_Device_ProcessControlRequest+0x210>
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1cec:	8a e2       	ldi	r24, 0x2A	; 42
    1cee:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1cf0:	4f b7       	in	r20, 0x3f	; 63
    1cf2:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1cf4:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1cf6:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1cfc:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1cfe:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	50 93 57 00 	sts	0x0057, r21
    1d06:	e4 91       	lpm	r30, Z+
    1d08:	20 ff       	sbrs	r18, 0
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1d0c:	e2 95       	swap	r30
    1d0e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1d10:	3f 5f       	subi	r19, 0xFF	; 255
    1d12:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1d14:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	ea 30       	cpi	r30, 0x0A	; 10
    1d1a:	10 f0       	brcs	.+4      	; 0x1d20 <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1d1c:	c7 96       	adiw	r24, 0x37	; 55
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <USB_Device_ProcessControlRequest+0x1ee>
    1d20:	c0 96       	adiw	r24, 0x30	; 48
    1d22:	8d 93       	st	X+, r24
    1d24:	9d 93       	st	X+, r25
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d2a:	49 f7       	brne	.-46     	; 0x1cfe <USB_Device_ProcessControlRequest+0x1ca>
    1d2c:	4f bf       	out	0x3f, r20	; 63
    1d2e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d32:	87 7f       	andi	r24, 0xF7	; 247
    1d34:	80 93 e8 00 	sts	0x00E8, r24
    1d38:	6a e2       	ldi	r22, 0x2A	; 42
    1d3a:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	f9 db       	rcall	.-2062   	; 0x1534 <Endpoint_Write_Control_Stream_LE>
    1d42:	12 c0       	rjmp	.+36     	; 0x1d68 <USB_Device_ProcessControlRequest+0x234>
    1d44:	ae 01       	movw	r20, r28
    1d46:	45 5d       	subi	r20, 0xD5	; 213
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1d4a:	60 91 4a 02 	lds	r22, 0x024A
    1d4e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <CALLBACK_USB_GetDescriptor>
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	d9 f1       	breq	.+118    	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1d56:	20 91 e8 00 	lds	r18, 0x00E8
    1d5a:	27 7f       	andi	r18, 0xF7	; 247
    1d5c:	20 93 e8 00 	sts	0x00E8, r18
    1d60:	bc 01       	movw	r22, r24
    1d62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d64:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1d66:	86 dc       	rcall	.-1780   	; 0x1674 <Endpoint_Write_Control_PStream_LE>
    1d68:	80 91 e8 00 	lds	r24, 0x00E8
    1d6c:	8b 77       	andi	r24, 0x7B	; 123
    1d6e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d72:	2c c0       	rjmp	.+88     	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1d74:	80 38       	cpi	r24, 0x80	; 128
    1d76:	51 f5       	brne	.+84     	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1d78:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1d7c:	87 7f       	andi	r24, 0xF7	; 247
    1d7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d82:	80 91 41 02 	lds	r24, 0x0241
    1d86:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1d8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d8e:	8e 77       	andi	r24, 0x7E	; 126
    1d90:	75 cf       	rjmp	.-278    	; 0x1c7c <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d92:	81 11       	cpse	r24, r1
    1d94:	1b c0       	rjmp	.+54     	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
    1d96:	90 91 48 02 	lds	r25, 0x0248
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d9a:	92 30       	cpi	r25, 0x02	; 2
    1d9c:	b8 f4       	brcc	.+46     	; 0x1dcc <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d9e:	80 91 e8 00 	lds	r24, 0x00E8
    1da2:	87 7f       	andi	r24, 0xF7	; 247
    1da4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1da8:	90 93 41 02 	sts	0x0241, r25
    1dac:	39 dd       	rcall	.-1422   	; 0x1820 <Endpoint_ClearStatusStage>
    1dae:	80 91 41 02 	lds	r24, 0x0241
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1db2:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <USB_Device_ProcessControlRequest+0x28a>
    1db6:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1dba:	87 ff       	sbrs	r24, 7
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <USB_Device_ProcessControlRequest+0x28e>
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <USB_Device_ProcessControlRequest+0x290>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1dc4:	80 93 45 02 	sts	0x0245, r24
    1dc8:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Device_ConfigurationChanged>
    1dcc:	80 91 e8 00 	lds	r24, 0x00E8
    1dd0:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <USB_Device_ProcessControlRequest+0x2b4>
    1dd4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dd8:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1dda:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dde:	80 91 eb 00 	lds	r24, 0x00EB
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1de8:	ac 96       	adiw	r28, 0x2c	; 44
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	08 95       	ret

00001dfc <USB_Event_Stub>:
    1dfc:	08 95       	ret

00001dfe <USB_USBTask>:
    1dfe:	cf 93       	push	r28
    1e00:	80 91 45 02 	lds	r24, 0x0245
    1e04:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e06:	a9 f0       	breq	.+42     	; 0x1e32 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e08:	80 91 e9 00 	lds	r24, 0x00E9
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e0e:	90 91 ec 00 	lds	r25, 0x00EC
    1e12:	90 ff       	sbrs	r25, 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <USB_USBTask+0x1c>
    1e16:	90 e8       	ldi	r25, 0x80	; 128
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <USB_USBTask+0x1e>
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e1c:	c9 2f       	mov	r28, r25
    1e1e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e20:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e24:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1e28:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1e2a:	84 de       	rcall	.-760    	; 0x1b34 <USB_Device_ProcessControlRequest>
    1e2c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e2e:	c0 93 e9 00 	sts	0x00E9, r28
    1e32:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e34:	08 95       	ret

00001e36 <CDC_Device_ConfigureEndpoints>:
    1e36:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1e38:	df 93       	push	r29
    1e3a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1e3c:	40 96       	adiw	r24, 0x10	; 16
    1e3e:	fc 01       	movw	r30, r24
    1e40:	8b e0       	ldi	r24, 0x0B	; 11
    1e42:	df 01       	movw	r26, r30
    1e44:	1d 92       	st	X+, r1
    1e46:	8a 95       	dec	r24
    1e48:	e9 f7       	brne	.-6      	; 0x1e44 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1e4e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	a4 dc       	rcall	.-1720   	; 0x17a4 <Endpoint_ConfigureEndpointTable>
    1e5c:	88 23       	and	r24, r24
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <CDC_Device_ConfigureEndpoints+0x42>
    1e60:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1e62:	ce 01       	movw	r24, r28
    1e64:	06 96       	adiw	r24, 0x06	; 6
    1e66:	9e dc       	rcall	.-1732   	; 0x17a4 <Endpoint_ConfigureEndpointTable>
    1e68:	88 23       	and	r24, r24
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <CDC_Device_ConfigureEndpoints+0x42>
    1e6c:	61 e0       	ldi	r22, 0x01	; 1
    1e6e:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1e70:	0b 96       	adiw	r24, 0x0b	; 11
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
	  return false;

	return true;
}
    1e76:	96 cc       	rjmp	.-1748   	; 0x17a4 <Endpoint_ConfigureEndpointTable>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
	  return false;

	return true;
}
    1e7e:	08 95       	ret

00001e80 <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	fc 01       	movw	r30, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	ba 01       	movw	r22, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1e8a:	20 91 45 02 	lds	r18, 0x0245
    1e8e:	24 30       	cpi	r18, 0x04	; 4
    1e90:	89 f4       	brne	.+34     	; 0x1eb4 <CDC_Device_SendData+0x34>
    1e92:	04 89       	ldd	r16, Z+20	; 0x14
    1e94:	15 89       	ldd	r17, Z+21	; 0x15
    1e96:	26 89       	ldd	r18, Z+22	; 0x16
    1e98:	37 89       	ldd	r19, Z+23	; 0x17
    1e9a:	01 2b       	or	r16, r17
    1e9c:	02 2b       	or	r16, r18
    1e9e:	03 2b       	or	r16, r19
    1ea0:	49 f0       	breq	.+18     	; 0x1eb4 <CDC_Device_SendData+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ea2:	21 81       	ldd	r18, Z+1	; 0x01
    1ea4:	2f 70       	andi	r18, 0x0F	; 15
    1ea6:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
}
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1eb2:	f3 ca       	rjmp	.-2586   	; 0x149a <Endpoint_Write_Stream_LE>
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
}
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1ebc:	cf 93       	push	r28
    1ebe:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1ec0:	20 91 45 02 	lds	r18, 0x0245
    1ec4:	24 30       	cpi	r18, 0x04	; 4
    1ec6:	f1 f4       	brne	.+60     	; 0x1f04 <CDC_Device_SendByte+0x48>
    1ec8:	fc 01       	movw	r30, r24
    1eca:	44 89       	ldd	r20, Z+20	; 0x14
    1ecc:	55 89       	ldd	r21, Z+21	; 0x15
    1ece:	66 89       	ldd	r22, Z+22	; 0x16
    1ed0:	77 89       	ldd	r23, Z+23	; 0x17
    1ed2:	45 2b       	or	r20, r21
    1ed4:	46 2b       	or	r20, r22
    1ed6:	47 2b       	or	r20, r23
    1ed8:	a9 f0       	breq	.+42     	; 0x1f04 <CDC_Device_SendByte+0x48>
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	8f 70       	andi	r24, 0x0F	; 15
    1ede:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1ee6:	85 ff       	sbrs	r24, 5
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1eea:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	0a c0       	rjmp	.+20     	; 0x1f06 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ef2:	80 91 e8 00 	lds	r24, 0x00E8
    1ef6:	8e 77       	andi	r24, 0x7E	; 126
    1ef8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1efc:	b2 dc       	rcall	.-1692   	; 0x1862 <Endpoint_WaitUntilReady>
    1efe:	88 23       	and	r24, r24
    1f00:	a1 f3       	breq	.-24     	; 0x1eea <CDC_Device_SendByte+0x2e>
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <CDC_Device_SendByte+0x4a>
    1f04:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1f06:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1f08:	08 95       	ret

00001f0a <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f0a:	20 91 45 02 	lds	r18, 0x0245
    1f0e:	24 30       	cpi	r18, 0x04	; 4
    1f10:	29 f5       	brne	.+74     	; 0x1f5c <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f12:	fc 01       	movw	r30, r24
    1f14:	44 89       	ldd	r20, Z+20	; 0x14
    1f16:	55 89       	ldd	r21, Z+21	; 0x15
    1f18:	66 89       	ldd	r22, Z+22	; 0x16
    1f1a:	77 89       	ldd	r23, Z+23	; 0x17
    1f1c:	45 2b       	or	r20, r21
    1f1e:	46 2b       	or	r20, r22
    1f20:	47 2b       	or	r20, r23
    1f22:	e1 f0       	breq	.+56     	; 0x1f5c <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f24:	81 81       	ldd	r24, Z+1	; 0x01
    1f26:	8f 70       	andi	r24, 0x0F	; 15
    1f28:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1f2c:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1f30:	81 11       	cpse	r24, r1
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f38:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f3c:	80 91 e8 00 	lds	r24, 0x00E8
    1f40:	8e 77       	andi	r24, 0x7E	; 126
    1f42:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1f46:	95 fd       	sbrc	r25, 5
    1f48:	f5 cf       	rjmp	.-22     	; 0x1f34 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1f4a:	8b dc       	rcall	.-1770   	; 0x1862 <Endpoint_WaitUntilReady>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <CDC_Device_Flush+0x54>
    1f50:	90 91 e8 00 	lds	r25, 0x00E8
    1f54:	9e 77       	andi	r25, 0x7E	; 126
    1f56:	90 93 e8 00 	sts	0x00E8, r25
    1f5a:	08 95       	ret
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1f5e:	08 95       	ret

00001f60 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1f60:	20 91 45 02 	lds	r18, 0x0245
    1f64:	24 30       	cpi	r18, 0x04	; 4
    1f66:	89 f4       	brne	.+34     	; 0x1f8a <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f68:	fc 01       	movw	r30, r24
    1f6a:	44 89       	ldd	r20, Z+20	; 0x14
    1f6c:	55 89       	ldd	r21, Z+21	; 0x15
    1f6e:	66 89       	ldd	r22, Z+22	; 0x16
    1f70:	77 89       	ldd	r23, Z+23	; 0x17
    1f72:	45 2b       	or	r20, r21
    1f74:	46 2b       	or	r20, r22
    1f76:	47 2b       	or	r20, r23
    1f78:	41 f0       	breq	.+16     	; 0x1f8a <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7a:	21 81       	ldd	r18, Z+1	; 0x01
    1f7c:	2f 70       	andi	r18, 0x0F	; 15
    1f7e:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f82:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1f86:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    1f88:	c0 cf       	rjmp	.-128    	; 0x1f0a <CDC_Device_Flush>
    1f8a:	08 95       	ret

00001f8c <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f8c:	20 91 45 02 	lds	r18, 0x0245
    1f90:	24 30       	cpi	r18, 0x04	; 4
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1f94:	2f ef       	ldi	r18, 0xFF	; 255
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	24 c0       	rjmp	.+72     	; 0x1fe2 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	44 89       	ldd	r20, Z+20	; 0x14
    1f9e:	55 89       	ldd	r21, Z+21	; 0x15
    1fa0:	66 89       	ldd	r22, Z+22	; 0x16
    1fa2:	77 89       	ldd	r23, Z+23	; 0x17
    1fa4:	45 2b       	or	r20, r21
    1fa6:	46 2b       	or	r20, r22
    1fa8:	47 2b       	or	r20, r23
    1faa:	a1 f3       	breq	.-24     	; 0x1f94 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fac:	86 81       	ldd	r24, Z+6	; 0x06
    1fae:	8f 70       	andi	r24, 0x0F	; 15
    1fb0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fb4:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1fb8:	82 ff       	sbrs	r24, 2
    1fba:	ec cf       	rjmp	.-40     	; 0x1f94 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1fbc:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1fc0:	88 23       	and	r24, r24
    1fc2:	21 f0       	breq	.+8      	; 0x1fcc <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1fc4:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1fcc:	2f ef       	ldi	r18, 0xFF	; 255
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1fd0:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fd8:	80 91 e8 00 	lds	r24, 0x00E8
    1fdc:	8b 77       	andi	r24, 0x7B	; 123
    1fde:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	08 95       	ret

00001fe6 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1fe6:	08 95       	ret

00001fe8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fee:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1ff2:	83 ff       	sbrs	r24, 3
    1ff4:	a7 c0       	rjmp	.+334    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1ff6:	88 81       	ld	r24, Y
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	20 91 4a 02 	lds	r18, 0x024A
    1ffe:	30 91 4b 02 	lds	r19, 0x024B
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	09 f0       	breq	.+2      	; 0x200a <CDC_Device_ProcessControlRequest+0x22>
    2008:	9d c0       	rjmp	.+314    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    200a:	80 91 47 02 	lds	r24, 0x0247
    200e:	81 32       	cpi	r24, 0x21	; 33
    2010:	61 f0       	breq	.+24     	; 0x202a <CDC_Device_ProcessControlRequest+0x42>
    2012:	20 f4       	brcc	.+8      	; 0x201c <CDC_Device_ProcessControlRequest+0x34>
    2014:	80 32       	cpi	r24, 0x20	; 32
    2016:	09 f0       	breq	.+2      	; 0x201a <CDC_Device_ProcessControlRequest+0x32>
    2018:	95 c0       	rjmp	.+298    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    201a:	3d c0       	rjmp	.+122    	; 0x2096 <CDC_Device_ProcessControlRequest+0xae>
    201c:	82 32       	cpi	r24, 0x22	; 34
    201e:	09 f4       	brne	.+2      	; 0x2022 <CDC_Device_ProcessControlRequest+0x3a>
    2020:	6d c0       	rjmp	.+218    	; 0x20fc <CDC_Device_ProcessControlRequest+0x114>
    2022:	83 32       	cpi	r24, 0x23	; 35
    2024:	09 f0       	breq	.+2      	; 0x2028 <CDC_Device_ProcessControlRequest+0x40>
    2026:	8e c0       	rjmp	.+284    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    2028:	7d c0       	rjmp	.+250    	; 0x2124 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    202a:	80 91 46 02 	lds	r24, 0x0246
    202e:	81 3a       	cpi	r24, 0xA1	; 161
    2030:	09 f0       	breq	.+2      	; 0x2034 <CDC_Device_ProcessControlRequest+0x4c>
    2032:	88 c0       	rjmp	.+272    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2034:	80 91 e8 00 	lds	r24, 0x00E8
    2038:	87 7f       	andi	r24, 0xF7	; 247
    203a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    203e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2042:	80 ff       	sbrs	r24, 0
    2044:	fc cf       	rjmp	.-8      	; 0x203e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2046:	4c 89       	ldd	r20, Y+20	; 0x14
    2048:	5d 89       	ldd	r21, Y+21	; 0x15
    204a:	6e 89       	ldd	r22, Y+22	; 0x16
    204c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    204e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2052:	bb 27       	eor	r27, r27
    2054:	a7 2f       	mov	r26, r23
    2056:	96 2f       	mov	r25, r22
    2058:	85 2f       	mov	r24, r21
    205a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    205e:	cb 01       	movw	r24, r22
    2060:	aa 27       	eor	r26, r26
    2062:	bb 27       	eor	r27, r27
    2064:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2068:	47 2f       	mov	r20, r23
    206a:	55 27       	eor	r21, r21
    206c:	66 27       	eor	r22, r22
    206e:	77 27       	eor	r23, r23
    2070:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2074:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2076:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    207a:	89 8d       	ldd	r24, Y+25	; 0x19
    207c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2080:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2082:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2086:	80 91 e8 00 	lds	r24, 0x00E8
    208a:	8e 77       	andi	r24, 0x7E	; 126
    208c:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2094:	c5 cb       	rjmp	.-2166   	; 0x1820 <Endpoint_ClearStatusStage>
    2096:	80 91 46 02 	lds	r24, 0x0246
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    209a:	81 32       	cpi	r24, 0x21	; 33
    209c:	09 f0       	breq	.+2      	; 0x20a0 <CDC_Device_ProcessControlRequest+0xb8>
    209e:	52 c0       	rjmp	.+164    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    20a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20a4:	87 7f       	andi	r24, 0xF7	; 247
    20a6:	80 93 e8 00 	sts	0x00E8, r24
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <CDC_Device_ProcessControlRequest+0xce>
    20ac:	80 91 45 02 	lds	r24, 0x0245
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    20b0:	88 23       	and	r24, r24
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <CDC_Device_ProcessControlRequest+0xce>
    20b4:	47 c0       	rjmp	.+142    	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    20b6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20ba:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    20bc:	f7 cf       	rjmp	.-18     	; 0x20ac <CDC_Device_ProcessControlRequest+0xc4>
    20be:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    20c2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    20c6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    20ca:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    20ce:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    20d0:	2d 8b       	std	Y+21, r18	; 0x15
    20d2:	9e 8b       	std	Y+22, r25	; 0x16
    20d4:	8f 8b       	std	Y+23, r24	; 0x17
    20d6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20da:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    20dc:	80 91 f1 00 	lds	r24, 0x00F1
    20e0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    20e2:	80 91 f1 00 	lds	r24, 0x00F1
    20e6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    20e8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20ec:	8b 77       	andi	r24, 0x7B	; 123
    20ee:	80 93 e8 00 	sts	0x00E8, r24
    20f2:	96 db       	rcall	.-2260   	; 0x1820 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    20f4:	ce 01       	movw	r24, r28
    20f6:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    20f8:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    20fa:	58 c9       	rjmp	.-3408   	; 0x13ac <EVENT_CDC_Device_LineEncodingChanged>
    20fc:	80 91 46 02 	lds	r24, 0x0246
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2100:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2102:	01 f5       	brne	.+64     	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    2104:	80 91 e8 00 	lds	r24, 0x00E8
    2108:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    210a:	80 93 e8 00 	sts	0x00E8, r24
    210e:	88 db       	rcall	.-2288   	; 0x1820 <Endpoint_ClearStatusStage>
    2110:	80 91 48 02 	lds	r24, 0x0248
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2114:	90 91 49 02 	lds	r25, 0x0249

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2118:	99 8b       	std	Y+17, r25	; 0x11
    211a:	88 8b       	std	Y+16, r24	; 0x10
    211c:	ce 01       	movw	r24, r28
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	a0 c9       	rjmp	.-3264   	; 0x1464 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2124:	80 91 46 02 	lds	r24, 0x0246
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2128:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    212a:	61 f4       	brne	.+24     	; 0x2144 <CDC_Device_ProcessControlRequest+0x15c>
    212c:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2130:	87 7f       	andi	r24, 0xF7	; 247
    2132:	80 93 e8 00 	sts	0x00E8, r24
    2136:	74 db       	rcall	.-2328   	; 0x1820 <Endpoint_ClearStatusStage>
    2138:	60 91 48 02 	lds	r22, 0x0248
    213c:	ce 01       	movw	r24, r28
    213e:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2140:	cf 91       	pop	r28
    2142:	51 cf       	rjmp	.-350    	; 0x1fe6 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    214a:	6f 92       	push	r6
    214c:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    214e:	8f 92       	push	r8
    2150:	9f 92       	push	r9
			}

			break;
	}
}
    2152:	af 92       	push	r10
    2154:	bf 92       	push	r11
    2156:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	00 d0       	rcall	.+0      	; 0x2168 <HID_Device_ProcessControlRequest+0x1e>
    2168:	1f 92       	push	r1
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    2170:	ad b6       	in	r10, 0x3d	; 61
    2172:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2174:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2178:	83 ff       	sbrs	r24, 3
    217a:	07 c1       	rjmp	.+526    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    217c:	f7 01       	movw	r30, r14
    217e:	80 81       	ld	r24, Z
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	20 91 4a 02 	lds	r18, 0x024A
    2186:	30 91 4b 02 	lds	r19, 0x024B
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	09 f0       	breq	.+2      	; 0x2192 <HID_Device_ProcessControlRequest+0x48>
    2190:	fc c0       	rjmp	.+504    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    2192:	80 91 47 02 	lds	r24, 0x0247
    2196:	83 30       	cpi	r24, 0x03	; 3
    2198:	09 f4       	brne	.+2      	; 0x219c <HID_Device_ProcessControlRequest+0x52>
    219a:	9e c0       	rjmp	.+316    	; 0x22d8 <HID_Device_ProcessControlRequest+0x18e>
    219c:	30 f4       	brcc	.+12     	; 0x21aa <HID_Device_ProcessControlRequest+0x60>
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	71 f0       	breq	.+28     	; 0x21be <HID_Device_ProcessControlRequest+0x74>
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <HID_Device_ProcessControlRequest+0x5e>
    21a6:	f1 c0       	rjmp	.+482    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    21a8:	d4 c0       	rjmp	.+424    	; 0x2352 <HID_Device_ProcessControlRequest+0x208>
    21aa:	8a 30       	cpi	r24, 0x0A	; 10
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <HID_Device_ProcessControlRequest+0x66>
    21ae:	b9 c0       	rjmp	.+370    	; 0x2322 <HID_Device_ProcessControlRequest+0x1d8>
    21b0:	8b 30       	cpi	r24, 0x0B	; 11
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <HID_Device_ProcessControlRequest+0x6c>
    21b4:	a2 c0       	rjmp	.+324    	; 0x22fa <HID_Device_ProcessControlRequest+0x1b0>
    21b6:	89 30       	cpi	r24, 0x09	; 9
    21b8:	09 f0       	breq	.+2      	; 0x21bc <HID_Device_ProcessControlRequest+0x72>
    21ba:	e7 c0       	rjmp	.+462    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    21bc:	4c c0       	rjmp	.+152    	; 0x2256 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21be:	80 91 46 02 	lds	r24, 0x0246
    21c2:	81 3a       	cpi	r24, 0xA1	; 161
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <HID_Device_ProcessControlRequest+0x7e>
    21c6:	e1 c0       	rjmp	.+450    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    21c8:	8d b6       	in	r8, 0x3d	; 61
    21ca:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    21cc:	1a 82       	std	Y+2, r1	; 0x02
    21ce:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    21d0:	80 91 48 02 	lds	r24, 0x0248
    21d4:	10 91 49 02 	lds	r17, 0x0249
    21d8:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    21da:	f7 01       	movw	r30, r14
    21dc:	40 85       	ldd	r20, Z+8	; 0x08
    21de:	8d b7       	in	r24, 0x3d	; 61
    21e0:	9e b7       	in	r25, 0x3e	; 62
    21e2:	84 1b       	sub	r24, r20
    21e4:	91 09       	sbc	r25, r1
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	9e bf       	out	0x3e, r25	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	8d bf       	out	0x3d, r24	; 61
    21f0:	cd b6       	in	r12, 0x3d	; 61
    21f2:	de b6       	in	r13, 0x3e	; 62
    21f4:	ef ef       	ldi	r30, 0xFF	; 255
    21f6:	ce 1a       	sub	r12, r30
    21f8:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    21fa:	36 01       	movw	r6, r12
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	c6 01       	movw	r24, r12
    2204:	ea d1       	rcall	.+980    	; 0x25da <memset>
    2206:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2208:	41 50       	subi	r20, 0x01	; 1
    220a:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    220c:	0f 5f       	subi	r16, 0xFF	; 255
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	96 01       	movw	r18, r12
    2212:	be 01       	movw	r22, r28
    2214:	6d 5f       	subi	r22, 0xFD	; 253
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	c7 01       	movw	r24, r14
    221a:	0e 94 3a 04 	call	0x874	; 0x874 <CALLBACK_HID_Device_CreateHIDReport>
    221e:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2220:	26 81       	ldd	r18, Z+6	; 0x06
    2222:	37 81       	ldd	r19, Z+7	; 0x07
    2224:	21 15       	cp	r18, r1
    2226:	31 05       	cpc	r19, r1
    2228:	29 f0       	breq	.+10     	; 0x2234 <HID_Device_ProcessControlRequest+0xea>
    222a:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	b6 01       	movw	r22, r12
    2230:	c9 01       	movw	r24, r18
    2232:	ca d1       	rcall	.+916    	; 0x25c8 <memcpy>
    2234:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2238:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    223c:	87 7f       	andi	r24, 0xF7	; 247
    223e:	80 93 e8 00 	sts	0x00E8, r24
    2242:	69 81       	ldd	r22, Y+1	; 0x01
    2244:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2246:	c3 01       	movw	r24, r6
    2248:	75 d9       	rcall	.-3350   	; 0x1534 <Endpoint_Write_Control_Stream_LE>
    224a:	80 91 e8 00 	lds	r24, 0x00E8
    224e:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2250:	80 93 e8 00 	sts	0x00E8, r24
    2254:	39 c0       	rjmp	.+114    	; 0x22c8 <HID_Device_ProcessControlRequest+0x17e>
    2256:	80 91 46 02 	lds	r24, 0x0246
    225a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    225c:	09 f0       	breq	.+2      	; 0x2260 <HID_Device_ProcessControlRequest+0x116>
    225e:	95 c0       	rjmp	.+298    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    2260:	8d b6       	in	r8, 0x3d	; 61
    2262:	9e b6       	in	r9, 0x3e	; 62
    2264:	00 91 4c 02 	lds	r16, 0x024C
    2268:	10 91 4d 02 	lds	r17, 0x024D
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    226c:	70 90 48 02 	lds	r7, 0x0248
    2270:	60 90 49 02 	lds	r6, 0x0249
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2274:	8d b7       	in	r24, 0x3d	; 61
    2276:	9e b7       	in	r25, 0x3e	; 62
    2278:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    227a:	91 0b       	sbc	r25, r17
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	9e bf       	out	0x3e, r25	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	8d bf       	out	0x3d, r24	; 61
    2286:	cd b6       	in	r12, 0x3d	; 61
    2288:	de b6       	in	r13, 0x3e	; 62
    228a:	ef ef       	ldi	r30, 0xFF	; 255
    228c:	ce 1a       	sub	r12, r30
    228e:	de 0a       	sbc	r13, r30
    2290:	80 91 e8 00 	lds	r24, 0x00E8
    2294:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2296:	80 93 e8 00 	sts	0x00E8, r24
    229a:	b8 01       	movw	r22, r16
    229c:	c6 01       	movw	r24, r12
    229e:	aa d9       	rcall	.-3244   	; 0x15f4 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    22a0:	80 91 e8 00 	lds	r24, 0x00E8
    22a4:	8e 77       	andi	r24, 0x7E	; 126
    22a6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	71 10       	cpse	r7, r1
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <HID_Device_ProcessControlRequest+0x168>
    22b0:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	02 1b       	sub	r16, r18
    22b6:	13 0b       	sbc	r17, r19
    22b8:	2c 0d       	add	r18, r12
    22ba:	3d 1d       	adc	r19, r13
    22bc:	46 2d       	mov	r20, r6
    22be:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    22c0:	67 2d       	mov	r22, r7
    22c2:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    22c4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    22c8:	88 2d       	mov	r24, r8
    22ca:	99 2d       	mov	r25, r9
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	9e bf       	out	0x3e, r25	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	8d bf       	out	0x3d, r24	; 61
    22d6:	59 c0       	rjmp	.+178    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    22d8:	80 91 46 02 	lds	r24, 0x0246
    22dc:	81 3a       	cpi	r24, 0xA1	; 161
    22de:	09 f0       	breq	.+2      	; 0x22e2 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    22e0:	54 c0       	rjmp	.+168    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    22e2:	80 91 e8 00 	lds	r24, 0x00E8
    22e6:	87 7f       	andi	r24, 0xF7	; 247
    22e8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22ec:	80 91 e8 00 	lds	r24, 0x00E8
    22f0:	80 ff       	sbrs	r24, 0
    22f2:	fc cf       	rjmp	.-8      	; 0x22ec <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22f4:	f7 01       	movw	r30, r14
    22f6:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    22f8:	40 c0       	rjmp	.+128    	; 0x237a <HID_Device_ProcessControlRequest+0x230>
    22fa:	80 91 46 02 	lds	r24, 0x0246
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    22fe:	81 32       	cpi	r24, 0x21	; 33
    2300:	09 f0       	breq	.+2      	; 0x2304 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2302:	43 c0       	rjmp	.+134    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    2304:	80 91 e8 00 	lds	r24, 0x00E8
    2308:	87 7f       	andi	r24, 0xF7	; 247
    230a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    230e:	88 da       	rcall	.-2800   	; 0x1820 <Endpoint_ClearStatusStage>
    2310:	90 91 48 02 	lds	r25, 0x0248
    2314:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2316:	91 11       	cpse	r25, r1
    2318:	01 c0       	rjmp	.+2      	; 0x231c <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	f7 01       	movw	r30, r14
    231e:	81 87       	std	Z+9, r24	; 0x09
    2320:	34 c0       	rjmp	.+104    	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    2322:	80 91 46 02 	lds	r24, 0x0246
    2326:	81 32       	cpi	r24, 0x21	; 33
    2328:	81 f5       	brne	.+96     	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    232a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	80 93 e8 00 	sts	0x00E8, r24
    2334:	75 da       	rcall	.-2838   	; 0x1820 <Endpoint_ClearStatusStage>
    2336:	80 91 48 02 	lds	r24, 0x0248
    233a:	90 91 49 02 	lds	r25, 0x0249
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    233e:	88 27       	eor	r24, r24
    2340:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2342:	96 95       	lsr	r25
    2344:	87 95       	ror	r24
    2346:	3a 95       	dec	r19
    2348:	e1 f7       	brne	.-8      	; 0x2342 <HID_Device_ProcessControlRequest+0x1f8>
    234a:	f7 01       	movw	r30, r14
    234c:	95 87       	std	Z+13, r25	; 0x0d
    234e:	84 87       	std	Z+12, r24	; 0x0c
    2350:	1c c0       	rjmp	.+56     	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    2352:	80 91 46 02 	lds	r24, 0x0246
    2356:	81 3a       	cpi	r24, 0xA1	; 161
    2358:	c1 f4       	brne	.+48     	; 0x238a <HID_Device_ProcessControlRequest+0x240>
    235a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    235e:	87 7f       	andi	r24, 0xF7	; 247
    2360:	80 93 e8 00 	sts	0x00E8, r24
    2364:	80 91 e8 00 	lds	r24, 0x00E8
    2368:	80 ff       	sbrs	r24, 0
    236a:	fc cf       	rjmp	.-8      	; 0x2364 <HID_Device_ProcessControlRequest+0x21a>
    236c:	f7 01       	movw	r30, r14
    236e:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2370:	95 85       	ldd	r25, Z+13	; 0x0d
    2372:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2374:	87 95       	ror	r24
    2376:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2378:	87 95       	ror	r24
    237a:	80 93 f1 00 	sts	0x00F1, r24
    237e:	80 91 e8 00 	lds	r24, 0x00E8
    2382:	8e 77       	andi	r24, 0x7E	; 126
    2384:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2388:	4b da       	rcall	.-2922   	; 0x1820 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	be be       	out	0x3e, r11	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
			}

			break;
	}
}
    2398:	0f 90       	pop	r0
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	df 90       	pop	r13
    23a8:	cf 90       	pop	r12
    23aa:	bf 90       	pop	r11
    23ac:	af 90       	pop	r10
    23ae:	9f 90       	pop	r9
    23b0:	8f 90       	pop	r8
    23b2:	7f 90       	pop	r7
    23b4:	6f 90       	pop	r6
    23b6:	08 95       	ret

000023b8 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    23b8:	9c 01       	movw	r18, r24
    23ba:	27 5f       	subi	r18, 0xF7	; 247
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	f9 01       	movw	r30, r18
    23c0:	27 e0       	ldi	r18, 0x07	; 7
    23c2:	df 01       	movw	r26, r30
    23c4:	1d 92       	st	X+, r1
    23c6:	2a 95       	dec	r18
    23c8:	e9 f7       	brne	.-6      	; 0x23c4 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	fc 01       	movw	r30, r24
    23ce:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    23d0:	24 ef       	ldi	r18, 0xF4	; 244
    23d2:	31 e0       	ldi	r19, 0x01	; 1
    23d4:	35 87       	std	Z+13, r19	; 0x0d
    23d6:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    23d8:	23 e0       	ldi	r18, 0x03	; 3
    23da:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	e1 c9       	rjmp	.-3134   	; 0x17a4 <Endpoint_ConfigureEndpointTable>

000023e2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    23e2:	4f 92       	push	r4
    23e4:	5f 92       	push	r5
    23e6:	6f 92       	push	r6
    23e8:	7f 92       	push	r7
    23ea:	8f 92       	push	r8
    23ec:	9f 92       	push	r9
    23ee:	af 92       	push	r10
    23f0:	bf 92       	push	r11
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	00 d0       	rcall	.+0      	; 0x2404 <HID_Device_USBTask+0x22>
    2404:	1f 92       	push	r1
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    240c:	ad b6       	in	r10, 0x3d	; 61
    240e:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2410:	80 91 45 02 	lds	r24, 0x0245
    2414:	84 30       	cpi	r24, 0x04	; 4
    2416:	09 f0       	breq	.+2      	; 0x241a <HID_Device_USBTask+0x38>
    2418:	8f c0       	rjmp	.+286    	; 0x2538 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    241a:	80 91 e4 00 	lds	r24, 0x00E4
    241e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2422:	f7 01       	movw	r30, r14
    2424:	22 85       	ldd	r18, Z+10	; 0x0a
    2426:	33 85       	ldd	r19, Z+11	; 0x0b
    2428:	28 17       	cp	r18, r24
    242a:	39 07       	cpc	r19, r25
    242c:	09 f4       	brne	.+2      	; 0x2430 <HID_Device_USBTask+0x4e>
    242e:	84 c0       	rjmp	.+264    	; 0x2538 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2430:	81 81       	ldd	r24, Z+1	; 0x01
    2432:	8f 70       	andi	r24, 0x0F	; 15
    2434:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2438:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    243c:	85 ff       	sbrs	r24, 5
    243e:	7c c0       	rjmp	.+248    	; 0x2538 <HID_Device_USBTask+0x156>
    2440:	6d b6       	in	r6, 0x3d	; 61
    2442:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2444:	40 85       	ldd	r20, Z+8	; 0x08
    2446:	8d b7       	in	r24, 0x3d	; 61
    2448:	9e b7       	in	r25, 0x3e	; 62
    244a:	84 1b       	sub	r24, r20
    244c:	91 09       	sbc	r25, r1
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	9e bf       	out	0x3e, r25	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	8d bf       	out	0x3d, r24	; 61
    2458:	cd b6       	in	r12, 0x3d	; 61
    245a:	de b6       	in	r13, 0x3e	; 62
    245c:	ef ef       	ldi	r30, 0xFF	; 255
    245e:	ce 1a       	sub	r12, r30
    2460:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2462:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2464:	1a 82       	std	Y+2, r1	; 0x02
    2466:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2468:	46 01       	movw	r8, r12
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	c6 01       	movw	r24, r12
    2472:	b3 d0       	rcall	.+358    	; 0x25da <memset>
    2474:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2476:	0f 5f       	subi	r16, 0xFF	; 255
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	96 01       	movw	r18, r12
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	be 01       	movw	r22, r28
    2480:	6d 5f       	subi	r22, 0xFD	; 253
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	c7 01       	movw	r24, r14
    2486:	0e 94 3a 04 	call	0x874	; 0x874 <CALLBACK_HID_Device_CreateHIDReport>
    248a:	58 2e       	mov	r5, r24
    248c:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    248e:	84 85       	ldd	r24, Z+12	; 0x0c
    2490:	95 85       	ldd	r25, Z+13	; 0x0d
    2492:	89 2b       	or	r24, r25
    2494:	31 f0       	breq	.+12     	; 0x24a2 <HID_Device_USBTask+0xc0>
    2496:	01 e0       	ldi	r16, 0x01	; 1
    2498:	10 e0       	ldi	r17, 0x00	; 0
    249a:	86 85       	ldd	r24, Z+14	; 0x0e
    249c:	97 85       	ldd	r25, Z+15	; 0x0f
    249e:	89 2b       	or	r24, r25
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <HID_Device_USBTask+0xc4>
    24a2:	00 e0       	ldi	r16, 0x00	; 0
    24a4:	10 e0       	ldi	r17, 0x00	; 0
    24a6:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    24a8:	c6 80       	ldd	r12, Z+6	; 0x06
    24aa:	d7 80       	ldd	r13, Z+7	; 0x07
    24ac:	c1 14       	cp	r12, r1
    24ae:	d1 04       	cpc	r13, r1
    24b0:	89 f0       	breq	.+34     	; 0x24d4 <HID_Device_USBTask+0xf2>
    24b2:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    24b4:	5a 81       	ldd	r21, Y+2	; 0x02
    24b6:	b6 01       	movw	r22, r12
    24b8:	c4 01       	movw	r24, r8
    24ba:	79 d0       	rcall	.+242    	; 0x25ae <memcmp>
    24bc:	44 24       	eor	r4, r4
    24be:	43 94       	inc	r4
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <HID_Device_USBTask+0xe4>
    24c4:	41 2c       	mov	r4, r1
    24c6:	f7 01       	movw	r30, r14
    24c8:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	b4 01       	movw	r22, r8
    24ce:	c6 01       	movw	r24, r12
    24d0:	7b d0       	rcall	.+246    	; 0x25c8 <memcpy>
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <HID_Device_USBTask+0xf4>
    24d4:	41 2c       	mov	r4, r1
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    24da:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    24dc:	f9 f0       	breq	.+62     	; 0x251c <HID_Device_USBTask+0x13a>
    24de:	51 10       	cpse	r5, r1
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <HID_Device_USBTask+0x108>
    24e2:	41 10       	cpse	r4, r1
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <HID_Device_USBTask+0x108>
    24e6:	00 ff       	sbrs	r16, 0
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <HID_Device_USBTask+0x13a>
    24ea:	f7 01       	movw	r30, r14
    24ec:	84 85       	ldd	r24, Z+12	; 0x0c
    24ee:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    24f0:	97 87       	std	Z+15, r25	; 0x0f
    24f2:	86 87       	std	Z+14, r24	; 0x0e
    24f4:	81 81       	ldd	r24, Z+1	; 0x01
    24f6:	8f 70       	andi	r24, 0x0F	; 15
    24f8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	81 11       	cpse	r24, r1
    2500:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2504:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2506:	7a 81       	ldd	r23, Y+2	; 0x02
    2508:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	c4 01       	movw	r24, r8
    250e:	0e 94 4d 0a 	call	0x149a	; 0x149a <Endpoint_Write_Stream_LE>
    2512:	80 91 e8 00 	lds	r24, 0x00E8
    2516:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2518:	80 93 e8 00 	sts	0x00E8, r24
    251c:	80 91 e4 00 	lds	r24, 0x00E4
    2520:	90 91 e5 00 	lds	r25, 0x00E5
    2524:	f7 01       	movw	r30, r14
    2526:	93 87       	std	Z+11, r25	; 0x0b
    2528:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    252a:	86 2d       	mov	r24, r6
    252c:	97 2d       	mov	r25, r7
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	9e bf       	out	0x3e, r25	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	8d bf       	out	0x3d, r24	; 61
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	be be       	out	0x3e, r11	; 62
	}
}
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	ad be       	out	0x3d, r10	; 61
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	9f 90       	pop	r9
    255e:	8f 90       	pop	r8
    2560:	7f 90       	pop	r7
    2562:	6f 90       	pop	r6
    2564:	5f 90       	pop	r5
    2566:	4f 90       	pop	r4
    2568:	08 95       	ret

0000256a <__udivmodsi4>:
    256a:	a1 e2       	ldi	r26, 0x21	; 33
    256c:	1a 2e       	mov	r1, r26
    256e:	aa 1b       	sub	r26, r26
    2570:	bb 1b       	sub	r27, r27
    2572:	fd 01       	movw	r30, r26
    2574:	0d c0       	rjmp	.+26     	; 0x2590 <__udivmodsi4_ep>

00002576 <__udivmodsi4_loop>:
    2576:	aa 1f       	adc	r26, r26
    2578:	bb 1f       	adc	r27, r27
    257a:	ee 1f       	adc	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	a2 17       	cp	r26, r18
    2580:	b3 07       	cpc	r27, r19
    2582:	e4 07       	cpc	r30, r20
    2584:	f5 07       	cpc	r31, r21
    2586:	20 f0       	brcs	.+8      	; 0x2590 <__udivmodsi4_ep>
    2588:	a2 1b       	sub	r26, r18
    258a:	b3 0b       	sbc	r27, r19
    258c:	e4 0b       	sbc	r30, r20
    258e:	f5 0b       	sbc	r31, r21

00002590 <__udivmodsi4_ep>:
    2590:	66 1f       	adc	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	1a 94       	dec	r1
    259a:	69 f7       	brne	.-38     	; 0x2576 <__udivmodsi4_loop>
    259c:	60 95       	com	r22
    259e:	70 95       	com	r23
    25a0:	80 95       	com	r24
    25a2:	90 95       	com	r25
    25a4:	9b 01       	movw	r18, r22
    25a6:	ac 01       	movw	r20, r24
    25a8:	bd 01       	movw	r22, r26
    25aa:	cf 01       	movw	r24, r30
    25ac:	08 95       	ret

000025ae <memcmp>:
    25ae:	fb 01       	movw	r30, r22
    25b0:	dc 01       	movw	r26, r24
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <memcmp+0xe>
    25b4:	8d 91       	ld	r24, X+
    25b6:	01 90       	ld	r0, Z+
    25b8:	80 19       	sub	r24, r0
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <memcmp+0x16>
    25bc:	41 50       	subi	r20, 0x01	; 1
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	c8 f7       	brcc	.-14     	; 0x25b4 <memcmp+0x6>
    25c2:	88 1b       	sub	r24, r24
    25c4:	99 0b       	sbc	r25, r25
    25c6:	08 95       	ret

000025c8 <memcpy>:
    25c8:	fb 01       	movw	r30, r22
    25ca:	dc 01       	movw	r26, r24
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <memcpy+0xa>
    25ce:	01 90       	ld	r0, Z+
    25d0:	0d 92       	st	X+, r0
    25d2:	41 50       	subi	r20, 0x01	; 1
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	d8 f7       	brcc	.-10     	; 0x25ce <memcpy+0x6>
    25d8:	08 95       	ret

000025da <memset>:
    25da:	dc 01       	movw	r26, r24
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <memset+0x6>
    25de:	6d 93       	st	X+, r22
    25e0:	41 50       	subi	r20, 0x01	; 1
    25e2:	50 40       	sbci	r21, 0x00	; 0
    25e4:	e0 f7       	brcc	.-8      	; 0x25de <memset+0x4>
    25e6:	08 95       	ret

000025e8 <_exit>:
    25e8:	f8 94       	cli

000025ea <__stop_program>:
    25ea:	ff cf       	rjmp	.-2      	; 0x25ea <__stop_program>
