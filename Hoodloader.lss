
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002768  000027fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  00800136  00800136  00002832  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003eeb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008c8  00000000  00000000  00003f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e8f5  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bab  00000000  00000000  000130ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000059cc  00000000  00000000  00016c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015d8  00000000  00000000  0001c644  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004988  00000000  00000000  0001dc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000891f  00000000  00000000  000225a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a68  00000000  00000000  0002aec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	2f c1       	rjmp	.+606    	; 0x264 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	2d c1       	rjmp	.+602    	; 0x264 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	2b c1       	rjmp	.+598    	; 0x264 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	29 c1       	rjmp	.+594    	; 0x264 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	27 c1       	rjmp	.+590    	; 0x264 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	25 c1       	rjmp	.+586    	; 0x264 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	23 c1       	rjmp	.+582    	; 0x264 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	21 c1       	rjmp	.+578    	; 0x264 <__bad_interrupt>
      22:	00 00       	nop
      24:	1f c1       	rjmp	.+574    	; 0x264 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	1d c1       	rjmp	.+570    	; 0x264 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_12>
      34:	17 c1       	rjmp	.+558    	; 0x264 <__bad_interrupt>
      36:	00 00       	nop
      38:	15 c1       	rjmp	.+554    	; 0x264 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	13 c1       	rjmp	.+550    	; 0x264 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	11 c1       	rjmp	.+546    	; 0x264 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	0f c1       	rjmp	.+542    	; 0x264 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	0d c1       	rjmp	.+538    	; 0x264 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0b c1       	rjmp	.+534    	; 0x264 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	09 c1       	rjmp	.+530    	; 0x264 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	07 c1       	rjmp	.+526    	; 0x264 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	05 c1       	rjmp	.+522    	; 0x264 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	e7 c2       	rjmp	.+1486   	; 0x62c <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	01 c1       	rjmp	.+514    	; 0x264 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	ff c0       	rjmp	.+510    	; 0x264 <__bad_interrupt>
      66:	00 00       	nop
      68:	fd c0       	rjmp	.+506    	; 0x264 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	fb c0       	rjmp	.+502    	; 0x264 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	f9 c0       	rjmp	.+498    	; 0x264 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 fc 00 07 05 81 03 10 00 01        !....".........

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 04 a1 01 85 01 a1 02 75 08 95 02 15 00     ..........u.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	26 ff 00 35 00 46 ff 00 09 30 09 31 81 02 75 01     &..5.F...0.1..u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	95 0a 25 01 45 01 05 09 19 01 29 0a 81 02 06 00     ..%.E.....).....
     15f:	ff 75 01 95 06 25 01 45 01 09 01 81 02 c0 c0 05     .u...%.E........
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	01 09 04 a1 01 85 02 a1 02 75 08 95 02 15 00 26     .........u.....&
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	ff 00 35 00 46 ff 00 09 30 09 31 81 02 75 01 95     ..5.F...0.1..u..
     18f:	0a 25 01 45 01 05 09 19 01 29 0a 81 02 06 00 ff     .%.E.....)......
     19f:	75 01 95 06 25 01 45 01 09 01 81 02 c0 c0 05 01     u...%.E.........
				ReportSize     -= 2;
     1af:	09 04 a1 01 85 03 a1 02 75 08 95 02 15 00 26 ff     ........u.....&.
     1bf:	00 35 00 46 ff 00 09 30 09 31 81 02 75 01 95 0a     .5.F...0.1..u...
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	25 01 45 01 05 09 19 01 29 0a 81 02 06 00 ff 75     %.E.....)......u
				ReportSize     -= 1;
     1df:	01 95 06 25 01 45 01 09 01 81 02 c0 c0 05 01 09     ...%.E..........
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	04 a1 01 85 04 a1 02 75 08 95 02 15 00 26 ff 00     .......u.....&..
     1ff:	35 00 46 ff 00 09 30 09 31 81 02 75 01 95 0a 25     5.F...0.1..u...%
     20f:	01 45 01 05 09 19 01 29 0a 81 02 06 00 ff 75 01     .E.....)......u.
     21f:	95 06 25 01 45 01 09 01 81 02 c0 c0 00              ..%.E........

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d2 e0       	ldi	r29, 0x02	; 2
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e8 e6       	ldi	r30, 0x68	; 104
     240:	f7 e2       	ldi	r31, 0x27	; 39
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a6 33       	cpi	r26, 0x36	; 54
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a6 e3       	ldi	r26, 0x36	; 54
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	ac 3f       	cpi	r26, 0xFC	; 252
     25a:	b1 07       	cpc	r27, r17
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	6c d0       	rcall	.+216    	; 0x338 <main>
     260:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <_exit>

00000264 <__bad_interrupt>:
     264:	cd ce       	rjmp	.-614    	; 0x0 <__vectors>

00000266 <LRingBuffer_Remove.constprop.2>:
     266:	e6 e3       	ldi	r30, 0x36	; 54
     268:	f1 e0       	ldi	r31, 0x01	; 1
     26a:	5f b7       	in	r21, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	20 81       	ld	r18, Z
     270:	31 81       	ldd	r19, Z+1	; 0x01
     272:	21 15       	cp	r18, r1
     274:	31 05       	cpc	r19, r1
     276:	19 f0       	breq	.+6      	; 0x27e <LRingBuffer_Remove.constprop.2+0x18>
     278:	44 81       	ldd	r20, Z+4	; 0x04
     27a:	41 11       	cpse	r20, r1
     27c:	04 c0       	rjmp	.+8      	; 0x286 <LRingBuffer_Remove.constprop.2+0x20>
     27e:	5f bf       	out	0x3f, r21	; 63
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	3f ef       	ldi	r19, 0xFF	; 255
     284:	11 c0       	rjmp	.+34     	; 0x2a8 <LRingBuffer_Remove.constprop.2+0x42>
     286:	82 81       	ldd	r24, Z+2	; 0x02
     288:	90 e0       	ldi	r25, 0x00	; 0
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28a:	84 1b       	sub	r24, r20
     28c:	91 09       	sbc	r25, r1
     28e:	97 ff       	sbrs	r25, 7
     290:	03 c0       	rjmp	.+6      	; 0x298 <LRingBuffer_Remove.constprop.2+0x32>
     292:	63 81       	ldd	r22, Z+3	; 0x03
     294:	86 0f       	add	r24, r22
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     296:	91 1d       	adc	r25, r1
     298:	d9 01       	movw	r26, r18
     29a:	a8 0f       	add	r26, r24
     29c:	b9 1f       	adc	r27, r25
     29e:	2c 91       	ld	r18, X
     2a0:	41 50       	subi	r20, 0x01	; 1
     2a2:	44 83       	std	Z+4, r20	; 0x04
     2a4:	5f bf       	out	0x3f, r21	; 63
     2a6:	30 e0       	ldi	r19, 0x00	; 0
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a8:	c9 01       	movw	r24, r18
				break;
     2aa:	08 95       	ret

000002ac <LRingBuffer_Append.constprop.4>:

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2ac:	e6 e3       	ldi	r30, 0x36	; 54
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	4f b7       	in	r20, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	20 81       	ld	r18, Z
     2b6:	31 81       	ldd	r19, Z+1	; 0x01
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b8:	21 15       	cp	r18, r1
     2ba:	31 05       	cpc	r19, r1
				break;
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <LRingBuffer_Append.constprop.4+0x14>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2be:	1d c0       	rjmp	.+58     	; 0x2fa <LRingBuffer_Append.constprop.4+0x4e>
     2c0:	82 81       	ldd	r24, Z+2	; 0x02
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	54 81       	ldd	r21, Z+4	; 0x04
     2c6:	85 1b       	sub	r24, r21
				break;
     2c8:	91 09       	sbc	r25, r1

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	97 ff       	sbrs	r25, 7
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LRingBuffer_Append.constprop.4+0x2a>
     2d0:	53 81       	ldd	r21, Z+3	; 0x03
     2d2:	85 0f       	add	r24, r21
				break;
     2d4:	91 1d       	adc	r25, r1

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	d9 01       	movw	r26, r18
     2d8:	a8 0f       	add	r26, r24
     2da:	b9 1f       	adc	r27, r25
     2dc:	6c 93       	st	X, r22
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	89 13       	cpse	r24, r25
				break;
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <LRingBuffer_Append.constprop.4+0x4a>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	92 81       	ldd	r25, Z+2	; 0x02
     2e8:	91 11       	cpse	r25, r1
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <LRingBuffer_Append.constprop.4+0x42>
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
				break;
     2f0:	81 50       	subi	r24, 0x01	; 1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	82 83       	std	Z+2, r24	; 0x02
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <LRingBuffer_Append.constprop.4+0x4e>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	84 83       	std	Z+4, r24	; 0x04
     2fa:	4f bf       	out	0x3f, r20	; 63
     2fc:	08 95       	ret

000002fe <SetupHardware>:
     2fe:	84 b7       	in	r24, 0x34	; 52
				break;
     300:	87 7f       	andi	r24, 0xF7	; 247

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	84 bf       	out	0x34, r24	; 52
     304:	88 e1       	ldi	r24, 0x18	; 24
				break;
     306:	0f b6       	in	r0, 0x3f	; 63

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	f8 94       	cli
     30a:	80 93 60 00 	sts	0x0060, r24
     30e:	10 92 60 00 	sts	0x0060, r1
     312:	0f be       	out	0x3f, r0	; 63
     314:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <SerialInitHID>
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	8a b1       	in	r24, 0x0a	; 10
     31a:	80 63       	ori	r24, 0x30	; 48
				break;
     31c:	8a b9       	out	0x0a, r24	; 10

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	8b b1       	in	r24, 0x0b	; 11
     320:	80 63       	ori	r24, 0x30	; 48
     322:	8b b9       	out	0x0b, r24	; 11
				break;
     324:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_Init>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	85 bd       	out	0x25, r24	; 37

				if (ParserData->UsingReportIDs)
     32c:	5f 9a       	sbi	0x0b, 7	; 11
     32e:	57 9a       	sbi	0x0a, 7	; 10
     330:	20 98       	cbi	0x04, 0	; 4
     332:	25 98       	cbi	0x04, 5	; 4
     334:	2d 9a       	sbi	0x05, 5	; 5
     336:	08 95       	ret

00000338 <main>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	e6 e3       	ldi	r30, 0x36	; 54
     33a:	f1 e0       	ldi	r31, 0x01	; 1
     33c:	2f b7       	in	r18, 0x3f	; 63
     33e:	f8 94       	cli
     340:	8b e3       	ldi	r24, 0x3B	; 59
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	80 83       	st	Z, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	12 82       	std	Z+2, r1	; 0x02

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	83 83       	std	Z+3, r24	; 0x03
     34e:	14 82       	std	Z+4, r1	; 0x04
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	2f bf       	out	0x3f, r18	; 63
     352:	10 92 bb 01 	sts	0x01BB, r1
     356:	84 ee       	ldi	r24, 0xE4	; 228
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	ae d7       	rcall	.+3932   	; 0x12b8 <NHPreset>
     35c:	10 92 c5 01 	sts	0x01C5, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     360:	a6 d3       	rcall	.+1868   	; 0xaae <HIDreset>
     362:	b8 d3       	rcall	.+1904   	; 0xad4 <avrispReset>
     364:	cc df       	rcall	.-104    	; 0x2fe <SetupHardware>
     366:	78 94       	sei
     368:	80 91 be 01 	lds	r24, 0x01BE
     36c:	81 11       	cpse	r24, r1
     36e:	06 c0       	rjmp	.+12     	; 0x37c <main+0x44>
     370:	83 b1       	in	r24, 0x03	; 3
     372:	80 72       	andi	r24, 0x20	; 32
     374:	83 b9       	out	0x03, r24	; 3
     376:	81 11       	cpse	r24, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	01 c0       	rjmp	.+2      	; 0x37c <main+0x44>
     37a:	d4 d2       	rcall	.+1448   	; 0x924 <clearHIDReports>
     37c:	80 e1       	ldi	r24, 0x10	; 16
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 84 10 	call	0x2108	; 0x2108 <CDC_Device_ReceiveByte>
     384:	97 fd       	sbrc	r25, 7
     386:	1b c0       	rjmp	.+54     	; 0x3be <main+0x86>
     388:	40 91 24 01 	lds	r20, 0x0124
     38c:	50 91 25 01 	lds	r21, 0x0125
     390:	60 91 26 01 	lds	r22, 0x0126
     394:	70 91 27 01 	lds	r23, 0x0127
     398:	41 30       	cpi	r20, 0x01	; 1
     39a:	51 05       	cpc	r21, r1
     39c:	61 05       	cpc	r22, r1
     39e:	71 05       	cpc	r23, r1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <main+0x6e>
     3a2:	c2 d6       	rcall	.+3460   	; 0x1128 <avrisp>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	0c c0       	rjmp	.+24     	; 0x3be <main+0x86>
     3a6:	5c 98       	cbi	0x0b, 4	; 11
     3a8:	90 91 c5 01 	lds	r25, 0x01C5
     3ac:	9c 60       	ori	r25, 0x0C	; 12
     3ae:	90 93 c5 01 	sts	0x01C5, r25
     3b2:	90 91 c8 00 	lds	r25, 0x00C8
					}
				}

				ParserData->UsingReportIDs = true;
     3b6:	95 ff       	sbrs	r25, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <main+0x7a>
     3ba:	80 93 ce 00 	sts	0x00CE, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	2f b7       	in	r18, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	80 91 36 01 	lds	r24, 0x0136
     3c6:	90 91 37 01 	lds	r25, 0x0137
     3ca:	89 2b       	or	r24, r25
				break;
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <main+0x9c>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	80 91 3a 01 	lds	r24, 0x013A
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <main+0x9e>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	2f bf       	out	0x3f, r18	; 63
     3d8:	90 e0       	ldi	r25, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <main+0xac>
     3de:	a8 99       	sbic	0x15, 0	; 21
     3e0:	89 c0       	rjmp	.+274    	; 0x4f4 <main+0x1bc>
     3e2:	0d c1       	rjmp	.+538    	; 0x5fe <main+0x2c6>
     3e4:	5d 98       	cbi	0x0b, 5	; 11
     3e6:	20 91 c5 01 	lds	r18, 0x01C5
     3ea:	23 60       	ori	r18, 0x03	; 3
     3ec:	20 93 c5 01 	sts	0x01C5, r18
     3f0:	20 91 11 01 	lds	r18, 0x0111
     3f4:	2f 70       	andi	r18, 0x0F	; 15
     3f6:	20 93 e9 00 	sts	0x00E9, r18
				break;
     3fa:	20 91 e8 00 	lds	r18, 0x00E8
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fe:	20 ff       	sbrs	r18, 0
     400:	ee cf       	rjmp	.-36     	; 0x3de <main+0xa6>
     402:	80 34       	cpi	r24, 0x40	; 64
     404:	91 05       	cpc	r25, r1
     406:	10 f0       	brcs	.+4      	; 0x40c <main+0xd4>
     408:	8f e3       	ldi	r24, 0x3F	; 63

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	18 2f       	mov	r17, r24
     40e:	c0 e0       	ldi	r28, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	6d c0       	rjmp	.+218    	; 0x4ee <main+0x1b6>
     414:	80 91 24 01 	lds	r24, 0x0124
     418:	90 91 25 01 	lds	r25, 0x0125
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	a0 91 26 01 	lds	r26, 0x0126
     420:	b0 91 27 01 	lds	r27, 0x0127
     424:	20 91 bb 01 	lds	r18, 0x01BB

					while (CurrCollectionPath->Parent != NULL)
     428:	22 23       	and	r18, r18
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	29 f0       	breq	.+10     	; 0x436 <main+0xfe>
     42c:	80 91 bb 01 	lds	r24, 0x01BB
     430:	81 11       	cpse	r24, r1
     432:	11 c0       	rjmp	.+34     	; 0x456 <main+0x11e>
     434:	16 c0       	rjmp	.+44     	; 0x462 <main+0x12a>
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	91 05       	cpc	r25, r1
     43a:	a1 05       	cpc	r26, r1
     43c:	b1 05       	cpc	r27, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	28 f0       	brcs	.+10     	; 0x44a <main+0x112>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	81 15       	cp	r24, r1
     442:	92 4c       	sbci	r25, 0xC2	; 194
     444:	a1 40       	sbci	r26, 0x01	; 1
     446:	b1 05       	cpc	r27, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	89 f7       	brne	.-30     	; 0x42c <main+0xf4>
     44a:	93 b1       	in	r25, 0x03	; 3
     44c:	90 72       	andi	r25, 0x20	; 32
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	93 b9       	out	0x03, r25	; 3
     450:	99 23       	and	r25, r25
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	61 f3       	breq	.-40     	; 0x42c <main+0xf4>
     454:	47 c0       	rjmp	.+142    	; 0x4e4 <main+0x1ac>
     456:	80 91 c5 01 	lds	r24, 0x01C5
     45a:	80 63       	ori	r24, 0x30	; 48
     45c:	80 93 c5 01 	sts	0x01C5, r24

				if (UsageListSize)
     460:	01 c0       	rjmp	.+2      	; 0x464 <main+0x12c>
     462:	60 d2       	rcall	.+1216   	; 0x924 <clearHIDReports>
     464:	80 91 20 01 	lds	r24, 0x0120
     468:	80 fd       	sbrc	r24, 0
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	0c c0       	rjmp	.+24     	; 0x484 <main+0x14c>
     46c:	80 91 bb 01 	lds	r24, 0x01BB
     470:	88 23       	and	r24, r24
     472:	41 f0       	breq	.+16     	; 0x484 <main+0x14c>
     474:	86 e3       	ldi	r24, 0x36	; 54
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	f6 de       	rcall	.-532    	; 0x266 <LRingBuffer_Remove.constprop.2>
     47a:	80 91 bb 01 	lds	r24, 0x01BB
     47e:	81 11       	cpse	r24, r1

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	2d c0       	rjmp	.+90     	; 0x4dc <main+0x1a4>
     482:	34 c0       	rjmp	.+104    	; 0x4ec <main+0x1b4>
					  UsageList[i - 1] = UsageList[i];
     484:	7f b7       	in	r23, 0x3f	; 63
     486:	f8 94       	cli
     488:	20 91 36 01 	lds	r18, 0x0136

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	30 91 37 01 	lds	r19, 0x0137
     490:	21 15       	cp	r18, r1
     492:	31 05       	cpc	r19, r1
     494:	41 f0       	breq	.+16     	; 0x4a6 <main+0x16e>
     496:	40 91 3a 01 	lds	r20, 0x013A
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     49a:	44 23       	and	r20, r20
     49c:	21 f0       	breq	.+8      	; 0x4a6 <main+0x16e>
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	14 16       	cp	r1, r20
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	15 06       	cpc	r1, r21
     4a4:	24 f0       	brlt	.+8      	; 0x4ae <main+0x176>
     4a6:	7f bf       	out	0x3f, r23	; 63
     4a8:	6f ef       	ldi	r22, 0xFF	; 255
     4aa:	7f ef       	ldi	r23, 0xFF	; 255
     4ac:	10 c0       	rjmp	.+32     	; 0x4ce <main+0x196>
     4ae:	80 91 38 01 	lds	r24, 0x0138
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	84 1b       	sub	r24, r20
     4b6:	95 0b       	sbc	r25, r21
     4b8:	97 ff       	sbrs	r25, 7
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <main+0x18c>
     4bc:	40 91 39 01 	lds	r20, 0x0139
     4c0:	84 0f       	add	r24, r20
     4c2:	91 1d       	adc	r25, r1
     4c4:	f9 01       	movw	r30, r18
     4c6:	e8 0f       	add	r30, r24
     4c8:	f9 1f       	adc	r31, r25
     4ca:	60 81       	ld	r22, Z
     4cc:	7f bf       	out	0x3f, r23	; 63
     4ce:	80 e1       	ldi	r24, 0x10	; 16
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 1c 10 	call	0x2038	; 0x2038 <CDC_Device_SendByte>
     4d6:	88 23       	and	r24, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	69 f2       	breq	.-102    	; 0x474 <main+0x13c>
     4da:	81 cf       	rjmp	.-254    	; 0x3de <main+0xa6>
     4dc:	81 50       	subi	r24, 0x01	; 1
				break;
     4de:	80 93 bb 01 	sts	0x01BB, r24
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <main+0x1b4>
     4e4:	86 e3       	ldi	r24, 0x36	; 54
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	be de       	rcall	.-644    	; 0x266 <LRingBuffer_Remove.constprop.2>
     4ea:	60 d2       	rcall	.+1216   	; 0x9ac <checkNHPProtocol>
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	1c 13       	cpse	r17, r28
     4f0:	91 cf       	rjmp	.-222    	; 0x414 <main+0xdc>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	75 cf       	rjmp	.-278    	; 0x3de <main+0xa6>
     4f4:	a8 9a       	sbi	0x15, 0	; 21
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	90 91 c5 01 	lds	r25, 0x01C5
     4fa:	89 2f       	mov	r24, r25
     4fc:	80 73       	andi	r24, 0x30	; 48
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	09 f4       	brne	.+2      	; 0x502 <main+0x1ca>
     500:	5c c0       	rjmp	.+184    	; 0x5ba <main+0x282>
     502:	89 2f       	mov	r24, r25
     504:	82 95       	swap	r24

					if (UsageListSize)
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	8d 5f       	subi	r24, 0xFD	; 253
     50a:	83 70       	andi	r24, 0x03	; 3
     50c:	28 2f       	mov	r18, r24
     50e:	22 95       	swap	r18
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	20 7f       	andi	r18, 0xF0	; 240
     512:	9f 7c       	andi	r25, 0xCF	; 207
     514:	92 2b       	or	r25, r18
     516:	90 93 c5 01 	sts	0x01C5, r25
     51a:	81 11       	cpse	r24, r1
     51c:	4e c0       	rjmp	.+156    	; 0x5ba <main+0x282>
     51e:	80 91 be 01 	lds	r24, 0x01BE
     522:	81 11       	cpse	r24, r1
     524:	4a c0       	rjmp	.+148    	; 0x5ba <main+0x282>

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	e0 91 e4 01 	lds	r30, 0x01E4
						  UsageList[i - 1] = UsageList[i];
     52a:	e6 ff       	sbrs	r30, 6
     52c:	15 c0       	rjmp	.+42     	; 0x558 <main+0x220>
     52e:	e6 95       	lsr	r30
     530:	e6 95       	lsr	r30

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	e6 95       	lsr	r30
     534:	e7 70       	andi	r30, 0x07	; 7
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	e7 51       	subi	r30, 0x17	; 23
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	60 81       	ld	r22, Z
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	86 e3       	ldi	r24, 0x36	; 54
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	b4 de       	rcall	.-664    	; 0x2ac <LRingBuffer_Append.constprop.4>
     544:	80 91 e4 01 	lds	r24, 0x01E4
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	86 fb       	bst	r24, 6
     54a:	88 27       	eor	r24, r24
     54c:	80 f9       	bld	r24, 0
     54e:	90 91 bb 01 	lds	r25, 0x01BB
     552:	89 0f       	add	r24, r25
     554:	80 93 bb 01 	sts	0x01BB, r24
     558:	00 91 e4 01 	lds	r16, 0x01E4
     55c:	07 fd       	sbrc	r16, 7
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	29 c0       	rjmp	.+82     	; 0x5b2 <main+0x27a>
     560:	06 95       	lsr	r16
     562:	06 95       	lsr	r16
     564:	06 95       	lsr	r16
     566:	07 70       	andi	r16, 0x07	; 7
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	d0 e0       	ldi	r29, 0x00	; 0
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	86 e3       	ldi	r24, 0x36	; 54
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	e8 2e       	mov	r14, r24
     572:	81 e0       	ldi	r24, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	f8 2e       	mov	r15, r24
     576:	e0 0e       	add	r14, r16
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	f1 1e       	adc	r15, r17
     57a:	09 c0       	rjmp	.+18     	; 0x58e <main+0x256>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	f7 01       	movw	r30, r14
     57e:	ec 0f       	add	r30, r28
     580:	fd 1f       	adc	r31, r29
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	ed 54       	subi	r30, 0x4D	; 77
     584:	ff 4f       	sbci	r31, 0xFF	; 255

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	60 81       	ld	r22, Z
     588:	86 e3       	ldi	r24, 0x36	; 54
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	8f de       	rcall	.-738    	; 0x2ac <LRingBuffer_Append.constprop.4>
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	ce 01       	movw	r24, r28
     592:	80 95       	com	r24
     594:	90 95       	com	r25
     596:	80 17       	cp	r24, r16
     598:	91 07       	cpc	r25, r17
     59a:	84 f3       	brlt	.-32     	; 0x57c <main+0x244>
     59c:	80 91 e4 01 	lds	r24, 0x01E4
     5a0:	86 95       	lsr	r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	86 95       	lsr	r24
     5a4:	86 95       	lsr	r24
     5a6:	87 70       	andi	r24, 0x07	; 7
     5a8:	90 91 bb 01 	lds	r25, 0x01BB
     5ac:	89 0f       	add	r24, r25
     5ae:	80 93 bb 01 	sts	0x01BB, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	84 ee       	ldi	r24, 0xE4	; 228
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	80 d6       	rcall	.+3328   	; 0x12b8 <NHPreset>
     5b8:	c5 d1       	rcall	.+906    	; 0x944 <checkNHPControlAddressError>
     5ba:	90 91 c5 01 	lds	r25, 0x01C5
     5be:	89 2f       	mov	r24, r25
     5c0:	83 70       	andi	r24, 0x03	; 3
     5c2:	49 f0       	breq	.+18     	; 0x5d6 <main+0x29e>
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	83 70       	andi	r24, 0x03	; 3
     5c8:	9c 7f       	andi	r25, 0xFC	; 252
     5ca:	98 2b       	or	r25, r24
     5cc:	90 93 c5 01 	sts	0x01C5, r25
     5d0:	81 11       	cpse	r24, r1
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <main+0x29e>
     5d4:	5d 9a       	sbi	0x0b, 5	; 11
     5d6:	90 91 c5 01 	lds	r25, 0x01C5
     5da:	89 2f       	mov	r24, r25
     5dc:	8c 70       	andi	r24, 0x0C	; 12
     5de:	79 f0       	breq	.+30     	; 0x5fe <main+0x2c6>
     5e0:	89 2f       	mov	r24, r25
     5e2:	86 95       	lsr	r24
     5e4:	86 95       	lsr	r24
     5e6:	8d 5f       	subi	r24, 0xFD	; 253
     5e8:	83 70       	andi	r24, 0x03	; 3
     5ea:	28 2f       	mov	r18, r24
     5ec:	22 0f       	add	r18, r18
     5ee:	22 0f       	add	r18, r18
     5f0:	93 7f       	andi	r25, 0xF3	; 243

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	92 2b       	or	r25, r18
     5f4:	90 93 c5 01 	sts	0x01C5, r25
     5f8:	81 11       	cpse	r24, r1
					  return HID_PARSE_InsufficientReportItems;
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <main+0x2c6>
     5fc:	5c 9a       	sbi	0x0b, 4	; 11

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	80 e1       	ldi	r24, 0x10	; 16
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 6e 10 	call	0x20dc	; 0x20dc <CDC_Device_USBTask>
     606:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <USB_USBTask>
     60a:	ae ce       	rjmp	.-676    	; 0x368 <main+0x30>

0000060c <EVENT_USB_Device_Connect>:
     60c:	08 95       	ret

0000060e <EVENT_USB_Device_Disconnect>:
     60e:	08 95       	ret

00000610 <EVENT_USB_Device_ConfigurationChanged>:
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 9a 12 	call	0x2534	; 0x2534 <HID_Device_ConfigureEndpoints>
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CDC_Device_ConfigureEndpoints>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     620:	e2 ee       	ldi	r30, 0xE2	; 226
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	84 60       	ori	r24, 0x04	; 4
     628:	80 83       	st	Z, r24
     62a:	08 95       	ret

0000062c <__vector_23>:
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	2f 93       	push	r18
     638:	3f 93       	push	r19
     63a:	4f 93       	push	r20
     63c:	5f 93       	push	r21
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
     64a:	40 91 ce 00 	lds	r20, 0x00CE
     64e:	80 91 f3 01 	lds	r24, 0x01F3
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	e9 f4       	brne	.+58     	; 0x690 <__vector_23+0x64>
     656:	e6 e3       	ldi	r30, 0x36	; 54
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	2f b7       	in	r18, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	a1 f0       	breq	.+40     	; 0x68e <__vector_23+0x62>
     666:	54 81       	ldd	r21, Z+4	; 0x04
     668:	33 81       	ldd	r19, Z+3	; 0x03
     66a:	53 13       	cpse	r21, r19
     66c:	01 c0       	rjmp	.+2      	; 0x670 <__vector_23+0x44>
     66e:	0f c0       	rjmp	.+30     	; 0x68e <__vector_23+0x62>
     670:	32 81       	ldd	r19, Z+2	; 0x02
     672:	dc 01       	movw	r26, r24
     674:	a3 0f       	add	r26, r19
     676:	b1 1d       	adc	r27, r1
     678:	4c 93       	st	X, r20
     67a:	83 2f       	mov	r24, r19
     67c:	8f 5f       	subi	r24, 0xFF	; 255
					  ParserData->TotalReportItems++;
     67e:	82 83       	std	Z+2, r24	; 0x02
     680:	93 81       	ldd	r25, Z+3	; 0x03
     682:	89 13       	cpse	r24, r25
     684:	01 c0       	rjmp	.+2      	; 0x688 <__vector_23+0x5c>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	12 82       	std	Z+2, r1	; 0x02
     688:	84 81       	ldd	r24, Z+4	; 0x04
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	8f 5f       	subi	r24, 0xFF	; 255
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	84 83       	std	Z+4, r24	; 0x04
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	2f bf       	out	0x3f, r18	; 63
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	5f 91       	pop	r21
     69e:	4f 91       	pop	r20
     6a0:	3f 91       	pop	r19
     6a2:	2f 91       	pop	r18
     6a4:	0f 90       	pop	r0
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	0f 90       	pop	r0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	1f 90       	pop	r1
     6ac:	18 95       	reti

000006ae <EVENT_USB_Device_ControlRequest>:
     6ae:	80 e1       	ldi	r24, 0x10	; 16
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 b2 10 	call	0x2164	; 0x2164 <CDC_Device_ProcessControlRequest>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <HID_Device_ProcessControlRequest>

000006be <EVENT_USB_Device_StartOfFrame>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6be:	80 91 0e 01 	lds	r24, 0x010E
     6c2:	90 91 0f 01 	lds	r25, 0x010F
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <EVENT_USB_Device_StartOfFrame+0x16>
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	90 93 0f 01 	sts	0x010F, r25
     6d0:	80 93 0e 01 	sts	0x010E, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d4:	08 95       	ret

000006d6 <CALLBACK_USB_GetDescriptor>:
     6d6:	29 2f       	mov	r18, r25
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	33 27       	eor	r19, r19
     6da:	23 30       	cpi	r18, 0x03	; 3
     6dc:	31 05       	cpc	r19, r1
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	b1 f0       	breq	.+44     	; 0x70c <CALLBACK_USB_GetDescriptor+0x36>
     6e0:	4c f4       	brge	.+18     	; 0x6f4 <CALLBACK_USB_GetDescriptor+0x1e>
     6e2:	21 30       	cpi	r18, 0x01	; 1
     6e4:	31 05       	cpc	r19, r1
     6e6:	09 f4       	brne	.+2      	; 0x6ea <CALLBACK_USB_GetDescriptor+0x14>
     6e8:	39 c0       	rjmp	.+114    	; 0x75c <CALLBACK_USB_GetDescriptor+0x86>
     6ea:	22 30       	cpi	r18, 0x02	; 2
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	31 05       	cpc	r19, r1
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <CALLBACK_USB_GetDescriptor+0x1c>
     6f0:	3a c0       	rjmp	.+116    	; 0x766 <CALLBACK_USB_GetDescriptor+0x90>
     6f2:	07 c0       	rjmp	.+14     	; 0x702 <CALLBACK_USB_GetDescriptor+0x2c>
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	21 32       	cpi	r18, 0x21	; 33
     6f6:	31 05       	cpc	r19, r1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	39 f1       	breq	.+78     	; 0x748 <CALLBACK_USB_GetDescriptor+0x72>
     6fa:	22 32       	cpi	r18, 0x22	; 34
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	31 05       	cpc	r19, r1
     6fe:	49 f1       	breq	.+82     	; 0x752 <CALLBACK_USB_GetDescriptor+0x7c>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	32 c0       	rjmp	.+100    	; 0x766 <CALLBACK_USB_GetDescriptor+0x90>
     702:	ef e5       	ldi	r30, 0x5F	; 95
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	8e eb       	ldi	r24, 0xBE	; 190

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	31 c0       	rjmp	.+98     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	99 27       	eor	r25, r25
     70e:	81 30       	cpi	r24, 0x01	; 1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	91 05       	cpc	r25, r1
     712:	61 f0       	breq	.+24     	; 0x72c <CALLBACK_USB_GetDescriptor+0x56>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	82 30       	cpi	r24, 0x02	; 2
     716:	91 05       	cpc	r25, r1
     718:	81 f0       	breq	.+32     	; 0x73a <CALLBACK_USB_GetDescriptor+0x64>
     71a:	89 2b       	or	r24, r25

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	21 f5       	brne	.+72     	; 0x766 <CALLBACK_USB_GetDescriptor+0x90>
     71e:	ea eb       	ldi	r30, 0xBA	; 186
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	e4 91       	lpm	r30, Z+
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	8a eb       	ldi	r24, 0xBA	; 186
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	21 c0       	rjmp	.+66     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
     72c:	e6 ea       	ldi	r30, 0xA6	; 166
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	e4 91       	lpm	r30, Z+
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	86 ea       	ldi	r24, 0xA6	; 166
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	1a c0       	rjmp	.+52     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
     73a:	e4 e7       	ldi	r30, 0x74	; 116
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e4 91       	lpm	r30, Z+
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	84 e7       	ldi	r24, 0x74	; 116
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	13 c0       	rjmp	.+38     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	8d e0       	ldi	r24, 0x0D	; 13
     74e:	91 e0       	ldi	r25, 0x01	; 1

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     750:	0e c0       	rjmp	.+28     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     752:	ec ef       	ldi	r30, 0xFC	; 252
     754:	f0 e0       	ldi	r31, 0x00	; 0
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     756:	8f e2       	ldi	r24, 0x2F	; 47
     758:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     75a:	09 c0       	rjmp	.+18     	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     75c:	e2 e1       	ldi	r30, 0x12	; 18
     75e:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     760:	8d e1       	ldi	r24, 0x1D	; 29
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	04 c0       	rjmp	.+8      	; 0x76e <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     766:	e0 e0       	ldi	r30, 0x00	; 0
     768:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     76e:	da 01       	movw	r26, r20
     770:	8d 93       	st	X+, r24
     772:	9c 93       	st	X, r25
	return Size;
}
     774:	cf 01       	movw	r24, r30
     776:	08 95       	ret

00000778 <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     788:	64 0f       	add	r22, r20
     78a:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     78c:	c6 e3       	ldi	r28, 0x36	; 54
     78e:	d1 e0       	ldi	r29, 0x01	; 1
     790:	2c c0       	rjmp	.+88     	; 0x7ea <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     792:	fb 01       	movw	r30, r22
     794:	e2 1b       	sub	r30, r18
     796:	f3 0b       	sbc	r31, r19
     798:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     79a:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     79c:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     79e:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     7a0:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     7a2:	a0 81       	ld	r26, Z
     7a4:	b1 81       	ldd	r27, Z+1	; 0x01
     7a6:	10 97       	sbiw	r26, 0x00	; 0
     7a8:	09 f4       	brne	.+2      	; 0x7ac <LRingBuffer_Append_Buffer.constprop.0+0x34>
     7aa:	1c c0       	rjmp	.+56     	; 0x7e4 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     7ac:	82 81       	ldd	r24, Z+2	; 0x02
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	f4 80       	ldd	r15, Z+4	; 0x04
     7b2:	8f 19       	sub	r24, r15
     7b4:	91 09       	sbc	r25, r1
     7b6:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     7b8:	97 ff       	sbrs	r25, 7
     7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     7bc:	f3 80       	ldd	r15, Z+3	; 0x03
     7be:	8f 0d       	add	r24, r15
     7c0:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     7c2:	a8 0f       	add	r26, r24
     7c4:	b9 1f       	adc	r27, r25
     7c6:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
     7cc:	89 13       	cpse	r24, r25
     7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     7d0:	92 81       	ldd	r25, Z+2	; 0x02
     7d2:	91 11       	cpse	r25, r1
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     7d6:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	81 50       	subi	r24, 0x01	; 1
     7dc:	82 83       	std	Z+2, r24	; 0x02
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     7e4:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	24 17       	cp	r18, r20
     7ec:	35 07       	cpc	r19, r21
     7ee:	8c f2       	brlt	.-94     	; 0x792 <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	08 95       	ret

000007fc <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	7b 01       	movw	r14, r22
     80a:	c9 01       	movw	r24, r18
     80c:	e8 01       	movw	r28, r16

	if (ram.isp.pmode || (!(AVR_NO_HID_PIN &= AVR_NO_HID_MASK))){
     80e:	20 91 be 01 	lds	r18, 0x01BE
     812:	22 23       	and	r18, r18
     814:	31 f0       	breq	.+12     	; 0x822 <CALLBACK_HID_Device_CreateHIDReport+0x26>
		*ReportID = 0;
     816:	f7 01       	movw	r30, r14
     818:	10 82       	st	Z, r1
		*ReportSize = 0;
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	18 82       	st	Y, r1
		return false;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	26 c0       	rjmp	.+76     	; 0x86e <CALLBACK_HID_Device_CreateHIDReport+0x72>
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{

	if (ram.isp.pmode || (!(AVR_NO_HID_PIN &= AVR_NO_HID_MASK))){
     822:	43 b1       	in	r20, 0x03	; 3
     824:	40 72       	andi	r20, 0x20	; 32
     826:	43 b9       	out	0x03, r20	; 3
     828:	44 23       	and	r20, r20
     82a:	a9 f3       	breq	.-22     	; 0x816 <CALLBACK_HID_Device_CreateHIDReport+0x1a>
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     82c:	e0 91 c6 01 	lds	r30, 0x01C6
     830:	e3 30       	cpi	r30, 0x03	; 3
     832:	31 f0       	breq	.+12     	; 0x840 <CALLBACK_HID_Device_CreateHIDReport+0x44>
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
     834:	10 92 da 01 	sts	0x01DA, r1
		ram.HID.isEmpty[ram.HID.ID] = false;
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	e6 52       	subi	r30, 0x26	; 38
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	10 82       	st	Z, r1
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     840:	40 91 c7 01 	lds	r20, 0x01C7
     844:	e9 ec       	ldi	r30, 0xC9	; 201
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	bf 01       	movw	r22, r30
     84c:	0e 94 a2 13 	call	0x2744	; 0x2744 <memcpy>
	*ReportID = ram.HID.ID;
     850:	80 91 c6 01 	lds	r24, 0x01C6
     854:	f7 01       	movw	r30, r14
     856:	80 83       	st	Z, r24
	*ReportSize = ram.HID.length;
     858:	80 91 c7 01 	lds	r24, 0x01C7
     85c:	88 83       	st	Y, r24
     85e:	19 82       	std	Y+1, r1	; 0x01

	// reset ID
	ram.HID.ID = 0;
     860:	10 92 c6 01 	sts	0x01C6, r1
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     864:	10 92 c8 01 	sts	0x01C8, r1
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     868:	10 92 c7 01 	sts	0x01C7, r1

	// always return true, because we cannot compare with >1 report due to ram limit
	// this will forcewrite the report every time
	return true;
     86c:	81 e0       	ldi	r24, 0x01	; 1

	//}
	//else return false;
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     882:	63 30       	cpi	r22, 0x03	; 3
     884:	51 f4       	brne	.+20     	; 0x89a <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     886:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     888:	20 91 c5 01 	lds	r18, 0x01C5
     88c:	2c 60       	ori	r18, 0x0C	; 12
     88e:	20 93 c5 01 	sts	0x01C5, r18

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     892:	b8 01       	movw	r22, r16
	}
}
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     898:	cc c6       	rjmp	.+3480   	; 0x1632 <Serial_SendData>
     89a:	1f 91       	pop	r17
	}
}
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <flushHID>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

void flushHID(void){
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 af 12 	call	0x255e	; 0x255e <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     8aa:	80 91 c6 01 	lds	r24, 0x01C6
     8ae:	88 23       	and	r24, r24
     8b0:	31 f0       	breq	.+12     	; 0x8be <flushHID+0x1e>
     8b2:	90 91 c7 01 	lds	r25, 0x01C7
     8b6:	80 91 c8 01 	lds	r24, 0x01C8
     8ba:	98 17       	cp	r25, r24
     8bc:	91 f3       	breq	.-28     	; 0x8a2 <flushHID+0x2>
     8be:	08 95       	ret

000008c0 <getHIDReportLength>:
		HID_Device_USBTask(&Device_HID_Interface);
}


uint8_t getHIDReportLength(uint8_t ID){
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	89 30       	cpi	r24, 0x09	; 9
     8c4:	30 f4       	brcc	.+12     	; 0x8d2 <getHIDReportLength+0x12>
     8c6:	e8 2f       	mov	r30, r24
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	e5 5d       	subi	r30, 0xD5	; 213
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	80 81       	ld	r24, Z
     8d0:	08 95       	ret
     8d2:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     8d4:	08 95       	ret

000008d6 <clearHIDReport>:

	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	18 2f       	mov	r17, r24
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
     8de:	c8 2f       	mov	r28, r24
     8e0:	d0 e0       	ldi	r29, 0x00	; 0
     8e2:	c6 52       	subi	r28, 0x26	; 38
     8e4:	de 4f       	sbci	r29, 0xFE	; 254
     8e6:	88 81       	ld	r24, Y
     8e8:	81 11       	cpse	r24, r1
     8ea:	18 c0       	rjmp	.+48     	; 0x91c <clearHIDReport+0x46>
     8ec:	13 30       	cpi	r17, 0x03	; 3
     8ee:	b1 f0       	breq	.+44     	; 0x91c <clearHIDReport+0x46>

	// get length of the report if its a valid report
	uint8_t length = getHIDReportLength(ID);
     8f0:	81 2f       	mov	r24, r17
     8f2:	e6 df       	rcall	.-52     	; 0x8c0 <getHIDReportLength>
     8f4:	88 23       	and	r24, r24
	if (!length) return;
     8f6:	91 f0       	breq	.+36     	; 0x91c <clearHIDReport+0x46>
     8f8:	80 93 c8 01 	sts	0x01C8, r24

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
     8fc:	80 93 c7 01 	sts	0x01C7, r24
     900:	10 93 c6 01 	sts	0x01C6, r17
	ram.HID.ID = ID;
     904:	29 ec       	ldi	r18, 0xC9	; 201
	memset(&ram.HID.buffer, 0x00, length);
     906:	31 e0       	ldi	r19, 0x01	; 1
     908:	48 2f       	mov	r20, r24
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	c9 01       	movw	r24, r18
     912:	0e 94 ab 13 	call	0x2756	; 0x2756 <memset>
     916:	c4 df       	rcall	.-120    	; 0x8a0 <flushHID>

	// flush HID
	flushHID();
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	88 83       	st	Y, r24

	// save new empty state
	ram.HID.isEmpty[ID] = true;
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
}
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <clearHIDReports>:
		Serial_SendData(ReportData, ReportSize);
	}
}


void clearHIDReports(void){
     924:	cf 93       	push	r28
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;
     926:	80 91 da 01 	lds	r24, 0x01DA
     92a:	81 11       	cpse	r24, r1
     92c:	09 c0       	rjmp	.+18     	; 0x940 <clearHIDReports+0x1c>
     92e:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
     930:	8c 2f       	mov	r24, r28
     932:	d1 df       	rcall	.-94     	; 0x8d6 <clearHIDReport>
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	ca 30       	cpi	r28, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     938:	d9 f7       	brne	.-10     	; 0x930 <clearHIDReports+0xc>
     93a:	81 e0       	ldi	r24, 0x01	; 1
		clearHIDReport(i);

	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     93c:	80 93 da 01 	sts	0x01DA, r24
     940:	cf 91       	pop	r28
}
     942:	08 95       	ret

00000944 <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	00 d0       	rcall	.+0      	; 0x94c <checkNHPControlAddressError+0x8>
     94c:	00 d0       	rcall	.+0      	; 0x94e <checkNHPControlAddressError+0xa>
     94e:	00 d0       	rcall	.+0      	; 0x950 <checkNHPControlAddressError+0xc>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     954:	60 91 c6 01 	lds	r22, 0x01C6
     958:	66 23       	and	r22, r22
     95a:	c1 f0       	breq	.+48     	; 0x98c <checkNHPControlAddressError+0x48>
     95c:	80 91 c8 01 	lds	r24, 0x01C8
     960:	81 11       	cpse	r24, r1
     962:	14 c0       	rjmp	.+40     	; 0x98c <checkNHPControlAddressError+0x48>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	71 60       	ori	r23, 0x01	; 1
     968:	ae 01       	movw	r20, r28
     96a:	4f 5f       	subi	r20, 0xFF	; 255
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	79 d5       	rcall	.+2802   	; 0x1464 <NHPwriteChecksum>
     972:	18 2f       	mov	r17, r24
     974:	48 2f       	mov	r20, r24

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.RingBuffer, buff, length);
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	86 e3       	ldi	r24, 0x36	; 54
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	fb de       	rcall	.-522    	; 0x778 <LRingBuffer_Append_Buffer.constprop.0>
     982:	90 91 bb 01 	lds	r25, 0x01BB
		ram.skipNHP += length;
     986:	91 0f       	add	r25, r17
     988:	90 93 bb 01 	sts	0x01BB, r25
     98c:	10 92 c6 01 	sts	0x01C6, r1
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     990:	10 92 c8 01 	sts	0x01C8, r1
	ram.HID.recvlength = 0; // just to be sure
     994:	10 92 c7 01 	sts	0x01C7, r1
	ram.HID.length = 0; // just to be sure
     998:	26 96       	adiw	r28, 0x06	; 6
     99a:	0f b6       	in	r0, 0x3f	; 63
}
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	08 95       	ret

000009ac <checkNHPProtocol>:
	} //end switch
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     9ac:	90 91 c5 01 	lds	r25, 0x01C5
     9b0:	90 63       	ori	r25, 0x30	; 48
     9b2:	90 93 c5 01 	sts	0x01C5, r25
	// set new timeout mark
	ram.PulseMSRemaining.NHPTimeout = NHP_TIMEOUT_MS;

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     9b6:	64 ee       	ldi	r22, 0xE4	; 228
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	31 d5       	rcall	.+2658   	; 0x141e <NHPreadChecksum>
     9bc:	88 23       	and	r24, r24

	if (address == 0)
     9be:	09 f4       	brne	.+2      	; 0x9c2 <checkNHPProtocol+0x16>
     9c0:	75 c0       	rjmp	.+234    	; 0xaac <checkNHPProtocol+0x100>
     9c2:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     9c4:	18 c0       	rjmp	.+48     	; 0x9f6 <checkNHPProtocol+0x4a>
     9c6:	be df       	rcall	.-132    	; 0x944 <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     9c8:	40 91 e4 01 	lds	r20, 0x01E4

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     9cc:	46 95       	lsr	r20
     9ce:	46 95       	lsr	r20
     9d0:	46 95       	lsr	r20
     9d2:	47 70       	andi	r20, 0x07	; 7
     9d4:	69 ee       	ldi	r22, 0xE9	; 233
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	86 e3       	ldi	r24, 0x36	; 54
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	cd de       	rcall	.-614    	; 0x778 <LRingBuffer_Append_Buffer.constprop.0>
     9de:	80 91 e4 01 	lds	r24, 0x01E4
     9e2:	86 95       	lsr	r24
		ram.skipNHP += ram.NHP.readlength;
     9e4:	86 95       	lsr	r24
     9e6:	86 95       	lsr	r24
     9e8:	87 70       	andi	r24, 0x07	; 7
     9ea:	90 91 bb 01 	lds	r25, 0x01BB
     9ee:	89 0f       	add	r24, r25
     9f0:	80 93 bb 01 	sts	0x01BB, r24
     9f4:	08 95       	ret
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	89 f4       	brne	.+34     	; 0xa1c <checkNHPProtocol+0x70>
		return;
     9fa:	90 91 e6 01 	lds	r25, 0x01E6
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     9fe:	91 30       	cpi	r25, 0x01	; 1
     a00:	69 f4       	brne	.+26     	; 0xa1c <checkNHPProtocol+0x70>
     a02:	a0 df       	rcall	.-192    	; 0x944 <checkNHPControlAddressError>
     a04:	80 91 e5 01 	lds	r24, 0x01E5
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     a08:	80 93 c6 01 	sts	0x01C6, r24

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     a0c:	10 92 c8 01 	sts	0x01C8, r1
     a10:	57 df       	rcall	.-338    	; 0x8c0 <getHIDReportLength>
     a12:	80 93 c7 01 	sts	0x01C7, r24
		ram.HID.recvlength = 0;
     a16:	81 11       	cpse	r24, r1

		// TODO remove this cleaning
		//memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     a18:	49 c0       	rjmp	.+146    	; 0xaac <checkNHPProtocol+0x100>
     a1a:	47 c0       	rjmp	.+142    	; 0xaaa <checkNHPProtocol+0xfe>
     a1c:	90 91 c6 01 	lds	r25, 0x01C6

		// error, write down this wrong ID report
		if (!ram.HID.length)
     a20:	99 23       	and	r25, r25
     a22:	69 f1       	breq	.+90     	; 0xa7e <checkNHPProtocol+0xd2>
     a24:	60 91 c8 01 	lds	r22, 0x01C8
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     a28:	46 2f       	mov	r20, r22
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	99 27       	eor	r25, r25
     a2e:	87 fd       	sbrc	r24, 7
     a30:	90 95       	com	r25
     a32:	9a 01       	movw	r18, r20
     a34:	2e 5f       	subi	r18, 0xFE	; 254
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	35 95       	asr	r19
     a3a:	27 95       	ror	r18
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	82 17       	cp	r24, r18
     a42:	93 07       	cpc	r25, r19
     a44:	e1 f4       	brne	.+56     	; 0xa7e <checkNHPProtocol+0xd2>
     a46:	80 91 e5 01 	lds	r24, 0x01E5
     a4a:	90 91 e6 01 	lds	r25, 0x01E6
     a4e:	fa 01       	movw	r30, r20
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     a50:	e7 53       	subi	r30, 0x37	; 55
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	80 83       	st	Z, r24
     a56:	e6 2f       	mov	r30, r22
     a58:	ef 5f       	subi	r30, 0xFF	; 255
     a5a:	e0 93 c8 01 	sts	0x01C8, r30
     a5e:	80 91 c7 01 	lds	r24, 0x01C7
     a62:	8e 17       	cp	r24, r30
     a64:	39 f0       	breq	.+14     	; 0xa74 <checkNHPProtocol+0xc8>
     a66:	f0 e0       	ldi	r31, 0x00	; 0

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     a68:	e7 53       	subi	r30, 0x37	; 55
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	90 83       	st	Z, r25
     a6e:	6e 5f       	subi	r22, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     a70:	60 93 c8 01 	sts	0x01C8, r22
     a74:	90 91 c8 01 	lds	r25, 0x01C8
     a78:	89 13       	cpse	r24, r25
     a7a:	18 c0       	rjmp	.+48     	; 0xaac <checkNHPProtocol+0x100>
     a7c:	11 cf       	rjmp	.-478    	; 0x8a0 <flushHID>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     a7e:	40 91 e4 01 	lds	r20, 0x01E4
     a82:	46 95       	lsr	r20
     a84:	46 95       	lsr	r20
			flushHID();
     a86:	46 95       	lsr	r20
     a88:	47 70       	andi	r20, 0x07	; 7
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     a8a:	69 ee       	ldi	r22, 0xE9	; 233
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	86 e3       	ldi	r24, 0x36	; 54
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	72 de       	rcall	.-796    	; 0x778 <LRingBuffer_Append_Buffer.constprop.0>
     a94:	80 91 e4 01 	lds	r24, 0x01E4
     a98:	86 95       	lsr	r24
     a9a:	86 95       	lsr	r24
     a9c:	86 95       	lsr	r24
     a9e:	87 70       	andi	r24, 0x07	; 7
     aa0:	90 91 bb 01 	lds	r25, 0x01BB
		ram.skipNHP += ram.NHP.readlength;
     aa4:	89 0f       	add	r24, r25
     aa6:	80 93 bb 01 	sts	0x01BB, r24
     aaa:	4c cf       	rjmp	.-360    	; 0x944 <checkNHPControlAddressError>
     aac:	08 95       	ret

00000aae <HIDreset>:
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
}

void HIDreset(void){
     aae:	10 92 c6 01 	sts	0x01C6, r1
	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
     ab2:	10 92 c8 01 	sts	0x01C8, r1
	ram.HID.length = 0; // just to be sure
     ab6:	10 92 c7 01 	sts	0x01C7, r1

	// all reports are empty by default
	memset(&ram.HID.isEmpty, true, sizeof(ram.HID.isEmpty));
     aba:	4a e0       	ldi	r20, 0x0A	; 10
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	8a ed       	ldi	r24, 0xDA	; 218
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <memset>

00000aca <LEDs_TurnOnLEDs>:
     aca:	9b b1       	in	r25, 0x0b	; 11
     acc:	80 95       	com	r24
     ace:	89 23       	and	r24, r25
     ad0:	8b b9       	out	0x0b, r24	; 11
     ad2:	08 95       	ret

00000ad4 <avrispReset>:
//================================================================================
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
     ad4:	10 92 bd 01 	sts	0x01BD, r1
     ad8:	10 92 bc 01 	sts	0x01BC, r1
	ram.isp.pmode = false;
     adc:	10 92 be 01 	sts	0x01BE, r1
	ram.isp._addr = 0; // just to be sure
     ae0:	10 92 c0 01 	sts	0x01C0, r1
     ae4:	10 92 bf 01 	sts	0x01BF, r1
     ae8:	08 95       	ret

00000aea <sendCDCbyte>:
}

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     aea:	68 2f       	mov	r22, r24
     aec:	80 e1       	ldi	r24, 0x10	; 16
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 1c 10 	call	0x2038	; 0x2038 <CDC_Device_SendByte>
     af4:	88 23       	and	r24, r24
     af6:	e9 f0       	breq	.+58     	; 0xb32 <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     af8:	80 e1       	ldi	r24, 0x10	; 16
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <CDC_Device_USBTask>
		USB_USBTask();
     b00:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	e1 df       	rcall	.-62     	; 0xaca <LEDs_TurnOnLEDs>
     b08:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0a:	81 ee       	ldi	r24, 0xE1	; 225
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <sendCDCbyte+0x24>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <sendCDCbyte+0x2e>
     b18:	00 00       	nop
     b1a:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     b1c:	d6 df       	rcall	.-84     	; 0xaca <LEDs_TurnOnLEDs>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	81 ee       	ldi	r24, 0xE1	; 225
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <sendCDCbyte+0x3a>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <sendCDCbyte+0x44>
     b2e:	00 00       	nop
     b30:	e9 cf       	rjmp	.-46     	; 0xb04 <sendCDCbyte+0x1a>
     b32:	08 95       	ret

00000b34 <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     b34:	80 e1       	ldi	r24, 0x10	; 16
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 84 10 	call	0x2108	; 0x2108 <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     b3c:	97 fd       	sbrc	r25, 7
     b3e:	fa cf       	rjmp	.-12     	; 0xb34 <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     b40:	08 95       	ret

00000b42 <fill>:

void fill(int n) {
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	7c 01       	movw	r14, r24
     b50:	0b e3       	ldi	r16, 0x3B	; 59
     b52:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     b54:	c0 e0       	ldi	r28, 0x00	; 0
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <fill+0x22>
		ram.ispBuffer[x] = getch();
     b5a:	ec df       	rcall	.-40     	; 0xb34 <getch>
     b5c:	f8 01       	movw	r30, r16
     b5e:	81 93       	st	Z+, r24
     b60:	8f 01       	movw	r16, r30
     b62:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     b64:	ce 15       	cp	r28, r14
     b66:	df 05       	cpc	r29, r15
     b68:	c4 f3       	brlt	.-16     	; 0xb5a <fill+0x18>
     b6a:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     b78:	90 91 47 01 	lds	r25, 0x0147
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	20 91 48 01 	lds	r18, 0x0148
     b82:	82 0f       	add	r24, r18
     b84:	91 1d       	adc	r25, r1
     b86:	90 93 c2 01 	sts	0x01C2, r25
     b8a:	80 93 c1 01 	sts	0x01C1, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     b8e:	90 91 49 01 	lds	r25, 0x0149
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	20 91 4a 01 	lds	r18, 0x014A
     b98:	82 0f       	add	r24, r18
     b9a:	91 1d       	adc	r25, r1
     b9c:	90 93 c4 01 	sts	0x01C4, r25
     ba0:	80 93 c3 01 	sts	0x01C3, r24
     ba4:	08 95       	ret

00000ba6 <breply>:
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}


void breply(uint8_t b) {
     ba6:	cf 93       	push	r28
     ba8:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     baa:	c4 df       	rcall	.-120    	; 0xb34 <getch>
     bac:	80 32       	cpi	r24, 0x20	; 32
     bae:	39 f4       	brne	.+14     	; 0xbbe <breply+0x18>
     bb0:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     bb2:	9b df       	rcall	.-202    	; 0xaea <sendCDCbyte>
     bb4:	8c 2f       	mov	r24, r28
     bb6:	99 df       	rcall	.-206    	; 0xaea <sendCDCbyte>
		sendCDCbyte(b);
     bb8:	80 e1       	ldi	r24, 0x10	; 16
     bba:	cf 91       	pop	r28
     bbc:	96 cf       	rjmp	.-212    	; 0xaea <sendCDCbyte>
		sendCDCbyte(STK_OK);
     bbe:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     bc0:	94 df       	rcall	.-216    	; 0xaea <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     bc2:	80 91 bc 01 	lds	r24, 0x01BC
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     bc6:	90 91 bd 01 	lds	r25, 0x01BD
     bca:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     bcc:	90 93 bd 01 	sts	0x01BD, r25
     bd0:	80 93 bc 01 	sts	0x01BC, r24
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <get_parameters>:
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}


void get_parameters(uint8_t c) {
     bd8:	81 38       	cpi	r24, 0x81	; 129
     bda:	59 f0       	breq	.+22     	; 0xbf2 <get_parameters+0x1a>
     bdc:	18 f4       	brcc	.+6      	; 0xbe4 <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     bde:	80 38       	cpi	r24, 0x80	; 128
     be0:	71 f4       	brne	.+28     	; 0xbfe <get_parameters+0x26>
     be2:	05 c0       	rjmp	.+10     	; 0xbee <get_parameters+0x16>
     be4:	82 38       	cpi	r24, 0x82	; 130
     be6:	39 f0       	breq	.+14     	; 0xbf6 <get_parameters+0x1e>
     be8:	83 39       	cpi	r24, 0x93	; 147
     bea:	49 f4       	brne	.+18     	; 0xbfe <get_parameters+0x26>
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <get_parameters+0x22>


void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     bf6:	82 e1       	ldi	r24, 0x12	; 18
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     bfa:	83 e5       	ldi	r24, 0x53	; 83
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <get_parameters+0x28>
		break;
	default:
		breply(0);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	d2 cf       	rjmp	.-92     	; 0xba6 <breply>

00000c02 <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     c02:	98 df       	rcall	.-208    	; 0xb34 <getch>
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	21 f4       	brne	.+8      	; 0xc10 <replyOK+0xe>
     c08:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     c0a:	6f df       	rcall	.-290    	; 0xaea <sendCDCbyte>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	6d cf       	rjmp	.-294    	; 0xaea <sendCDCbyte>
		sendCDCbyte(STK_OK);
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	5b df       	rcall	.-330    	; 0xaca <LEDs_TurnOnLEDs>
     c14:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     c16:	80 e7       	ldi	r24, 0x70	; 112
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	80 40       	sbci	r24, 0x00	; 0
     c1e:	90 40       	sbci	r25, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <replyOK+0x18>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <replyOK+0x22>
     c24:	00 00       	nop
     c26:	5d 9a       	sbi	0x0b, 5	; 11
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	80 e7       	ldi	r24, 0x70	; 112
     c2c:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <replyOK+0x2c>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <replyOK+0x36>
     c38:	00 00       	nop
     c3a:	80 e2       	ldi	r24, 0x20	; 32
     c3c:	46 df       	rcall	.-372    	; 0xaca <LEDs_TurnOnLEDs>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <replyOK+0x42>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <replyOK+0x4c>
     c4e:	00 00       	nop
     c50:	5d 9a       	sbi	0x0b, 5	; 11
     c52:	85 e1       	ldi	r24, 0x15	; 21
     c54:	4a df       	rcall	.-364    	; 0xaea <sendCDCbyte>
     c56:	80 91 bc 01 	lds	r24, 0x01BC
     c5a:	90 91 bd 01 	lds	r25, 0x01BD
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	90 93 bd 01 	sts	0x01BD, r25
		ram.isp.error++;
     c64:	80 93 bc 01 	sts	0x01BC, r24
     c68:	08 95       	ret

00000c6a <end_pmode>:
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = true;
	return;
}

void end_pmode(void) {
     c6a:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     c6c:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     c6e:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     c70:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     c72:	20 98       	cbi	0x04, 0	; 4

	ram.isp.pmode = false;
     c74:	10 92 be 01 	sts	0x01BE, r1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c78:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c7a:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if Base points to a buffer
		if (Buffer->Base == NULL)
     c7c:	80 91 36 01 	lds	r24, 0x0136
     c80:	90 91 37 01 	lds	r25, 0x0137
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c84:	2f bf       	out	0x3f, r18	; 63

	// enable Serial buffer again
	if (!LRingBuffer_IsEnabled(&ram.RingBuffer))
     c86:	89 2b       	or	r24, r25
     c88:	69 f4       	brne	.+26     	; 0xca4 <end_pmode+0x3a>
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     c8a:	e6 e3       	ldi	r30, 0x36	; 54
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c8e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c90:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = DataPtr;
     c92:	8b e3       	ldi	r24, 0x3B	; 59
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
		Buffer->Index = 0;
     c9a:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = Size;
     c9c:	80 e8       	ldi	r24, 0x80	; 128
     c9e:	83 83       	std	Z+3, r24	; 0x03
		Buffer->Count = 0;
     ca0:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ca2:	2f bf       	out	0x3f, r18	; 63
		LRingBuffer_InitBuffer(&ram.RingBuffer, ram.RingBuffer_Data, sizeof(ram.RingBuffer_Data));

	// HID Setup
	HIDreset();
     ca4:	04 df       	rcall	.-504    	; 0xaae <HIDreset>
     ca6:	10 92 bb 01 	sts	0x01BB, r1

	ram.skipNHP = 0;
     caa:	84 ee       	ldi	r24, 0xE4	; 228
	NHPreset(&ram.NHP);
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	04 c3       	rjmp	.+1544   	; 0x12b8 <NHPreset>

00000cb0 <spi_init>:
}

void spi_init(void) {
     cb0:	83 e5       	ldi	r24, 0x53	; 83
     cb2:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     cb4:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     cb6:	8e b5       	in	r24, 0x2e	; 46
     cb8:	08 95       	ret

00000cba <spi_wait>:
	return reply;
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     cba:	0d b4       	in	r0, 0x2d	; 45
     cbc:	07 fe       	sbrs	r0, 7
     cbe:	fd cf       	rjmp	.-6      	; 0xcba <spi_wait>
}
     cc0:	08 95       	ret

00000cc2 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     cc2:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     cc4:	fa df       	rcall	.-12     	; 0xcba <spi_wait>
     cc6:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     cc8:	08 95       	ret

00000cca <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <spi_transaction+0x6>
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     cd6:	2b 83       	std	Y+3, r18	; 0x03
     cd8:	4a 83       	std	Y+2, r20	; 0x02
     cda:	69 83       	std	Y+1, r22	; 0x01
     cdc:	f2 df       	rcall	.-28     	; 0xcc2 <spi_send>
     cde:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     ce0:	86 2f       	mov	r24, r22
     ce2:	ef df       	rcall	.-34     	; 0xcc2 <spi_send>
     ce4:	4a 81       	ldd	r20, Y+2	; 0x02
     ce6:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     ce8:	ec df       	rcall	.-40     	; 0xcc2 <spi_send>
     cea:	2b 81       	ldd	r18, Y+3	; 0x03
     cec:	82 2f       	mov	r24, r18
     cee:	0f 90       	pop	r0
	return spi_send(d);
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	e4 cf       	rjmp	.-56     	; 0xcc2 <spi_send>

00000cfa <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     cfa:	e6 e3       	ldi	r30, 0x36	; 54
     cfc:	f1 e0       	ldi	r31, 0x01	; 1
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     cfe:	8f b7       	in	r24, 0x3f	; 63
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
     d00:	f8 94       	cli
		GCC_FORCE_POINTER_ACCESS(Buffer);

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	10 82       	st	Z, r1
		Buffer->Index = 0;
     d06:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = 0;
     d08:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Count = 0;
     d0a:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d0c:	8f bf       	out	0x3f, r24	; 63

	// do not write into Serial buffer, we need this ram now
	LRingBuffer_DisableBuffer(&ram.RingBuffer);

	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
     d0e:	20 9a       	sbi	0x04, 0	; 4
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);
     d10:	28 9a       	sbi	0x05, 0	; 5

	spi_init();
     d12:	ce df       	rcall	.-100    	; 0xcb0 <spi_init>
     d14:	24 9a       	sbi	0x04, 4	; 4

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     d16:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     d18:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     d1a:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	80 e7       	ldi	r24, 0x70	; 112
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	21 50       	subi	r18, 0x01	; 1
     d24:	80 40       	sbci	r24, 0x00	; 0
     d26:	90 40       	sbci	r25, 0x00	; 0
     d28:	e1 f7       	brne	.-8      	; 0xd22 <start_pmode+0x28>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <start_pmode+0x32>
     d2c:	00 00       	nop
     d2e:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	80 e7       	ldi	r24, 0x70	; 112
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	80 40       	sbci	r24, 0x00	; 0
     d3a:	90 40       	sbci	r25, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <start_pmode+0x3c>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <start_pmode+0x46>
     d40:	00 00       	nop
     d42:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     d44:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     d46:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	63 e5       	ldi	r22, 0x53	; 83
     d4c:	8c ea       	ldi	r24, 0xAC	; 172
     d4e:	bd df       	rcall	.-134    	; 0xcca <spi_transaction>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 be 01 	sts	0x01BE, r24
	ram.isp.pmode = true;
     d56:	08 95       	ret

00000d58 <commit>:
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}


void commit(int addr) {
     d58:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	48 2f       	mov	r20, r24
     d5e:	69 2f       	mov	r22, r25
     d60:	8c e4       	ldi	r24, 0x4C	; 76
     d62:	b3 df       	rcall	.-154    	; 0xcca <spi_transaction>
     d64:	2f ef       	ldi	r18, 0xFF	; 255
     d66:	86 e7       	ldi	r24, 0x76	; 118
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	21 50       	subi	r18, 0x01	; 1
     d6c:	80 40       	sbci	r24, 0x00	; 0
     d6e:	90 40       	sbci	r25, 0x00	; 0
     d70:	e1 f7       	brne	.-8      	; 0xd6a <commit+0x12>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <commit+0x1c>
     d74:	00 00       	nop
     d76:	80 e2       	ldi	r24, 0x20	; 32
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
     d78:	a8 ce       	rjmp	.-688    	; 0xaca <LEDs_TurnOnLEDs>

00000d7a <read_signature>:
	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
}

void read_signature(void) {
     d7a:	dc de       	rcall	.-584    	; 0xb34 <getch>
     d7c:	80 32       	cpi	r24, 0x20	; 32
     d7e:	59 f0       	breq	.+22     	; 0xd96 <read_signature+0x1c>
     d80:	80 91 bc 01 	lds	r24, 0x01BC
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     d84:	90 91 bd 01 	lds	r25, 0x01BD
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 bd 01 	sts	0x01BD, r25
     d8e:	80 93 bc 01 	sts	0x01BC, r24
     d92:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     d94:	15 c0       	rjmp	.+42     	; 0xdc0 <read_signature+0x46>
     d96:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     d98:	a8 de       	rcall	.-688    	; 0xaea <sendCDCbyte>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	80 e3       	ldi	r24, 0x30	; 48
     da2:	93 df       	rcall	.-218    	; 0xcca <spi_transaction>
     da4:	a2 de       	rcall	.-700    	; 0xaea <sendCDCbyte>
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     dae:	8d df       	rcall	.-230    	; 0xcca <spi_transaction>
     db0:	9c de       	rcall	.-712    	; 0xaea <sendCDCbyte>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	42 e0       	ldi	r20, 0x02	; 2
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     dba:	87 df       	rcall	.-242    	; 0xcca <spi_transaction>
     dbc:	96 de       	rcall	.-724    	; 0xaea <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     dbe:	80 e1       	ldi	r24, 0x10	; 16
     dc0:	94 ce       	rjmp	.-728    	; 0xaea <sendCDCbyte>

00000dc2 <universal>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void universal(void) {
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	bd de       	rcall	.-646    	; 0xb42 <fill>
     dc8:	20 91 3e 01 	lds	r18, 0x013E
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     dcc:	40 91 3d 01 	lds	r20, 0x013D
	sendCDCbyte(STK_OK);
     dd0:	60 91 3c 01 	lds	r22, 0x013C
     dd4:	80 91 3b 01 	lds	r24, 0x013B
     dd8:	78 df       	rcall	.-272    	; 0xcca <spi_transaction>
     dda:	e5 ce       	rjmp	.-566    	; 0xba6 <breply>

00000ddc <flash>:
void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
}

void flash(uint8_t hilo, int addr, uint8_t data) {
     ddc:	96 2f       	mov	r25, r22
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     dde:	67 2f       	mov	r22, r23
     de0:	24 2f       	mov	r18, r20
	do {
	} while (!(SPSR & (1 << SPIF)));
}

void flash(uint8_t hilo, int addr, uint8_t data) {
	spi_transaction(0x40 + 8 * hilo,
     de2:	88 0f       	add	r24, r24
     de4:	88 0f       	add	r24, r24
     de6:	88 0f       	add	r24, r24
     de8:	49 2f       	mov	r20, r25
     dea:	80 5c       	subi	r24, 0xC0	; 192
     dec:	6e cf       	rjmp	.-292    	; 0xcca <spi_transaction>

00000dee <current_page>:
		addr & 0xFF,
		data);
}


int current_page(void) {
     dee:	80 91 c1 01 	lds	r24, 0x01C1
     df2:	90 91 c2 01 	lds	r25, 0x01C2
     df6:	20 91 bf 01 	lds	r18, 0x01BF
     dfa:	30 91 c0 01 	lds	r19, 0x01C0
     dfe:	80 32       	cpi	r24, 0x20	; 32
     e00:	91 05       	cpc	r25, r1
     e02:	11 f4       	brne	.+4      	; 0xe08 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     e04:	20 7f       	andi	r18, 0xF0	; 240
     e06:	0e c0       	rjmp	.+28     	; 0xe24 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     e08:	80 34       	cpi	r24, 0x40	; 64
     e0a:	91 05       	cpc	r25, r1
     e0c:	11 f4       	brne	.+4      	; 0xe12 <current_page+0x24>
     e0e:	20 7e       	andi	r18, 0xE0	; 224
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     e12:	80 38       	cpi	r24, 0x80	; 128
     e14:	91 05       	cpc	r25, r1
     e16:	11 f4       	brne	.+4      	; 0xe1c <current_page+0x2e>
     e18:	20 7c       	andi	r18, 0xC0	; 192
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     e1c:	81 15       	cp	r24, r1
     e1e:	91 40       	sbci	r25, 0x01	; 1
     e20:	09 f4       	brne	.+2      	; 0xe24 <current_page+0x36>
     e22:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     e24:	c9 01       	movw	r24, r18
     e26:	08 95       	ret

00000e28 <flash_read>:
	return STK_OK;
}



uint8_t flash_read(uint8_t hilo, int addr) {
     e28:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     e2a:	88 0f       	add	r24, r24
     e2c:	88 0f       	add	r24, r24
     e2e:	88 0f       	add	r24, r24
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	67 2f       	mov	r22, r23
     e34:	80 5e       	subi	r24, 0xE0	; 224
     e36:	49 cf       	rjmp	.-366    	; 0xcca <spi_transaction>

00000e38 <flash_read_page>:
	sendCDCbyte(result);
	return;
}


char flash_read_page(int length) {
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	d0 e0       	ldi	r29, 0x00	; 0
     e46:	19 c0       	rjmp	.+50     	; 0xe7a <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     e48:	60 91 bf 01 	lds	r22, 0x01BF
     e4c:	70 91 c0 01 	lds	r23, 0x01C0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	ea df       	rcall	.-44     	; 0xe28 <flash_read>
     e54:	4a de       	rcall	.-876    	; 0xaea <sendCDCbyte>
		sendCDCbyte(low);
     e56:	60 91 bf 01 	lds	r22, 0x01BF
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     e5a:	70 91 c0 01 	lds	r23, 0x01C0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	e3 df       	rcall	.-58     	; 0xe28 <flash_read>
     e62:	43 de       	rcall	.-890    	; 0xaea <sendCDCbyte>
     e64:	20 91 bf 01 	lds	r18, 0x01BF
		sendCDCbyte(high);
     e68:	30 91 c0 01 	lds	r19, 0x01C0
		ram.isp._addr++;
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	30 93 c0 01 	sts	0x01C0, r19
     e74:	20 93 bf 01 	sts	0x01BF, r18
     e78:	22 96       	adiw	r28, 0x02	; 2
     e7a:	c0 17       	cp	r28, r16
     e7c:	d1 07       	cpc	r29, r17
     e7e:	24 f3       	brlt	.-56     	; 0xe48 <flash_read_page+0x10>
	return;
}


char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     e80:	80 e1       	ldi	r24, 0x10	; 16
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <eeprom_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char eeprom_read_page(int length) {
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     e9a:	00 91 bf 01 	lds	r16, 0x01BF
     e9e:	10 91 c0 01 	lds	r17, 0x01C0
     ea2:	00 0f       	add	r16, r16
     ea4:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     ea6:	e8 01       	movw	r28, r16
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     eaa:	2f ef       	ldi	r18, 0xFF	; 255
     eac:	4c 2f       	mov	r20, r28
     eae:	6d 2f       	mov	r22, r29
     eb0:	80 ea       	ldi	r24, 0xA0	; 160
     eb2:	0b df       	rcall	.-490    	; 0xcca <spi_transaction>
     eb4:	1a de       	rcall	.-972    	; 0xaea <sendCDCbyte>
		sendCDCbyte(ee);
     eb6:	21 96       	adiw	r28, 0x01	; 1
     eb8:	ce 01       	movw	r24, r28
     eba:	80 1b       	sub	r24, r16
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char eeprom_read_page(int length) {
     ebc:	91 0b       	sbc	r25, r17
     ebe:	8e 15       	cp	r24, r14
     ec0:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     ec2:	9c f3       	brlt	.-26     	; 0xeaa <eeprom_read_page+0x1e>
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <read_page>:
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
	return ram.isp._addr;
}


void read_page(void) {
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     eda:	2c de       	rcall	.-936    	; 0xb34 <getch>
     edc:	d8 2f       	mov	r29, r24
     ede:	2a de       	rcall	.-940    	; 0xb34 <getch>
	length += getch();
     ee0:	c8 2f       	mov	r28, r24
     ee2:	28 de       	rcall	.-944    	; 0xb34 <getch>
     ee4:	18 2f       	mov	r17, r24
	char memtype = getch();
     ee6:	26 de       	rcall	.-948    	; 0xb34 <getch>
     ee8:	80 32       	cpi	r24, 0x20	; 32
     eea:	59 f0       	breq	.+22     	; 0xf02 <read_page+0x2e>
	if (CRC_EOP != getch()) {
     eec:	80 91 bc 01 	lds	r24, 0x01BC
     ef0:	90 91 bd 01 	lds	r25, 0x01BD
		ram.isp.error++;
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	90 93 bd 01 	sts	0x01BD, r25
     efa:	80 93 bc 01 	sts	0x01BC, r24
     efe:	85 e1       	ldi	r24, 0x15	; 21
     f00:	13 c0       	rjmp	.+38     	; 0xf28 <read_page+0x54>
     f02:	3d 2f       	mov	r19, r29
     f04:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     f06:	c9 01       	movw	r24, r18
     f08:	8c 0f       	add	r24, r28
}


void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f0a:	91 1d       	adc	r25, r1
     f0c:	ec 01       	movw	r28, r24
	length += getch();
     f0e:	84 e1       	ldi	r24, 0x14	; 20
     f10:	ec dd       	rcall	.-1064   	; 0xaea <sendCDCbyte>
     f12:	16 34       	cpi	r17, 0x46	; 70
     f14:	19 f4       	brne	.+6      	; 0xf1c <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
     f16:	ce 01       	movw	r24, r28
     f18:	8f df       	rcall	.-226    	; 0xe38 <flash_read_page>
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
     f1c:	15 34       	cpi	r17, 0x45	; 69
     f1e:	19 f4       	brne	.+6      	; 0xf26 <read_page+0x52>
     f20:	ce 01       	movw	r24, r28
     f22:	b4 df       	rcall	.-152    	; 0xe8c <eeprom_read_page>
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <read_page+0x54>
     f26:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	dd cd       	rjmp	.-1094   	; 0xaea <sendCDCbyte>

00000f30 <write_flash_chunk>:
	write_flash_chunk(start, remaining);
	return STK_OK;

}

uint8_t write_flash_chunk(int start, int length) {
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
	return ram.isp._addr;
}


void read_page(void) {
	char result = (char)STK_FAILED;
     f34:	ef 92       	push	r14
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	7b 01       	movw	r14, r22
}

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     f42:	cb 01       	movw	r24, r22
     f44:	fe dd       	rcall	.-1028   	; 0xb42 <fill>
     f46:	53 df       	rcall	.-346    	; 0xdee <current_page>
	int x = 0;
	int page = current_page();
     f48:	8c 01       	movw	r16, r24
     f4a:	c0 e0       	ldi	r28, 0x00	; 0
     f4c:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
     f4e:	29 c0       	rjmp	.+82     	; 0xfa2 <write_flash_chunk+0x72>
     f50:	4e df       	rcall	.-356    	; 0xdee <current_page>
	int page = current_page();
	while (x < length) {
     f52:	08 17       	cp	r16, r24
		if (page != current_page()) {
     f54:	19 07       	cpc	r17, r25
     f56:	21 f0       	breq	.+8      	; 0xf60 <write_flash_chunk+0x30>
     f58:	c8 01       	movw	r24, r16
     f5a:	fe de       	rcall	.-516    	; 0xd58 <commit>
     f5c:	48 df       	rcall	.-368    	; 0xdee <current_page>
			commit(page);
     f5e:	8c 01       	movw	r16, r24
     f60:	96 e3       	ldi	r25, 0x36	; 54
     f62:	c9 2e       	mov	r12, r25
			page = current_page();
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	d9 2e       	mov	r13, r25
     f68:	cc 0e       	add	r12, r28
	write_flash_chunk(start, remaining);
	return STK_OK;

}

uint8_t write_flash_chunk(int start, int length) {
     f6a:	dd 1e       	adc	r13, r29
     f6c:	60 91 bf 01 	lds	r22, 0x01BF
     f70:	70 91 c0 01 	lds	r23, 0x01C0
     f74:	f6 01       	movw	r30, r12
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
     f76:	45 81       	ldd	r20, Z+5	; 0x05
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	30 df       	rcall	.-416    	; 0xddc <flash>
     f7c:	22 96       	adiw	r28, 0x02	; 2
     f7e:	60 91 bf 01 	lds	r22, 0x01BF
     f82:	70 91 c0 01 	lds	r23, 0x01C0
     f86:	f6 01       	movw	r30, r12
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
     f88:	46 81       	ldd	r20, Z+6	; 0x06
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	27 df       	rcall	.-434    	; 0xddc <flash>
     f8e:	20 91 bf 01 	lds	r18, 0x01BF
     f92:	30 91 c0 01 	lds	r19, 0x01C0
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	30 93 c0 01 	sts	0x01C0, r19
		ram.isp._addr++;
     f9e:	20 93 bf 01 	sts	0x01BF, r18
     fa2:	ce 15       	cp	r28, r14
     fa4:	df 05       	cpc	r29, r15
     fa6:	a4 f2       	brlt	.-88     	; 0xf50 <write_flash_chunk+0x20>
     fa8:	c8 01       	movw	r24, r16
     faa:	d6 de       	rcall	.-596    	; 0xd58 <commit>
     fac:	80 e1       	ldi	r24, 0x10	; 16
     fae:	df 91       	pop	r29
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13

	return STK_OK;
}
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret

00000fc0 <write_flash>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     fc8:	c0 91 bf 01 	lds	r28, 0x01BF
     fcc:	d0 91 c0 01 	lds	r29, 0x01C0
     fd0:	cc 0f       	add	r28, r28
     fd2:	dd 1f       	adc	r29, r29
	int remaining = length;
     fd4:	8c 01       	movw	r16, r24
	//if (length > ram.isp.param.flashsize) {
	//	ram.isp.error++;
	//	return STK_FAILED;
	//}

	while (remaining > sizeof(ram.RingBuffer_Data)) {
     fd6:	08 c0       	rjmp	.+16     	; 0xfe8 <write_flash+0x28>
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
     fd8:	60 e8       	ldi	r22, 0x80	; 128
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	ce 01       	movw	r24, r28
     fde:	a8 df       	rcall	.-176    	; 0xf30 <write_flash_chunk>
     fe0:	c0 58       	subi	r28, 0x80	; 128
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
     fe2:	df 4f       	sbci	r29, 0xFF	; 255
     fe4:	00 58       	subi	r16, 0x80	; 128
     fe6:	11 09       	sbc	r17, r1
     fe8:	01 38       	cpi	r16, 0x81	; 129
	//if (length > ram.isp.param.flashsize) {
	//	ram.isp.error++;
	//	return STK_FAILED;
	//}

	while (remaining > sizeof(ram.RingBuffer_Data)) {
     fea:	11 05       	cpc	r17, r1
     fec:	a8 f7       	brcc	.-22     	; 0xfd8 <write_flash+0x18>
     fee:	b8 01       	movw	r22, r16
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
		start += sizeof(ram.RingBuffer_Data);
		remaining -= sizeof(ram.RingBuffer_Data);
	}
	write_flash_chunk(start, remaining);
     ff0:	ce 01       	movw	r24, r28
     ff2:	9e df       	rcall	.-196    	; 0xf30 <write_flash_chunk>
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	df 91       	pop	r29
	return STK_OK;

}
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	d8 2f       	mov	r29, r24
    1012:	c9 2f       	mov	r28, r25
    1014:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
    1016:	cb 01       	movw	r24, r22
    1018:	94 dd       	rcall	.-1240   	; 0xb42 <fill>
    101a:	5d 9a       	sbi	0x0b, 5	; 11
    101c:	3b e3       	ldi	r19, 0x3B	; 59
    101e:	c3 2e       	mov	r12, r19
    1020:	31 e0       	ldi	r19, 0x01	; 1
    1022:	d3 2e       	mov	r13, r19
    1024:	0d 2f       	mov	r16, r29
    1026:	1c 2f       	mov	r17, r28
    1028:	e8 01       	movw	r28, r16
    102a:	11 c0       	rjmp	.+34     	; 0x104e <write_eeprom_chunk+0x4e>
    102c:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
    102e:	21 91       	ld	r18, Z+
    1030:	6f 01       	movw	r12, r30
    1032:	4c 2f       	mov	r20, r28
    1034:	6d 2f       	mov	r22, r29
    1036:	80 ec       	ldi	r24, 0xC0	; 192
    1038:	48 de       	rcall	.-880    	; 0xcca <spi_transaction>
    103a:	ff e7       	ldi	r31, 0x7F	; 127
    103c:	22 e3       	ldi	r18, 0x32	; 50
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	f1 50       	subi	r31, 0x01	; 1
    1042:	20 40       	sbci	r18, 0x00	; 0
    1044:	80 40       	sbci	r24, 0x00	; 0
    1046:	e1 f7       	brne	.-8      	; 0x1040 <write_eeprom_chunk+0x40>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <write_eeprom_chunk+0x4a>
    104a:	00 00       	nop
    104c:	21 96       	adiw	r28, 0x01	; 1
    104e:	ce 01       	movw	r24, r28
    1050:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    1052:	91 0b       	sbc	r25, r17
    1054:	8e 15       	cp	r24, r14
    1056:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    1058:	4c f3       	brlt	.-46     	; 0x102c <write_eeprom_chunk+0x2c>
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	36 dd       	rcall	.-1428   	; 0xaca <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
    105e:	80 e1       	ldi	r24, 0x10	; 16
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
	return STK_OK;
}
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <write_eeprom>:

	return STK_OK;
}

#define EECHUNK (32)
uint8_t write_eeprom(int length) {
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    107a:	c0 91 bf 01 	lds	r28, 0x01BF
    107e:	d0 91 c0 01 	lds	r29, 0x01C0
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
    1082:	20 91 c3 01 	lds	r18, 0x01C3
    1086:	30 91 c4 01 	lds	r19, 0x01C4
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	24 f0       	brlt	.+8      	; 0x1098 <write_eeprom+0x26>
}

#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1090:	cc 0f       	add	r28, r28
    1092:	dd 1f       	adc	r29, r29
    1094:	8c 01       	movw	r16, r24
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
    1098:	80 91 bc 01 	lds	r24, 0x01BC
    109c:	90 91 bd 01 	lds	r25, 0x01BD
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	90 93 bd 01 	sts	0x01BD, r25
    10a6:	80 93 bc 01 	sts	0x01BC, r24
		return STK_FAILED;
    10aa:	81 e1       	ldi	r24, 0x11	; 17
    10ac:	0e c0       	rjmp	.+28     	; 0x10ca <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
    10ae:	60 e2       	ldi	r22, 0x20	; 32
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	ce 01       	movw	r24, r28
    10b4:	a5 df       	rcall	.-182    	; 0x1000 <write_eeprom_chunk>
    10b6:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
    10b8:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
    10ba:	11 09       	sbc	r17, r1
    10bc:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
    10be:	11 05       	cpc	r17, r1
    10c0:	b4 f7       	brge	.-20     	; 0x10ae <write_eeprom+0x3c>
    10c2:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
    10c4:	ce 01       	movw	r24, r28
    10c6:	9c df       	rcall	.-200    	; 0x1000 <write_eeprom_chunk>
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	df 91       	pop	r29
	return STK_OK;
    10cc:	cf 91       	pop	r28
}
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <program_page>:
	return STK_OK;
}



void program_page(void) {
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    10d8:	2d dd       	rcall	.-1446   	; 0xb34 <getch>
    10da:	d8 2f       	mov	r29, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	c8 2f       	mov	r28, r24
    10e0:	29 dd       	rcall	.-1454   	; 0xb34 <getch>
	length += getch();
    10e2:	c8 0f       	add	r28, r24
    10e4:	d1 1d       	adc	r29, r1
    10e6:	26 dd       	rcall	.-1460   	; 0xb34 <getch>
    10e8:	86 34       	cpi	r24, 0x46	; 70

	char memtype = getch();
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <program_page+0x1e>
    10ec:	ce 01       	movw	r24, r28
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    10ee:	68 df       	rcall	.-304    	; 0xfc0 <write_flash>
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <program_page+0x26>
		uint8_t result = write_flash(length);
    10f2:	85 34       	cpi	r24, 0x45	; 69
    10f4:	a9 f4       	brne	.+42     	; 0x1120 <program_page+0x4c>
    10f6:	ce 01       	movw	r24, r28
    10f8:	bc df       	rcall	.-136    	; 0x1072 <write_eeprom>
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}

	if (memtype == 'E') {
    10fa:	c8 2f       	mov	r28, r24
    10fc:	1b dd       	rcall	.-1482   	; 0xb34 <getch>
		result = (char)write_eeprom(length);
    10fe:	80 32       	cpi	r24, 0x20	; 32
    1100:	21 f4       	brne	.+8      	; 0x110a <program_page+0x36>
    1102:	84 e1       	ldi	r24, 0x14	; 20
    1104:	f2 dc       	rcall	.-1564   	; 0xaea <sendCDCbyte>
		if (CRC_EOP == getch()) {
    1106:	8c 2f       	mov	r24, r28
    1108:	0c c0       	rjmp	.+24     	; 0x1122 <program_page+0x4e>
    110a:	80 91 bc 01 	lds	r24, 0x01BC
			sendCDCbyte(STK_INSYNC);
    110e:	90 91 bd 01 	lds	r25, 0x01BD
    1112:	01 96       	adiw	r24, 0x01	; 1
			sendCDCbyte(result);
    1114:	90 93 bd 01 	sts	0x01BD, r25
		}
		else {
			ram.isp.error++;
    1118:	80 93 bc 01 	sts	0x01BC, r24
    111c:	85 e1       	ldi	r24, 0x15	; 21
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <program_page+0x4e>
    1120:	81 e1       	ldi	r24, 0x11	; 17
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	e1 cc       	rjmp	.-1598   	; 0xaea <sendCDCbyte>

00001128 <avrisp>:
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}


void avrisp(int ReceivedByte){
    1128:	cf 93       	push	r28
			sendCDCbyte(STK_INSYNC);
			sendCDCbyte(result);
		}
		else {
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    112e:	80 91 be 01 	lds	r24, 0x01BE
	return;
}
    1132:	88 23       	and	r24, r24
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    1134:	19 f0       	breq	.+6      	; 0x113c <avrisp+0x14>
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	c8 dc       	rcall	.-1648   	; 0xaca <LEDs_TurnOnLEDs>
    113a:	01 c0       	rjmp	.+2      	; 0x113e <avrisp+0x16>
    113c:	5d 9a       	sbi	0x0b, 5	; 11
    113e:	80 91 bc 01 	lds	r24, 0x01BC
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    1142:	90 91 bd 01 	lds	r25, 0x01BD
    1146:	89 2b       	or	r24, r25
    1148:	19 f0       	breq	.+6      	; 0x1150 <avrisp+0x28>
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	be dc       	rcall	.-1668   	; 0xaca <LEDs_TurnOnLEDs>
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <avrisp+0x2a>
    1150:	5c 9a       	sbi	0x0b, 4	; 11
    1152:	d7 fd       	sbrc	r29, 7
    1154:	ae c0       	rjmp	.+348    	; 0x12b2 <avrisp+0x18a>
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    1156:	c1 35       	cpi	r28, 0x51	; 81
    1158:	d1 05       	cpc	r29, r1
		switch (ReceivedByte) {
    115a:	09 f4       	brne	.+2      	; 0x115e <avrisp+0x36>
    115c:	85 c0       	rjmp	.+266    	; 0x1268 <avrisp+0x140>
    115e:	e4 f4       	brge	.+56     	; 0x1198 <avrisp+0x70>
    1160:	c1 34       	cpi	r28, 0x41	; 65
    1162:	d1 05       	cpc	r29, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <avrisp+0x40>
    1166:	52 c0       	rjmp	.+164    	; 0x120c <avrisp+0xe4>
    1168:	54 f4       	brge	.+20     	; 0x117e <avrisp+0x56>
    116a:	c0 33       	cpi	r28, 0x30	; 48
    116c:	d1 05       	cpc	r29, r1
    116e:	99 f1       	breq	.+102    	; 0x11d6 <avrisp+0xae>
    1170:	c1 33       	cpi	r28, 0x31	; 49
    1172:	d1 05       	cpc	r29, r1
    1174:	a9 f1       	breq	.+106    	; 0x11e0 <avrisp+0xb8>
    1176:	a0 97       	sbiw	r28, 0x20	; 32
    1178:	09 f0       	breq	.+2      	; 0x117c <avrisp+0x54>
    117a:	89 c0       	rjmp	.+274    	; 0x128e <avrisp+0x166>
    117c:	7e c0       	rjmp	.+252    	; 0x127a <avrisp+0x152>
    117e:	c5 34       	cpi	r28, 0x45	; 69
    1180:	d1 05       	cpc	r29, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <avrisp+0x5e>
    1184:	4e c0       	rjmp	.+156    	; 0x1222 <avrisp+0xfa>
    1186:	c0 35       	cpi	r28, 0x50	; 80
    1188:	d1 05       	cpc	r29, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <avrisp+0x66>
    118c:	4e c0       	rjmp	.+156    	; 0x122a <avrisp+0x102>
    118e:	c2 34       	cpi	r28, 0x42	; 66
    1190:	d1 05       	cpc	r29, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <avrisp+0x6e>
    1194:	7c c0       	rjmp	.+248    	; 0x128e <avrisp+0x166>
    1196:	3e c0       	rjmp	.+124    	; 0x1214 <avrisp+0xec>
    1198:	c1 36       	cpi	r28, 0x61	; 97
    119a:	d1 05       	cpc	r29, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <avrisp+0x78>
    119e:	59 c0       	rjmp	.+178    	; 0x1252 <avrisp+0x12a>
    11a0:	6c f4       	brge	.+26     	; 0x11bc <avrisp+0x94>
    11a2:	c6 35       	cpi	r28, 0x56	; 86
    11a4:	d1 05       	cpc	r29, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <avrisp+0x82>
    11a8:	5c c0       	rjmp	.+184    	; 0x1262 <avrisp+0x13a>
    11aa:	c0 36       	cpi	r28, 0x60	; 96
    11ac:	d1 05       	cpc	r29, r1
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <avrisp+0x8a>
    11b0:	4f c0       	rjmp	.+158    	; 0x1250 <avrisp+0x128>
    11b2:	c5 35       	cpi	r28, 0x55	; 85
    11b4:	d1 05       	cpc	r29, r1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <avrisp+0x92>
    11b8:	6a c0       	rjmp	.+212    	; 0x128e <avrisp+0x166>
    11ba:	39 c0       	rjmp	.+114    	; 0x122e <avrisp+0x106>
    11bc:	c4 37       	cpi	r28, 0x74	; 116
    11be:	d1 05       	cpc	r29, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <avrisp+0x9c>
    11c2:	4c c0       	rjmp	.+152    	; 0x125c <avrisp+0x134>
    11c4:	c5 37       	cpi	r28, 0x75	; 117
    11c6:	d1 05       	cpc	r29, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <avrisp+0xa4>
    11ca:	54 c0       	rjmp	.+168    	; 0x1274 <avrisp+0x14c>
    11cc:	c4 36       	cpi	r28, 0x64	; 100
    11ce:	d1 05       	cpc	r29, r1
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <avrisp+0xac>
    11d2:	5d c0       	rjmp	.+186    	; 0x128e <avrisp+0x166>
    11d4:	40 c0       	rjmp	.+128    	; 0x1256 <avrisp+0x12e>
    11d6:	10 92 bd 01 	sts	0x01BD, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    11da:	10 92 bc 01 	sts	0x01BC, r1
    11de:	1e c0       	rjmp	.+60     	; 0x121c <avrisp+0xf4>
    11e0:	a9 dc       	rcall	.-1710   	; 0xb34 <getch>
    11e2:	80 32       	cpi	r24, 0x20	; 32
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <avrisp+0xc0>
    11e6:	65 c0       	rjmp	.+202    	; 0x12b2 <avrisp+0x18a>
    11e8:	84 e1       	ldi	r24, 0x14	; 20
    11ea:	7f dc       	rcall	.-1794   	; 0xaea <sendCDCbyte>
    11ec:	81 e4       	ldi	r24, 0x41	; 65
				sendCDCbyte(STK_INSYNC);
    11ee:	7d dc       	rcall	.-1798   	; 0xaea <sendCDCbyte>
    11f0:	86 e5       	ldi	r24, 0x56	; 86
    11f2:	7b dc       	rcall	.-1802   	; 0xaea <sendCDCbyte>
				sendCDCbyte('A');
    11f4:	82 e5       	ldi	r24, 0x52	; 82
    11f6:	79 dc       	rcall	.-1806   	; 0xaea <sendCDCbyte>
    11f8:	80 e2       	ldi	r24, 0x20	; 32
				sendCDCbyte('V');
    11fa:	77 dc       	rcall	.-1810   	; 0xaea <sendCDCbyte>
    11fc:	89 e4       	ldi	r24, 0x49	; 73
    11fe:	75 dc       	rcall	.-1814   	; 0xaea <sendCDCbyte>
				sendCDCbyte('R');
    1200:	83 e5       	ldi	r24, 0x53	; 83
    1202:	73 dc       	rcall	.-1818   	; 0xaea <sendCDCbyte>
    1204:	80 e5       	ldi	r24, 0x50	; 80
				sendCDCbyte(' ');
    1206:	71 dc       	rcall	.-1822   	; 0xaea <sendCDCbyte>
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	50 c0       	rjmp	.+160    	; 0x12ac <avrisp+0x184>
				sendCDCbyte('I');
    120c:	93 dc       	rcall	.-1754   	; 0xb34 <getch>
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
				sendCDCbyte('S');
    1212:	e2 cc       	rjmp	.-1596   	; 0xbd8 <get_parameters>
    1214:	84 e1       	ldi	r24, 0x14	; 20
    1216:	90 e0       	ldi	r25, 0x00	; 0
				sendCDCbyte('P');
    1218:	94 dc       	rcall	.-1752   	; 0xb42 <fill>
    121a:	ae dc       	rcall	.-1700   	; 0xb78 <set_parameters>
    121c:	df 91       	pop	r29
				sendCDCbyte(STK_OK);
    121e:	cf 91       	pop	r28
    1220:	f0 cc       	rjmp	.-1568   	; 0xc02 <replyOK>
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	90 e0       	ldi	r25, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1226:	8d dc       	rcall	.-1766   	; 0xb42 <fill>
    1228:	f9 cf       	rjmp	.-14     	; 0x121c <avrisp+0xf4>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    122a:	67 dd       	rcall	.-1330   	; 0xcfa <start_pmode>
    122c:	f7 cf       	rjmp	.-18     	; 0x121c <avrisp+0xf4>
			break;
		case STK_SET_PARM:
			fill(20);
    122e:	82 dc       	rcall	.-1788   	; 0xb34 <getch>
    1230:	c8 2f       	mov	r28, r24
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	d0 93 c0 01 	sts	0x01C0, r29
			set_parameters();
    1238:	c0 93 bf 01 	sts	0x01BF, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    123c:	7b dc       	rcall	.-1802   	; 0xb34 <getch>
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    123e:	38 2f       	mov	r19, r24
    1240:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    1242:	2c 0f       	add	r18, r28
    1244:	3d 1f       	adc	r19, r29
    1246:	30 93 c0 01 	sts	0x01C0, r19
    124a:	20 93 bf 01 	sts	0x01BF, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    124e:	e6 cf       	rjmp	.-52     	; 0x121c <avrisp+0xf4>
    1250:	71 dc       	rcall	.-1822   	; 0xb34 <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    1252:	70 dc       	rcall	.-1824   	; 0xb34 <getch>
    1254:	e3 cf       	rjmp	.-58     	; 0x121c <avrisp+0xf4>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	3c cf       	rjmp	.-392    	; 0x10d4 <program_page>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	39 ce       	rjmp	.-910    	; 0xed4 <read_page>
			ram.isp._addr += 256 * getch();
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	ad cd       	rjmp	.-1190   	; 0xdc2 <universal>
    1268:	10 92 bd 01 	sts	0x01BD, r1
    126c:	10 92 bc 01 	sts	0x01BC, r1
    1270:	fc dc       	rcall	.-1544   	; 0xc6a <end_pmode>
    1272:	d4 cf       	rjmp	.-88     	; 0x121c <avrisp+0xf4>
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    1278:	80 cd       	rjmp	.-1280   	; 0xd7a <read_signature>
    127a:	80 91 bc 01 	lds	r24, 0x01BC
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    127e:	90 91 bd 01 	lds	r25, 0x01BD
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	90 93 bd 01 	sts	0x01BD, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    1288:	80 93 bc 01 	sts	0x01BC, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <avrisp+0x182>
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    128e:	80 91 bc 01 	lds	r24, 0x01BC
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1292:	90 91 bd 01 	lds	r25, 0x01BD
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 bd 01 	sts	0x01BD, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    129c:	80 93 bc 01 	sts	0x01BC, r24
    12a0:	49 dc       	rcall	.-1902   	; 0xb34 <getch>
			end_pmode();
    12a2:	80 32       	cpi	r24, 0x20	; 32
    12a4:	11 f4       	brne	.+4      	; 0x12aa <avrisp+0x182>
    12a6:	82 e1       	ldi	r24, 0x12	; 18
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <avrisp+0x184>
    12aa:	85 e1       	ldi	r24, 0x15	; 21
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    12b0:	1c cc       	rjmp	.-1992   	; 0xaea <sendCDCbyte>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 81       	ld	r18, Z
	protocol->leadError = false;
    12bc:	20 68       	ori	r18, 0x80	; 128
    12be:	2f 7b       	andi	r18, 0xBF	; 191
    12c0:	20 83       	st	Z, r18
    12c2:	08 95       	ret

000012c4 <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    12ca:	90 81       	ld	r25, Z
    12cc:	96 ff       	sbrs	r25, 6
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    12d0:	29 2f       	mov	r18, r25
    12d2:	26 95       	lsr	r18
    12d4:	26 95       	lsr	r18
    12d6:	26 95       	lsr	r18
    12d8:	27 70       	andi	r18, 0x07	; 7
    12da:	db 01       	movw	r26, r22
    12dc:	a2 0f       	add	r26, r18
    12de:	b1 1d       	adc	r27, r1
    12e0:	15 96       	adiw	r26, 0x05	; 5
    12e2:	2c 91       	ld	r18, X
    12e4:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    12e6:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    12e8:	98 60       	ori	r25, 0x08	; 8
    12ea:	9f 7b       	andi	r25, 0xBF	; 191
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    12ee:	97 ff       	sbrs	r25, 7
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    12f2:	90 7c       	andi	r25, 0xC0	; 192
    12f4:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    12f6:	90 81       	ld	r25, Z
    12f8:	96 95       	lsr	r25
    12fa:	96 95       	lsr	r25
    12fc:	96 95       	lsr	r25
    12fe:	97 70       	andi	r25, 0x07	; 7
    1300:	df 01       	movw	r26, r30
    1302:	a9 0f       	add	r26, r25
    1304:	b1 1d       	adc	r27, r1
    1306:	15 96       	adiw	r26, 0x05	; 5
    1308:	8c 93       	st	X, r24
    130a:	29 2f       	mov	r18, r25
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	27 70       	andi	r18, 0x07	; 7
    1310:	22 0f       	add	r18, r18
    1312:	22 0f       	add	r18, r18
    1314:	22 0f       	add	r18, r18
    1316:	40 81       	ld	r20, Z
    1318:	47 7c       	andi	r20, 0xC7	; 199
    131a:	42 2b       	or	r20, r18
    131c:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    131e:	28 2f       	mov	r18, r24
    1320:	20 7c       	andi	r18, 0xC0	; 192
    1322:	34 2f       	mov	r19, r20
    1324:	37 70       	andi	r19, 0x07	; 7
    1326:	20 38       	cpi	r18, 0x80	; 128
    1328:	09 f4       	brne	.+2      	; 0x132c <NHPread+0x68>
    132a:	63 c0       	rjmp	.+198    	; 0x13f2 <NHPread+0x12e>
    132c:	20 3c       	cpi	r18, 0xC0	; 192
    132e:	09 f0       	breq	.+2      	; 0x1332 <NHPread+0x6e>
    1330:	45 c0       	rjmp	.+138    	; 0x13bc <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    1332:	28 2f       	mov	r18, r24
    1334:	28 73       	andi	r18, 0x38	; 56
    1336:	26 95       	lsr	r18
    1338:	26 95       	lsr	r18
    133a:	26 95       	lsr	r18

		if (protocol->mBlocks){
    133c:	33 23       	and	r19, r19
    133e:	49 f0       	breq	.+18     	; 0x1352 <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    1340:	99 0f       	add	r25, r25
    1342:	99 0f       	add	r25, r25
    1344:	99 0f       	add	r25, r25
    1346:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    1348:	49 2b       	or	r20, r25
    134a:	40 64       	ori	r20, 0x40	; 64
    134c:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    134e:	9e ef       	ldi	r25, 0xFE	; 254
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    1352:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	98 f4       	brcc	.+38     	; 0x137e <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    1358:	90 81       	ld	r25, Z
    135a:	96 fb       	bst	r25, 6
    135c:	22 27       	eor	r18, r18
    135e:	20 f9       	bld	r18, 0
    1360:	89 2f       	mov	r24, r25
    1362:	86 95       	lsr	r24
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	82 0f       	add	r24, r18
    136a:	87 70       	andi	r24, 0x07	; 7
    136c:	88 0f       	add	r24, r24
    136e:	88 0f       	add	r24, r24
    1370:	88 0f       	add	r24, r24
    1372:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    1374:	98 2b       	or	r25, r24
    1376:	9f 7b       	andi	r25, 0xBF	; 191
    1378:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    137a:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <NHPread+0x138>
		}

		else if (blocks == 7){
    137e:	27 30       	cpi	r18, 0x07	; 7
    1380:	59 f4       	brne	.+22     	; 0x1398 <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    1382:	08 2f       	mov	r16, r24
    1384:	0f 70       	andi	r16, 0x0F	; 15
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	01 83       	std	Z+1, r16	; 0x01
    138e:	12 83       	std	Z+2, r17	; 0x02
    1390:	23 83       	std	Z+3, r18	; 0x03
    1392:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    1394:	25 e0       	ldi	r18, 0x05	; 5
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    1398:	48 2f       	mov	r20, r24
    139a:	47 70       	andi	r20, 0x07	; 7
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	41 83       	std	Z+1, r20	; 0x01
    13a4:	52 83       	std	Z+2, r21	; 0x02
    13a6:	63 83       	std	Z+3, r22	; 0x03
    13a8:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    13aa:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    13ac:	27 70       	andi	r18, 0x07	; 7
    13ae:	80 81       	ld	r24, Z
    13b0:	88 7f       	andi	r24, 0xF8	; 248
    13b2:	82 2b       	or	r24, r18
    13b4:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    13b6:	99 23       	and	r25, r25
    13b8:	29 f1       	breq	.+74     	; 0x1404 <NHPread+0x140>
    13ba:	20 c0       	rjmp	.+64     	; 0x13fc <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    13bc:	03 2f       	mov	r16, r19
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	02 30       	cpi	r16, 0x02	; 2
    13c2:	11 05       	cpc	r17, r1
    13c4:	24 f1       	brlt	.+72     	; 0x140e <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    13c6:	39 5f       	subi	r19, 0xF9	; 249
    13c8:	37 70       	andi	r19, 0x07	; 7
    13ca:	48 7f       	andi	r20, 0xF8	; 248
    13cc:	43 2b       	or	r20, r19
    13ce:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    13d0:	41 81       	ldd	r20, Z+1	; 0x01
    13d2:	52 81       	ldd	r21, Z+2	; 0x02
    13d4:	63 81       	ldd	r22, Z+3	; 0x03
    13d6:	74 81       	ldd	r23, Z+4	; 0x04
    13d8:	97 e0       	ldi	r25, 0x07	; 7
    13da:	44 0f       	add	r20, r20
    13dc:	55 1f       	adc	r21, r21
    13de:	66 1f       	adc	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	9a 95       	dec	r25
    13e4:	d1 f7       	brne	.-12     	; 0x13da <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    13e6:	48 2b       	or	r20, r24
    13e8:	41 83       	std	Z+1, r20	; 0x01
    13ea:	52 83       	std	Z+2, r21	; 0x02
    13ec:	63 83       	std	Z+3, r22	; 0x03
    13ee:	74 83       	std	Z+4, r23	; 0x04
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    13f2:	31 30       	cpi	r19, 0x01	; 1
    13f4:	71 f4       	brne	.+28     	; 0x1412 <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    13f6:	98 2f       	mov	r25, r24
    13f8:	9f 73       	andi	r25, 0x3F	; 63
    13fa:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	80 83       	st	Z, r24
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    1404:	80 81       	ld	r24, Z
    1406:	8f 77       	andi	r24, 0x7F	; 127
    1408:	80 83       	st	Z, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    140e:	9d ef       	ldi	r25, 0xFD	; 253
    1410:	f5 cf       	rjmp	.-22     	; 0x13fc <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    1412:	9c ef       	ldi	r25, 0xFC	; 252
    1414:	f3 cf       	rjmp	.-26     	; 0x13fc <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    1416:	89 2f       	mov	r24, r25
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	08 95       	ret

0000141e <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    1428:	4d df       	rcall	.-358    	; 0x12c4 <NHPread>
    142a:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    142c:	b4 f4       	brge	.+44     	; 0x145a <NHPreadChecksum+0x3c>
    142e:	09 81       	ldd	r16, Y+1	; 0x01
    1430:	1a 81       	ldd	r17, Y+2	; 0x02
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	a9 01       	movw	r20, r18
    1438:	66 27       	eor	r22, r22
    143a:	77 27       	eor	r23, r23
    143c:	22 27       	eor	r18, r18
    143e:	33 27       	eor	r19, r19
    1440:	40 27       	eor	r20, r16
    1442:	51 27       	eor	r21, r17
    1444:	62 27       	eor	r22, r18
    1446:	73 27       	eor	r23, r19
    1448:	4f 3f       	cpi	r20, 0xFF	; 255
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	61 05       	cpc	r22, r1
    144e:	71 05       	cpc	r23, r1
    1450:	21 f0       	breq	.+8      	; 0x145a <NHPreadChecksum+0x3c>
    1452:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	88 83       	st	Y, r24
    1458:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    145a:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    1464:	fa 01       	movw	r30, r20
    1466:	2c e1       	ldi	r18, 0x1C	; 28
    1468:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    146a:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    146c:	ab 01       	movw	r20, r22
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <NHPwriteChecksum+0x12>
    1472:	56 95       	lsr	r21
    1474:	47 95       	ror	r20
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    147a:	48 30       	cpi	r20, 0x08	; 8
    147c:	28 f0       	brcs	.+10     	; 0x1488 <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    147e:	97 30       	cpi	r25, 0x07	; 7
    1480:	59 f4       	brne	.+22     	; 0x1498 <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    1482:	40 83       	st	Z, r20
				blocks--;
    1484:	96 e0       	ldi	r25, 0x06	; 6
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    1488:	40 83       	st	Z, r20
			blocks--;
    148a:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    148c:	41 11       	cpse	r20, r1
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <NHPwriteChecksum+0x34>
    1490:	27 50       	subi	r18, 0x07	; 7
    1492:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    1494:	92 30       	cpi	r25, 0x02	; 2
    1496:	51 f7       	brne	.-44     	; 0x146c <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    1498:	49 2f       	mov	r20, r25
    149a:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    149e:	df 01       	movw	r26, r30
    14a0:	a4 0f       	add	r26, r20
    14a2:	b1 1d       	adc	r27, r1
    14a4:	9b 01       	movw	r18, r22
    14a6:	2f 77       	andi	r18, 0x7F	; 127
    14a8:	33 27       	eor	r19, r19
    14aa:	2c 93       	st	X, r18
		data >>= 7;
    14ac:	66 0f       	add	r22, r22
    14ae:	67 2f       	mov	r22, r23
    14b0:	66 1f       	adc	r22, r22
    14b2:	77 0b       	sbc	r23, r23
    14b4:	71 95       	neg	r23
		datablocks--;
    14b6:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    14b8:	41 11       	cpse	r20, r1
    14ba:	f1 cf       	rjmp	.-30     	; 0x149e <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    14bc:	49 2f       	mov	r20, r25
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	9a 01       	movw	r18, r20
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	6a 95       	dec	r22
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <NHPwriteChecksum+0x60>
    14cc:	20 6c       	ori	r18, 0xC0	; 192
    14ce:	3f 6f       	ori	r19, 0xFF	; 255
    14d0:	30 81       	ld	r19, Z
    14d2:	32 2b       	or	r19, r18
    14d4:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    14d6:	e4 0f       	add	r30, r20
    14d8:	f5 1f       	adc	r31, r21
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	81 50       	subi	r24, 0x01	; 1
    14de:	8f 73       	andi	r24, 0x3F	; 63
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    14e4:	89 2f       	mov	r24, r25
    14e6:	08 95       	ret

000014e8 <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    14ec:	20 ff       	sbrs	r18, 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    14f0:	5f 98       	cbi	0x0b, 7	; 11
    14f2:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    14f4:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    14f6:	8b b1       	in	r24, 0x0b	; 11
    14f8:	80 63       	ori	r24, 0x30	; 48
    14fa:	8b b9       	out	0x0b, r24	; 11
    14fc:	08 95       	ret

000014fe <SerialInitHID>:
	//if (!ram.isp.pmode)
	//clearHIDReports();
}

// change Serial baud to 115200 for HID
void SerialInitHID(void){
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1502:	80 e1       	ldi	r24, 0x10	; 16
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 cd 00 	sts	0x00CD, r25
    150a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    150e:	ca ec       	ldi	r28, 0xCA	; 202
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	96 e0       	ldi	r25, 0x06	; 6
    1514:	98 83       	st	Y, r25
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1516:	a8 ec       	ldi	r26, 0xC8	; 200
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	8c 93       	st	X, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    151e:	e9 ec       	ldi	r30, 0xC9	; 201
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	28 e1       	ldi	r18, 0x18	; 24
    1524:	20 83       	st	Z, r18

				DDRD  |= (1 << 3);
    1526:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    1528:	5a 9a       	sbi	0x0b, 2	; 11
	Serial_Init(115200, true);

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	// Added for correct Serial connection at baud 115200 <--
	// TODO PD3 ??
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    152a:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    152c:	10 82       	st	Z, r1
	UCSR1A = 0;
    152e:	1c 92       	st	X, r1
	UCSR1C = 0;
    1530:	18 82       	st	Y, r1

	// these are values for baud 115200. i just read them manual from change
	// its needed to start with baud 115200 on powerup
	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10)); //C: 0x06
    1532:	98 83       	st	Y, r25
	UCSR1A = (1 << U2X1); //A: 0x02
    1534:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1)); //B: 0x98
    1536:	88 e9       	ldi	r24, 0x98	; 152
    1538:	80 83       	st	Z, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    153a:	5b 98       	cbi	0x0b, 3	; 11
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	e9 8d       	ldd	r30, Y+25	; 0x19
    154c:	e1 50       	subi	r30, 0x01	; 1
    154e:	e2 30       	cpi	r30, 0x02	; 2
    1550:	28 f4       	brcc	.+10     	; 0x155c <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	ec 5c       	subi	r30, 0xCC	; 204
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	10 81       	ld	r17, Z
    155a:	01 c0       	rjmp	.+2      	; 0x155e <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    155c:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    155e:	88 8d       	ldd	r24, Y+24	; 0x18
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	09 f4       	brne	.+2      	; 0x1566 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    1564:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    1566:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1568:	87 30       	cpi	r24, 0x07	; 7
    156a:	31 f0       	breq	.+12     	; 0x1578 <EVENT_CDC_Device_LineEncodingChanged+0x36>
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	31 f0       	breq	.+12     	; 0x157c <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    1570:	86 30       	cpi	r24, 0x06	; 6
    1572:	29 f4       	brne	.+10     	; 0x157e <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    1574:	12 60       	ori	r17, 0x02	; 2
		break;
    1576:	03 c0       	rjmp	.+6      	; 0x157e <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    1578:	14 60       	ori	r17, 0x04	; 4
		break;
    157a:	01 c0       	rjmp	.+2      	; 0x157e <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    157c:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    157e:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    1580:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    1584:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    1588:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    158c:	2c 89       	ldd	r18, Y+20	; 0x14
    158e:	3d 89       	ldd	r19, Y+21	; 0x15
    1590:	4e 89       	ldd	r20, Y+22	; 0x16
    1592:	5f 89       	ldd	r21, Y+23	; 0x17
    1594:	21 15       	cp	r18, r1
    1596:	81 ee       	ldi	r24, 0xE1	; 225
    1598:	38 07       	cpc	r19, r24
    159a:	41 05       	cpc	r20, r1
    159c:	51 05       	cpc	r21, r1
    159e:	79 f0       	breq	.+30     	; 0x15be <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    15a0:	ca 01       	movw	r24, r20
    15a2:	b9 01       	movw	r22, r18
    15a4:	96 95       	lsr	r25
    15a6:	87 95       	ror	r24
    15a8:	77 95       	ror	r23
    15aa:	67 95       	ror	r22
    15ac:	60 58       	subi	r22, 0x80	; 128
    15ae:	7b 47       	sbci	r23, 0x7B	; 123
    15b0:	81 4e       	sbci	r24, 0xE1	; 225
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	31 09       	sbc	r19, r1
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <EVENT_CDC_Device_LineEncodingChanged+0x80>
    15be:	20 e1       	ldi	r18, 0x10	; 16
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	30 93 cd 00 	sts	0x00CD, r19
    15c6:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    15ca:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    15ce:	8c 89       	ldd	r24, Y+20	; 0x14
    15d0:	9d 89       	ldd	r25, Y+21	; 0x15
    15d2:	ae 89       	ldd	r26, Y+22	; 0x16
    15d4:	bf 89       	ldd	r27, Y+23	; 0x17
    15d6:	81 15       	cp	r24, r1
    15d8:	91 4e       	sbci	r25, 0xE1	; 225
    15da:	a1 05       	cpc	r26, r1
    15dc:	b1 05       	cpc	r27, r1
    15de:	11 f4       	brne	.+4      	; 0x15e4 <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    15ea:	88 e9       	ldi	r24, 0x98	; 152
    15ec:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    15f0:	5b 98       	cbi	0x0b, 3	; 11

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
    15f2:	8c 89       	ldd	r24, Y+20	; 0x14
    15f4:	9d 89       	ldd	r25, Y+21	; 0x15
    15f6:	ae 89       	ldd	r26, Y+22	; 0x16
    15f8:	bf 89       	ldd	r27, Y+23	; 0x17
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	a1 05       	cpc	r26, r1
    15fe:	b1 05       	cpc	r27, r1
    1600:	61 f4       	brne	.+24     	; 0x161a <EVENT_CDC_Device_LineEncodingChanged+0xd8>
		SerialInitHID();
    1602:	7d df       	rcall	.-262    	; 0x14fe <SerialInitHID>
    1604:	e6 e3       	ldi	r30, 0x36	; 54
	}

	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	8f b7       	in	r24, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    160a:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    160c:	11 82       	std	Z+1, r1	; 0x01

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
    160e:	10 82       	st	Z, r1
    1610:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Index = 0;
    1612:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Size = 0;
    1614:	14 82       	std	Z+4, r1	; 0x04
		Buffer->Count = 0;
    1616:	8f bf       	out	0x3f, r24	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1618:	5d da       	rcall	.-2886   	; 0xad4 <avrispReset>
		// disable the buffer until pmode has started
		LRingBuffer_DisableBuffer(&ram.RingBuffer);

		avrispReset();
    161a:	80 91 be 01 	lds	r24, 0x01BE
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
    161e:	88 23       	and	r24, r24
    1620:	21 f0       	breq	.+8      	; 0x162a <EVENT_CDC_Device_LineEncodingChanged+0xe8>
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
		//TODO pmode break to get out of this loop
		end_pmode();
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    1626:	1f 91       	pop	r17
    1628:	20 cb       	rjmp	.-2496   	; 0xc6a <end_pmode>
    162a:	df 91       	pop	r29
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
		//TODO pmode break to get out of this loop
		end_pmode();
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    1630:	79 c9       	rjmp	.-3342   	; 0x924 <clearHIDReports>

00001632 <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    1632:	68 0f       	add	r22, r24
    1634:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    1636:	09 c0       	rjmp	.+18     	; 0x164a <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    1638:	fc 01       	movw	r30, r24
    163a:	21 91       	ld	r18, Z+
    163c:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    163e:	30 91 c8 00 	lds	r19, 0x00C8
    1642:	35 ff       	sbrs	r19, 5
    1644:	fc cf       	rjmp	.-8      	; 0x163e <Serial_SendData+0xc>
				UDR1 = DataByte;
    1646:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    164a:	86 17       	cp	r24, r22
    164c:	97 07       	cpc	r25, r23
    164e:	a1 f7       	brne	.-24     	; 0x1638 <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    1650:	08 95       	ret

00001652 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	7c 01       	movw	r14, r24
    1666:	8b 01       	movw	r16, r22
    1668:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    166a:	d7 d1       	rcall	.+942    	; 0x1a1a <Endpoint_WaitUntilReady>
    166c:	b8 2e       	mov	r11, r24
    166e:	81 11       	cpse	r24, r1
    1670:	32 c0       	rjmp	.+100    	; 0x16d6 <Endpoint_Write_Stream_LE+0x84>
    1672:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1674:	31 f0       	breq	.+12     	; 0x1682 <Endpoint_Write_Stream_LE+0x30>
    1676:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    1678:	39 81       	ldd	r19, Y+1	; 0x01
    167a:	02 1b       	sub	r16, r18
    167c:	13 0b       	sbc	r17, r19
    167e:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1680:	f3 1e       	adc	r15, r19
    1682:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1684:	d1 2c       	mov	r13, r1
    1686:	22 c0       	rjmp	.+68     	; 0x16cc <Endpoint_Write_Stream_LE+0x7a>
    1688:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    168c:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <Endpoint_Write_Stream_LE+0x66>
    1690:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1694:	8e 77       	andi	r24, 0x7E	; 126
    1696:	80 93 e8 00 	sts	0x00E8, r24
    169a:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    169c:	49 f0       	breq	.+18     	; 0x16b0 <Endpoint_Write_Stream_LE+0x5e>
    169e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    16a0:	99 81       	ldd	r25, Y+1	; 0x01
    16a2:	8c 0d       	add	r24, r12
    16a4:	9d 1d       	adc	r25, r13
    16a6:	99 83       	std	Y+1, r25	; 0x01
    16a8:	88 83       	st	Y, r24
    16aa:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    16ac:	b2 2e       	mov	r11, r18
    16ae:	13 c0       	rjmp	.+38     	; 0x16d6 <Endpoint_Write_Stream_LE+0x84>
    16b0:	b4 d1       	rcall	.+872    	; 0x1a1a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16b2:	88 23       	and	r24, r24
    16b4:	59 f0       	breq	.+22     	; 0x16cc <Endpoint_Write_Stream_LE+0x7a>
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <Endpoint_Write_Stream_LE+0x82>
    16b8:	f7 01       	movw	r30, r14
    16ba:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16bc:	7f 01       	movw	r14, r30
    16be:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16c2:	01 50       	subi	r16, 0x01	; 1
    16c4:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    16c6:	ff ef       	ldi	r31, 0xFF	; 255
    16c8:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    16ca:	df 0a       	sbc	r13, r31
    16cc:	01 15       	cp	r16, r1
    16ce:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    16d0:	d9 f6       	brne	.-74     	; 0x1688 <Endpoint_Write_Stream_LE+0x36>
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <Endpoint_Write_Stream_LE+0x84>
    16d4:	b8 2e       	mov	r11, r24
    16d6:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16d8:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	08 95       	ret

000016ec <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    16ec:	20 91 fa 01 	lds	r18, 0x01FA
    16f0:	30 91 fb 01 	lds	r19, 0x01FB
    16f4:	26 17       	cp	r18, r22
    16f6:	37 07       	cpc	r19, r23
    16f8:	48 f0       	brcs	.+18     	; 0x170c <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16fa:	61 15       	cp	r22, r1
    16fc:	71 05       	cpc	r23, r1
    16fe:	39 f4       	brne	.+14     	; 0x170e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1700:	20 91 e8 00 	lds	r18, 0x00E8
    1704:	2e 77       	andi	r18, 0x7E	; 126
    1706:	20 93 e8 00 	sts	0x00E8, r18
    170a:	01 c0       	rjmp	.+2      	; 0x170e <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    170c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    170e:	9c 01       	movw	r18, r24
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	34 c0       	rjmp	.+104    	; 0x177c <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1714:	90 91 f3 01 	lds	r25, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1718:	99 23       	and	r25, r25
    171a:	09 f4       	brne	.+2      	; 0x171e <Endpoint_Write_Control_Stream_LE+0x32>
    171c:	43 c0       	rjmp	.+134    	; 0x17a4 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    171e:	95 30       	cpi	r25, 0x05	; 5
    1720:	09 f4       	brne	.+2      	; 0x1724 <Endpoint_Write_Control_Stream_LE+0x38>
    1722:	42 c0       	rjmp	.+132    	; 0x17a8 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1724:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1728:	93 fd       	sbrc	r25, 3
    172a:	3a c0       	rjmp	.+116    	; 0x17a0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    172c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1730:	92 fd       	sbrc	r25, 2
    1732:	30 c0       	rjmp	.+96     	; 0x1794 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1734:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1738:	90 ff       	sbrs	r25, 0
    173a:	20 c0       	rjmp	.+64     	; 0x177c <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    173c:	80 91 f2 00 	lds	r24, 0x00F2
    1740:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1742:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1744:	82 1b       	sub	r24, r18
    1746:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    174a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    174c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1754:	9f 01       	movw	r18, r30
    1756:	28 0f       	add	r18, r24
    1758:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    175a:	61 15       	cp	r22, r1
    175c:	71 05       	cpc	r23, r1
    175e:	19 f0       	breq	.+6      	; 0x1766 <Endpoint_Write_Control_Stream_LE+0x7a>
    1760:	28 30       	cpi	r18, 0x08	; 8
    1762:	31 05       	cpc	r19, r1
    1764:	90 f3       	brcs	.-28     	; 0x174a <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	28 30       	cpi	r18, 0x08	; 8
    176a:	31 05       	cpc	r19, r1
    176c:	09 f0       	breq	.+2      	; 0x1770 <Endpoint_Write_Control_Stream_LE+0x84>
    176e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1770:	90 91 e8 00 	lds	r25, 0x00E8
    1774:	9e 77       	andi	r25, 0x7E	; 126
    1776:	90 93 e8 00 	sts	0x00E8, r25
    177a:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    177c:	61 15       	cp	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	49 f6       	brne	.-110    	; 0x1714 <Endpoint_Write_Control_Stream_LE+0x28>
    1782:	81 11       	cpse	r24, r1
    1784:	c7 cf       	rjmp	.-114    	; 0x1714 <Endpoint_Write_Control_Stream_LE+0x28>
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1788:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    178c:	88 23       	and	r24, r24
    178e:	51 f0       	breq	.+20     	; 0x17a4 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	51 f0       	breq	.+20     	; 0x17a8 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1794:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1798:	82 ff       	sbrs	r24, 2
    179a:	f6 cf       	rjmp	.-20     	; 0x1788 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17aa:	08 95       	ret

000017ac <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    17ac:	61 15       	cp	r22, r1
    17ae:	71 05       	cpc	r23, r1
    17b0:	29 f4       	brne	.+10     	; 0x17bc <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17b2:	20 91 e8 00 	lds	r18, 0x00E8
    17b6:	2b 77       	andi	r18, 0x7B	; 123
    17b8:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    17bc:	9c 01       	movw	r18, r24
    17be:	21 c0       	rjmp	.+66     	; 0x1802 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17c0:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17c4:	88 23       	and	r24, r24
    17c6:	81 f1       	breq	.+96     	; 0x1828 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17c8:	85 30       	cpi	r24, 0x05	; 5
    17ca:	41 f1       	breq	.+80     	; 0x181c <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17d0:	83 fd       	sbrc	r24, 3
    17d2:	26 c0       	rjmp	.+76     	; 0x1820 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    17d8:	82 ff       	sbrs	r24, 2
    17da:	f2 cf       	rjmp	.-28     	; 0x17c0 <Endpoint_Read_Control_Stream_LE+0x14>
    17dc:	f9 01       	movw	r30, r18
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17e0:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17e4:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    17e6:	9f 01       	movw	r18, r30
				Length--;
    17e8:	61 50       	subi	r22, 0x01	; 1
    17ea:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <Endpoint_Read_Control_Stream_LE+0x4c>
    17ee:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    17f0:	80 91 f2 00 	lds	r24, 0x00F2
    17f4:	81 11       	cpse	r24, r1
    17f6:	f4 cf       	rjmp	.-24     	; 0x17e0 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17f8:	80 91 e8 00 	lds	r24, 0x00E8
    17fc:	8b 77       	andi	r24, 0x7B	; 123
    17fe:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1802:	61 15       	cp	r22, r1
    1804:	71 05       	cpc	r23, r1
    1806:	e1 f6       	brne	.-72     	; 0x17c0 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1808:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    180c:	80 fd       	sbrc	r24, 0
    180e:	0a c0       	rjmp	.+20     	; 0x1824 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1810:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1814:	88 23       	and	r24, r24
    1816:	41 f0       	breq	.+16     	; 0x1828 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1818:	85 30       	cpi	r24, 0x05	; 5
    181a:	b1 f7       	brne	.-20     	; 0x1808 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1828:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    182a:	08 95       	ret

0000182c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    182c:	20 91 fa 01 	lds	r18, 0x01FA
    1830:	30 91 fb 01 	lds	r19, 0x01FB
    1834:	26 17       	cp	r18, r22
    1836:	37 07       	cpc	r19, r23
    1838:	48 f0       	brcs	.+18     	; 0x184c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	39 f4       	brne	.+14     	; 0x184e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1840:	20 91 e8 00 	lds	r18, 0x00E8
    1844:	2e 77       	andi	r18, 0x7E	; 126
    1846:	20 93 e8 00 	sts	0x00E8, r18
    184a:	01 c0       	rjmp	.+2      	; 0x184e <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    184c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    184e:	9c 01       	movw	r18, r24
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	35 c0       	rjmp	.+106    	; 0x18be <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1854:	90 91 f3 01 	lds	r25, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1858:	99 23       	and	r25, r25
    185a:	09 f4       	brne	.+2      	; 0x185e <Endpoint_Write_Control_PStream_LE+0x32>
    185c:	44 c0       	rjmp	.+136    	; 0x18e6 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    185e:	95 30       	cpi	r25, 0x05	; 5
    1860:	09 f4       	brne	.+2      	; 0x1864 <Endpoint_Write_Control_PStream_LE+0x38>
    1862:	43 c0       	rjmp	.+134    	; 0x18ea <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1864:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1868:	93 fd       	sbrc	r25, 3
    186a:	3b c0       	rjmp	.+118    	; 0x18e2 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    186c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1870:	92 fd       	sbrc	r25, 2
    1872:	31 c0       	rjmp	.+98     	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1874:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1878:	90 ff       	sbrs	r25, 0
    187a:	21 c0       	rjmp	.+66     	; 0x18be <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    187c:	80 91 f2 00 	lds	r24, 0x00F2
    1880:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1882:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1884:	82 1b       	sub	r24, r18
    1886:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    188a:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    188c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1890:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1892:	61 50       	subi	r22, 0x01	; 1
    1894:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1896:	9c 01       	movw	r18, r24
    1898:	2e 0f       	add	r18, r30
    189a:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    189c:	61 15       	cp	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <Endpoint_Write_Control_PStream_LE+0x7c>
    18a2:	28 30       	cpi	r18, 0x08	; 8
    18a4:	31 05       	cpc	r19, r1
    18a6:	88 f3       	brcs	.-30     	; 0x188a <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	28 30       	cpi	r18, 0x08	; 8
    18ac:	31 05       	cpc	r19, r1
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <Endpoint_Write_Control_PStream_LE+0x86>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18b2:	90 91 e8 00 	lds	r25, 0x00E8
    18b6:	9e 77       	andi	r25, 0x7E	; 126
    18b8:	90 93 e8 00 	sts	0x00E8, r25
    18bc:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18be:	61 15       	cp	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	41 f6       	brne	.-112    	; 0x1854 <Endpoint_Write_Control_PStream_LE+0x28>
    18c4:	81 11       	cpse	r24, r1
    18c6:	c6 cf       	rjmp	.-116    	; 0x1854 <Endpoint_Write_Control_PStream_LE+0x28>
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18ca:	80 91 f3 01 	lds	r24, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ce:	88 23       	and	r24, r24
    18d0:	51 f0       	breq	.+20     	; 0x18e6 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18d2:	85 30       	cpi	r24, 0x05	; 5
    18d4:	51 f0       	breq	.+20     	; 0x18ea <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18da:	82 ff       	sbrs	r24, 2
    18dc:	f6 cf       	rjmp	.-20     	; 0x18ca <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18ea:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18ec:	08 95       	ret

000018ee <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    18ee:	98 2f       	mov	r25, r24
    18f0:	2c c0       	rjmp	.+88     	; 0x194a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    18f6:	98 17       	cp	r25, r24
    18f8:	39 f0       	breq	.+14     	; 0x1908 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    18fa:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    18fe:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1902:	50 91 f0 00 	lds	r21, 0x00F0
    1906:	03 c0       	rjmp	.+6      	; 0x190e <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1908:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    190a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    190c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    190e:	21 fd       	sbrc	r18, 1
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1912:	9f 5f       	subi	r25, 0xFF	; 255
    1914:	1a c0       	rjmp	.+52     	; 0x194a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1916:	30 91 eb 00 	lds	r19, 0x00EB
    191a:	3e 7f       	andi	r19, 0xFE	; 254
    191c:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1920:	30 91 ed 00 	lds	r19, 0x00ED
    1924:	3d 7f       	andi	r19, 0xFD	; 253
    1926:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    192a:	30 91 eb 00 	lds	r19, 0x00EB
    192e:	31 60       	ori	r19, 0x01	; 1
    1930:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1934:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1938:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    193c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1940:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1944:	27 fd       	sbrc	r18, 7
    1946:	e5 cf       	rjmp	.-54     	; 0x1912 <Endpoint_ConfigureEndpoint_Prv+0x24>
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    194a:	95 30       	cpi	r25, 0x05	; 5
    194c:	90 f2       	brcs	.-92     	; 0x18f2 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    194e:	8f 70       	andi	r24, 0x0F	; 15
    1950:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1958:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    195a:	08 95       	ret

0000195c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	06 2f       	mov	r16, r22
    1966:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1968:	10 e0       	ldi	r17, 0x00	; 0
    196a:	2e c0       	rjmp	.+92     	; 0x19c8 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    196c:	98 81       	ld	r25, Y
    196e:	91 11       	cpse	r25, r1
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1972:	1f 5f       	subi	r17, 0xFF	; 255
    1974:	25 96       	adiw	r28, 0x05	; 5
    1976:	28 c0       	rjmp	.+80     	; 0x19c8 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1980:	89 2f       	mov	r24, r25
    1982:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1984:	85 30       	cpi	r24, 0x05	; 5
    1986:	10 f0       	brcs	.+4      	; 0x198c <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	21 c0       	rjmp	.+66     	; 0x19ce <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	10 f0       	brcs	.+4      	; 0x1994 <Endpoint_ConfigureEndpointTable+0x38>
    1990:	56 e0       	ldi	r21, 0x06	; 6
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <Endpoint_ConfigureEndpointTable+0x3a>
    1994:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1996:	28 e0       	ldi	r18, 0x08	; 8
    1998:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    199e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    19a4:	2e 17       	cp	r18, r30
    19a6:	3f 07       	cpc	r19, r31
    19a8:	d0 f3       	brcs	.-12     	; 0x199e <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    19aa:	42 95       	swap	r20
    19ac:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19ae:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    19b0:	99 1f       	adc	r25, r25
    19b2:	99 27       	eor	r25, r25
    19b4:	99 1f       	adc	r25, r25
    19b6:	62 95       	swap	r22
    19b8:	66 0f       	add	r22, r22
    19ba:	66 0f       	add	r22, r22
    19bc:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19be:	69 2b       	or	r22, r25
    19c0:	96 df       	rcall	.-212    	; 0x18ee <Endpoint_ConfigureEndpoint_Prv>
    19c2:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    19c4:	d6 cf       	rjmp	.-84     	; 0x1972 <Endpoint_ConfigureEndpointTable+0x16>
    19c6:	e0 cf       	rjmp	.-64     	; 0x1988 <Endpoint_ConfigureEndpointTable+0x2c>
    19c8:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    19ca:	d0 cf       	rjmp	.-96     	; 0x196c <Endpoint_ConfigureEndpointTable+0x10>
    19cc:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    19ce:	df 91       	pop	r29
}
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    19d8:	80 91 f4 01 	lds	r24, 0x01F4
    19dc:	87 fd       	sbrc	r24, 7
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19e0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	0e c0       	rjmp	.+28     	; 0x1a04 <Endpoint_ClearStatusStage+0x2c>
    19e8:	12 c0       	rjmp	.+36     	; 0x1a0e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ea:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    19ee:	82 fd       	sbrc	r24, 2
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    19f2:	80 91 f3 01 	lds	r24, 0x01F3
    19f6:	81 11       	cpse	r24, r1
    19f8:	f8 cf       	rjmp	.-16     	; 0x19ea <Endpoint_ClearStatusStage+0x12>
    19fa:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19fc:	80 91 e8 00 	lds	r24, 0x00E8
    1a00:	8b 77       	andi	r24, 0x7B	; 123
    1a02:	08 c0       	rjmp	.+16     	; 0x1a14 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a04:	80 91 f3 01 	lds	r24, 0x01F3
    1a08:	81 11       	cpse	r24, r1
    1a0a:	ea cf       	rjmp	.-44     	; 0x19e0 <Endpoint_ClearStatusStage+0x8>
    1a0c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a0e:	80 91 e8 00 	lds	r24, 0x00E8
    1a12:	8e 77       	andi	r24, 0x7E	; 126
    1a14:	80 93 e8 00 	sts	0x00E8, r24
    1a18:	08 95       	ret

00001a1a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a1a:	80 91 e4 00 	lds	r24, 0x00E4
    1a1e:	90 91 e5 00 	lds	r25, 0x00E5
    1a22:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a24:	20 91 ec 00 	lds	r18, 0x00EC
    1a28:	20 fd       	sbrc	r18, 0
    1a2a:	1f c0       	rjmp	.+62     	; 0x1a6a <Endpoint_WaitUntilReady+0x50>
    1a2c:	23 c0       	rjmp	.+70     	; 0x1a74 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a2e:	20 91 f3 01 	lds	r18, 0x01F3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a32:	22 23       	and	r18, r18
    1a34:	91 f0       	breq	.+36     	; 0x1a5a <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a36:	25 30       	cpi	r18, 0x05	; 5
    1a38:	91 f0       	breq	.+36     	; 0x1a5e <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a3a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a3e:	25 fd       	sbrc	r18, 5
    1a40:	10 c0       	rjmp	.+32     	; 0x1a62 <Endpoint_WaitUntilReady+0x48>
    1a42:	20 91 e4 00 	lds	r18, 0x00E4
    1a46:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	51 f3       	breq	.-44     	; 0x1a24 <Endpoint_WaitUntilReady+0xa>
    1a50:	41 50       	subi	r20, 0x01	; 1
    1a52:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1a54:	39 f7       	brne	.-50     	; 0x1a24 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a6a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a6e:	20 ff       	sbrs	r18, 0
    1a70:	de cf       	rjmp	.-68     	; 0x1a2e <Endpoint_WaitUntilReady+0x14>
    1a72:	f9 cf       	rjmp	.-14     	; 0x1a66 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a74:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1a78:	22 ff       	sbrs	r18, 2
    1a7a:	d9 cf       	rjmp	.-78     	; 0x1a2e <Endpoint_WaitUntilReady+0x14>
    1a7c:	f4 cf       	rjmp	.-24     	; 0x1a66 <Endpoint_WaitUntilReady+0x4c>

00001a7e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1a7e:	41 d0       	rcall	.+130    	; 0x1b02 <USB_INT_DisableAllInterrupts>
    1a80:	43 d0       	rcall	.+134    	; 0x1b08 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1a82:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1a86:	8f 77       	andi	r24, 0x7F	; 127
    1a88:	80 93 d8 00 	sts	0x00D8, r24
    1a8c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1a90:	80 68       	ori	r24, 0x80	; 128
    1a92:	80 93 d8 00 	sts	0x00D8, r24
    1a96:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a9a:	8f 7d       	andi	r24, 0xDF	; 223
    1a9c:	80 93 d8 00 	sts	0x00D8, r24
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1aa4:	86 e0       	ldi	r24, 0x06	; 6
    1aa6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1aa8:	09 b4       	in	r0, 0x29	; 41
    1aaa:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1aac:	fd cf       	rjmp	.-6      	; 0x1aa8 <USB_ResetInterface+0x2a>
    1aae:	10 92 f3 01 	sts	0x01F3, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ab2:	10 92 ef 01 	sts	0x01EF, r1
	USB_Device_ConfigurationNumber  = 0;
    1ab6:	10 92 f1 01 	sts	0x01F1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1aba:	10 92 f0 01 	sts	0x01F0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1abe:	42 e0       	ldi	r20, 0x02	; 2
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	14 df       	rcall	.-472    	; 0x18ee <Endpoint_ConfigureEndpoint_Prv>
    1ac6:	80 91 e1 00 	lds	r24, 0x00E1
    1aca:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1acc:	80 93 e1 00 	sts	0x00E1, r24
    1ad0:	80 91 e2 00 	lds	r24, 0x00E2
    1ad4:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ad6:	80 93 e2 00 	sts	0x00E2, r24
    1ada:	80 91 e2 00 	lds	r24, 0x00E2
    1ade:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1ae0:	80 93 e2 00 	sts	0x00E2, r24
    1ae4:	80 91 e0 00 	lds	r24, 0x00E0
    1ae8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1aea:	80 93 e0 00 	sts	0x00E0, r24
    1aee:	08 95       	ret

00001af0 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1af0:	e3 e6       	ldi	r30, 0x63	; 99
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8e 7f       	andi	r24, 0xFE	; 254
    1af8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 f2 01 	sts	0x01F2, r24

	USB_ResetInterface();
    1b00:	be cf       	rjmp	.-132    	; 0x1a7e <USB_ResetInterface>

00001b02 <USB_INT_DisableAllInterrupts>:
    1b02:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b06:	08 95       	ret

00001b08 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b08:	10 92 e1 00 	sts	0x00E1, r1
    1b0c:	08 95       	ret

00001b0e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b30:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b34:	82 ff       	sbrs	r24, 2
    1b36:	0b c0       	rjmp	.+22     	; 0x1b4e <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b38:	80 91 e2 00 	lds	r24, 0x00E2
    1b3c:	82 ff       	sbrs	r24, 2
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1b40:	80 91 e1 00 	lds	r24, 0x00E1
    1b44:	8b 7f       	andi	r24, 0xFB	; 251
    1b46:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1b4a:	0e 94 5f 03 	call	0x6be	; 0x6be <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1b4e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b52:	80 ff       	sbrs	r24, 0
    1b54:	18 c0       	rjmp	.+48     	; 0x1b86 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1b56:	80 91 e2 00 	lds	r24, 0x00E2
    1b5a:	80 ff       	sbrs	r24, 0
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b5e:	80 91 e2 00 	lds	r24, 0x00E2
    1b62:	8e 7f       	andi	r24, 0xFE	; 254
    1b64:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1b68:	80 91 e2 00 	lds	r24, 0x00E2
    1b6c:	80 61       	ori	r24, 0x10	; 16
    1b6e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1b72:	80 91 d8 00 	lds	r24, 0x00D8
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b7c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1b7e:	10 92 f3 01 	sts	0x01F3, r1
		EVENT_USB_Device_Disconnect();
    1b82:	0e 94 07 03 	call	0x60e	; 0x60e <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1b86:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1b8a:	84 ff       	sbrs	r24, 4
    1b8c:	30 c0       	rjmp	.+96     	; 0x1bee <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1b8e:	80 91 e2 00 	lds	r24, 0x00E2
    1b92:	84 ff       	sbrs	r24, 4
    1b94:	2c c0       	rjmp	.+88     	; 0x1bee <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b9a:	86 e0       	ldi	r24, 0x06	; 6
    1b9c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b9e:	09 b4       	in	r0, 0x29	; 41
    1ba0:	00 fe       	sbrs	r0, 0
    1ba2:	fd cf       	rjmp	.-6      	; 0x1b9e <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ba4:	80 91 d8 00 	lds	r24, 0x00D8
    1ba8:	8f 7d       	andi	r24, 0xDF	; 223
    1baa:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1bae:	80 91 e1 00 	lds	r24, 0x00E1
    1bb2:	8f 7e       	andi	r24, 0xEF	; 239
    1bb4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1bb8:	80 91 e2 00 	lds	r24, 0x00E2
    1bbc:	8f 7e       	andi	r24, 0xEF	; 239
    1bbe:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bc2:	80 91 e2 00 	lds	r24, 0x00E2
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1bcc:	80 91 ef 01 	lds	r24, 0x01EF
    1bd0:	88 23       	and	r24, r24
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1bd8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1bdc:	87 ff       	sbrs	r24, 7
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <__vector_11+0xd6>
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <__vector_11+0xd8>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	80 93 f3 01 	sts	0x01F3, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1bea:	0e 94 06 03 	call	0x60c	; 0x60c <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1bee:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1bf2:	83 ff       	sbrs	r24, 3
    1bf4:	27 c0       	rjmp	.+78     	; 0x1c44 <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1bf6:	80 91 e2 00 	lds	r24, 0x00E2
    1bfa:	83 ff       	sbrs	r24, 3
    1bfc:	23 c0       	rjmp	.+70     	; 0x1c44 <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1bfe:	80 91 e1 00 	lds	r24, 0x00E1
    1c02:	87 7f       	andi	r24, 0xF7	; 247
    1c04:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	80 93 f3 01 	sts	0x01F3, r24
		USB_Device_ConfigurationNumber = 0;
    1c0e:	10 92 ef 01 	sts	0x01EF, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c12:	80 91 e1 00 	lds	r24, 0x00E1
    1c16:	8e 7f       	andi	r24, 0xFE	; 254
    1c18:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c1c:	80 91 e2 00 	lds	r24, 0x00E2
    1c20:	8e 7f       	andi	r24, 0xFE	; 254
    1c22:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c26:	80 91 e2 00 	lds	r24, 0x00E2
    1c2a:	80 61       	ori	r24, 0x10	; 16
    1c2c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c30:	42 e0       	ldi	r20, 0x02	; 2
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	5b de       	rcall	.-842    	; 0x18ee <Endpoint_ConfigureEndpoint_Prv>
    1c38:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c3c:	88 60       	ori	r24, 0x08	; 8
    1c3e:	80 93 f0 00 	sts	0x00F0, r24
    1c42:	b8 d1       	rcall	.+880    	; 0x1fb4 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c48:	bf 91       	pop	r27
    1c4a:	af 91       	pop	r26
    1c4c:	9f 91       	pop	r25
    1c4e:	8f 91       	pop	r24
    1c50:	7f 91       	pop	r23
    1c52:	6f 91       	pop	r22
    1c54:	5f 91       	pop	r21
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	0f 90       	pop	r0
    1c62:	1f 90       	pop	r1
    1c64:	18 95       	reti

00001c66 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	2f 93       	push	r18
    1c72:	3f 93       	push	r19
    1c74:	4f 93       	push	r20
    1c76:	5f 93       	push	r21
    1c78:	6f 93       	push	r22
    1c7a:	7f 93       	push	r23
    1c7c:	8f 93       	push	r24
    1c7e:	9f 93       	push	r25
    1c80:	af 93       	push	r26
    1c82:	bf 93       	push	r27
    1c84:	cf 93       	push	r28
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c8a:	80 91 e9 00 	lds	r24, 0x00E9
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c90:	90 91 ec 00 	lds	r25, 0x00EC
    1c94:	90 ff       	sbrs	r25, 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <__vector_12+0x36>
    1c98:	90 e8       	ldi	r25, 0x80	; 128
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <__vector_12+0x38>
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c9e:	c9 2f       	mov	r28, r25
    1ca0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ca2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ca6:	80 91 f0 00 	lds	r24, 0x00F0
    1caa:	87 7f       	andi	r24, 0xF7	; 247
    1cac:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1cb0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1cb2:	1c d0       	rcall	.+56     	; 0x1cec <USB_Device_ProcessControlRequest>
    1cb4:	10 92 e9 00 	sts	0x00E9, r1
    1cb8:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cbc:	88 60       	ori	r24, 0x08	; 8
    1cbe:	80 93 f0 00 	sts	0x00F0, r24
    1cc2:	cf 70       	andi	r28, 0x0F	; 15
    1cc4:	c0 93 e9 00 	sts	0x00E9, r28
    1cc8:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1cca:	ef 91       	pop	r30
    1ccc:	cf 91       	pop	r28
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	0f 90       	pop	r0
    1ce8:	1f 90       	pop	r1
    1cea:	18 95       	reti

00001cec <USB_Device_ProcessControlRequest>:
    1cec:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	ac 97       	sbiw	r28, 0x2c	; 44
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1d02:	e4 ef       	ldi	r30, 0xF4	; 244
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d06:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d0a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d0c:	21 e0       	ldi	r18, 0x01	; 1
    1d0e:	ec 3f       	cpi	r30, 0xFC	; 252
    1d10:	f2 07       	cpc	r31, r18
    1d12:	c9 f7       	brne	.-14     	; 0x1d06 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d14:	0e 94 57 03 	call	0x6ae	; 0x6ae <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d18:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d1c:	83 ff       	sbrs	r24, 3
    1d1e:	32 c1       	rjmp	.+612    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d20:	80 91 f4 01 	lds	r24, 0x01F4

		switch (USB_ControlRequest.bRequest)
    1d24:	90 91 f5 01 	lds	r25, 0x01F5
    1d28:	95 30       	cpi	r25, 0x05	; 5
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <USB_Device_ProcessControlRequest+0x42>
    1d2c:	87 c0       	rjmp	.+270    	; 0x1e3c <USB_Device_ProcessControlRequest+0x150>
    1d2e:	38 f4       	brcc	.+14     	; 0x1d3e <USB_Device_ProcessControlRequest+0x52>
    1d30:	91 30       	cpi	r25, 0x01	; 1
    1d32:	b1 f1       	breq	.+108    	; 0x1da0 <USB_Device_ProcessControlRequest+0xb4>
    1d34:	70 f0       	brcs	.+28     	; 0x1d52 <USB_Device_ProcessControlRequest+0x66>
    1d36:	93 30       	cpi	r25, 0x03	; 3
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <USB_Device_ProcessControlRequest+0x50>
    1d3a:	24 c1       	rjmp	.+584    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1d3c:	31 c0       	rjmp	.+98     	; 0x1da0 <USB_Device_ProcessControlRequest+0xb4>
    1d3e:	98 30       	cpi	r25, 0x08	; 8
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <USB_Device_ProcessControlRequest+0x58>
    1d42:	f4 c0       	rjmp	.+488    	; 0x1f2c <USB_Device_ProcessControlRequest+0x240>
    1d44:	99 30       	cpi	r25, 0x09	; 9
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <USB_Device_ProcessControlRequest+0x5e>
    1d48:	00 c1       	rjmp	.+512    	; 0x1f4a <USB_Device_ProcessControlRequest+0x25e>
    1d4a:	96 30       	cpi	r25, 0x06	; 6
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <USB_Device_ProcessControlRequest+0x64>
    1d4e:	1a c1       	rjmp	.+564    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1d50:	9b c0       	rjmp	.+310    	; 0x1e88 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d52:	80 38       	cpi	r24, 0x80	; 128
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <USB_Device_ProcessControlRequest+0x72>
    1d56:	82 38       	cpi	r24, 0x82	; 130
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <USB_Device_ProcessControlRequest+0x70>
    1d5a:	14 c1       	rjmp	.+552    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1d5c:	08 c0       	rjmp	.+16     	; 0x1d6e <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d5e:	80 91 f0 01 	lds	r24, 0x01F0
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d62:	90 91 f1 01 	lds	r25, 0x01F1
    1d66:	99 23       	and	r25, r25
    1d68:	89 f0       	breq	.+34     	; 0x1d8c <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d6a:	82 60       	ori	r24, 0x02	; 2
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d6e:	80 91 f8 01 	lds	r24, 0x01F8
    1d72:	90 91 f9 01 	lds	r25, 0x01F9
    1d76:	8f 70       	andi	r24, 0x0F	; 15
    1d78:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d7a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d7e:	80 91 eb 00 	lds	r24, 0x00EB
    1d82:	85 fb       	bst	r24, 5
    1d84:	88 27       	eor	r24, r24
    1d86:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d88:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d8c:	90 91 e8 00 	lds	r25, 0x00E8
    1d90:	97 7f       	andi	r25, 0xF7	; 247
    1d92:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d96:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1d9a:	10 92 f1 00 	sts	0x00F1, r1
    1d9e:	d1 c0       	rjmp	.+418    	; 0x1f42 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1da0:	88 23       	and	r24, r24
    1da2:	19 f0       	breq	.+6      	; 0x1daa <USB_Device_ProcessControlRequest+0xbe>
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	09 f0       	breq	.+2      	; 0x1daa <USB_Device_ProcessControlRequest+0xbe>
    1da8:	ed c0       	rjmp	.+474    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1daa:	8f 71       	andi	r24, 0x1F	; 31
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <USB_Device_ProcessControlRequest+0xca>
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <USB_Device_ProcessControlRequest+0xc8>
    1db2:	e8 c0       	rjmp	.+464    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1db4:	0b c0       	rjmp	.+22     	; 0x1dcc <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1db6:	80 91 f6 01 	lds	r24, 0x01F6
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <USB_Device_ProcessControlRequest+0xd4>
    1dbe:	e2 c0       	rjmp	.+452    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1dc0:	93 30       	cpi	r25, 0x03	; 3
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <USB_Device_ProcessControlRequest+0xda>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	80 93 f1 01 	sts	0x01F1, r24
    1dca:	2f c0       	rjmp	.+94     	; 0x1e2a <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dcc:	80 91 f6 01 	lds	r24, 0x01F6
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	2b c0       	rjmp	.+86     	; 0x1e2a <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1dd4:	80 91 f8 01 	lds	r24, 0x01F8
    1dd8:	90 91 f9 01 	lds	r25, 0x01F9
    1ddc:	8f 70       	andi	r24, 0x0F	; 15
    1dde:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <USB_Device_ProcessControlRequest+0xfa>
    1de4:	cf c0       	rjmp	.+414    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1de6:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1dea:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1dee:	20 ff       	sbrs	r18, 0
    1df0:	1c c0       	rjmp	.+56     	; 0x1e2a <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1df2:	20 91 f5 01 	lds	r18, 0x01F5
    1df6:	23 30       	cpi	r18, 0x03	; 3
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dfa:	80 91 eb 00 	lds	r24, 0x00EB
    1dfe:	80 62       	ori	r24, 0x20	; 32
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e02:	90 91 eb 00 	lds	r25, 0x00EB
    1e06:	90 61       	ori	r25, 0x10	; 16
    1e08:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <USB_Device_ProcessControlRequest+0x128>
    1e12:	22 0f       	add	r18, r18
    1e14:	8a 95       	dec	r24
    1e16:	ea f7       	brpl	.-6      	; 0x1e12 <USB_Device_ProcessControlRequest+0x126>
    1e18:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1e1c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e20:	80 91 eb 00 	lds	r24, 0x00EB
    1e24:	88 60       	ori	r24, 0x08	; 8
    1e26:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e2a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e2e:	80 91 e8 00 	lds	r24, 0x00E8
    1e32:	87 7f       	andi	r24, 0xF7	; 247
    1e34:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e38:	cf dd       	rcall	.-1122   	; 0x19d8 <Endpoint_ClearStatusStage>
    1e3a:	a4 c0       	rjmp	.+328    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1e3c:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e3e:	a2 c0       	rjmp	.+324    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1e40:	80 91 f6 01 	lds	r24, 0x01F6
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e44:	90 91 f7 01 	lds	r25, 0x01F7
    1e48:	8f 77       	andi	r24, 0x7F	; 127
    1e4a:	99 27       	eor	r25, r25
    1e4c:	18 2f       	mov	r17, r24
    1e4e:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e52:	90 78       	andi	r25, 0x80	; 128
    1e54:	98 2b       	or	r25, r24
    1e56:	90 93 e3 00 	sts	0x00E3, r25
    1e5a:	80 91 e8 00 	lds	r24, 0x00E8
    1e5e:	87 7f       	andi	r24, 0xF7	; 247
    1e60:	80 93 e8 00 	sts	0x00E8, r24
    1e64:	b9 dd       	rcall	.-1166   	; 0x19d8 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e66:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e6a:	80 ff       	sbrs	r24, 0
    1e6c:	fc cf       	rjmp	.-8      	; 0x1e66 <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1e6e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e72:	80 68       	ori	r24, 0x80	; 128
    1e74:	80 93 e3 00 	sts	0x00E3, r24
    1e78:	11 23       	and	r17, r17
    1e7a:	11 f0       	breq	.+4      	; 0x1e80 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <USB_Device_ProcessControlRequest+0x196>
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	80 93 f3 01 	sts	0x01F3, r24
    1e86:	7e c0       	rjmp	.+252    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1e88:	80 58       	subi	r24, 0x80	; 128
    1e8a:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <USB_Device_ProcessControlRequest+0x1a4>
    1e8e:	7a c0       	rjmp	.+244    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1e90:	80 91 f6 01 	lds	r24, 0x01F6
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e94:	90 91 f7 01 	lds	r25, 0x01F7
    1e98:	8c 3d       	cpi	r24, 0xDC	; 220
    1e9a:	23 e0       	ldi	r18, 0x03	; 3
    1e9c:	92 07       	cpc	r25, r18
    1e9e:	71 f5       	brne	.+92     	; 0x1efc <USB_Device_ProcessControlRequest+0x210>
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1ea4:	8a e2       	ldi	r24, 0x2A	; 42
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ea8:	4f b7       	in	r20, 0x3f	; 63
    1eaa:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1eac:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1eae:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1eb4:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1eb6:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	50 93 57 00 	sts	0x0057, r21
    1ebe:	e4 91       	lpm	r30, Z+
    1ec0:	20 ff       	sbrs	r18, 0
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1ec4:	e2 95       	swap	r30
    1ec6:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1ec8:	3f 5f       	subi	r19, 0xFF	; 255
    1eca:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ecc:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	ea 30       	cpi	r30, 0x0A	; 10
    1ed2:	10 f0       	brcs	.+4      	; 0x1ed8 <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ed4:	c7 96       	adiw	r24, 0x37	; 55
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <USB_Device_ProcessControlRequest+0x1ee>
    1ed8:	c0 96       	adiw	r24, 0x30	; 48
    1eda:	8d 93       	st	X+, r24
    1edc:	9d 93       	st	X+, r25
    1ede:	2f 5f       	subi	r18, 0xFF	; 255
    1ee0:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ee2:	49 f7       	brne	.-46     	; 0x1eb6 <USB_Device_ProcessControlRequest+0x1ca>
    1ee4:	4f bf       	out	0x3f, r20	; 63
    1ee6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eea:	87 7f       	andi	r24, 0xF7	; 247
    1eec:	80 93 e8 00 	sts	0x00E8, r24
    1ef0:	6a e2       	ldi	r22, 0x2A	; 42
    1ef2:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	f9 db       	rcall	.-2062   	; 0x16ec <Endpoint_Write_Control_Stream_LE>
    1efa:	12 c0       	rjmp	.+36     	; 0x1f20 <USB_Device_ProcessControlRequest+0x234>
    1efc:	ae 01       	movw	r20, r28
    1efe:	45 5d       	subi	r20, 0xD5	; 213
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f02:	60 91 f8 01 	lds	r22, 0x01F8
    1f06:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <CALLBACK_USB_GetDescriptor>
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	d9 f1       	breq	.+118    	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1f0e:	20 91 e8 00 	lds	r18, 0x00E8
    1f12:	27 7f       	andi	r18, 0xF7	; 247
    1f14:	20 93 e8 00 	sts	0x00E8, r18
    1f18:	bc 01       	movw	r22, r24
    1f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f1e:	86 dc       	rcall	.-1780   	; 0x182c <Endpoint_Write_Control_PStream_LE>
    1f20:	80 91 e8 00 	lds	r24, 0x00E8
    1f24:	8b 77       	andi	r24, 0x7B	; 123
    1f26:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f2a:	2c c0       	rjmp	.+88     	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1f2c:	80 38       	cpi	r24, 0x80	; 128
    1f2e:	51 f5       	brne	.+84     	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1f30:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f34:	87 7f       	andi	r24, 0xF7	; 247
    1f36:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f3a:	80 91 ef 01 	lds	r24, 0x01EF
    1f3e:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f42:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f46:	8e 77       	andi	r24, 0x7E	; 126
    1f48:	75 cf       	rjmp	.-278    	; 0x1e34 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	1b c0       	rjmp	.+54     	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
    1f4e:	90 91 f6 01 	lds	r25, 0x01F6
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f52:	92 30       	cpi	r25, 0x02	; 2
    1f54:	b8 f4       	brcc	.+46     	; 0x1f84 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f56:	80 91 e8 00 	lds	r24, 0x00E8
    1f5a:	87 7f       	andi	r24, 0xF7	; 247
    1f5c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f60:	90 93 ef 01 	sts	0x01EF, r25
    1f64:	39 dd       	rcall	.-1422   	; 0x19d8 <Endpoint_ClearStatusStage>
    1f66:	80 91 ef 01 	lds	r24, 0x01EF
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f6a:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <USB_Device_ProcessControlRequest+0x28a>
    1f6e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1f72:	87 ff       	sbrs	r24, 7
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <USB_Device_ProcessControlRequest+0x28e>
    1f76:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <USB_Device_ProcessControlRequest+0x290>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f7c:	80 93 f3 01 	sts	0x01F3, r24
    1f80:	0e 94 08 03 	call	0x610	; 0x610 <EVENT_USB_Device_ConfigurationChanged>
    1f84:	80 91 e8 00 	lds	r24, 0x00E8
    1f88:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <USB_Device_ProcessControlRequest+0x2b4>
    1f8c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f90:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f92:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f96:	80 91 eb 00 	lds	r24, 0x00EB
    1f9a:	80 62       	ori	r24, 0x20	; 32
    1f9c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fa0:	ac 96       	adiw	r28, 0x2c	; 44
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	08 95       	ret

00001fb4 <USB_Event_Stub>:
    1fb4:	08 95       	ret

00001fb6 <USB_USBTask>:
    1fb6:	cf 93       	push	r28
    1fb8:	80 91 f3 01 	lds	r24, 0x01F3
    1fbc:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1fbe:	a9 f0       	breq	.+42     	; 0x1fea <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fc0:	80 91 e9 00 	lds	r24, 0x00E9
    1fc4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fc6:	90 91 ec 00 	lds	r25, 0x00EC
    1fca:	90 ff       	sbrs	r25, 0
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <USB_USBTask+0x1c>
    1fce:	90 e8       	ldi	r25, 0x80	; 128
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <USB_USBTask+0x1e>
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fd4:	c9 2f       	mov	r28, r25
    1fd6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fdc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1fe0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1fe2:	84 de       	rcall	.-760    	; 0x1cec <USB_Device_ProcessControlRequest>
    1fe4:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe6:	c0 93 e9 00 	sts	0x00E9, r28
    1fea:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1fec:	08 95       	ret

00001fee <CDC_Device_ConfigureEndpoints>:
    1fee:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1ff0:	df 93       	push	r29
    1ff2:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1ff4:	40 96       	adiw	r24, 0x10	; 16
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	8b e0       	ldi	r24, 0x0B	; 11
    1ffa:	df 01       	movw	r26, r30
    1ffc:	1d 92       	st	X+, r1
    1ffe:	8a 95       	dec	r24
    2000:	e9 f7       	brne	.-6      	; 0x1ffc <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2006:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	a4 dc       	rcall	.-1720   	; 0x195c <Endpoint_ConfigureEndpointTable>
    2014:	88 23       	and	r24, r24
    2016:	61 f0       	breq	.+24     	; 0x2030 <CDC_Device_ConfigureEndpoints+0x42>
    2018:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    201a:	ce 01       	movw	r24, r28
    201c:	06 96       	adiw	r24, 0x06	; 6
    201e:	9e dc       	rcall	.-1732   	; 0x195c <Endpoint_ConfigureEndpointTable>
    2020:	88 23       	and	r24, r24
    2022:	31 f0       	breq	.+12     	; 0x2030 <CDC_Device_ConfigureEndpoints+0x42>
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2028:	0b 96       	adiw	r24, 0x0b	; 11
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
	  return false;

	return true;
}
    202e:	96 cc       	rjmp	.-1748   	; 0x195c <Endpoint_ConfigureEndpointTable>
    2030:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
	  return false;

	return true;
}
    2036:	08 95       	ret

00002038 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    2038:	cf 93       	push	r28
    203a:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    203c:	20 91 f3 01 	lds	r18, 0x01F3
    2040:	24 30       	cpi	r18, 0x04	; 4
    2042:	f1 f4       	brne	.+60     	; 0x2080 <CDC_Device_SendByte+0x48>
    2044:	fc 01       	movw	r30, r24
    2046:	44 89       	ldd	r20, Z+20	; 0x14
    2048:	55 89       	ldd	r21, Z+21	; 0x15
    204a:	66 89       	ldd	r22, Z+22	; 0x16
    204c:	77 89       	ldd	r23, Z+23	; 0x17
    204e:	45 2b       	or	r20, r21
    2050:	46 2b       	or	r20, r22
    2052:	47 2b       	or	r20, r23
    2054:	a9 f0       	breq	.+42     	; 0x2080 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2056:	81 81       	ldd	r24, Z+1	; 0x01
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    205e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    2062:	85 ff       	sbrs	r24, 5
    2064:	04 c0       	rjmp	.+8      	; 0x206e <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2066:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	0a c0       	rjmp	.+20     	; 0x2082 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    206e:	80 91 e8 00 	lds	r24, 0x00E8
    2072:	8e 77       	andi	r24, 0x7E	; 126
    2074:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2078:	d0 dc       	rcall	.-1632   	; 0x1a1a <Endpoint_WaitUntilReady>
    207a:	88 23       	and	r24, r24
    207c:	a1 f3       	breq	.-24     	; 0x2066 <CDC_Device_SendByte+0x2e>
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <CDC_Device_SendByte+0x4a>
    2080:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2082:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2084:	08 95       	ret

00002086 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2086:	20 91 f3 01 	lds	r18, 0x01F3
    208a:	24 30       	cpi	r18, 0x04	; 4
    208c:	29 f5       	brne	.+74     	; 0x20d8 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    208e:	fc 01       	movw	r30, r24
    2090:	44 89       	ldd	r20, Z+20	; 0x14
    2092:	55 89       	ldd	r21, Z+21	; 0x15
    2094:	66 89       	ldd	r22, Z+22	; 0x16
    2096:	77 89       	ldd	r23, Z+23	; 0x17
    2098:	45 2b       	or	r20, r21
    209a:	46 2b       	or	r20, r22
    209c:	47 2b       	or	r20, r23
    209e:	e1 f0       	breq	.+56     	; 0x20d8 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20a0:	81 81       	ldd	r24, Z+1	; 0x01
    20a2:	8f 70       	andi	r24, 0x0F	; 15
    20a4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20a8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    20ac:	81 11       	cpse	r24, r1
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20b4:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20b8:	80 91 e8 00 	lds	r24, 0x00E8
    20bc:	8e 77       	andi	r24, 0x7E	; 126
    20be:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    20c2:	95 fd       	sbrc	r25, 5
    20c4:	f5 cf       	rjmp	.-22     	; 0x20b0 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    20c6:	a9 dc       	rcall	.-1710   	; 0x1a1a <Endpoint_WaitUntilReady>
    20c8:	81 11       	cpse	r24, r1
    20ca:	07 c0       	rjmp	.+14     	; 0x20da <CDC_Device_Flush+0x54>
    20cc:	90 91 e8 00 	lds	r25, 0x00E8
    20d0:	9e 77       	andi	r25, 0x7E	; 126
    20d2:	90 93 e8 00 	sts	0x00E8, r25
    20d6:	08 95       	ret
    20d8:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    20da:	08 95       	ret

000020dc <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    20dc:	20 91 f3 01 	lds	r18, 0x01F3
    20e0:	24 30       	cpi	r18, 0x04	; 4
    20e2:	89 f4       	brne	.+34     	; 0x2106 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20e4:	fc 01       	movw	r30, r24
    20e6:	44 89       	ldd	r20, Z+20	; 0x14
    20e8:	55 89       	ldd	r21, Z+21	; 0x15
    20ea:	66 89       	ldd	r22, Z+22	; 0x16
    20ec:	77 89       	ldd	r23, Z+23	; 0x17
    20ee:	45 2b       	or	r20, r21
    20f0:	46 2b       	or	r20, r22
    20f2:	47 2b       	or	r20, r23
    20f4:	41 f0       	breq	.+16     	; 0x2106 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20f6:	21 81       	ldd	r18, Z+1	; 0x01
    20f8:	2f 70       	andi	r18, 0x0F	; 15
    20fa:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20fe:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    2102:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    2104:	c0 cf       	rjmp	.-128    	; 0x2086 <CDC_Device_Flush>
    2106:	08 95       	ret

00002108 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2108:	20 91 f3 01 	lds	r18, 0x01F3
    210c:	24 30       	cpi	r18, 0x04	; 4
    210e:	19 f0       	breq	.+6      	; 0x2116 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    2110:	2f ef       	ldi	r18, 0xFF	; 255
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	24 c0       	rjmp	.+72     	; 0x215e <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2116:	fc 01       	movw	r30, r24
    2118:	44 89       	ldd	r20, Z+20	; 0x14
    211a:	55 89       	ldd	r21, Z+21	; 0x15
    211c:	66 89       	ldd	r22, Z+22	; 0x16
    211e:	77 89       	ldd	r23, Z+23	; 0x17
    2120:	45 2b       	or	r20, r21
    2122:	46 2b       	or	r20, r22
    2124:	47 2b       	or	r20, r23
    2126:	a1 f3       	breq	.-24     	; 0x2110 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2128:	86 81       	ldd	r24, Z+6	; 0x06
    212a:	8f 70       	andi	r24, 0x0F	; 15
    212c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2130:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2134:	82 ff       	sbrs	r24, 2
    2136:	ec cf       	rjmp	.-40     	; 0x2110 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2138:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    213c:	88 23       	and	r24, r24
    213e:	21 f0       	breq	.+8      	; 0x2148 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2140:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	02 c0       	rjmp	.+4      	; 0x214c <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    2148:	2f ef       	ldi	r18, 0xFF	; 255
    214a:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    214c:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2150:	81 11       	cpse	r24, r1
    2152:	05 c0       	rjmp	.+10     	; 0x215e <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2154:	80 91 e8 00 	lds	r24, 0x00E8
    2158:	8b 77       	andi	r24, 0x7B	; 123
    215a:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    215e:	c9 01       	movw	r24, r18
    2160:	08 95       	ret

00002162 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2162:	08 95       	ret

00002164 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    216a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    216e:	83 ff       	sbrs	r24, 3
    2170:	a7 c0       	rjmp	.+334    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2172:	88 81       	ld	r24, Y
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	20 91 f8 01 	lds	r18, 0x01F8
    217a:	30 91 f9 01 	lds	r19, 0x01F9
    217e:	28 17       	cp	r18, r24
    2180:	39 07       	cpc	r19, r25
    2182:	09 f0       	breq	.+2      	; 0x2186 <CDC_Device_ProcessControlRequest+0x22>
    2184:	9d c0       	rjmp	.+314    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    2186:	80 91 f5 01 	lds	r24, 0x01F5
    218a:	81 32       	cpi	r24, 0x21	; 33
    218c:	61 f0       	breq	.+24     	; 0x21a6 <CDC_Device_ProcessControlRequest+0x42>
    218e:	20 f4       	brcc	.+8      	; 0x2198 <CDC_Device_ProcessControlRequest+0x34>
    2190:	80 32       	cpi	r24, 0x20	; 32
    2192:	09 f0       	breq	.+2      	; 0x2196 <CDC_Device_ProcessControlRequest+0x32>
    2194:	95 c0       	rjmp	.+298    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    2196:	3d c0       	rjmp	.+122    	; 0x2212 <CDC_Device_ProcessControlRequest+0xae>
    2198:	82 32       	cpi	r24, 0x22	; 34
    219a:	09 f4       	brne	.+2      	; 0x219e <CDC_Device_ProcessControlRequest+0x3a>
    219c:	6d c0       	rjmp	.+218    	; 0x2278 <CDC_Device_ProcessControlRequest+0x114>
    219e:	83 32       	cpi	r24, 0x23	; 35
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <CDC_Device_ProcessControlRequest+0x40>
    21a2:	8e c0       	rjmp	.+284    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    21a4:	7d c0       	rjmp	.+250    	; 0x22a0 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21a6:	80 91 f4 01 	lds	r24, 0x01F4
    21aa:	81 3a       	cpi	r24, 0xA1	; 161
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <CDC_Device_ProcessControlRequest+0x4c>
    21ae:	88 c0       	rjmp	.+272    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21b0:	80 91 e8 00 	lds	r24, 0x00E8
    21b4:	87 7f       	andi	r24, 0xF7	; 247
    21b6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21ba:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    21be:	80 ff       	sbrs	r24, 0
    21c0:	fc cf       	rjmp	.-8      	; 0x21ba <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    21c2:	4c 89       	ldd	r20, Y+20	; 0x14
    21c4:	5d 89       	ldd	r21, Y+21	; 0x15
    21c6:	6e 89       	ldd	r22, Y+22	; 0x16
    21c8:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    21ca:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    21ce:	bb 27       	eor	r27, r27
    21d0:	a7 2f       	mov	r26, r23
    21d2:	96 2f       	mov	r25, r22
    21d4:	85 2f       	mov	r24, r21
    21d6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    21da:	cb 01       	movw	r24, r22
    21dc:	aa 27       	eor	r26, r26
    21de:	bb 27       	eor	r27, r27
    21e0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    21e4:	47 2f       	mov	r20, r23
    21e6:	55 27       	eor	r21, r21
    21e8:	66 27       	eor	r22, r22
    21ea:	77 27       	eor	r23, r23
    21ec:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    21f0:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21f2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    21f6:	89 8d       	ldd	r24, Y+25	; 0x19
    21f8:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    21fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21fe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2202:	80 91 e8 00 	lds	r24, 0x00E8
    2206:	8e 77       	andi	r24, 0x7E	; 126
    2208:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2210:	e3 cb       	rjmp	.-2106   	; 0x19d8 <Endpoint_ClearStatusStage>
    2212:	80 91 f4 01 	lds	r24, 0x01F4
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2216:	81 32       	cpi	r24, 0x21	; 33
    2218:	09 f0       	breq	.+2      	; 0x221c <CDC_Device_ProcessControlRequest+0xb8>
    221a:	52 c0       	rjmp	.+164    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    221c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2220:	87 7f       	andi	r24, 0xF7	; 247
    2222:	80 93 e8 00 	sts	0x00E8, r24
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <CDC_Device_ProcessControlRequest+0xce>
    2228:	80 91 f3 01 	lds	r24, 0x01F3
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    222c:	88 23       	and	r24, r24
    222e:	09 f4       	brne	.+2      	; 0x2232 <CDC_Device_ProcessControlRequest+0xce>
    2230:	47 c0       	rjmp	.+142    	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    2232:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2236:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2238:	f7 cf       	rjmp	.-18     	; 0x2228 <CDC_Device_ProcessControlRequest+0xc4>
    223a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    223e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    2242:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    2246:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    224a:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    224c:	2d 8b       	std	Y+21, r18	; 0x15
    224e:	9e 8b       	std	Y+22, r25	; 0x16
    2250:	8f 8b       	std	Y+23, r24	; 0x17
    2252:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2256:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2258:	80 91 f1 00 	lds	r24, 0x00F1
    225c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    225e:	80 91 f1 00 	lds	r24, 0x00F1
    2262:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2264:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2268:	8b 77       	andi	r24, 0x7B	; 123
    226a:	80 93 e8 00 	sts	0x00E8, r24
    226e:	b4 db       	rcall	.-2200   	; 0x19d8 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2270:	ce 01       	movw	r24, r28
    2272:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2274:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2276:	65 c9       	rjmp	.-3382   	; 0x1542 <EVENT_CDC_Device_LineEncodingChanged>
    2278:	80 91 f4 01 	lds	r24, 0x01F4
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    227c:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    227e:	01 f5       	brne	.+64     	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    2280:	80 91 e8 00 	lds	r24, 0x00E8
    2284:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2286:	80 93 e8 00 	sts	0x00E8, r24
    228a:	a6 db       	rcall	.-2228   	; 0x19d8 <Endpoint_ClearStatusStage>
    228c:	80 91 f6 01 	lds	r24, 0x01F6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2290:	90 91 f7 01 	lds	r25, 0x01F7

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2294:	99 8b       	std	Y+17, r25	; 0x11
    2296:	88 8b       	std	Y+16, r24	; 0x10
    2298:	ce 01       	movw	r24, r28
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	24 c9       	rjmp	.-3512   	; 0x14e8 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22a0:	80 91 f4 01 	lds	r24, 0x01F4
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22a4:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22a6:	61 f4       	brne	.+24     	; 0x22c0 <CDC_Device_ProcessControlRequest+0x15c>
    22a8:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22ac:	87 7f       	andi	r24, 0xF7	; 247
    22ae:	80 93 e8 00 	sts	0x00E8, r24
    22b2:	92 db       	rcall	.-2268   	; 0x19d8 <Endpoint_ClearStatusStage>
    22b4:	60 91 f6 01 	lds	r22, 0x01F6
    22b8:	ce 01       	movw	r24, r28
    22ba:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22bc:	cf 91       	pop	r28
    22be:	51 cf       	rjmp	.-350    	; 0x2162 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    22c6:	6f 92       	push	r6
    22c8:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    22ca:	8f 92       	push	r8
    22cc:	9f 92       	push	r9
			}

			break;
	}
}
    22ce:	af 92       	push	r10
    22d0:	bf 92       	push	r11
    22d2:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    22d4:	df 92       	push	r13
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <HID_Device_ProcessControlRequest+0x1e>
    22e4:	1f 92       	push	r1
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    22ec:	ad b6       	in	r10, 0x3d	; 61
    22ee:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22f0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    22f4:	83 ff       	sbrs	r24, 3
    22f6:	07 c1       	rjmp	.+526    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    22f8:	f7 01       	movw	r30, r14
    22fa:	80 81       	ld	r24, Z
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	20 91 f8 01 	lds	r18, 0x01F8
    2302:	30 91 f9 01 	lds	r19, 0x01F9
    2306:	28 17       	cp	r18, r24
    2308:	39 07       	cpc	r19, r25
    230a:	09 f0       	breq	.+2      	; 0x230e <HID_Device_ProcessControlRequest+0x48>
    230c:	fc c0       	rjmp	.+504    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    230e:	80 91 f5 01 	lds	r24, 0x01F5
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	09 f4       	brne	.+2      	; 0x2318 <HID_Device_ProcessControlRequest+0x52>
    2316:	9e c0       	rjmp	.+316    	; 0x2454 <HID_Device_ProcessControlRequest+0x18e>
    2318:	30 f4       	brcc	.+12     	; 0x2326 <HID_Device_ProcessControlRequest+0x60>
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	71 f0       	breq	.+28     	; 0x233a <HID_Device_ProcessControlRequest+0x74>
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	09 f0       	breq	.+2      	; 0x2324 <HID_Device_ProcessControlRequest+0x5e>
    2322:	f1 c0       	rjmp	.+482    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    2324:	d4 c0       	rjmp	.+424    	; 0x24ce <HID_Device_ProcessControlRequest+0x208>
    2326:	8a 30       	cpi	r24, 0x0A	; 10
    2328:	09 f4       	brne	.+2      	; 0x232c <HID_Device_ProcessControlRequest+0x66>
    232a:	b9 c0       	rjmp	.+370    	; 0x249e <HID_Device_ProcessControlRequest+0x1d8>
    232c:	8b 30       	cpi	r24, 0x0B	; 11
    232e:	09 f4       	brne	.+2      	; 0x2332 <HID_Device_ProcessControlRequest+0x6c>
    2330:	a2 c0       	rjmp	.+324    	; 0x2476 <HID_Device_ProcessControlRequest+0x1b0>
    2332:	89 30       	cpi	r24, 0x09	; 9
    2334:	09 f0       	breq	.+2      	; 0x2338 <HID_Device_ProcessControlRequest+0x72>
    2336:	e7 c0       	rjmp	.+462    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    2338:	4c c0       	rjmp	.+152    	; 0x23d2 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    233a:	80 91 f4 01 	lds	r24, 0x01F4
    233e:	81 3a       	cpi	r24, 0xA1	; 161
    2340:	09 f0       	breq	.+2      	; 0x2344 <HID_Device_ProcessControlRequest+0x7e>
    2342:	e1 c0       	rjmp	.+450    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    2344:	8d b6       	in	r8, 0x3d	; 61
    2346:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2348:	1a 82       	std	Y+2, r1	; 0x02
    234a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    234c:	80 91 f6 01 	lds	r24, 0x01F6
    2350:	10 91 f7 01 	lds	r17, 0x01F7
    2354:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2356:	f7 01       	movw	r30, r14
    2358:	40 85       	ldd	r20, Z+8	; 0x08
    235a:	8d b7       	in	r24, 0x3d	; 61
    235c:	9e b7       	in	r25, 0x3e	; 62
    235e:	84 1b       	sub	r24, r20
    2360:	91 09       	sbc	r25, r1
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	9e bf       	out	0x3e, r25	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	8d bf       	out	0x3d, r24	; 61
    236c:	cd b6       	in	r12, 0x3d	; 61
    236e:	de b6       	in	r13, 0x3e	; 62
    2370:	ef ef       	ldi	r30, 0xFF	; 255
    2372:	ce 1a       	sub	r12, r30
    2374:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    2376:	36 01       	movw	r6, r12
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	c6 01       	movw	r24, r12
    2380:	ea d1       	rcall	.+980    	; 0x2756 <memset>
    2382:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2384:	41 50       	subi	r20, 0x01	; 1
    2386:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    2388:	0f 5f       	subi	r16, 0xFF	; 255
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	96 01       	movw	r18, r12
    238e:	be 01       	movw	r22, r28
    2390:	6d 5f       	subi	r22, 0xFD	; 253
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	c7 01       	movw	r24, r14
    2396:	0e 94 fe 03 	call	0x7fc	; 0x7fc <CALLBACK_HID_Device_CreateHIDReport>
    239a:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    239c:	26 81       	ldd	r18, Z+6	; 0x06
    239e:	37 81       	ldd	r19, Z+7	; 0x07
    23a0:	21 15       	cp	r18, r1
    23a2:	31 05       	cpc	r19, r1
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <HID_Device_ProcessControlRequest+0xea>
    23a6:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	b6 01       	movw	r22, r12
    23ac:	c9 01       	movw	r24, r18
    23ae:	ca d1       	rcall	.+916    	; 0x2744 <memcpy>
    23b0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23b4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23b8:	87 7f       	andi	r24, 0xF7	; 247
    23ba:	80 93 e8 00 	sts	0x00E8, r24
    23be:	69 81       	ldd	r22, Y+1	; 0x01
    23c0:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    23c2:	c3 01       	movw	r24, r6
    23c4:	93 d9       	rcall	.-3290   	; 0x16ec <Endpoint_Write_Control_Stream_LE>
    23c6:	80 91 e8 00 	lds	r24, 0x00E8
    23ca:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    23cc:	80 93 e8 00 	sts	0x00E8, r24
    23d0:	39 c0       	rjmp	.+114    	; 0x2444 <HID_Device_ProcessControlRequest+0x17e>
    23d2:	80 91 f4 01 	lds	r24, 0x01F4
    23d6:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    23d8:	09 f0       	breq	.+2      	; 0x23dc <HID_Device_ProcessControlRequest+0x116>
    23da:	95 c0       	rjmp	.+298    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    23dc:	8d b6       	in	r8, 0x3d	; 61
    23de:	9e b6       	in	r9, 0x3e	; 62
    23e0:	00 91 fa 01 	lds	r16, 0x01FA
    23e4:	10 91 fb 01 	lds	r17, 0x01FB
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    23e8:	70 90 f6 01 	lds	r7, 0x01F6
    23ec:	60 90 f7 01 	lds	r6, 0x01F7
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    23f0:	8d b7       	in	r24, 0x3d	; 61
    23f2:	9e b7       	in	r25, 0x3e	; 62
    23f4:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    23f6:	91 0b       	sbc	r25, r17
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	9e bf       	out	0x3e, r25	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	8d bf       	out	0x3d, r24	; 61
    2402:	cd b6       	in	r12, 0x3d	; 61
    2404:	de b6       	in	r13, 0x3e	; 62
    2406:	ef ef       	ldi	r30, 0xFF	; 255
    2408:	ce 1a       	sub	r12, r30
    240a:	de 0a       	sbc	r13, r30
    240c:	80 91 e8 00 	lds	r24, 0x00E8
    2410:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2412:	80 93 e8 00 	sts	0x00E8, r24
    2416:	b8 01       	movw	r22, r16
    2418:	c6 01       	movw	r24, r12
    241a:	c8 d9       	rcall	.-3184   	; 0x17ac <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    241c:	80 91 e8 00 	lds	r24, 0x00E8
    2420:	8e 77       	andi	r24, 0x7E	; 126
    2422:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	71 10       	cpse	r7, r1
    242a:	01 c0       	rjmp	.+2      	; 0x242e <HID_Device_ProcessControlRequest+0x168>
    242c:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	02 1b       	sub	r16, r18
    2432:	13 0b       	sbc	r17, r19
    2434:	2c 0d       	add	r18, r12
    2436:	3d 1d       	adc	r19, r13
    2438:	46 2d       	mov	r20, r6
    243a:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    243c:	67 2d       	mov	r22, r7
    243e:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2440:	0e 94 3e 04 	call	0x87c	; 0x87c <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2444:	88 2d       	mov	r24, r8
    2446:	99 2d       	mov	r25, r9
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	9e bf       	out	0x3e, r25	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	8d bf       	out	0x3d, r24	; 61
    2452:	59 c0       	rjmp	.+178    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    2454:	80 91 f4 01 	lds	r24, 0x01F4
    2458:	81 3a       	cpi	r24, 0xA1	; 161
    245a:	09 f0       	breq	.+2      	; 0x245e <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    245c:	54 c0       	rjmp	.+168    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    245e:	80 91 e8 00 	lds	r24, 0x00E8
    2462:	87 7f       	andi	r24, 0xF7	; 247
    2464:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2468:	80 91 e8 00 	lds	r24, 0x00E8
    246c:	80 ff       	sbrs	r24, 0
    246e:	fc cf       	rjmp	.-8      	; 0x2468 <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2470:	f7 01       	movw	r30, r14
    2472:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2474:	40 c0       	rjmp	.+128    	; 0x24f6 <HID_Device_ProcessControlRequest+0x230>
    2476:	80 91 f4 01 	lds	r24, 0x01F4
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    247a:	81 32       	cpi	r24, 0x21	; 33
    247c:	09 f0       	breq	.+2      	; 0x2480 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    247e:	43 c0       	rjmp	.+134    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    2480:	80 91 e8 00 	lds	r24, 0x00E8
    2484:	87 7f       	andi	r24, 0xF7	; 247
    2486:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    248a:	a6 da       	rcall	.-2740   	; 0x19d8 <Endpoint_ClearStatusStage>
    248c:	90 91 f6 01 	lds	r25, 0x01F6
    2490:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2492:	91 11       	cpse	r25, r1
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	f7 01       	movw	r30, r14
    249a:	81 87       	std	Z+9, r24	; 0x09
    249c:	34 c0       	rjmp	.+104    	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    249e:	80 91 f4 01 	lds	r24, 0x01F4
    24a2:	81 32       	cpi	r24, 0x21	; 33
    24a4:	81 f5       	brne	.+96     	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    24a6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24aa:	87 7f       	andi	r24, 0xF7	; 247
    24ac:	80 93 e8 00 	sts	0x00E8, r24
    24b0:	93 da       	rcall	.-2778   	; 0x19d8 <Endpoint_ClearStatusStage>
    24b2:	80 91 f6 01 	lds	r24, 0x01F6
    24b6:	90 91 f7 01 	lds	r25, 0x01F7
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24ba:	88 27       	eor	r24, r24
    24bc:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    24be:	96 95       	lsr	r25
    24c0:	87 95       	ror	r24
    24c2:	3a 95       	dec	r19
    24c4:	e1 f7       	brne	.-8      	; 0x24be <HID_Device_ProcessControlRequest+0x1f8>
    24c6:	f7 01       	movw	r30, r14
    24c8:	95 87       	std	Z+13, r25	; 0x0d
    24ca:	84 87       	std	Z+12, r24	; 0x0c
    24cc:	1c c0       	rjmp	.+56     	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    24ce:	80 91 f4 01 	lds	r24, 0x01F4
    24d2:	81 3a       	cpi	r24, 0xA1	; 161
    24d4:	c1 f4       	brne	.+48     	; 0x2506 <HID_Device_ProcessControlRequest+0x240>
    24d6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24da:	87 7f       	andi	r24, 0xF7	; 247
    24dc:	80 93 e8 00 	sts	0x00E8, r24
    24e0:	80 91 e8 00 	lds	r24, 0x00E8
    24e4:	80 ff       	sbrs	r24, 0
    24e6:	fc cf       	rjmp	.-8      	; 0x24e0 <HID_Device_ProcessControlRequest+0x21a>
    24e8:	f7 01       	movw	r30, r14
    24ea:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24ec:	95 85       	ldd	r25, Z+13	; 0x0d
    24ee:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24f0:	87 95       	ror	r24
    24f2:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    24f4:	87 95       	ror	r24
    24f6:	80 93 f1 00 	sts	0x00F1, r24
    24fa:	80 91 e8 00 	lds	r24, 0x00E8
    24fe:	8e 77       	andi	r24, 0x7E	; 126
    2500:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2504:	69 da       	rcall	.-2862   	; 0x19d8 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	be be       	out	0x3e, r11	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
			}

			break;
	}
}
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	7f 90       	pop	r7
    2530:	6f 90       	pop	r6
    2532:	08 95       	ret

00002534 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2534:	9c 01       	movw	r18, r24
    2536:	27 5f       	subi	r18, 0xF7	; 247
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	f9 01       	movw	r30, r18
    253c:	27 e0       	ldi	r18, 0x07	; 7
    253e:	df 01       	movw	r26, r30
    2540:	1d 92       	st	X+, r1
    2542:	2a 95       	dec	r18
    2544:	e9 f7       	brne	.-6      	; 0x2540 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	fc 01       	movw	r30, r24
    254a:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    254c:	24 ef       	ldi	r18, 0xF4	; 244
    254e:	31 e0       	ldi	r19, 0x01	; 1
    2550:	35 87       	std	Z+13, r19	; 0x0d
    2552:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2554:	23 e0       	ldi	r18, 0x03	; 3
    2556:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	ff c9       	rjmp	.-3074   	; 0x195c <Endpoint_ConfigureEndpointTable>

0000255e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 d0       	rcall	.+0      	; 0x2580 <HID_Device_USBTask+0x22>
    2580:	1f 92       	push	r1
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2588:	ad b6       	in	r10, 0x3d	; 61
    258a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    258c:	80 91 f3 01 	lds	r24, 0x01F3
    2590:	84 30       	cpi	r24, 0x04	; 4
    2592:	09 f0       	breq	.+2      	; 0x2596 <HID_Device_USBTask+0x38>
    2594:	8f c0       	rjmp	.+286    	; 0x26b4 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2596:	80 91 e4 00 	lds	r24, 0x00E4
    259a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    259e:	f7 01       	movw	r30, r14
    25a0:	22 85       	ldd	r18, Z+10	; 0x0a
    25a2:	33 85       	ldd	r19, Z+11	; 0x0b
    25a4:	28 17       	cp	r18, r24
    25a6:	39 07       	cpc	r19, r25
    25a8:	09 f4       	brne	.+2      	; 0x25ac <HID_Device_USBTask+0x4e>
    25aa:	84 c0       	rjmp	.+264    	; 0x26b4 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25ac:	81 81       	ldd	r24, Z+1	; 0x01
    25ae:	8f 70       	andi	r24, 0x0F	; 15
    25b0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    25b4:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    25b8:	85 ff       	sbrs	r24, 5
    25ba:	7c c0       	rjmp	.+248    	; 0x26b4 <HID_Device_USBTask+0x156>
    25bc:	6d b6       	in	r6, 0x3d	; 61
    25be:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    25c0:	40 85       	ldd	r20, Z+8	; 0x08
    25c2:	8d b7       	in	r24, 0x3d	; 61
    25c4:	9e b7       	in	r25, 0x3e	; 62
    25c6:	84 1b       	sub	r24, r20
    25c8:	91 09       	sbc	r25, r1
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	9e bf       	out	0x3e, r25	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	8d bf       	out	0x3d, r24	; 61
    25d4:	cd b6       	in	r12, 0x3d	; 61
    25d6:	de b6       	in	r13, 0x3e	; 62
    25d8:	ef ef       	ldi	r30, 0xFF	; 255
    25da:	ce 1a       	sub	r12, r30
    25dc:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    25de:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    25e0:	1a 82       	std	Y+2, r1	; 0x02
    25e2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    25e4:	46 01       	movw	r8, r12
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	c6 01       	movw	r24, r12
    25ee:	b3 d0       	rcall	.+358    	; 0x2756 <memset>
    25f0:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	96 01       	movw	r18, r12
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	be 01       	movw	r22, r28
    25fc:	6d 5f       	subi	r22, 0xFD	; 253
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	c7 01       	movw	r24, r14
    2602:	0e 94 fe 03 	call	0x7fc	; 0x7fc <CALLBACK_HID_Device_CreateHIDReport>
    2606:	58 2e       	mov	r5, r24
    2608:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    260a:	84 85       	ldd	r24, Z+12	; 0x0c
    260c:	95 85       	ldd	r25, Z+13	; 0x0d
    260e:	89 2b       	or	r24, r25
    2610:	31 f0       	breq	.+12     	; 0x261e <HID_Device_USBTask+0xc0>
    2612:	01 e0       	ldi	r16, 0x01	; 1
    2614:	10 e0       	ldi	r17, 0x00	; 0
    2616:	86 85       	ldd	r24, Z+14	; 0x0e
    2618:	97 85       	ldd	r25, Z+15	; 0x0f
    261a:	89 2b       	or	r24, r25
    261c:	11 f0       	breq	.+4      	; 0x2622 <HID_Device_USBTask+0xc4>
    261e:	00 e0       	ldi	r16, 0x00	; 0
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2624:	c6 80       	ldd	r12, Z+6	; 0x06
    2626:	d7 80       	ldd	r13, Z+7	; 0x07
    2628:	c1 14       	cp	r12, r1
    262a:	d1 04       	cpc	r13, r1
    262c:	89 f0       	breq	.+34     	; 0x2650 <HID_Device_USBTask+0xf2>
    262e:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2630:	5a 81       	ldd	r21, Y+2	; 0x02
    2632:	b6 01       	movw	r22, r12
    2634:	c4 01       	movw	r24, r8
    2636:	79 d0       	rcall	.+242    	; 0x272a <memcmp>
    2638:	44 24       	eor	r4, r4
    263a:	43 94       	inc	r4
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	09 f4       	brne	.+2      	; 0x2642 <HID_Device_USBTask+0xe4>
    2640:	41 2c       	mov	r4, r1
    2642:	f7 01       	movw	r30, r14
    2644:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	b4 01       	movw	r22, r8
    264a:	c6 01       	movw	r24, r12
    264c:	7b d0       	rcall	.+246    	; 0x2744 <memcpy>
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <HID_Device_USBTask+0xf4>
    2650:	41 2c       	mov	r4, r1
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2656:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2658:	f9 f0       	breq	.+62     	; 0x2698 <HID_Device_USBTask+0x13a>
    265a:	51 10       	cpse	r5, r1
    265c:	04 c0       	rjmp	.+8      	; 0x2666 <HID_Device_USBTask+0x108>
    265e:	41 10       	cpse	r4, r1
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <HID_Device_USBTask+0x108>
    2662:	00 ff       	sbrs	r16, 0
    2664:	19 c0       	rjmp	.+50     	; 0x2698 <HID_Device_USBTask+0x13a>
    2666:	f7 01       	movw	r30, r14
    2668:	84 85       	ldd	r24, Z+12	; 0x0c
    266a:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    266c:	97 87       	std	Z+15, r25	; 0x0f
    266e:	86 87       	std	Z+14, r24	; 0x0e
    2670:	81 81       	ldd	r24, Z+1	; 0x01
    2672:	8f 70       	andi	r24, 0x0F	; 15
    2674:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	81 11       	cpse	r24, r1
    267c:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2680:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2682:	7a 81       	ldd	r23, Y+2	; 0x02
    2684:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	c4 01       	movw	r24, r8
    268a:	0e 94 29 0b 	call	0x1652	; 0x1652 <Endpoint_Write_Stream_LE>
    268e:	80 91 e8 00 	lds	r24, 0x00E8
    2692:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2694:	80 93 e8 00 	sts	0x00E8, r24
    2698:	80 91 e4 00 	lds	r24, 0x00E4
    269c:	90 91 e5 00 	lds	r25, 0x00E5
    26a0:	f7 01       	movw	r30, r14
    26a2:	93 87       	std	Z+11, r25	; 0x0b
    26a4:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    26a6:	86 2d       	mov	r24, r6
    26a8:	97 2d       	mov	r25, r7
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	9e bf       	out	0x3e, r25	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	8d bf       	out	0x3d, r24	; 61
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	be be       	out	0x3e, r11	; 62
	}
}
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	ad be       	out	0x3d, r10	; 61
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	df 90       	pop	r13
    26d2:	cf 90       	pop	r12
    26d4:	bf 90       	pop	r11
    26d6:	af 90       	pop	r10
    26d8:	9f 90       	pop	r9
    26da:	8f 90       	pop	r8
    26dc:	7f 90       	pop	r7
    26de:	6f 90       	pop	r6
    26e0:	5f 90       	pop	r5
    26e2:	4f 90       	pop	r4
    26e4:	08 95       	ret

000026e6 <__udivmodsi4>:
    26e6:	a1 e2       	ldi	r26, 0x21	; 33
    26e8:	1a 2e       	mov	r1, r26
    26ea:	aa 1b       	sub	r26, r26
    26ec:	bb 1b       	sub	r27, r27
    26ee:	fd 01       	movw	r30, r26
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <__udivmodsi4_ep>

000026f2 <__udivmodsi4_loop>:
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	ee 1f       	adc	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	a2 17       	cp	r26, r18
    26fc:	b3 07       	cpc	r27, r19
    26fe:	e4 07       	cpc	r30, r20
    2700:	f5 07       	cpc	r31, r21
    2702:	20 f0       	brcs	.+8      	; 0x270c <__udivmodsi4_ep>
    2704:	a2 1b       	sub	r26, r18
    2706:	b3 0b       	sbc	r27, r19
    2708:	e4 0b       	sbc	r30, r20
    270a:	f5 0b       	sbc	r31, r21

0000270c <__udivmodsi4_ep>:
    270c:	66 1f       	adc	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	1a 94       	dec	r1
    2716:	69 f7       	brne	.-38     	; 0x26f2 <__udivmodsi4_loop>
    2718:	60 95       	com	r22
    271a:	70 95       	com	r23
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	9b 01       	movw	r18, r22
    2722:	ac 01       	movw	r20, r24
    2724:	bd 01       	movw	r22, r26
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret

0000272a <memcmp>:
    272a:	fb 01       	movw	r30, r22
    272c:	dc 01       	movw	r26, r24
    272e:	04 c0       	rjmp	.+8      	; 0x2738 <memcmp+0xe>
    2730:	8d 91       	ld	r24, X+
    2732:	01 90       	ld	r0, Z+
    2734:	80 19       	sub	r24, r0
    2736:	21 f4       	brne	.+8      	; 0x2740 <memcmp+0x16>
    2738:	41 50       	subi	r20, 0x01	; 1
    273a:	50 40       	sbci	r21, 0x00	; 0
    273c:	c8 f7       	brcc	.-14     	; 0x2730 <memcmp+0x6>
    273e:	88 1b       	sub	r24, r24
    2740:	99 0b       	sbc	r25, r25
    2742:	08 95       	ret

00002744 <memcpy>:
    2744:	fb 01       	movw	r30, r22
    2746:	dc 01       	movw	r26, r24
    2748:	02 c0       	rjmp	.+4      	; 0x274e <memcpy+0xa>
    274a:	01 90       	ld	r0, Z+
    274c:	0d 92       	st	X+, r0
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	d8 f7       	brcc	.-10     	; 0x274a <memcpy+0x6>
    2754:	08 95       	ret

00002756 <memset>:
    2756:	dc 01       	movw	r26, r24
    2758:	01 c0       	rjmp	.+2      	; 0x275c <memset+0x6>
    275a:	6d 93       	st	X+, r22
    275c:	41 50       	subi	r20, 0x01	; 1
    275e:	50 40       	sbci	r21, 0x00	; 0
    2760:	e0 f7       	brcc	.-8      	; 0x275a <memset+0x4>
    2762:	08 95       	ret

00002764 <_exit>:
    2764:	f8 94       	cli

00002766 <__stop_program>:
    2766:	ff cf       	rjmp	.-2      	; 0x2766 <__stop_program>
