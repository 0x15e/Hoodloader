
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001d48  00001ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  0080012e  0080012e  00001e0a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002a13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e0  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b8c7  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d22  00000000  00000000  0000e9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000497a  00000000  00000000  000116ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001168  00000000  00000000  00016068  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004529  00000000  00000000  000171d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007536  00000000  00000000  0001b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  00022c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
       e:	00 00       	nop
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
      12:	00 00       	nop
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	uint16_t CurrentBit   = ReportItem->BitOffset;
      16:	00 00       	nop
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      1a:	00 00       	nop
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	28 c2       	rjmp	.+1104   	; 0x4ae <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 15 00 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 40 09 01 81 02 95 40     .u...&...@.....@
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 05 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	05 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	e8 e4       	ldi	r30, 0x48	; 72
     2fc:	fd e1       	ldi	r31, 0x1D	; 29
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	ae 32       	cpi	r26, 0x2E	; 46
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	ae e2       	ldi	r26, 0x2E	; 46
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a4 34       	cpi	r26, 0x44	; 68
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	c0 d3       	rcall	.+1920   	; 0xa9c <main>
				break;
     31c:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <LEDs_TurnOnLEDs>:
     322:	9b b1       	in	r25, 0x0b	; 11
				break;
     324:	80 95       	com	r24

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	89 23       	and	r24, r25
     328:	8b b9       	out	0x0b, r24	; 11
     32a:	08 95       	ret

0000032c <RingBuffer_Remove.constprop.0>:

				if (ParserData->UsingReportIDs)
     32c:	ef e2       	ldi	r30, 0x2F	; 47
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	a2 81       	ldd	r26, Z+2	; 0x02
     332:	b3 81       	ldd	r27, Z+3	; 0x03
     334:	8d 91       	ld	r24, X+
     336:	b3 83       	std	Z+3, r27	; 0x03
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	a2 83       	std	Z+2, r26	; 0x02
     33a:	26 81       	ldd	r18, Z+6	; 0x06
     33c:	37 81       	ldd	r19, Z+7	; 0x07
     33e:	a2 17       	cp	r26, r18
     340:	b3 07       	cpc	r27, r19
     342:	21 f4       	brne	.+8      	; 0x34c <RingBuffer_Remove.constprop.0+0x20>
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	33 83       	std	Z+3, r19	; 0x03

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	22 83       	std	Z+2, r18	; 0x02
     34c:	9f b7       	in	r25, 0x3f	; 63
     34e:	f8 94       	cli
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	22 85       	ldd	r18, Z+10	; 0x0a
     352:	33 85       	ldd	r19, Z+11	; 0x0b
     354:	21 50       	subi	r18, 0x01	; 1
     356:	31 09       	sbc	r19, r1
     358:	33 87       	std	Z+11, r19	; 0x0b
     35a:	22 87       	std	Z+10, r18	; 0x0a
     35c:	9f bf       	out	0x3f, r25	; 63
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	08 95       	ret

00000360 <SetupHardware>:
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	84 b7       	in	r24, 0x34	; 52
     366:	87 7f       	andi	r24, 0xF7	; 247
     368:	84 bf       	out	0x34, r24	; 52
     36a:	28 e1       	ldi	r18, 0x18	; 24
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	20 93 60 00 	sts	0x0060, r18
     374:	10 92 60 00 	sts	0x0060, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	0f be       	out	0x3f, r0	; 63
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	90 e0       	ldi	r25, 0x00	; 0
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	90 93 cd 00 	sts	0x00CD, r25
     382:	80 93 cc 00 	sts	0x00CC, r24
     386:	ca ec       	ldi	r28, 0xCA	; 202
     388:	d0 e0       	ldi	r29, 0x00	; 0
     38a:	96 e0       	ldi	r25, 0x06	; 6
     38c:	98 83       	st	Y, r25
     38e:	a8 ec       	ldi	r26, 0xC8	; 200
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	8c 93       	st	X, r24
     396:	e9 ec       	ldi	r30, 0xC9	; 201
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	20 83       	st	Z, r18
     39c:	53 9a       	sbi	0x0a, 3	; 10
     39e:	5a 9a       	sbi	0x0b, 2	; 11
     3a0:	5b 9a       	sbi	0x0b, 3	; 11
     3a2:	10 82       	st	Z, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	1c 92       	st	X, r1
     3a6:	18 82       	st	Y, r1
     3a8:	98 83       	st	Y, r25
     3aa:	8c 93       	st	X, r24
     3ac:	88 e9       	ldi	r24, 0x98	; 152
     3ae:	80 83       	st	Z, r24
     3b0:	5b 98       	cbi	0x0b, 3	; 11
     3b2:	8a b1       	in	r24, 0x0a	; 10
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	80 63       	ori	r24, 0x30	; 48
     3b6:	8a b9       	out	0x0a, r24	; 10
     3b8:	8b b1       	in	r24, 0x0b	; 11
     3ba:	80 63       	ori	r24, 0x30	; 48
     3bc:	8b b9       	out	0x0b, r24	; 11

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	6d d6       	rcall	.+3290   	; 0x109a <USB_Init>
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	85 bd       	out	0x25, r24	; 37
     3c4:	5f 9a       	sbi	0x0b, 7	; 11
     3c6:	57 9a       	sbi	0x0a, 7	; 10
     3c8:	84 b1       	in	r24, 0x04	; 4
     3ca:	84 b9       	out	0x04, r24	; 4
				break;
     3cc:	22 98       	cbi	0x04, 2	; 4

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	2a 9a       	sbi	0x05, 2	; 5
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <EVENT_USB_Device_Connect>:
     3d6:	08 95       	ret

000003d8 <EVENT_USB_Device_Disconnect>:
     3d8:	08 95       	ret

000003da <EVENT_USB_Device_ConfigurationChanged>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <HID_Device_ConfigureEndpoints>
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 c7 0a 	call	0x158e	; 0x158e <CDC_Device_ConfigureEndpoints>
     3ea:	e2 ee       	ldi	r30, 0xE2	; 226
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	84 60       	ori	r24, 0x04	; 4
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <EVENT_CDC_Device_LineEncodingChanged>:
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
				break;
     3fa:	df 93       	push	r29
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	ec 01       	movw	r28, r24
     3fe:	e9 8d       	ldd	r30, Y+25	; 0x19
     400:	e1 50       	subi	r30, 0x01	; 1
     402:	e2 30       	cpi	r30, 0x02	; 2
     404:	28 f4       	brcc	.+10     	; 0x410 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e5 5d       	subi	r30, 0xD5	; 213

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	fe 4f       	sbci	r31, 0xFE	; 254
     40c:	10 81       	ld	r17, Z
     40e:	01 c0       	rjmp	.+2      	; 0x412 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	10 e0       	ldi	r17, 0x00	; 0
     412:	88 8d       	ldd	r24, Y+24	; 0x18
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	09 f4       	brne	.+2      	; 0x41a <EVENT_CDC_Device_LineEncodingChanged+0x24>
     418:	18 60       	ori	r17, 0x08	; 8
     41a:	8a 8d       	ldd	r24, Y+26	; 0x1a
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	87 30       	cpi	r24, 0x07	; 7
     41e:	31 f0       	breq	.+12     	; 0x42c <EVENT_CDC_Device_LineEncodingChanged+0x36>
     420:	88 30       	cpi	r24, 0x08	; 8
     422:	31 f0       	breq	.+12     	; 0x430 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     424:	86 30       	cpi	r24, 0x06	; 6
     426:	29 f4       	brne	.+10     	; 0x432 <EVENT_CDC_Device_LineEncodingChanged+0x3c>

					while (CurrCollectionPath->Parent != NULL)
     428:	12 60       	ori	r17, 0x02	; 2
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	03 c0       	rjmp	.+6      	; 0x432 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     42c:	14 60       	ori	r17, 0x04	; 4
     42e:	01 c0       	rjmp	.+2      	; 0x432 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     430:	16 60       	ori	r17, 0x06	; 6
     432:	5b 9a       	sbi	0x0b, 3	; 11
     434:	10 92 c9 00 	sts	0x00C9, r1
     438:	10 92 c8 00 	sts	0x00C8, r1
     43c:	10 92 ca 00 	sts	0x00CA, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	2c 89       	ldd	r18, Y+20	; 0x14
     442:	3d 89       	ldd	r19, Y+21	; 0x15
     444:	4e 89       	ldd	r20, Y+22	; 0x16
     446:	5f 89       	ldd	r21, Y+23	; 0x17
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	21 15       	cp	r18, r1
     44a:	81 ee       	ldi	r24, 0xE1	; 225
     44c:	38 07       	cpc	r19, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	41 05       	cpc	r20, r1
     450:	51 05       	cpc	r21, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	79 f0       	breq	.+30     	; 0x472 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
     454:	ca 01       	movw	r24, r20
     456:	b9 01       	movw	r22, r18
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	77 95       	ror	r23
     45e:	67 95       	ror	r22

				if (UsageListSize)
     460:	60 58       	subi	r22, 0x80	; 128
     462:	7b 47       	sbci	r23, 0x7B	; 123
     464:	81 4e       	sbci	r24, 0xE1	; 225
     466:	9f 4f       	sbci	r25, 0xFF	; 255
     468:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__udivmodsi4>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	31 09       	sbc	r19, r1
     470:	02 c0       	rjmp	.+4      	; 0x476 <EVENT_CDC_Device_LineEncodingChanged+0x80>
     472:	20 e1       	ldi	r18, 0x10	; 16
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	30 93 cd 00 	sts	0x00CD, r19
     47a:	20 93 cc 00 	sts	0x00CC, r18
     47e:	10 93 ca 00 	sts	0x00CA, r17

					for (uint8_t i = 1; i < UsageListSize; i++)
     482:	8c 89       	ldd	r24, Y+20	; 0x14
					  UsageList[i - 1] = UsageList[i];
     484:	9d 89       	ldd	r25, Y+21	; 0x15
     486:	ae 89       	ldd	r26, Y+22	; 0x16
     488:	bf 89       	ldd	r27, Y+23	; 0x17
     48a:	81 15       	cp	r24, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	91 4e       	sbci	r25, 0xE1	; 225
     48e:	a1 05       	cpc	r26, r1
     490:	b1 05       	cpc	r27, r1
     492:	11 f4       	brne	.+4      	; 0x498 <EVENT_CDC_Device_LineEncodingChanged+0xa2>
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	01 c0       	rjmp	.+2      	; 0x49a <EVENT_CDC_Device_LineEncodingChanged+0xa4>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	80 93 c8 00 	sts	0x00C8, r24
     49e:	88 e9       	ldi	r24, 0x98	; 152
     4a0:	80 93 c9 00 	sts	0x00C9, r24
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a4:	5b 98       	cbi	0x0b, 3	; 11
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <__vector_23>:
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	2f 93       	push	r18
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	3f 93       	push	r19
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	af 93       	push	r26
     4c2:	bf 93       	push	r27
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
     4c8:	80 91 ce 00 	lds	r24, 0x00CE
     4cc:	90 91 2e 01 	lds	r25, 0x012E
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	94 30       	cpi	r25, 0x04	; 4
     4d2:	f9 f0       	breq	.+62     	; 0x512 <__vector_23+0x64>
     4d4:	90 91 3b 02 	lds	r25, 0x023B
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	94 30       	cpi	r25, 0x04	; 4
     4da:	d9 f4       	brne	.+54     	; 0x512 <__vector_23+0x64>
     4dc:	ef e2       	ldi	r30, 0x2F	; 47
				break;
     4de:	f1 e0       	ldi	r31, 0x01	; 1
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	a0 81       	ld	r26, Z
     4e2:	b1 81       	ldd	r27, Z+1	; 0x01
     4e4:	8c 93       	st	X, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	91 83       	std	Z+1, r25	; 0x01
     4ee:	80 83       	st	Z, r24
     4f0:	26 81       	ldd	r18, Z+6	; 0x06
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	37 81       	ldd	r19, Z+7	; 0x07
     4f4:	82 17       	cp	r24, r18
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	93 07       	cpc	r25, r19
     4f8:	21 f4       	brne	.+8      	; 0x502 <__vector_23+0x54>
     4fa:	84 81       	ldd	r24, Z+4	; 0x04
     4fc:	95 81       	ldd	r25, Z+5	; 0x05
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
     502:	2f b7       	in	r18, 0x3f	; 63
     504:	f8 94       	cli

					if (UsageListSize)
     506:	82 85       	ldd	r24, Z+10	; 0x0a
     508:	93 85       	ldd	r25, Z+11	; 0x0b
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	93 87       	std	Z+11, r25	; 0x0b
     50e:	82 87       	std	Z+10, r24	; 0x0a
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	2f bf       	out	0x3f, r18	; 63
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
						  UsageList[i - 1] = UsageList[i];
     52a:	18 95       	reti

0000052c <EVENT_CDC_Device_ControLineStateChanged>:
     52c:	fc 01       	movw	r30, r24
     52e:	20 89       	ldd	r18, Z+16	; 0x10
     530:	20 ff       	sbrs	r18, 0

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	02 c0       	rjmp	.+4      	; 0x538 <EVENT_CDC_Device_ControLineStateChanged+0xc>
     534:	5f 98       	cbi	0x0b, 7	; 11
     536:	08 95       	ret
     538:	5f 9a       	sbi	0x0b, 7	; 11
     53a:	8b b1       	in	r24, 0x0b	; 11
     53c:	80 63       	ori	r24, 0x30	; 48
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	8b b9       	out	0x0b, r24	; 11
     540:	08 95       	ret

00000542 <EVENT_USB_Device_ControlRequest>:
     542:	80 e1       	ldi	r24, 0x10	; 16
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 a0 0b 	call	0x1740	; 0x1740 <CDC_Device_ProcessControlRequest>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <HID_Device_ProcessControlRequest>

00000552 <EVENT_USB_Device_StartOfFrame>:
     552:	80 91 0e 01 	lds	r24, 0x010E
     556:	90 91 0f 01 	lds	r25, 0x010F
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	29 f0       	breq	.+10     	; 0x568 <EVENT_USB_Device_StartOfFrame+0x16>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	90 93 0f 01 	sts	0x010F, r25
     564:	80 93 0e 01 	sts	0x010E, r24
     568:	08 95       	ret

0000056a <CALLBACK_HID_Device_CreateHIDReport>:
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	df 93       	push	r29
     576:	7b 01       	movw	r14, r22
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	c9 01       	movw	r24, r18
     57a:	ce eb       	ldi	r28, 0xBE	; 190
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	d1 e0       	ldi	r29, 0x01	; 1
     57e:	48 81       	ld	r20, Y
     580:	e0 ec       	ldi	r30, 0xC0	; 192
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	50 e0       	ldi	r21, 0x00	; 0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	bf 01       	movw	r22, r30
     588:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <memcpy>
     58c:	ed eb       	ldi	r30, 0xBD	; 189
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	80 81       	ld	r24, Z
     592:	d7 01       	movw	r26, r14
     594:	8c 93       	st	X, r24
     596:	88 81       	ld	r24, Y
     598:	d8 01       	movw	r26, r16
     59a:	8c 93       	st	X, r24
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	1c 92       	st	X, r1
     5a0:	10 82       	st	Z, r1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	10 92 bf 01 	sts	0x01BF, r1
     5a6:	18 82       	st	Y, r1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	08 95       	ret

000005b8 <CALLBACK_HID_Device_ProcessHIDReport>:
     5b8:	08 95       	ret

000005ba <mode_default>:
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <CDC_Device_ReceiveByte>
     5c8:	ec 01       	movw	r28, r24
     5ca:	97 fd       	sbrc	r25, 7
     5cc:	0b c0       	rjmp	.+22     	; 0x5e4 <mode_default+0x2a>
     5ce:	80 e1       	ldi	r24, 0x10	; 16
     5d0:	a8 de       	rcall	.-688    	; 0x322 <LEDs_TurnOnLEDs>
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	80 93 bc 01 	sts	0x01BC, r24
     5d8:	80 91 c8 00 	lds	r24, 0x00C8
     5dc:	85 ff       	sbrs	r24, 5
     5de:	fc cf       	rjmp	.-8      	; 0x5d8 <mode_default+0x1e>
     5e0:	c0 93 ce 00 	sts	0x00CE, r28
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	c0 91 39 01 	lds	r28, 0x0139
     5ec:	d0 91 3a 01 	lds	r29, 0x013A
     5f0:	8f bf       	out	0x3f, r24	; 63

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	20 97       	sbiw	r28, 0x00	; 0
     5f4:	19 f4       	brne	.+6      	; 0x5fc <mode_default+0x42>
     5f6:	a8 99       	sbic	0x15, 0	; 21
     5f8:	2a c0       	rjmp	.+84     	; 0x64e <mode_default+0x94>
					  return HID_PARSE_InsufficientReportItems;
     5fa:	3e c0       	rjmp	.+124    	; 0x678 <mode_default+0xbe>
     5fc:	80 e2       	ldi	r24, 0x20	; 32

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	91 de       	rcall	.-734    	; 0x322 <LEDs_TurnOnLEDs>
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	80 93 bb 01 	sts	0x01BB, r24
     606:	80 91 11 01 	lds	r24, 0x0111
     60a:	8f 70       	andi	r24, 0x0F	; 15
     60c:	80 93 e9 00 	sts	0x00E9, r24
     610:	80 91 e8 00 	lds	r24, 0x00E8
     614:	80 ff       	sbrs	r24, 0
     616:	ef cf       	rjmp	.-34     	; 0x5f6 <mode_default+0x3c>
     618:	ce 01       	movw	r24, r28
     61a:	c0 34       	cpi	r28, 0x40	; 64
     61c:	d1 05       	cpc	r29, r1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	10 f0       	brcs	.+4      	; 0x624 <mode_default+0x6a>
     620:	8f e3       	ldi	r24, 0x3F	; 63
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	18 2f       	mov	r17, r24
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	0e c0       	rjmp	.+28     	; 0x648 <mode_default+0x8e>
     62c:	e0 91 31 01 	lds	r30, 0x0131
     630:	f0 91 32 01 	lds	r31, 0x0132
     634:	60 81       	ld	r22, Z
     636:	80 e1       	ldi	r24, 0x10	; 16
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	ec d7       	rcall	.+4056   	; 0x1614 <CDC_Device_SendByte>
     63c:	21 96       	adiw	r28, 0x01	; 1
     63e:	81 11       	cpse	r24, r1
     640:	da cf       	rjmp	.-76     	; 0x5f6 <mode_default+0x3c>
     642:	8f e2       	ldi	r24, 0x2F	; 47
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	72 de       	rcall	.-796    	; 0x32c <RingBuffer_Remove.constprop.0>
     648:	1c 13       	cpse	r17, r28
     64a:	f0 cf       	rjmp	.-32     	; 0x62c <mode_default+0x72>
     64c:	d4 cf       	rjmp	.-88     	; 0x5f6 <mode_default+0x3c>
     64e:	a8 9a       	sbi	0x15, 0	; 21
     650:	80 91 bb 01 	lds	r24, 0x01BB
     654:	88 23       	and	r24, r24
     656:	31 f0       	breq	.+12     	; 0x664 <mode_default+0xaa>
     658:	81 50       	subi	r24, 0x01	; 1
     65a:	80 93 bb 01 	sts	0x01BB, r24
     65e:	81 11       	cpse	r24, r1
     660:	01 c0       	rjmp	.+2      	; 0x664 <mode_default+0xaa>
     662:	5d 9a       	sbi	0x0b, 5	; 11
     664:	80 91 bc 01 	lds	r24, 0x01BC
     668:	88 23       	and	r24, r24
     66a:	31 f0       	breq	.+12     	; 0x678 <mode_default+0xbe>
     66c:	81 50       	subi	r24, 0x01	; 1
     66e:	80 93 bc 01 	sts	0x01BC, r24
     672:	81 11       	cpse	r24, r1
     674:	01 c0       	rjmp	.+2      	; 0x678 <mode_default+0xbe>
     676:	5c 9a       	sbi	0x0b, 4	; 11
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
					  ParserData->TotalReportItems++;
     67e:	08 95       	ret

00000680 <resetNHPbuffer>:
     680:	10 92 dd 01 	sts	0x01DD, r1
     684:	10 92 d1 01 	sts	0x01D1, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     688:	08 95       	ret

0000068a <writeToCDC>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	46 2f       	mov	r20, r22
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	20 91 20 01 	lds	r18, 0x0120
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     690:	20 ff       	sbrs	r18, 0
     692:	05 c0       	rjmp	.+10     	; 0x69e <writeToCDC+0x14>
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	bc 01       	movw	r22, r24
     698:	80 e1       	ldi	r24, 0x10	; 16
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9d d7       	rcall	.+3898   	; 0x15d8 <CDC_Device_SendData>
     69e:	80 e1       	ldi	r24, 0x10	; 16
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	df d7       	rcall	.+4030   	; 0x1662 <CDC_Device_Flush>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret

000006a8 <NHPwriteChecksum>:
     6a8:	cf 92       	push	r12
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	fa 01       	movw	r30, r20
     6b6:	8b 01       	movw	r16, r22
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	00 95       	com	r16
     6ba:	10 95       	com	r17

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	98 01       	movw	r18, r16
     6c2:	11 27       	eor	r17, r17
     6c4:	00 27       	eor	r16, r16
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	ab 01       	movw	r20, r22
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	04 2b       	or	r16, r20
     6ce:	15 2b       	or	r17, r21
     6d0:	26 2b       	or	r18, r22
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	37 2b       	or	r19, r23
     6d4:	4c e1       	ldi	r20, 0x1C	; 28
     6d6:	50 e0       	ldi	r21, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	97 e0       	ldi	r25, 0x07	; 7
     6da:	68 01       	movw	r12, r16
     6dc:	79 01       	movw	r14, r18
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	04 2e       	mov	r0, r20
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <NHPwriteChecksum+0x42>
     6e2:	f6 94       	lsr	r15
     6e4:	e7 94       	ror	r14
     6e6:	d7 94       	ror	r13
     6e8:	c7 94       	ror	r12
     6ea:	0a 94       	dec	r0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <NHPwriteChecksum+0x3a>
     6ee:	6c 2d       	mov	r22, r12
     6f0:	68 30       	cpi	r22, 0x08	; 8
     6f2:	28 f0       	brcs	.+10     	; 0x6fe <NHPwriteChecksum+0x56>
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	97 30       	cpi	r25, 0x07	; 7
     6f6:	59 f4       	brne	.+22     	; 0x70e <NHPwriteChecksum+0x66>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	c0 82       	st	Z, r12
     6fa:	96 e0       	ldi	r25, 0x06	; 6
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	08 c0       	rjmp	.+16     	; 0x70e <NHPwriteChecksum+0x66>
     6fe:	c0 82       	st	Z, r12
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	91 50       	subi	r25, 0x01	; 1
     702:	c1 10       	cpse	r12, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	04 c0       	rjmp	.+8      	; 0x70e <NHPwriteChecksum+0x66>
     706:	47 50       	subi	r20, 0x07	; 7

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	51 09       	sbc	r21, r1
     70a:	92 30       	cpi	r25, 0x02	; 2
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	31 f7       	brne	.-52     	; 0x6da <NHPwriteChecksum+0x32>
     70e:	49 2f       	mov	r20, r25
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	42 50       	subi	r20, 0x02	; 2
     712:	13 c0       	rjmp	.+38     	; 0x73a <NHPwriteChecksum+0x92>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	df 01       	movw	r26, r30
     716:	a4 0f       	add	r26, r20
     718:	b1 1d       	adc	r27, r1
     71a:	68 01       	movw	r12, r16

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	79 01       	movw	r14, r18
     71e:	e8 94       	clt
     720:	c7 f8       	bld	r12, 7
     722:	dd 24       	eor	r13, r13
     724:	ee 24       	eor	r14, r14
     726:	ff 24       	eor	r15, r15
     728:	cc 92       	st	X, r12
     72a:	b7 e0       	ldi	r27, 0x07	; 7
     72c:	36 95       	lsr	r19
     72e:	27 95       	ror	r18
     730:	17 95       	ror	r17
     732:	07 95       	ror	r16
     734:	ba 95       	dec	r27
     736:	d1 f7       	brne	.-12     	; 0x72c <NHPwriteChecksum+0x84>
     738:	41 50       	subi	r20, 0x01	; 1
     73a:	41 11       	cpse	r20, r1
     73c:	eb cf       	rjmp	.-42     	; 0x714 <NHPwriteChecksum+0x6c>
     73e:	49 2f       	mov	r20, r25
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	9a 01       	movw	r18, r20
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	22 0f       	add	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	aa 95       	dec	r26
     74c:	e1 f7       	brne	.-8      	; 0x746 <NHPwriteChecksum+0x9e>
     74e:	20 6c       	ori	r18, 0xC0	; 192
     750:	3f 6f       	ori	r19, 0xFF	; 255
     752:	30 81       	ld	r19, Z
     754:	32 2b       	or	r19, r18
     756:	30 83       	st	Z, r19
     758:	e4 0f       	add	r30, r20
     75a:	f5 1f       	adc	r31, r21
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	8f 73       	andi	r24, 0x3F	; 63
     762:	80 68       	ori	r24, 0x80	; 128
     764:	80 83       	st	Z, r24
     766:	89 2f       	mov	r24, r25
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <checkNHPControlAddressError>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <checkNHPControlAddressError+0x6>
     77c:	00 d0       	rcall	.+0      	; 0x77e <checkNHPControlAddressError+0x8>
     77e:	00 d0       	rcall	.+0      	; 0x780 <checkNHPControlAddressError+0xa>
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	60 91 bd 01 	lds	r22, 0x01BD
     788:	66 23       	and	r22, r22
     78a:	79 f0       	breq	.+30     	; 0x7aa <checkNHPControlAddressError+0x34>
     78c:	80 91 bf 01 	lds	r24, 0x01BF
     790:	81 11       	cpse	r24, r1
     792:	0b c0       	rjmp	.+22     	; 0x7aa <checkNHPControlAddressError+0x34>
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	71 60       	ori	r23, 0x01	; 1
     798:	ae 01       	movw	r20, r28
     79a:	4f 5f       	subi	r20, 0xFF	; 255
     79c:	5f 4f       	sbci	r21, 0xFF	; 255
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	83 df       	rcall	.-250    	; 0x6a8 <NHPwriteChecksum>
     7a2:	68 2f       	mov	r22, r24
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	70 df       	rcall	.-288    	; 0x68a <writeToCDC>
     7aa:	10 92 bd 01 	sts	0x01BD, r1
     7ae:	26 96       	adiw	r28, 0x06	; 6
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <NHPreadChecksum>:
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	98 2f       	mov	r25, r24
     7c6:	40 91 dd 01 	lds	r20, 0x01DD
     7ca:	e4 2f       	mov	r30, r20
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	e9 52       	subi	r30, 0x29	; 41
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	80 83       	st	Z, r24
     7d4:	80 91 dd 01 	lds	r24, 0x01DD
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	80 93 dd 01 	sts	0x01DD, r24
     7de:	89 2f       	mov	r24, r25
     7e0:	80 7c       	andi	r24, 0xC0	; 192
     7e2:	80 38       	cpi	r24, 0x80	; 128
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <NHPreadChecksum+0x28>
     7e6:	44 c0       	rjmp	.+136    	; 0x870 <NHPreadChecksum+0xb0>
     7e8:	80 3c       	cpi	r24, 0xC0	; 192
     7ea:	09 f0       	breq	.+2      	; 0x7ee <NHPreadChecksum+0x2e>
     7ec:	5f c0       	rjmp	.+190    	; 0x8ac <NHPreadChecksum+0xec>
     7ee:	29 2f       	mov	r18, r25
     7f0:	28 73       	andi	r18, 0x38	; 56
     7f2:	26 95       	lsr	r18
     7f4:	26 95       	lsr	r18
     7f6:	26 95       	lsr	r18
     7f8:	22 30       	cpi	r18, 0x02	; 2
     7fa:	08 f4       	brcc	.+2      	; 0x7fe <NHPreadChecksum+0x3e>
     7fc:	77 c0       	rjmp	.+238    	; 0x8ec <NHPreadChecksum+0x12c>
     7fe:	27 30       	cpi	r18, 0x07	; 7
     800:	79 f4       	brne	.+30     	; 0x820 <NHPreadChecksum+0x60>
     802:	49 2f       	mov	r20, r25
     804:	4f 70       	andi	r20, 0x0F	; 15
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 93 d2 01 	sts	0x01D2, r20
     810:	50 93 d3 01 	sts	0x01D3, r21
     814:	60 93 d4 01 	sts	0x01D4, r22
     818:	70 93 d5 01 	sts	0x01D5, r23
     81c:	15 e0       	ldi	r17, 0x05	; 5
     81e:	0f c0       	rjmp	.+30     	; 0x83e <NHPreadChecksum+0x7e>
     820:	89 2f       	mov	r24, r25
     822:	87 70       	andi	r24, 0x07	; 7
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	80 93 d2 01 	sts	0x01D2, r24
     82e:	90 93 d3 01 	sts	0x01D3, r25
     832:	a0 93 d4 01 	sts	0x01D4, r26
     836:	b0 93 d5 01 	sts	0x01D5, r27
     83a:	12 2f       	mov	r17, r18
     83c:	11 50       	subi	r17, 0x01	; 1
     83e:	80 91 d1 01 	lds	r24, 0x01D1
     842:	88 23       	and	r24, r24
     844:	91 f0       	breq	.+36     	; 0x86a <NHPreadChecksum+0xaa>
     846:	97 df       	rcall	.-210    	; 0x776 <checkNHPControlAddressError>
     848:	60 91 dd 01 	lds	r22, 0x01DD
     84c:	61 50       	subi	r22, 0x01	; 1
     84e:	87 ed       	ldi	r24, 0xD7	; 215
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	1b df       	rcall	.-458    	; 0x68a <writeToCDC>
     854:	e0 91 dd 01 	lds	r30, 0x01DD
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	ea 52       	subi	r30, 0x2A	; 42
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	80 81       	ld	r24, Z
     860:	80 93 d7 01 	sts	0x01D7, r24
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 dd 01 	sts	0x01DD, r24
     86a:	10 93 d1 01 	sts	0x01D1, r17
     86e:	45 c0       	rjmp	.+138    	; 0x8fa <NHPreadChecksum+0x13a>
     870:	80 91 d1 01 	lds	r24, 0x01D1
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	d1 f5       	brne	.+116    	; 0x8ec <NHPreadChecksum+0x12c>
     878:	00 91 d2 01 	lds	r16, 0x01D2
     87c:	10 91 d3 01 	lds	r17, 0x01D3
     880:	20 91 d4 01 	lds	r18, 0x01D4
     884:	30 91 d5 01 	lds	r19, 0x01D5
     888:	a9 01       	movw	r20, r18
     88a:	66 27       	eor	r22, r22
     88c:	77 27       	eor	r23, r23
     88e:	22 27       	eor	r18, r18
     890:	33 27       	eor	r19, r19
     892:	40 27       	eor	r20, r16
     894:	51 27       	eor	r21, r17
     896:	62 27       	eor	r22, r18
     898:	73 27       	eor	r23, r19
     89a:	4f 3f       	cpi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	61 05       	cpc	r22, r1
     8a0:	71 05       	cpc	r23, r1
     8a2:	21 f5       	brne	.+72     	; 0x8ec <NHPreadChecksum+0x12c>
     8a4:	89 2f       	mov	r24, r25
     8a6:	8f 73       	andi	r24, 0x3F	; 63
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	28 c0       	rjmp	.+80     	; 0x8fc <NHPreadChecksum+0x13c>
     8ac:	80 91 d1 01 	lds	r24, 0x01D1
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	e0 f0       	brcs	.+56     	; 0x8ec <NHPreadChecksum+0x12c>
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	80 93 d1 01 	sts	0x01D1, r24
     8ba:	40 91 d2 01 	lds	r20, 0x01D2
     8be:	50 91 d3 01 	lds	r21, 0x01D3
     8c2:	60 91 d4 01 	lds	r22, 0x01D4
     8c6:	70 91 d5 01 	lds	r23, 0x01D5
     8ca:	27 e0       	ldi	r18, 0x07	; 7
     8cc:	44 0f       	add	r20, r20
     8ce:	55 1f       	adc	r21, r21
     8d0:	66 1f       	adc	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	2a 95       	dec	r18
     8d6:	d1 f7       	brne	.-12     	; 0x8cc <NHPreadChecksum+0x10c>
     8d8:	49 2b       	or	r20, r25
     8da:	40 93 d2 01 	sts	0x01D2, r20
     8de:	50 93 d3 01 	sts	0x01D3, r21
     8e2:	60 93 d4 01 	sts	0x01D4, r22
     8e6:	70 93 d5 01 	sts	0x01D5, r23
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <NHPreadChecksum+0x13a>
     8ec:	44 df       	rcall	.-376    	; 0x776 <checkNHPControlAddressError>
     8ee:	60 91 dd 01 	lds	r22, 0x01DD
     8f2:	87 ed       	ldi	r24, 0xD7	; 215
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	c9 de       	rcall	.-622    	; 0x68a <writeToCDC>
     8f8:	c3 de       	rcall	.-634    	; 0x680 <resetNHPbuffer>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <checkNHPProtocol>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	1f 92       	push	r1
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	59 df       	rcall	.-334    	; 0x7c0 <NHPreadChecksum>
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <checkNHPProtocol+0x12>
     912:	76 c0       	rjmp	.+236    	; 0xa00 <checkNHPProtocol+0xfe>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	89 f5       	brne	.+98     	; 0x97a <checkNHPProtocol+0x78>
     918:	90 91 d3 01 	lds	r25, 0x01D3
     91c:	91 30       	cpi	r25, 0x01	; 1
     91e:	69 f5       	brne	.+90     	; 0x97a <checkNHPProtocol+0x78>
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	29 df       	rcall	.-430    	; 0x776 <checkNHPControlAddressError>
     924:	90 91 d2 01 	lds	r25, 0x01D2
     928:	90 93 bd 01 	sts	0x01BD, r25
     92c:	10 92 bf 01 	sts	0x01BF, r1
     930:	21 e1       	ldi	r18, 0x11	; 17
     932:	e0 ec       	ldi	r30, 0xC0	; 192
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	df 01       	movw	r26, r30
     938:	32 2f       	mov	r19, r18
     93a:	1d 92       	st	X+, r1
     93c:	3a 95       	dec	r19
     93e:	e9 f7       	brne	.-6      	; 0x93a <checkNHPProtocol+0x38>
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	95 30       	cpi	r25, 0x05	; 5
     944:	b9 f0       	breq	.+46     	; 0x974 <checkNHPProtocol+0x72>
     946:	40 f4       	brcc	.+16     	; 0x958 <checkNHPProtocol+0x56>
     948:	92 30       	cpi	r25, 0x02	; 2
     94a:	71 f0       	breq	.+28     	; 0x968 <checkNHPProtocol+0x66>
     94c:	94 30       	cpi	r25, 0x04	; 4
     94e:	61 f0       	breq	.+24     	; 0x968 <checkNHPProtocol+0x66>
     950:	91 30       	cpi	r25, 0x01	; 1
     952:	09 f0       	breq	.+2      	; 0x956 <checkNHPProtocol+0x54>
     954:	4a c0       	rjmp	.+148    	; 0x9ea <checkNHPProtocol+0xe8>
     956:	06 c0       	rjmp	.+12     	; 0x964 <checkNHPProtocol+0x62>
     958:	98 30       	cpi	r25, 0x08	; 8
     95a:	40 f0       	brcs	.+16     	; 0x96c <checkNHPProtocol+0x6a>
     95c:	9a 30       	cpi	r25, 0x0A	; 10
     95e:	08 f0       	brcs	.+2      	; 0x962 <checkNHPProtocol+0x60>
     960:	44 c0       	rjmp	.+136    	; 0x9ea <checkNHPProtocol+0xe8>
     962:	07 c0       	rjmp	.+14     	; 0x972 <checkNHPProtocol+0x70>
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	06 c0       	rjmp	.+12     	; 0x974 <checkNHPProtocol+0x72>
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	04 c0       	rjmp	.+8      	; 0x974 <checkNHPProtocol+0x72>
     96c:	20 93 be 01 	sts	0x01BE, r18
     970:	43 c0       	rjmp	.+134    	; 0x9f8 <checkNHPProtocol+0xf6>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	80 93 be 01 	sts	0x01BE, r24
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <checkNHPProtocol+0xf6>
     97a:	90 91 bd 01 	lds	r25, 0x01BD
     97e:	99 23       	and	r25, r25
     980:	b1 f1       	breq	.+108    	; 0x9ee <checkNHPProtocol+0xec>
     982:	60 91 bf 01 	lds	r22, 0x01BF
     986:	46 2f       	mov	r20, r22
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	9a 01       	movw	r18, r20
     98e:	2e 5f       	subi	r18, 0xFE	; 254
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	35 95       	asr	r19
     994:	27 95       	ror	r18
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	82 17       	cp	r24, r18
     99c:	93 07       	cpc	r25, r19
     99e:	29 f5       	brne	.+74     	; 0x9ea <checkNHPProtocol+0xe8>
     9a0:	fa 01       	movw	r30, r20
     9a2:	e0 54       	subi	r30, 0x40	; 64
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	80 91 d2 01 	lds	r24, 0x01D2
     9aa:	80 83       	st	Z, r24
     9ac:	e6 2f       	mov	r30, r22
     9ae:	ef 5f       	subi	r30, 0xFF	; 255
     9b0:	e0 93 bf 01 	sts	0x01BF, r30
     9b4:	80 91 be 01 	lds	r24, 0x01BE
     9b8:	8e 17       	cp	r24, r30
     9ba:	49 f0       	breq	.+18     	; 0x9ce <checkNHPProtocol+0xcc>
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e0 54       	subi	r30, 0x40	; 64
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	90 91 d3 01 	lds	r25, 0x01D3
     9c6:	90 83       	st	Z, r25
     9c8:	6e 5f       	subi	r22, 0xFE	; 254
     9ca:	60 93 bf 01 	sts	0x01BF, r22
     9ce:	90 91 bf 01 	lds	r25, 0x01BF
     9d2:	89 13       	cpse	r24, r25
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <checkNHPProtocol+0xf6>
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <checkNHPProtocol+0xde>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <HID_Device_USBTask>
     9e0:	80 91 bd 01 	lds	r24, 0x01BD
     9e4:	81 11       	cpse	r24, r1
     9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <checkNHPProtocol+0xd6>
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <checkNHPProtocol+0xf6>
     9ea:	c5 de       	rcall	.-630    	; 0x776 <checkNHPControlAddressError>
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <checkNHPProtocol+0xf6>
     9ee:	60 91 dd 01 	lds	r22, 0x01DD
     9f2:	87 ed       	ldi	r24, 0xD7	; 215
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	49 de       	rcall	.-878    	; 0x68a <writeToCDC>
     9f8:	0f 90       	pop	r0
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	40 ce       	rjmp	.-896    	; 0x680 <resetNHPbuffer>
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <mode_hid>:
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	69 d6       	rcall	.+3282   	; 0x16e4 <CDC_Device_ReceiveByte>
     a12:	ec 01       	movw	r28, r24
     a14:	97 fd       	sbrc	r25, 7
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <mode_hid+0x26>
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	83 dc       	rcall	.-1786   	; 0x322 <LEDs_TurnOnLEDs>
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	80 93 bc 01 	sts	0x01BC, r24
     a22:	80 91 c8 00 	lds	r24, 0x00C8
     a26:	85 ff       	sbrs	r24, 5
     a28:	fc cf       	rjmp	.-8      	; 0xa22 <mode_hid+0x1a>
     a2a:	c0 93 ce 00 	sts	0x00CE, r28
     a2e:	8f b7       	in	r24, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	c0 91 39 01 	lds	r28, 0x0139
     a36:	d0 91 3a 01 	lds	r29, 0x013A
     a3a:	8f bf       	out	0x3f, r24	; 63
     a3c:	20 97       	sbiw	r28, 0x00	; 0
     a3e:	19 f4       	brne	.+6      	; 0xa46 <mode_hid+0x3e>
     a40:	a8 99       	sbic	0x15, 0	; 21
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <mode_hid+0x56>
     a44:	28 c0       	rjmp	.+80     	; 0xa96 <mode_hid+0x8e>
     a46:	80 e2       	ldi	r24, 0x20	; 32
     a48:	6c dc       	rcall	.-1832   	; 0x322 <LEDs_TurnOnLEDs>
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	80 93 bb 01 	sts	0x01BB, r24
     a50:	8f e2       	ldi	r24, 0x2F	; 47
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	6b dc       	rcall	.-1834   	; 0x32c <RingBuffer_Remove.constprop.0>
     a56:	55 df       	rcall	.-342    	; 0x902 <checkNHPProtocol>
     a58:	21 97       	sbiw	r28, 0x01	; 1
     a5a:	d1 f7       	brne	.-12     	; 0xa50 <mode_hid+0x48>
     a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <mode_hid+0x38>
     a5e:	a8 9a       	sbi	0x15, 0	; 21
     a60:	80 91 bb 01 	lds	r24, 0x01BB
     a64:	88 23       	and	r24, r24
     a66:	69 f0       	breq	.+26     	; 0xa82 <mode_hid+0x7a>
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	80 93 bb 01 	sts	0x01BB, r24
     a6e:	81 11       	cpse	r24, r1
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <mode_hid+0x7a>
     a72:	81 de       	rcall	.-766    	; 0x776 <checkNHPControlAddressError>
     a74:	60 91 dd 01 	lds	r22, 0x01DD
     a78:	87 ed       	ldi	r24, 0xD7	; 215
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	06 de       	rcall	.-1012   	; 0x68a <writeToCDC>
     a7e:	00 de       	rcall	.-1024   	; 0x680 <resetNHPbuffer>
     a80:	5d 9a       	sbi	0x0b, 5	; 11
     a82:	80 91 bc 01 	lds	r24, 0x01BC
     a86:	88 23       	and	r24, r24
     a88:	31 f0       	breq	.+12     	; 0xa96 <mode_hid+0x8e>
     a8a:	81 50       	subi	r24, 0x01	; 1
     a8c:	80 93 bc 01 	sts	0x01BC, r24
     a90:	81 11       	cpse	r24, r1
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <mode_hid+0x8e>
     a94:	5c 9a       	sbi	0x0b, 4	; 11
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <main>:
     a9c:	61 dc       	rcall	.-1854   	; 0x360 <SetupHardware>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	80 93 2e 01 	sts	0x012E, r24
     aa4:	78 94       	sei
     aa6:	0f e2       	ldi	r16, 0x2F	; 47
     aa8:	11 e0       	ldi	r17, 0x01	; 1
     aaa:	cb e3       	ldi	r28, 0x3B	; 59
     aac:	d1 e0       	ldi	r29, 0x01	; 1
     aae:	eb eb       	ldi	r30, 0xBB	; 187
     ab0:	ee 2e       	mov	r14, r30
     ab2:	e1 e0       	ldi	r30, 0x01	; 1
     ab4:	fe 2e       	mov	r15, r30
     ab6:	f0 e8       	ldi	r31, 0x80	; 128
     ab8:	cf 2e       	mov	r12, r31
     aba:	d1 2c       	mov	r13, r1
     abc:	a2 e0       	ldi	r26, 0x02	; 2
     abe:	ba 2e       	mov	r11, r26
     ac0:	b4 e0       	ldi	r27, 0x04	; 4
     ac2:	ab 2e       	mov	r10, r27
     ac4:	80 91 2e 01 	lds	r24, 0x012E
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	d1 f1       	breq	.+116    	; 0xb40 <main+0xa4>
     acc:	30 f4       	brcc	.+12     	; 0xada <main+0x3e>
     ace:	88 23       	and	r24, r24
     ad0:	e1 f0       	breq	.+56     	; 0xb0a <main+0x6e>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <main+0x3c>
     ad6:	3c c0       	rjmp	.+120    	; 0xb50 <main+0xb4>
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <main+0x48>
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	c1 f0       	breq	.+48     	; 0xb0e <main+0x72>
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	b9 f5       	brne	.+110    	; 0xb50 <main+0xb4>
     ae2:	30 c0       	rjmp	.+96     	; 0xb44 <main+0xa8>
     ae4:	f8 01       	movw	r30, r16
     ae6:	8f b7       	in	r24, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	d1 83       	std	Z+1, r29	; 0x01
     aec:	c0 83       	st	Z, r28
     aee:	d3 83       	std	Z+3, r29	; 0x03
     af0:	c2 83       	std	Z+2, r28	; 0x02
     af2:	d5 83       	std	Z+5, r29	; 0x05
     af4:	c4 83       	std	Z+4, r28	; 0x04
     af6:	f7 82       	std	Z+7, r15	; 0x07
     af8:	e6 82       	std	Z+6, r14	; 0x06
     afa:	d1 86       	std	Z+9, r13	; 0x09
     afc:	c0 86       	std	Z+8, r12	; 0x08
     afe:	13 86       	std	Z+11, r1	; 0x0b
     b00:	12 86       	std	Z+10, r1	; 0x0a
     b02:	8f bf       	out	0x3f, r24	; 63
     b04:	10 92 2e 01 	sts	0x012E, r1
     b08:	23 c0       	rjmp	.+70     	; 0xb50 <main+0xb4>
     b0a:	57 dd       	rcall	.-1362   	; 0x5ba <mode_default>
     b0c:	21 c0       	rjmp	.+66     	; 0xb50 <main+0xb4>
     b0e:	f8 01       	movw	r30, r16
     b10:	8f b7       	in	r24, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	d1 83       	std	Z+1, r29	; 0x01
     b16:	c0 83       	st	Z, r28
     b18:	d3 83       	std	Z+3, r29	; 0x03
     b1a:	c2 83       	std	Z+2, r28	; 0x02
     b1c:	d5 83       	std	Z+5, r29	; 0x05
     b1e:	c4 83       	std	Z+4, r28	; 0x04
     b20:	f7 82       	std	Z+7, r15	; 0x07
     b22:	e6 82       	std	Z+6, r14	; 0x06
     b24:	d1 86       	std	Z+9, r13	; 0x09
     b26:	c0 86       	std	Z+8, r12	; 0x08
     b28:	13 86       	std	Z+11, r1	; 0x0b
     b2a:	12 86       	std	Z+10, r1	; 0x0a
     b2c:	8f bf       	out	0x3f, r24	; 63
     b2e:	10 92 d1 01 	sts	0x01D1, r1
     b32:	10 92 dd 01 	sts	0x01DD, r1
     b36:	10 92 bd 01 	sts	0x01BD, r1
     b3a:	b0 92 2e 01 	sts	0x012E, r11
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <main+0xb4>
     b40:	63 df       	rcall	.-314    	; 0xa08 <mode_hid>
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <main+0xb4>
     b44:	10 92 2f 01 	sts	0x012F, r1
     b48:	10 92 30 01 	sts	0x0130, r1
     b4c:	a0 92 2e 01 	sts	0x012E, r10
     b50:	80 e1       	ldi	r24, 0x10	; 16
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	b1 d5       	rcall	.+2914   	; 0x16b8 <CDC_Device_USBTask>
     b56:	ff d4       	rcall	.+2558   	; 0x1556 <USB_USBTask>
     b58:	b5 cf       	rjmp	.-150    	; 0xac4 <main+0x28>

00000b5a <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     b5a:	29 2f       	mov	r18, r25
     b5c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     b5e:	23 30       	cpi	r18, 0x03	; 3
     b60:	31 05       	cpc	r19, r1
     b62:	b1 f0       	breq	.+44     	; 0xb90 <CALLBACK_USB_GetDescriptor+0x36>
     b64:	4c f4       	brge	.+18     	; 0xb78 <CALLBACK_USB_GetDescriptor+0x1e>
     b66:	21 30       	cpi	r18, 0x01	; 1
     b68:	31 05       	cpc	r19, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <CALLBACK_USB_GetDescriptor+0x14>
     b6c:	39 c0       	rjmp	.+114    	; 0xbe0 <CALLBACK_USB_GetDescriptor+0x86>
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	09 f0       	breq	.+2      	; 0xb76 <CALLBACK_USB_GetDescriptor+0x1c>
     b74:	3a c0       	rjmp	.+116    	; 0xbea <CALLBACK_USB_GetDescriptor+0x90>
     b76:	07 c0       	rjmp	.+14     	; 0xb86 <CALLBACK_USB_GetDescriptor+0x2c>
     b78:	21 32       	cpi	r18, 0x21	; 33
     b7a:	31 05       	cpc	r19, r1
     b7c:	39 f1       	breq	.+78     	; 0xbcc <CALLBACK_USB_GetDescriptor+0x72>
     b7e:	22 32       	cpi	r18, 0x22	; 34
     b80:	31 05       	cpc	r19, r1
     b82:	49 f1       	breq	.+82     	; 0xbd6 <CALLBACK_USB_GetDescriptor+0x7c>
     b84:	32 c0       	rjmp	.+100    	; 0xbea <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
     b86:	ef e5       	ldi	r30, 0x5F	; 95
     b88:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     b8a:	8e eb       	ldi	r24, 0xBE	; 190
     b8c:	90 e0       	ldi	r25, 0x00	; 0
		Size    = sizeof(USB_Descriptor_Configuration_t);
		break;
     b8e:	31 c0       	rjmp	.+98     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     b90:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	61 f0       	breq	.+24     	; 0xbb0 <CALLBACK_USB_GetDescriptor+0x56>
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	91 05       	cpc	r25, r1
     b9c:	81 f0       	breq	.+32     	; 0xbbe <CALLBACK_USB_GetDescriptor+0x64>
     b9e:	89 2b       	or	r24, r25
     ba0:	21 f5       	brne	.+72     	; 0xbea <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size    = pgm_read_byte(&LanguageString.Header.Size);
     ba2:	ea eb       	ldi	r30, 0xBA	; 186
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e4 91       	lpm	r30, Z+
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     baa:	8a eb       	ldi	r24, 0xBA	; 186
     bac:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&LanguageString.Header.Size);
			break;
     bae:	21 c0       	rjmp	.+66     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     bb0:	e6 ea       	ldi	r30, 0xA6	; 166
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e4 91       	lpm	r30, Z+
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size    = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     bb8:	86 ea       	ldi	r24, 0xA6	; 166
     bba:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     bbc:	1a c0       	rjmp	.+52     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size    = pgm_read_byte(&ProductString.Header.Size);
     bbe:	e4 e7       	ldi	r30, 0x74	; 116
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	e4 91       	lpm	r30, Z+
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size    = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     bc6:	84 e7       	ldi	r24, 0x74	; 116
     bc8:	90 e0       	ldi	r25, 0x00	; 0
			Size    = pgm_read_byte(&ProductString.Header.Size);
			break;
     bca:	13 c0       	rjmp	.+38     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
     bcc:	e9 e0       	ldi	r30, 0x09	; 9
     bce:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     bd0:	8d e0       	ldi	r24, 0x0D	; 13
     bd2:	91 e0       	ldi	r25, 0x01	; 1
		Size    = sizeof(USB_HID_Descriptor_HID_t);
		break;
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
     bd6:	e8 eb       	ldi	r30, 0xB8	; 184
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     bda:	8f e2       	ldi	r24, 0x2F	; 47
     bdc:	91 e0       	ldi	r25, 0x01	; 1
		Size    = sizeof(HIDReport);
		break;
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
     be0:	e2 e1       	ldi	r30, 0x12	; 18
     be2:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     be4:	8d e1       	ldi	r24, 0x1D	; 29
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     bea:	e0 e0       	ldi	r30, 0x00	; 0
     bec:	f0 e0       	ldi	r31, 0x00	; 0
									const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     bf2:	da 01       	movw	r26, r20
     bf4:	8d 93       	st	X+, r24
     bf6:	9c 93       	st	X, r25
	return Size;
}
     bf8:	cf 01       	movw	r24, r30
     bfa:	08 95       	ret

00000bfc <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	7c 01       	movw	r14, r24
     c10:	8b 01       	movw	r16, r22
     c12:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c14:	d7 d1       	rcall	.+942    	; 0xfc4 <Endpoint_WaitUntilReady>
     c16:	b8 2e       	mov	r11, r24
     c18:	81 11       	cpse	r24, r1
     c1a:	32 c0       	rjmp	.+100    	; 0xc80 <Endpoint_Write_Stream_LE+0x84>
     c1c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c1e:	31 f0       	breq	.+12     	; 0xc2c <Endpoint_Write_Stream_LE+0x30>
     c20:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
     c22:	39 81       	ldd	r19, Y+1	; 0x01
     c24:	02 1b       	sub	r16, r18
     c26:	13 0b       	sbc	r17, r19
     c28:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c2a:	f3 1e       	adc	r15, r19
     c2c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c2e:	d1 2c       	mov	r13, r1
     c30:	22 c0       	rjmp	.+68     	; 0xc76 <Endpoint_Write_Stream_LE+0x7a>
     c32:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c36:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c38:	14 c0       	rjmp	.+40     	; 0xc62 <Endpoint_Write_Stream_LE+0x66>
     c3a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c3e:	8e 77       	andi	r24, 0x7E	; 126
     c40:	80 93 e8 00 	sts	0x00E8, r24
     c44:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     c46:	49 f0       	breq	.+18     	; 0xc5a <Endpoint_Write_Stream_LE+0x5e>
     c48:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	8c 0d       	add	r24, r12
     c4e:	9d 1d       	adc	r25, r13
     c50:	99 83       	std	Y+1, r25	; 0x01
     c52:	88 83       	st	Y, r24
     c54:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     c56:	b2 2e       	mov	r11, r18
     c58:	13 c0       	rjmp	.+38     	; 0xc80 <Endpoint_Write_Stream_LE+0x84>
     c5a:	b4 d1       	rcall	.+872    	; 0xfc4 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c5c:	88 23       	and	r24, r24
     c5e:	59 f0       	breq	.+22     	; 0xc76 <Endpoint_Write_Stream_LE+0x7a>
     c60:	0e c0       	rjmp	.+28     	; 0xc7e <Endpoint_Write_Stream_LE+0x82>
     c62:	f7 01       	movw	r30, r14
     c64:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c66:	7f 01       	movw	r14, r30
     c68:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c6c:	01 50       	subi	r16, 0x01	; 1
     c6e:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c70:	ff ef       	ldi	r31, 0xFF	; 255
     c72:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     c74:	df 0a       	sbc	r13, r31
     c76:	01 15       	cp	r16, r1
     c78:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c7a:	d9 f6       	brne	.-74     	; 0xc32 <Endpoint_Write_Stream_LE+0x36>
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Endpoint_Write_Stream_LE+0x84>
     c7e:	b8 2e       	mov	r11, r24
     c80:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c82:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	bf 90       	pop	r11
     c94:	08 95       	ret

00000c96 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     c96:	20 91 42 02 	lds	r18, 0x0242
     c9a:	30 91 43 02 	lds	r19, 0x0243
     c9e:	26 17       	cp	r18, r22
     ca0:	37 07       	cpc	r19, r23
     ca2:	48 f0       	brcs	.+18     	; 0xcb6 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ca4:	61 15       	cp	r22, r1
     ca6:	71 05       	cpc	r23, r1
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     caa:	20 91 e8 00 	lds	r18, 0x00E8
     cae:	2e 77       	andi	r18, 0x7E	; 126
     cb0:	20 93 e8 00 	sts	0x00E8, r18
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cb6:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cb8:	9c 01       	movw	r18, r24
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	34 c0       	rjmp	.+104    	; 0xd26 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cbe:	90 91 3b 02 	lds	r25, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cc2:	99 23       	and	r25, r25
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <Endpoint_Write_Control_Stream_LE+0x32>
     cc6:	43 c0       	rjmp	.+134    	; 0xd4e <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cc8:	95 30       	cpi	r25, 0x05	; 5
     cca:	09 f4       	brne	.+2      	; 0xcce <Endpoint_Write_Control_Stream_LE+0x38>
     ccc:	42 c0       	rjmp	.+132    	; 0xd52 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cce:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cd2:	93 fd       	sbrc	r25, 3
     cd4:	3a c0       	rjmp	.+116    	; 0xd4a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cd6:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     cda:	92 fd       	sbrc	r25, 2
     cdc:	30 c0       	rjmp	.+96     	; 0xd3e <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cde:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ce2:	90 ff       	sbrs	r25, 0
     ce4:	20 c0       	rjmp	.+64     	; 0xd26 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ce6:	80 91 f2 00 	lds	r24, 0x00F2
     cea:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cec:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     cee:	82 1b       	sub	r24, r18
     cf0:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cf4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cf6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     cfa:	61 50       	subi	r22, 0x01	; 1
     cfc:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     cfe:	9f 01       	movw	r18, r30
     d00:	28 0f       	add	r18, r24
     d02:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d04:	61 15       	cp	r22, r1
     d06:	71 05       	cpc	r23, r1
     d08:	19 f0       	breq	.+6      	; 0xd10 <Endpoint_Write_Control_Stream_LE+0x7a>
     d0a:	28 30       	cpi	r18, 0x08	; 8
     d0c:	31 05       	cpc	r19, r1
     d0e:	90 f3       	brcs	.-28     	; 0xcf4 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	28 30       	cpi	r18, 0x08	; 8
     d14:	31 05       	cpc	r19, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <Endpoint_Write_Control_Stream_LE+0x84>
     d18:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d1a:	90 91 e8 00 	lds	r25, 0x00E8
     d1e:	9e 77       	andi	r25, 0x7E	; 126
     d20:	90 93 e8 00 	sts	0x00E8, r25
     d24:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d26:	61 15       	cp	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	49 f6       	brne	.-110    	; 0xcbe <Endpoint_Write_Control_Stream_LE+0x28>
     d2c:	81 11       	cpse	r24, r1
     d2e:	c7 cf       	rjmp	.-114    	; 0xcbe <Endpoint_Write_Control_Stream_LE+0x28>
     d30:	06 c0       	rjmp	.+12     	; 0xd3e <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d32:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d36:	88 23       	and	r24, r24
     d38:	51 f0       	breq	.+20     	; 0xd4e <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d3a:	85 30       	cpi	r24, 0x05	; 5
     d3c:	51 f0       	breq	.+20     	; 0xd52 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d3e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d42:	82 ff       	sbrs	r24, 2
     d44:	f6 cf       	rjmp	.-20     	; 0xd32 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d52:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d54:	08 95       	ret

00000d56 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     d56:	61 15       	cp	r22, r1
     d58:	71 05       	cpc	r23, r1
     d5a:	29 f4       	brne	.+10     	; 0xd66 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d5c:	20 91 e8 00 	lds	r18, 0x00E8
     d60:	2b 77       	andi	r18, 0x7B	; 123
     d62:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     d66:	9c 01       	movw	r18, r24
     d68:	21 c0       	rjmp	.+66     	; 0xdac <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d6a:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d6e:	88 23       	and	r24, r24
     d70:	81 f1       	breq	.+96     	; 0xdd2 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	41 f1       	breq	.+80     	; 0xdc6 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d76:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d7a:	83 fd       	sbrc	r24, 3
     d7c:	26 c0       	rjmp	.+76     	; 0xdca <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d7e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     d82:	82 ff       	sbrs	r24, 2
     d84:	f2 cf       	rjmp	.-28     	; 0xd6a <Endpoint_Read_Control_Stream_LE+0x14>
     d86:	f9 01       	movw	r30, r18
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d8a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d8e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d90:	9f 01       	movw	r18, r30
				Length--;
     d92:	61 50       	subi	r22, 0x01	; 1
     d94:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     d96:	29 f0       	breq	.+10     	; 0xda2 <Endpoint_Read_Control_Stream_LE+0x4c>
     d98:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d9a:	80 91 f2 00 	lds	r24, 0x00F2
     d9e:	81 11       	cpse	r24, r1
     da0:	f4 cf       	rjmp	.-24     	; 0xd8a <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     da2:	80 91 e8 00 	lds	r24, 0x00E8
     da6:	8b 77       	andi	r24, 0x7B	; 123
     da8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     dac:	61 15       	cp	r22, r1
     dae:	71 05       	cpc	r23, r1
     db0:	e1 f6       	brne	.-72     	; 0xd6a <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     db2:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     db6:	80 fd       	sbrc	r24, 0
     db8:	0a c0       	rjmp	.+20     	; 0xdce <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dba:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dbe:	88 23       	and	r24, r24
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	b1 f7       	brne	.-20     	; 0xdb2 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     dd4:	08 95       	ret

00000dd6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     dd6:	20 91 42 02 	lds	r18, 0x0242
     dda:	30 91 43 02 	lds	r19, 0x0243
     dde:	26 17       	cp	r18, r22
     de0:	37 07       	cpc	r19, r23
     de2:	48 f0       	brcs	.+18     	; 0xdf6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     de4:	61 15       	cp	r22, r1
     de6:	71 05       	cpc	r23, r1
     de8:	39 f4       	brne	.+14     	; 0xdf8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dea:	20 91 e8 00 	lds	r18, 0x00E8
     dee:	2e 77       	andi	r18, 0x7E	; 126
     df0:	20 93 e8 00 	sts	0x00E8, r18
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     df6:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     df8:	9c 01       	movw	r18, r24
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	35 c0       	rjmp	.+106    	; 0xe68 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dfe:	90 91 3b 02 	lds	r25, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e02:	99 23       	and	r25, r25
     e04:	09 f4       	brne	.+2      	; 0xe08 <Endpoint_Write_Control_PStream_LE+0x32>
     e06:	44 c0       	rjmp	.+136    	; 0xe90 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e08:	95 30       	cpi	r25, 0x05	; 5
     e0a:	09 f4       	brne	.+2      	; 0xe0e <Endpoint_Write_Control_PStream_LE+0x38>
     e0c:	43 c0       	rjmp	.+134    	; 0xe94 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e0e:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e12:	93 fd       	sbrc	r25, 3
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e16:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e1a:	92 fd       	sbrc	r25, 2
     e1c:	31 c0       	rjmp	.+98     	; 0xe80 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e1e:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e22:	90 ff       	sbrs	r25, 0
     e24:	21 c0       	rjmp	.+66     	; 0xe68 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e26:	80 91 f2 00 	lds	r24, 0x00F2
     e2a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e2c:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     e2e:	82 1b       	sub	r24, r18
     e30:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e32:	06 c0       	rjmp	.+12     	; 0xe40 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e34:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e36:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e3a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     e3c:	61 50       	subi	r22, 0x01	; 1
     e3e:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     e40:	9c 01       	movw	r18, r24
     e42:	2e 0f       	add	r18, r30
     e44:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e46:	61 15       	cp	r22, r1
     e48:	71 05       	cpc	r23, r1
     e4a:	19 f0       	breq	.+6      	; 0xe52 <Endpoint_Write_Control_PStream_LE+0x7c>
     e4c:	28 30       	cpi	r18, 0x08	; 8
     e4e:	31 05       	cpc	r19, r1
     e50:	88 f3       	brcs	.-30     	; 0xe34 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	28 30       	cpi	r18, 0x08	; 8
     e56:	31 05       	cpc	r19, r1
     e58:	09 f0       	breq	.+2      	; 0xe5c <Endpoint_Write_Control_PStream_LE+0x86>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5c:	90 91 e8 00 	lds	r25, 0x00E8
     e60:	9e 77       	andi	r25, 0x7E	; 126
     e62:	90 93 e8 00 	sts	0x00E8, r25
     e66:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e68:	61 15       	cp	r22, r1
     e6a:	71 05       	cpc	r23, r1
     e6c:	41 f6       	brne	.-112    	; 0xdfe <Endpoint_Write_Control_PStream_LE+0x28>
     e6e:	81 11       	cpse	r24, r1
     e70:	c6 cf       	rjmp	.-116    	; 0xdfe <Endpoint_Write_Control_PStream_LE+0x28>
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e74:	80 91 3b 02 	lds	r24, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e78:	88 23       	and	r24, r24
     e7a:	51 f0       	breq	.+20     	; 0xe90 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	51 f0       	breq	.+20     	; 0xe94 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e80:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e84:	82 ff       	sbrs	r24, 2
     e86:	f6 cf       	rjmp	.-20     	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e94:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e96:	08 95       	ret

00000e98 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     e98:	98 2f       	mov	r25, r24
     e9a:	2c c0       	rjmp	.+88     	; 0xef4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e9c:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     ea0:	98 17       	cp	r25, r24
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     ea4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     ea8:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     eac:	50 91 f0 00 	lds	r21, 0x00F0
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     eb2:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     eb4:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     eb6:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     eb8:	21 fd       	sbrc	r18, 1
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ebc:	9f 5f       	subi	r25, 0xFF	; 255
     ebe:	1a c0       	rjmp	.+52     	; 0xef4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ec0:	30 91 eb 00 	lds	r19, 0x00EB
     ec4:	3e 7f       	andi	r19, 0xFE	; 254
     ec6:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     eca:	30 91 ed 00 	lds	r19, 0x00ED
     ece:	3d 7f       	andi	r19, 0xFD	; 253
     ed0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     ed4:	30 91 eb 00 	lds	r19, 0x00EB
     ed8:	31 60       	ori	r19, 0x01	; 1
     eda:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     ede:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     ee2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     ee6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     eea:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     eee:	27 fd       	sbrc	r18, 7
     ef0:	e5 cf       	rjmp	.-54     	; 0xebc <Endpoint_ConfigureEndpoint_Prv+0x24>
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ef4:	95 30       	cpi	r25, 0x05	; 5
     ef6:	90 f2       	brcs	.-92     	; 0xe9c <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ef8:	8f 70       	andi	r24, 0x0F	; 15
     efa:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     f02:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     f04:	08 95       	ret

00000f06 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	06 2f       	mov	r16, r22
     f10:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	2e c0       	rjmp	.+92     	; 0xf72 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
     f16:	98 81       	ld	r25, Y
     f18:	91 11       	cpse	r25, r1
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     f1c:	1f 5f       	subi	r17, 0xFF	; 255
     f1e:	25 96       	adiw	r28, 0x05	; 5
     f20:	28 c0       	rjmp	.+80     	; 0xf72 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	e9 81       	ldd	r30, Y+1	; 0x01
     f26:	fa 81       	ldd	r31, Y+2	; 0x02
     f28:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     f2a:	89 2f       	mov	r24, r25
     f2c:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	10 f0       	brcs	.+4      	; 0xf36 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	21 c0       	rjmp	.+66     	; 0xf78 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	10 f0       	brcs	.+4      	; 0xf3e <Endpoint_ConfigureEndpointTable+0x38>
     f3a:	56 e0       	ldi	r21, 0x06	; 6
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <Endpoint_ConfigureEndpointTable+0x3a>
     f3e:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     f40:	28 e0       	ldi	r18, 0x08	; 8
     f42:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     f48:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     f4e:	2e 17       	cp	r18, r30
     f50:	3f 07       	cpc	r19, r31
     f52:	d0 f3       	brcs	.-12     	; 0xf48 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     f54:	42 95       	swap	r20
     f56:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f58:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     f5a:	99 1f       	adc	r25, r25
     f5c:	99 27       	eor	r25, r25
     f5e:	99 1f       	adc	r25, r25
     f60:	62 95       	swap	r22
     f62:	66 0f       	add	r22, r22
     f64:	66 0f       	add	r22, r22
     f66:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f68:	69 2b       	or	r22, r25
     f6a:	96 df       	rcall	.-212    	; 0xe98 <Endpoint_ConfigureEndpoint_Prv>
     f6c:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     f6e:	d6 cf       	rjmp	.-84     	; 0xf1c <Endpoint_ConfigureEndpointTable+0x16>
     f70:	e0 cf       	rjmp	.-64     	; 0xf32 <Endpoint_ConfigureEndpointTable+0x2c>
     f72:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     f74:	d0 cf       	rjmp	.-96     	; 0xf16 <Endpoint_ConfigureEndpointTable+0x10>
     f76:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     f78:	df 91       	pop	r29
}
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     f82:	80 91 3c 02 	lds	r24, 0x023C
     f86:	87 fd       	sbrc	r24, 7
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f8a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     f8e:	80 ff       	sbrs	r24, 0
     f90:	0e c0       	rjmp	.+28     	; 0xfae <Endpoint_ClearStatusStage+0x2c>
     f92:	12 c0       	rjmp	.+36     	; 0xfb8 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f94:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     f98:	82 fd       	sbrc	r24, 2
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     f9c:	80 91 3b 02 	lds	r24, 0x023B
     fa0:	81 11       	cpse	r24, r1
     fa2:	f8 cf       	rjmp	.-16     	; 0xf94 <Endpoint_ClearStatusStage+0x12>
     fa4:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fa6:	80 91 e8 00 	lds	r24, 0x00E8
     faa:	8b 77       	andi	r24, 0x7B	; 123
     fac:	08 c0       	rjmp	.+16     	; 0xfbe <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     fae:	80 91 3b 02 	lds	r24, 0x023B
     fb2:	81 11       	cpse	r24, r1
     fb4:	ea cf       	rjmp	.-44     	; 0xf8a <Endpoint_ClearStatusStage+0x8>
     fb6:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb8:	80 91 e8 00 	lds	r24, 0x00E8
     fbc:	8e 77       	andi	r24, 0x7E	; 126
     fbe:	80 93 e8 00 	sts	0x00E8, r24
     fc2:	08 95       	ret

00000fc4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fc4:	80 91 e4 00 	lds	r24, 0x00E4
     fc8:	90 91 e5 00 	lds	r25, 0x00E5
     fcc:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fce:	20 91 ec 00 	lds	r18, 0x00EC
     fd2:	20 fd       	sbrc	r18, 0
     fd4:	1f c0       	rjmp	.+62     	; 0x1014 <Endpoint_WaitUntilReady+0x50>
     fd6:	23 c0       	rjmp	.+70     	; 0x101e <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fd8:	20 91 3b 02 	lds	r18, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fdc:	22 23       	and	r18, r18
     fde:	91 f0       	breq	.+36     	; 0x1004 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fe0:	25 30       	cpi	r18, 0x05	; 5
     fe2:	91 f0       	breq	.+36     	; 0x1008 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     fe4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     fe8:	25 fd       	sbrc	r18, 5
     fea:	10 c0       	rjmp	.+32     	; 0x100c <Endpoint_WaitUntilReady+0x48>
     fec:	20 91 e4 00 	lds	r18, 0x00E4
     ff0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ff4:	28 17       	cp	r18, r24
     ff6:	39 07       	cpc	r19, r25
     ff8:	51 f3       	breq	.-44     	; 0xfce <Endpoint_WaitUntilReady+0xa>
     ffa:	41 50       	subi	r20, 0x01	; 1
     ffc:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ffe:	39 f7       	brne	.-50     	; 0xfce <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1014:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1018:	20 ff       	sbrs	r18, 0
    101a:	de cf       	rjmp	.-68     	; 0xfd8 <Endpoint_WaitUntilReady+0x14>
    101c:	f9 cf       	rjmp	.-14     	; 0x1010 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    101e:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1022:	22 ff       	sbrs	r18, 2
    1024:	d9 cf       	rjmp	.-78     	; 0xfd8 <Endpoint_WaitUntilReady+0x14>
    1026:	f4 cf       	rjmp	.-24     	; 0x1010 <Endpoint_WaitUntilReady+0x4c>

00001028 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1028:	41 d0       	rcall	.+130    	; 0x10ac <USB_INT_DisableAllInterrupts>
    102a:	43 d0       	rcall	.+134    	; 0x10b2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    102c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1030:	8f 77       	andi	r24, 0x7F	; 127
    1032:	80 93 d8 00 	sts	0x00D8, r24
    1036:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    103a:	80 68       	ori	r24, 0x80	; 128
    103c:	80 93 d8 00 	sts	0x00D8, r24
    1040:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1044:	8f 7d       	andi	r24, 0xDF	; 223
    1046:	80 93 d8 00 	sts	0x00D8, r24
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1052:	09 b4       	in	r0, 0x29	; 41
    1054:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1056:	fd cf       	rjmp	.-6      	; 0x1052 <USB_ResetInterface+0x2a>
    1058:	10 92 3b 02 	sts	0x023B, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    105c:	10 92 37 02 	sts	0x0237, r1
	USB_Device_ConfigurationNumber  = 0;
    1060:	10 92 39 02 	sts	0x0239, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1064:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1068:	42 e0       	ldi	r20, 0x02	; 2
    106a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	14 df       	rcall	.-472    	; 0xe98 <Endpoint_ConfigureEndpoint_Prv>
    1070:	80 91 e1 00 	lds	r24, 0x00E1
    1074:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1076:	80 93 e1 00 	sts	0x00E1, r24
    107a:	80 91 e2 00 	lds	r24, 0x00E2
    107e:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1080:	80 93 e2 00 	sts	0x00E2, r24
    1084:	80 91 e2 00 	lds	r24, 0x00E2
    1088:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    108a:	80 93 e2 00 	sts	0x00E2, r24
    108e:	80 91 e0 00 	lds	r24, 0x00E0
    1092:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1094:	80 93 e0 00 	sts	0x00E0, r24
    1098:	08 95       	ret

0000109a <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    109a:	e3 e6       	ldi	r30, 0x63	; 99
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8e 7f       	andi	r24, 0xFE	; 254
    10a2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 3a 02 	sts	0x023A, r24

	USB_ResetInterface();
    10aa:	be cf       	rjmp	.-132    	; 0x1028 <USB_ResetInterface>

000010ac <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    10ac:	10 92 e2 00 	sts	0x00E2, r1
    10b0:	08 95       	ret

000010b2 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    10b2:	10 92 e1 00 	sts	0x00E1, r1
    10b6:	08 95       	ret

000010b8 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    10da:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    10de:	82 ff       	sbrs	r24, 2
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    10e2:	80 91 e2 00 	lds	r24, 0x00E2
    10e6:	82 ff       	sbrs	r24, 2
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    10ea:	80 91 e1 00 	lds	r24, 0x00E1
    10ee:	8b 7f       	andi	r24, 0xFB	; 251
    10f0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    10f4:	2e da       	rcall	.-2980   	; 0x552 <EVENT_USB_Device_StartOfFrame>
    10f6:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    10fa:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <__vector_11+0x74>
    10fe:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1102:	80 ff       	sbrs	r24, 0
    1104:	13 c0       	rjmp	.+38     	; 0x112c <__vector_11+0x74>
    1106:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	80 93 e2 00 	sts	0x00E2, r24
    1110:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1114:	80 61       	ori	r24, 0x10	; 16
    1116:	80 93 e2 00 	sts	0x00E2, r24
    111a:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	80 93 d8 00 	sts	0x00D8, r24
    1124:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1126:	10 92 3b 02 	sts	0x023B, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    112a:	56 d9       	rcall	.-3412   	; 0x3d8 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
    112c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1130:	84 ff       	sbrs	r24, 4
    1132:	2f c0       	rjmp	.+94     	; 0x1192 <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1134:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1138:	84 ff       	sbrs	r24, 4
    113a:	2b c0       	rjmp	.+86     	; 0x1192 <__vector_11+0xda>
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1140:	86 e0       	ldi	r24, 0x06	; 6
    1142:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1144:	09 b4       	in	r0, 0x29	; 41
    1146:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1148:	fd cf       	rjmp	.-6      	; 0x1144 <__vector_11+0x8c>
    114a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	80 93 d8 00 	sts	0x00D8, r24
    1154:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1158:	8f 7e       	andi	r24, 0xEF	; 239
    115a:	80 93 e1 00 	sts	0x00E1, r24
    115e:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1162:	8f 7e       	andi	r24, 0xEF	; 239
    1164:	80 93 e2 00 	sts	0x00E2, r24
    1168:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	80 93 e2 00 	sts	0x00E2, r24
    1172:	80 91 37 02 	lds	r24, 0x0237
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1176:	88 23       	and	r24, r24
    1178:	11 f0       	breq	.+4      	; 0x117e <__vector_11+0xc6>
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	07 c0       	rjmp	.+14     	; 0x118c <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    117e:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1182:	87 ff       	sbrs	r24, 7
    1184:	02 c0       	rjmp	.+4      	; 0x118a <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	01 c0       	rjmp	.+2      	; 0x118c <__vector_11+0xd4>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 3b 02 	sts	0x023B, r24
    1190:	22 d9       	rcall	.-3516   	; 0x3d6 <EVENT_USB_Device_Connect>
    1192:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1196:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <__vector_11+0x130>
    119a:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    119e:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    11a0:	23 c0       	rjmp	.+70     	; 0x11e8 <__vector_11+0x130>
    11a2:	80 91 e1 00 	lds	r24, 0x00E1
    11a6:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    11a8:	80 93 e1 00 	sts	0x00E1, r24
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	80 93 3b 02 	sts	0x023B, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    11b2:	10 92 37 02 	sts	0x0237, r1
    11b6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    11ba:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11bc:	80 93 e1 00 	sts	0x00E1, r24
    11c0:	80 91 e2 00 	lds	r24, 0x00E2
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    11c6:	80 93 e2 00 	sts	0x00E2, r24
    11ca:	80 91 e2 00 	lds	r24, 0x00E2
    11ce:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    11d0:	80 93 e2 00 	sts	0x00E2, r24
    11d4:	42 e0       	ldi	r20, 0x02	; 2
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11da:	5e de       	rcall	.-836    	; 0xe98 <Endpoint_ConfigureEndpoint_Prv>
    11dc:	80 91 f0 00 	lds	r24, 0x00F0
    11e0:	88 60       	ori	r24, 0x08	; 8
    11e2:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    11e6:	b6 d1       	rcall	.+876    	; 0x1554 <USB_Event_Stub>
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	cf 93       	push	r28
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    122e:	80 91 e9 00 	lds	r24, 0x00E9
    1232:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1234:	90 91 ec 00 	lds	r25, 0x00EC
    1238:	90 ff       	sbrs	r25, 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <__vector_12+0x36>
    123c:	90 e8       	ldi	r25, 0x80	; 128
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <__vector_12+0x38>
    1240:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1242:	c9 2f       	mov	r28, r25
    1244:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1246:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    124a:	80 91 f0 00 	lds	r24, 0x00F0
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1254:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1256:	1c d0       	rcall	.+56     	; 0x1290 <USB_Device_ProcessControlRequest>
    1258:	10 92 e9 00 	sts	0x00E9, r1
    125c:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	80 93 f0 00 	sts	0x00F0, r24
    1266:	cf 70       	andi	r28, 0x0F	; 15
    1268:	c0 93 e9 00 	sts	0x00E9, r28
    126c:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    126e:	ef 91       	pop	r30
    1270:	cf 91       	pop	r28
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	ac 97       	sbiw	r28, 0x2c	; 44
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    12a6:	ec e3       	ldi	r30, 0x3C	; 60
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12aa:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    12ae:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    12b0:	22 e0       	ldi	r18, 0x02	; 2
    12b2:	e4 34       	cpi	r30, 0x44	; 68
    12b4:	f2 07       	cpc	r31, r18
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    12b8:	44 d9       	rcall	.-3448   	; 0x542 <EVENT_USB_Device_ControlRequest>
    12ba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12be:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    12c0:	31 c1       	rjmp	.+610    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    12c2:	80 91 3c 02 	lds	r24, 0x023C
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    12c6:	90 91 3d 02 	lds	r25, 0x023D

		switch (USB_ControlRequest.bRequest)
    12ca:	95 30       	cpi	r25, 0x05	; 5
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <USB_Device_ProcessControlRequest+0x40>
    12ce:	87 c0       	rjmp	.+270    	; 0x13de <USB_Device_ProcessControlRequest+0x14e>
    12d0:	38 f4       	brcc	.+14     	; 0x12e0 <USB_Device_ProcessControlRequest+0x50>
    12d2:	91 30       	cpi	r25, 0x01	; 1
    12d4:	b1 f1       	breq	.+108    	; 0x1342 <USB_Device_ProcessControlRequest+0xb2>
    12d6:	70 f0       	brcs	.+28     	; 0x12f4 <USB_Device_ProcessControlRequest+0x64>
    12d8:	93 30       	cpi	r25, 0x03	; 3
    12da:	09 f0       	breq	.+2      	; 0x12de <USB_Device_ProcessControlRequest+0x4e>
    12dc:	23 c1       	rjmp	.+582    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    12de:	31 c0       	rjmp	.+98     	; 0x1342 <USB_Device_ProcessControlRequest+0xb2>
    12e0:	98 30       	cpi	r25, 0x08	; 8
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <USB_Device_ProcessControlRequest+0x56>
    12e4:	f3 c0       	rjmp	.+486    	; 0x14cc <USB_Device_ProcessControlRequest+0x23c>
    12e6:	99 30       	cpi	r25, 0x09	; 9
    12e8:	09 f4       	brne	.+2      	; 0x12ec <USB_Device_ProcessControlRequest+0x5c>
    12ea:	ff c0       	rjmp	.+510    	; 0x14ea <USB_Device_ProcessControlRequest+0x25a>
    12ec:	96 30       	cpi	r25, 0x06	; 6
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <USB_Device_ProcessControlRequest+0x62>
    12f0:	19 c1       	rjmp	.+562    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    12f2:	9b c0       	rjmp	.+310    	; 0x142a <USB_Device_ProcessControlRequest+0x19a>
    12f4:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12f6:	21 f0       	breq	.+8      	; 0x1300 <USB_Device_ProcessControlRequest+0x70>
    12f8:	82 38       	cpi	r24, 0x82	; 130
    12fa:	09 f0       	breq	.+2      	; 0x12fe <USB_Device_ProcessControlRequest+0x6e>
    12fc:	13 c1       	rjmp	.+550    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <USB_Device_ProcessControlRequest+0x80>
    1300:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1304:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1308:	99 23       	and	r25, r25
    130a:	89 f0       	breq	.+34     	; 0x132e <USB_Device_ProcessControlRequest+0x9e>
    130c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    130e:	0f c0       	rjmp	.+30     	; 0x132e <USB_Device_ProcessControlRequest+0x9e>
    1310:	80 91 40 02 	lds	r24, 0x0240
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1314:	90 91 41 02 	lds	r25, 0x0241
    1318:	8f 70       	andi	r24, 0x0F	; 15
    131a:	99 27       	eor	r25, r25
    131c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1320:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1324:	85 fb       	bst	r24, 5
    1326:	88 27       	eor	r24, r24
    1328:	80 f9       	bld	r24, 0
    132a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1332:	97 7f       	andi	r25, 0xF7	; 247
    1334:	90 93 e8 00 	sts	0x00E8, r25
    1338:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    133c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    1340:	d0 c0       	rjmp	.+416    	; 0x14e2 <USB_Device_ProcessControlRequest+0x252>
    1342:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1344:	19 f0       	breq	.+6      	; 0x134c <USB_Device_ProcessControlRequest+0xbc>
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	09 f0       	breq	.+2      	; 0x134c <USB_Device_ProcessControlRequest+0xbc>
    134a:	ec c0       	rjmp	.+472    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    134c:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    134e:	21 f0       	breq	.+8      	; 0x1358 <USB_Device_ProcessControlRequest+0xc8>
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	09 f0       	breq	.+2      	; 0x1356 <USB_Device_ProcessControlRequest+0xc6>
    1354:	e7 c0       	rjmp	.+462    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    1356:	0b c0       	rjmp	.+22     	; 0x136e <USB_Device_ProcessControlRequest+0xde>
    1358:	80 91 3e 02 	lds	r24, 0x023E
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	09 f0       	breq	.+2      	; 0x1362 <USB_Device_ProcessControlRequest+0xd2>
    1360:	e1 c0       	rjmp	.+450    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    1362:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1364:	09 f0       	breq	.+2      	; 0x1368 <USB_Device_ProcessControlRequest+0xd8>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	80 93 39 02 	sts	0x0239, r24
    136c:	2f c0       	rjmp	.+94     	; 0x13cc <USB_Device_ProcessControlRequest+0x13c>
    136e:	80 91 3e 02 	lds	r24, 0x023E

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1372:	81 11       	cpse	r24, r1
    1374:	2b c0       	rjmp	.+86     	; 0x13cc <USB_Device_ProcessControlRequest+0x13c>
    1376:	80 91 40 02 	lds	r24, 0x0240
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    137a:	90 91 41 02 	lds	r25, 0x0241
    137e:	8f 70       	andi	r24, 0x0F	; 15
    1380:	99 27       	eor	r25, r25
    1382:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1384:	09 f4       	brne	.+2      	; 0x1388 <USB_Device_ProcessControlRequest+0xf8>
    1386:	ce c0       	rjmp	.+412    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    1388:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    138c:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1390:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1392:	1c c0       	rjmp	.+56     	; 0x13cc <USB_Device_ProcessControlRequest+0x13c>
    1394:	20 91 3d 02 	lds	r18, 0x023D
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1398:	23 30       	cpi	r18, 0x03	; 3
    139a:	21 f4       	brne	.+8      	; 0x13a4 <USB_Device_ProcessControlRequest+0x114>
    139c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <USB_Device_ProcessControlRequest+0x138>
    13a4:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    13a8:	90 61       	ori	r25, 0x10	; 16
    13aa:	90 93 eb 00 	sts	0x00EB, r25
    13ae:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <USB_Device_ProcessControlRequest+0x126>
    13b4:	22 0f       	add	r18, r18
    13b6:	8a 95       	dec	r24
    13b8:	ea f7       	brpl	.-6      	; 0x13b4 <USB_Device_ProcessControlRequest+0x124>
    13ba:	20 93 ea 00 	sts	0x00EA, r18
    13be:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    13c2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	80 93 eb 00 	sts	0x00EB, r24
    13cc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d4:	87 7f       	andi	r24, 0xF7	; 247
    13d6:	80 93 e8 00 	sts	0x00E8, r24
    13da:	d3 dd       	rcall	.-1114   	; 0xf82 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    13dc:	a3 c0       	rjmp	.+326    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    13de:	81 11       	cpse	r24, r1
    13e0:	a1 c0       	rjmp	.+322    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    13e2:	80 91 3e 02 	lds	r24, 0x023E
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    13e6:	90 91 3f 02 	lds	r25, 0x023F
    13ea:	8f 77       	andi	r24, 0x7F	; 127
    13ec:	99 27       	eor	r25, r25
    13ee:	18 2f       	mov	r17, r24
    13f0:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    13f4:	90 78       	andi	r25, 0x80	; 128
    13f6:	98 2b       	or	r25, r24
    13f8:	90 93 e3 00 	sts	0x00E3, r25
    13fc:	80 91 e8 00 	lds	r24, 0x00E8
    1400:	87 7f       	andi	r24, 0xF7	; 247
    1402:	80 93 e8 00 	sts	0x00E8, r24
    1406:	bd dd       	rcall	.-1158   	; 0xf82 <Endpoint_ClearStatusStage>
    1408:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    140c:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    140e:	fc cf       	rjmp	.-8      	; 0x1408 <USB_Device_ProcessControlRequest+0x178>
    1410:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    1414:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1416:	80 93 e3 00 	sts	0x00E3, r24
    141a:	11 23       	and	r17, r17
    141c:	11 f0       	breq	.+4      	; 0x1422 <USB_Device_ProcessControlRequest+0x192>
    141e:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <USB_Device_ProcessControlRequest+0x194>
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	80 93 3b 02 	sts	0x023B, r24
    1428:	7d c0       	rjmp	.+250    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    142a:	80 58       	subi	r24, 0x80	; 128
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	08 f0       	brcs	.+2      	; 0x1432 <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1430:	79 c0       	rjmp	.+242    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    1432:	80 91 3e 02 	lds	r24, 0x023E
    1436:	90 91 3f 02 	lds	r25, 0x023F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    143a:	8c 3d       	cpi	r24, 0xDC	; 220
    143c:	23 e0       	ldi	r18, 0x03	; 3
    143e:	92 07       	cpc	r25, r18
    1440:	71 f5       	brne	.+92     	; 0x149e <USB_Device_ProcessControlRequest+0x20e>
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    144c:	f8 94       	cli
    144e:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1450:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1452:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1454:	3e e0       	ldi	r19, 0x0E	; 14
    1456:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1458:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    145a:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    145c:	50 93 57 00 	sts	0x0057, r21
    1460:	e4 91       	lpm	r30, Z+
    1462:	20 ff       	sbrs	r18, 0
    1464:	03 c0       	rjmp	.+6      	; 0x146c <USB_Device_ProcessControlRequest+0x1dc>
    1466:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    1468:	ef 70       	andi	r30, 0x0F	; 15
    146a:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    146c:	ef 70       	andi	r30, 0x0F	; 15
    146e:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    1470:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    1472:	ea 30       	cpi	r30, 0x0A	; 10
    1474:	10 f0       	brcs	.+4      	; 0x147a <USB_Device_ProcessControlRequest+0x1ea>
    1476:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1478:	01 c0       	rjmp	.+2      	; 0x147c <USB_Device_ProcessControlRequest+0x1ec>
    147a:	c0 96       	adiw	r24, 0x30	; 48
    147c:	8d 93       	st	X+, r24
    147e:	9d 93       	st	X+, r25
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	24 31       	cpi	r18, 0x14	; 20
    1484:	49 f7       	brne	.-46     	; 0x1458 <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1486:	4f bf       	out	0x3f, r20	; 63
    1488:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    148c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    148e:	80 93 e8 00 	sts	0x00E8, r24
    1492:	6a e2       	ldi	r22, 0x2A	; 42
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	fd db       	rcall	.-2054   	; 0xc96 <Endpoint_Write_Control_Stream_LE>
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <USB_Device_ProcessControlRequest+0x230>
    149e:	ae 01       	movw	r20, r28
    14a0:	45 5d       	subi	r20, 0xD5	; 213
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	60 91 40 02 	lds	r22, 0x0240
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    14a8:	58 db       	rcall	.-2384   	; 0xb5a <CALLBACK_USB_GetDescriptor>
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	d9 f1       	breq	.+118    	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    14ae:	20 91 e8 00 	lds	r18, 0x00E8
    14b2:	27 7f       	andi	r18, 0xF7	; 247
    14b4:	20 93 e8 00 	sts	0x00E8, r18
    14b8:	bc 01       	movw	r22, r24
    14ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    14bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14be:	8b dc       	rcall	.-1770   	; 0xdd6 <Endpoint_Write_Control_PStream_LE>
    14c0:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    14c4:	8b 77       	andi	r24, 0x7B	; 123
    14c6:	80 93 e8 00 	sts	0x00E8, r24
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14cc:	80 38       	cpi	r24, 0x80	; 128
    14ce:	51 f5       	brne	.+84     	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
    14d0:	80 91 e8 00 	lds	r24, 0x00E8
    14d4:	87 7f       	andi	r24, 0xF7	; 247
    14d6:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    14da:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14de:	80 93 f1 00 	sts	0x00F1, r24
    14e2:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    14e6:	8e 77       	andi	r24, 0x7E	; 126
    14e8:	76 cf       	rjmp	.-276    	; 0x13d6 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14ea:	81 11       	cpse	r24, r1
    14ec:	1b c0       	rjmp	.+54     	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ee:	90 91 3e 02 	lds	r25, 0x023E
    14f2:	92 30       	cpi	r25, 0x02	; 2
    14f4:	b8 f4       	brcc	.+46     	; 0x1524 <USB_Device_ProcessControlRequest+0x294>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14f6:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14fa:	87 7f       	andi	r24, 0xF7	; 247
    14fc:	80 93 e8 00 	sts	0x00E8, r24
    1500:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1504:	3e dd       	rcall	.-1412   	; 0xf82 <Endpoint_ClearStatusStage>
    1506:	80 91 37 02 	lds	r24, 0x0237
    150a:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <USB_Device_ProcessControlRequest+0x286>
    150e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1512:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    1514:	02 c0       	rjmp	.+4      	; 0x151a <USB_Device_ProcessControlRequest+0x28a>
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	01 c0       	rjmp	.+2      	; 0x151c <USB_Device_ProcessControlRequest+0x28c>
    151a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    151c:	80 93 3b 02 	sts	0x023B, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1520:	0e 94 ed 01 	call	0x3da	; 0x3da <EVENT_USB_Device_ConfigurationChanged>
    1524:	80 91 e8 00 	lds	r24, 0x00E8
    1528:	83 ff       	sbrs	r24, 3
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <USB_Device_ProcessControlRequest+0x2b0>
    152c:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    1530:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1532:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1536:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153a:	80 62       	ori	r24, 0x20	; 32
    153c:	80 93 eb 00 	sts	0x00EB, r24
    1540:	ac 96       	adiw	r28, 0x2c	; 44
    1542:	0f b6       	in	r0, 0x3f	; 63
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	08 95       	ret

00001554 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1554:	08 95       	ret

00001556 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1556:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1558:	80 91 3b 02 	lds	r24, 0x023B
    155c:	88 23       	and	r24, r24
    155e:	a9 f0       	breq	.+42     	; 0x158a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1560:	80 91 e9 00 	lds	r24, 0x00E9
    1564:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1566:	90 91 ec 00 	lds	r25, 0x00EC
    156a:	90 ff       	sbrs	r25, 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <USB_USBTask+0x1c>
    156e:	90 e8       	ldi	r25, 0x80	; 128
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <USB_USBTask+0x1e>
    1572:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1574:	c9 2f       	mov	r28, r25
    1576:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1578:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    157c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1580:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1582:	86 de       	rcall	.-756    	; 0x1290 <USB_Device_ProcessControlRequest>
    1584:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1586:	c0 93 e9 00 	sts	0x00E9, r28
    158a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    158c:	08 95       	ret

0000158e <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1594:	40 96       	adiw	r24, 0x10	; 16
    1596:	fc 01       	movw	r30, r24
    1598:	8b e0       	ldi	r24, 0x0B	; 11
    159a:	df 01       	movw	r26, r30
    159c:	1d 92       	st	X+, r1
    159e:	8a 95       	dec	r24
    15a0:	e9 f7       	brne	.-6      	; 0x159c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    15a6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	a9 dc       	rcall	.-1710   	; 0xf06 <Endpoint_ConfigureEndpointTable>
    15b4:	88 23       	and	r24, r24
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <CDC_Device_ConfigureEndpoints+0x42>
    15b8:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    15ba:	ce 01       	movw	r24, r28
    15bc:	06 96       	adiw	r24, 0x06	; 6
    15be:	a3 dc       	rcall	.-1722   	; 0xf06 <Endpoint_ConfigureEndpointTable>
    15c0:	88 23       	and	r24, r24
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <CDC_Device_ConfigureEndpoints+0x42>
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    15c8:	0b 96       	adiw	r24, 0x0b	; 11
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
	  return false;

	return true;
}
    15ce:	9b cc       	rjmp	.-1738   	; 0xf06 <Endpoint_ConfigureEndpointTable>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
	  return false;

	return true;
}
    15d6:	08 95       	ret

000015d8 <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	fc 01       	movw	r30, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	ba 01       	movw	r22, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    15e2:	20 91 3b 02 	lds	r18, 0x023B
    15e6:	24 30       	cpi	r18, 0x04	; 4
    15e8:	89 f4       	brne	.+34     	; 0x160c <CDC_Device_SendData+0x34>
    15ea:	04 89       	ldd	r16, Z+20	; 0x14
    15ec:	15 89       	ldd	r17, Z+21	; 0x15
    15ee:	26 89       	ldd	r18, Z+22	; 0x16
    15f0:	37 89       	ldd	r19, Z+23	; 0x17
    15f2:	01 2b       	or	r16, r17
    15f4:	02 2b       	or	r16, r18
    15f6:	03 2b       	or	r16, r19
    15f8:	49 f0       	breq	.+18     	; 0x160c <CDC_Device_SendData+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15fa:	21 81       	ldd	r18, Z+1	; 0x01
    15fc:	2f 70       	andi	r18, 0x0F	; 15
    15fe:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
}
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    160a:	f8 ca       	rjmp	.-2576   	; 0xbfc <Endpoint_Write_Stream_LE>
    160c:	82 e0       	ldi	r24, 0x02	; 2
}
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1614:	cf 93       	push	r28
    1616:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1618:	20 91 3b 02 	lds	r18, 0x023B
    161c:	24 30       	cpi	r18, 0x04	; 4
    161e:	f1 f4       	brne	.+60     	; 0x165c <CDC_Device_SendByte+0x48>
    1620:	fc 01       	movw	r30, r24
    1622:	44 89       	ldd	r20, Z+20	; 0x14
    1624:	55 89       	ldd	r21, Z+21	; 0x15
    1626:	66 89       	ldd	r22, Z+22	; 0x16
    1628:	77 89       	ldd	r23, Z+23	; 0x17
    162a:	45 2b       	or	r20, r21
    162c:	46 2b       	or	r20, r22
    162e:	47 2b       	or	r20, r23
    1630:	a9 f0       	breq	.+42     	; 0x165c <CDC_Device_SendByte+0x48>
    1632:	81 81       	ldd	r24, Z+1	; 0x01
    1634:	8f 70       	andi	r24, 0x0F	; 15
    1636:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    163a:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    163e:	85 ff       	sbrs	r24, 5
    1640:	04 c0       	rjmp	.+8      	; 0x164a <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1642:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0a c0       	rjmp	.+20     	; 0x165e <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    164a:	80 91 e8 00 	lds	r24, 0x00E8
    164e:	8e 77       	andi	r24, 0x7E	; 126
    1650:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1654:	b7 dc       	rcall	.-1682   	; 0xfc4 <Endpoint_WaitUntilReady>
    1656:	88 23       	and	r24, r24
    1658:	a1 f3       	breq	.-24     	; 0x1642 <CDC_Device_SendByte+0x2e>
    165a:	01 c0       	rjmp	.+2      	; 0x165e <CDC_Device_SendByte+0x4a>
    165c:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    165e:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1660:	08 95       	ret

00001662 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1662:	20 91 3b 02 	lds	r18, 0x023B
    1666:	24 30       	cpi	r18, 0x04	; 4
    1668:	29 f5       	brne	.+74     	; 0x16b4 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    166a:	fc 01       	movw	r30, r24
    166c:	44 89       	ldd	r20, Z+20	; 0x14
    166e:	55 89       	ldd	r21, Z+21	; 0x15
    1670:	66 89       	ldd	r22, Z+22	; 0x16
    1672:	77 89       	ldd	r23, Z+23	; 0x17
    1674:	45 2b       	or	r20, r21
    1676:	46 2b       	or	r20, r22
    1678:	47 2b       	or	r20, r23
    167a:	e1 f0       	breq	.+56     	; 0x16b4 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    167c:	81 81       	ldd	r24, Z+1	; 0x01
    167e:	8f 70       	andi	r24, 0x0F	; 15
    1680:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1684:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1688:	81 11       	cpse	r24, r1
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1690:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1694:	80 91 e8 00 	lds	r24, 0x00E8
    1698:	8e 77       	andi	r24, 0x7E	; 126
    169a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    169e:	95 fd       	sbrc	r25, 5
    16a0:	f5 cf       	rjmp	.-22     	; 0x168c <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    16a2:	90 dc       	rcall	.-1760   	; 0xfc4 <Endpoint_WaitUntilReady>
    16a4:	81 11       	cpse	r24, r1
    16a6:	07 c0       	rjmp	.+14     	; 0x16b6 <CDC_Device_Flush+0x54>
    16a8:	90 91 e8 00 	lds	r25, 0x00E8
    16ac:	9e 77       	andi	r25, 0x7E	; 126
    16ae:	90 93 e8 00 	sts	0x00E8, r25
    16b2:	08 95       	ret
    16b4:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    16b6:	08 95       	ret

000016b8 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    16b8:	20 91 3b 02 	lds	r18, 0x023B
    16bc:	24 30       	cpi	r18, 0x04	; 4
    16be:	89 f4       	brne	.+34     	; 0x16e2 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    16c0:	fc 01       	movw	r30, r24
    16c2:	44 89       	ldd	r20, Z+20	; 0x14
    16c4:	55 89       	ldd	r21, Z+21	; 0x15
    16c6:	66 89       	ldd	r22, Z+22	; 0x16
    16c8:	77 89       	ldd	r23, Z+23	; 0x17
    16ca:	45 2b       	or	r20, r21
    16cc:	46 2b       	or	r20, r22
    16ce:	47 2b       	or	r20, r23
    16d0:	41 f0       	breq	.+16     	; 0x16e2 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16d2:	21 81       	ldd	r18, Z+1	; 0x01
    16d4:	2f 70       	andi	r18, 0x0F	; 15
    16d6:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16da:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    16de:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    16e0:	c0 cf       	rjmp	.-128    	; 0x1662 <CDC_Device_Flush>
    16e2:	08 95       	ret

000016e4 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    16e4:	20 91 3b 02 	lds	r18, 0x023B
    16e8:	24 30       	cpi	r18, 0x04	; 4
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    16ec:	2f ef       	ldi	r18, 0xFF	; 255
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	24 c0       	rjmp	.+72     	; 0x173a <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    16f2:	fc 01       	movw	r30, r24
    16f4:	44 89       	ldd	r20, Z+20	; 0x14
    16f6:	55 89       	ldd	r21, Z+21	; 0x15
    16f8:	66 89       	ldd	r22, Z+22	; 0x16
    16fa:	77 89       	ldd	r23, Z+23	; 0x17
    16fc:	45 2b       	or	r20, r21
    16fe:	46 2b       	or	r20, r22
    1700:	47 2b       	or	r20, r23
    1702:	a1 f3       	breq	.-24     	; 0x16ec <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1704:	86 81       	ldd	r24, Z+6	; 0x06
    1706:	8f 70       	andi	r24, 0x0F	; 15
    1708:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    170c:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1710:	82 ff       	sbrs	r24, 2
    1712:	ec cf       	rjmp	.-40     	; 0x16ec <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1714:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1718:	88 23       	and	r24, r24
    171a:	21 f0       	breq	.+8      	; 0x1724 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    171c:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1728:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    172c:	81 11       	cpse	r24, r1
    172e:	05 c0       	rjmp	.+10     	; 0x173a <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1730:	80 91 e8 00 	lds	r24, 0x00E8
    1734:	8b 77       	andi	r24, 0x7B	; 123
    1736:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    173a:	c9 01       	movw	r24, r18
    173c:	08 95       	ret

0000173e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    173e:	08 95       	ret

00001740 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1746:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    174a:	83 ff       	sbrs	r24, 3
    174c:	a9 c0       	rjmp	.+338    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    174e:	88 81       	ld	r24, Y
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	20 91 40 02 	lds	r18, 0x0240
    1756:	30 91 41 02 	lds	r19, 0x0241
    175a:	28 17       	cp	r18, r24
    175c:	39 07       	cpc	r19, r25
    175e:	09 f0       	breq	.+2      	; 0x1762 <CDC_Device_ProcessControlRequest+0x22>
    1760:	9f c0       	rjmp	.+318    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
	  return;

	switch (USB_ControlRequest.bRequest)
    1762:	80 91 3d 02 	lds	r24, 0x023D
    1766:	81 32       	cpi	r24, 0x21	; 33
    1768:	61 f0       	breq	.+24     	; 0x1782 <CDC_Device_ProcessControlRequest+0x42>
    176a:	20 f4       	brcc	.+8      	; 0x1774 <CDC_Device_ProcessControlRequest+0x34>
    176c:	80 32       	cpi	r24, 0x20	; 32
    176e:	09 f0       	breq	.+2      	; 0x1772 <CDC_Device_ProcessControlRequest+0x32>
    1770:	97 c0       	rjmp	.+302    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    1772:	3d c0       	rjmp	.+122    	; 0x17ee <CDC_Device_ProcessControlRequest+0xae>
    1774:	82 32       	cpi	r24, 0x22	; 34
    1776:	09 f4       	brne	.+2      	; 0x177a <CDC_Device_ProcessControlRequest+0x3a>
    1778:	6e c0       	rjmp	.+220    	; 0x1856 <CDC_Device_ProcessControlRequest+0x116>
    177a:	83 32       	cpi	r24, 0x23	; 35
    177c:	09 f0       	breq	.+2      	; 0x1780 <CDC_Device_ProcessControlRequest+0x40>
    177e:	90 c0       	rjmp	.+288    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    1780:	7f c0       	rjmp	.+254    	; 0x1880 <CDC_Device_ProcessControlRequest+0x140>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1782:	80 91 3c 02 	lds	r24, 0x023C
    1786:	81 3a       	cpi	r24, 0xA1	; 161
    1788:	09 f0       	breq	.+2      	; 0x178c <CDC_Device_ProcessControlRequest+0x4c>
    178a:	8a c0       	rjmp	.+276    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    178c:	80 91 e8 00 	lds	r24, 0x00E8
    1790:	87 7f       	andi	r24, 0xF7	; 247
    1792:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1796:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    179a:	80 ff       	sbrs	r24, 0
    179c:	fc cf       	rjmp	.-8      	; 0x1796 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    179e:	4c 89       	ldd	r20, Y+20	; 0x14
    17a0:	5d 89       	ldd	r21, Y+21	; 0x15
    17a2:	6e 89       	ldd	r22, Y+22	; 0x16
    17a4:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    17a6:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    17aa:	bb 27       	eor	r27, r27
    17ac:	a7 2f       	mov	r26, r23
    17ae:	96 2f       	mov	r25, r22
    17b0:	85 2f       	mov	r24, r21
    17b2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    17b6:	cb 01       	movw	r24, r22
    17b8:	aa 27       	eor	r26, r26
    17ba:	bb 27       	eor	r27, r27
    17bc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    17c0:	47 2f       	mov	r20, r23
    17c2:	55 27       	eor	r21, r21
    17c4:	66 27       	eor	r22, r22
    17c6:	77 27       	eor	r23, r23
    17c8:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    17cc:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ce:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    17d2:	89 8d       	ldd	r24, Y+25	; 0x19
    17d4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    17d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17da:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17de:	80 91 e8 00 	lds	r24, 0x00E8
    17e2:	8e 77       	andi	r24, 0x7E	; 126
    17e4:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    17ec:	ca cb       	rjmp	.-2156   	; 0xf82 <Endpoint_ClearStatusStage>
    17ee:	80 91 3c 02 	lds	r24, 0x023C
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17f2:	81 32       	cpi	r24, 0x21	; 33
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <CDC_Device_ProcessControlRequest+0xb8>
    17f6:	54 c0       	rjmp	.+168    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    17f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17fc:	87 7f       	andi	r24, 0xF7	; 247
    17fe:	80 93 e8 00 	sts	0x00E8, r24
    1802:	05 c0       	rjmp	.+10     	; 0x180e <CDC_Device_ProcessControlRequest+0xce>
    1804:	80 91 3b 02 	lds	r24, 0x023B
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1808:	88 23       	and	r24, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <CDC_Device_ProcessControlRequest+0xce>
    180c:	49 c0       	rjmp	.+146    	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    180e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1812:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1814:	f7 cf       	rjmp	.-18     	; 0x1804 <CDC_Device_ProcessControlRequest+0xc4>
    1816:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    181a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    181e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1822:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1826:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1828:	2d 8b       	std	Y+21, r18	; 0x15
    182a:	9e 8b       	std	Y+22, r25	; 0x16
    182c:	8f 8b       	std	Y+23, r24	; 0x17
    182e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1832:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1834:	80 91 f1 00 	lds	r24, 0x00F1
    1838:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    183a:	80 91 f1 00 	lds	r24, 0x00F1
    183e:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1840:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1844:	8b 77       	andi	r24, 0x7B	; 123
    1846:	80 93 e8 00 	sts	0x00E8, r24
    184a:	9b db       	rcall	.-2250   	; 0xf82 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    184c:	ce 01       	movw	r24, r28
    184e:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1850:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1852:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <EVENT_CDC_Device_LineEncodingChanged>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1856:	80 91 3c 02 	lds	r24, 0x023C
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    185a:	81 32       	cpi	r24, 0x21	; 33
    185c:	09 f5       	brne	.+66     	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    185e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1862:	87 7f       	andi	r24, 0xF7	; 247
    1864:	80 93 e8 00 	sts	0x00E8, r24
    1868:	8c db       	rcall	.-2280   	; 0xf82 <Endpoint_ClearStatusStage>
    186a:	80 91 3e 02 	lds	r24, 0x023E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    186e:	90 91 3f 02 	lds	r25, 0x023F

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1872:	99 8b       	std	Y+17, r25	; 0x11
    1874:	88 8b       	std	Y+16, r24	; 0x10
    1876:	ce 01       	movw	r24, r28
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    187c:	0c 94 96 02 	jmp	0x52c	; 0x52c <EVENT_CDC_Device_ControLineStateChanged>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1880:	80 91 3c 02 	lds	r24, 0x023C
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1884:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1886:	61 f4       	brne	.+24     	; 0x18a0 <CDC_Device_ProcessControlRequest+0x160>
    1888:	80 91 e8 00 	lds	r24, 0x00E8
    188c:	87 7f       	andi	r24, 0xF7	; 247
    188e:	80 93 e8 00 	sts	0x00E8, r24
    1892:	77 db       	rcall	.-2322   	; 0xf82 <Endpoint_ClearStatusStage>
    1894:	60 91 3e 02 	lds	r22, 0x023E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1898:	ce 01       	movw	r24, r28
    189a:	df 91       	pop	r29

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    189c:	cf 91       	pop	r28
    189e:	4f cf       	rjmp	.-354    	; 0x173e <CDC_Device_Event_Stub>
    18a0:	df 91       	pop	r29
			}

			break;
	}
}
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    18a6:	6f 92       	push	r6
    18a8:	7f 92       	push	r7
    18aa:	8f 92       	push	r8
    18ac:	9f 92       	push	r9
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <HID_Device_ProcessControlRequest+0x1e>
    18c4:	1f 92       	push	r1
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    18cc:	ad b6       	in	r10, 0x3d	; 61
    18ce:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    18d4:	83 ff       	sbrs	r24, 3
    18d6:	07 c1       	rjmp	.+526    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    18d8:	f7 01       	movw	r30, r14
    18da:	80 81       	ld	r24, Z
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	20 91 40 02 	lds	r18, 0x0240
    18e2:	30 91 41 02 	lds	r19, 0x0241
    18e6:	28 17       	cp	r18, r24
    18e8:	39 07       	cpc	r19, r25
    18ea:	09 f0       	breq	.+2      	; 0x18ee <HID_Device_ProcessControlRequest+0x48>
    18ec:	fc c0       	rjmp	.+504    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    18ee:	80 91 3d 02 	lds	r24, 0x023D
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <HID_Device_ProcessControlRequest+0x52>
    18f6:	9e c0       	rjmp	.+316    	; 0x1a34 <HID_Device_ProcessControlRequest+0x18e>
    18f8:	30 f4       	brcc	.+12     	; 0x1906 <HID_Device_ProcessControlRequest+0x60>
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	71 f0       	breq	.+28     	; 0x191a <HID_Device_ProcessControlRequest+0x74>
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	09 f0       	breq	.+2      	; 0x1904 <HID_Device_ProcessControlRequest+0x5e>
    1902:	f1 c0       	rjmp	.+482    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1904:	d4 c0       	rjmp	.+424    	; 0x1aae <HID_Device_ProcessControlRequest+0x208>
    1906:	8a 30       	cpi	r24, 0x0A	; 10
    1908:	09 f4       	brne	.+2      	; 0x190c <HID_Device_ProcessControlRequest+0x66>
    190a:	b9 c0       	rjmp	.+370    	; 0x1a7e <HID_Device_ProcessControlRequest+0x1d8>
    190c:	8b 30       	cpi	r24, 0x0B	; 11
    190e:	09 f4       	brne	.+2      	; 0x1912 <HID_Device_ProcessControlRequest+0x6c>
    1910:	a2 c0       	rjmp	.+324    	; 0x1a56 <HID_Device_ProcessControlRequest+0x1b0>
    1912:	89 30       	cpi	r24, 0x09	; 9
    1914:	09 f0       	breq	.+2      	; 0x1918 <HID_Device_ProcessControlRequest+0x72>
    1916:	e7 c0       	rjmp	.+462    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1918:	4c c0       	rjmp	.+152    	; 0x19b2 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    191a:	80 91 3c 02 	lds	r24, 0x023C
    191e:	81 3a       	cpi	r24, 0xA1	; 161
    1920:	09 f0       	breq	.+2      	; 0x1924 <HID_Device_ProcessControlRequest+0x7e>
    1922:	e1 c0       	rjmp	.+450    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1924:	8d b6       	in	r8, 0x3d	; 61
    1926:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1928:	1a 82       	std	Y+2, r1	; 0x02
    192a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    192c:	80 91 3e 02 	lds	r24, 0x023E
    1930:	10 91 3f 02 	lds	r17, 0x023F
    1934:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1936:	f7 01       	movw	r30, r14
    1938:	40 85       	ldd	r20, Z+8	; 0x08
    193a:	8d b7       	in	r24, 0x3d	; 61
    193c:	9e b7       	in	r25, 0x3e	; 62
    193e:	84 1b       	sub	r24, r20
    1940:	91 09       	sbc	r25, r1
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	9e bf       	out	0x3e, r25	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	8d bf       	out	0x3d, r24	; 61
    194c:	cd b6       	in	r12, 0x3d	; 61
    194e:	de b6       	in	r13, 0x3e	; 62
    1950:	ef ef       	ldi	r30, 0xFF	; 255
    1952:	ce 1a       	sub	r12, r30
    1954:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    1956:	36 01       	movw	r6, r12
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	c6 01       	movw	r24, r12
    1960:	ea d1       	rcall	.+980    	; 0x1d36 <memset>
    1962:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1964:	41 50       	subi	r20, 0x01	; 1
    1966:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	96 01       	movw	r18, r12
    196e:	be 01       	movw	r22, r28
    1970:	6d 5f       	subi	r22, 0xFD	; 253
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	c7 01       	movw	r24, r14
    1976:	0e 94 b5 02 	call	0x56a	; 0x56a <CALLBACK_HID_Device_CreateHIDReport>
    197a:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    197c:	26 81       	ldd	r18, Z+6	; 0x06
    197e:	37 81       	ldd	r19, Z+7	; 0x07
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	29 f0       	breq	.+10     	; 0x1990 <HID_Device_ProcessControlRequest+0xea>
    1986:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	b6 01       	movw	r22, r12
    198c:	c9 01       	movw	r24, r18
    198e:	ca d1       	rcall	.+916    	; 0x1d24 <memcpy>
    1990:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1994:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1998:	87 7f       	andi	r24, 0xF7	; 247
    199a:	80 93 e8 00 	sts	0x00E8, r24
    199e:	69 81       	ldd	r22, Y+1	; 0x01
    19a0:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    19a2:	c3 01       	movw	r24, r6
    19a4:	78 d9       	rcall	.-3344   	; 0xc96 <Endpoint_Write_Control_Stream_LE>
    19a6:	80 91 e8 00 	lds	r24, 0x00E8
    19aa:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19ac:	80 93 e8 00 	sts	0x00E8, r24
    19b0:	39 c0       	rjmp	.+114    	; 0x1a24 <HID_Device_ProcessControlRequest+0x17e>
    19b2:	80 91 3c 02 	lds	r24, 0x023C
    19b6:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19b8:	09 f0       	breq	.+2      	; 0x19bc <HID_Device_ProcessControlRequest+0x116>
    19ba:	95 c0       	rjmp	.+298    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    19bc:	8d b6       	in	r8, 0x3d	; 61
    19be:	9e b6       	in	r9, 0x3e	; 62
    19c0:	00 91 42 02 	lds	r16, 0x0242
    19c4:	10 91 43 02 	lds	r17, 0x0243
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    19c8:	70 90 3e 02 	lds	r7, 0x023E
    19cc:	60 90 3f 02 	lds	r6, 0x023F
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19d0:	8d b7       	in	r24, 0x3d	; 61
    19d2:	9e b7       	in	r25, 0x3e	; 62
    19d4:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    19d6:	91 0b       	sbc	r25, r17
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	9e bf       	out	0x3e, r25	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	8d bf       	out	0x3d, r24	; 61
    19e2:	cd b6       	in	r12, 0x3d	; 61
    19e4:	de b6       	in	r13, 0x3e	; 62
    19e6:	ef ef       	ldi	r30, 0xFF	; 255
    19e8:	ce 1a       	sub	r12, r30
    19ea:	de 0a       	sbc	r13, r30
    19ec:	80 91 e8 00 	lds	r24, 0x00E8
    19f0:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19f2:	80 93 e8 00 	sts	0x00E8, r24
    19f6:	b8 01       	movw	r22, r16
    19f8:	c6 01       	movw	r24, r12
    19fa:	ad d9       	rcall	.-3238   	; 0xd56 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    19fc:	80 91 e8 00 	lds	r24, 0x00E8
    1a00:	8e 77       	andi	r24, 0x7E	; 126
    1a02:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a06:	21 e0       	ldi	r18, 0x01	; 1
    1a08:	71 10       	cpse	r7, r1
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <HID_Device_ProcessControlRequest+0x168>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	02 1b       	sub	r16, r18
    1a12:	13 0b       	sbc	r17, r19
    1a14:	2c 0d       	add	r18, r12
    1a16:	3d 1d       	adc	r19, r13
    1a18:	46 2d       	mov	r20, r6
    1a1a:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1a1c:	67 2d       	mov	r22, r7
    1a1e:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1a20:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a24:	88 2d       	mov	r24, r8
    1a26:	99 2d       	mov	r25, r9
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	9e bf       	out	0x3e, r25	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	8d bf       	out	0x3d, r24	; 61
    1a32:	59 c0       	rjmp	.+178    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1a34:	80 91 3c 02 	lds	r24, 0x023C
    1a38:	81 3a       	cpi	r24, 0xA1	; 161
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a3c:	54 c0       	rjmp	.+168    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1a3e:	80 91 e8 00 	lds	r24, 0x00E8
    1a42:	87 7f       	andi	r24, 0xF7	; 247
    1a44:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a48:	80 91 e8 00 	lds	r24, 0x00E8
    1a4c:	80 ff       	sbrs	r24, 0
    1a4e:	fc cf       	rjmp	.-8      	; 0x1a48 <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a50:	f7 01       	movw	r30, r14
    1a52:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1a54:	40 c0       	rjmp	.+128    	; 0x1ad6 <HID_Device_ProcessControlRequest+0x230>
    1a56:	80 91 3c 02 	lds	r24, 0x023C
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1a5a:	81 32       	cpi	r24, 0x21	; 33
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1a60:	80 91 e8 00 	lds	r24, 0x00E8
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a6a:	8b da       	rcall	.-2794   	; 0xf82 <Endpoint_ClearStatusStage>
    1a6c:	90 91 3e 02 	lds	r25, 0x023E
    1a70:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a72:	91 11       	cpse	r25, r1
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	f7 01       	movw	r30, r14
    1a7a:	81 87       	std	Z+9, r24	; 0x09
    1a7c:	34 c0       	rjmp	.+104    	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1a7e:	80 91 3c 02 	lds	r24, 0x023C
    1a82:	81 32       	cpi	r24, 0x21	; 33
    1a84:	81 f5       	brne	.+96     	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1a86:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a8a:	87 7f       	andi	r24, 0xF7	; 247
    1a8c:	80 93 e8 00 	sts	0x00E8, r24
    1a90:	78 da       	rcall	.-2832   	; 0xf82 <Endpoint_ClearStatusStage>
    1a92:	80 91 3e 02 	lds	r24, 0x023E
    1a96:	90 91 3f 02 	lds	r25, 0x023F
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a9a:	88 27       	eor	r24, r24
    1a9c:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1a9e:	96 95       	lsr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	3a 95       	dec	r19
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <HID_Device_ProcessControlRequest+0x1f8>
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	95 87       	std	Z+13, r25	; 0x0d
    1aaa:	84 87       	std	Z+12, r24	; 0x0c
    1aac:	1c c0       	rjmp	.+56     	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1aae:	80 91 3c 02 	lds	r24, 0x023C
    1ab2:	81 3a       	cpi	r24, 0xA1	; 161
    1ab4:	c1 f4       	brne	.+48     	; 0x1ae6 <HID_Device_ProcessControlRequest+0x240>
    1ab6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1aba:	87 7f       	andi	r24, 0xF7	; 247
    1abc:	80 93 e8 00 	sts	0x00E8, r24
    1ac0:	80 91 e8 00 	lds	r24, 0x00E8
    1ac4:	80 ff       	sbrs	r24, 0
    1ac6:	fc cf       	rjmp	.-8      	; 0x1ac0 <HID_Device_ProcessControlRequest+0x21a>
    1ac8:	f7 01       	movw	r30, r14
    1aca:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1acc:	95 85       	ldd	r25, Z+13	; 0x0d
    1ace:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1ad0:	87 95       	ror	r24
    1ad2:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1ad4:	87 95       	ror	r24
    1ad6:	80 93 f1 00 	sts	0x00F1, r24
    1ada:	80 91 e8 00 	lds	r24, 0x00E8
    1ade:	8e 77       	andi	r24, 0x7E	; 126
    1ae0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ae4:	4e da       	rcall	.-2916   	; 0xf82 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	be be       	out	0x3e, r11	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
			}

			break;
	}
}
    1af4:	0f 90       	pop	r0
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	08 95       	ret

00001b14 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b14:	9c 01       	movw	r18, r24
    1b16:	27 5f       	subi	r18, 0xF7	; 247
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	27 e0       	ldi	r18, 0x07	; 7
    1b1e:	df 01       	movw	r26, r30
    1b20:	1d 92       	st	X+, r1
    1b22:	2a 95       	dec	r18
    1b24:	e9 f7       	brne	.-6      	; 0x1b20 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	fc 01       	movw	r30, r24
    1b2a:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1b2c:	24 ef       	ldi	r18, 0xF4	; 244
    1b2e:	31 e0       	ldi	r19, 0x01	; 1
    1b30:	35 87       	std	Z+13, r19	; 0x0d
    1b32:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1b34:	23 e0       	ldi	r18, 0x03	; 3
    1b36:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	e4 c9       	rjmp	.-3128   	; 0xf06 <Endpoint_ConfigureEndpointTable>

00001b3e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b3e:	4f 92       	push	r4
    1b40:	5f 92       	push	r5
    1b42:	6f 92       	push	r6
    1b44:	7f 92       	push	r7
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <HID_Device_USBTask+0x22>
    1b60:	1f 92       	push	r1
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1b68:	ad b6       	in	r10, 0x3d	; 61
    1b6a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1b6c:	80 91 3b 02 	lds	r24, 0x023B
    1b70:	84 30       	cpi	r24, 0x04	; 4
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <HID_Device_USBTask+0x38>
    1b74:	8f c0       	rjmp	.+286    	; 0x1c94 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b76:	80 91 e4 00 	lds	r24, 0x00E4
    1b7a:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1b7e:	f7 01       	movw	r30, r14
    1b80:	22 85       	ldd	r18, Z+10	; 0x0a
    1b82:	33 85       	ldd	r19, Z+11	; 0x0b
    1b84:	28 17       	cp	r18, r24
    1b86:	39 07       	cpc	r19, r25
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <HID_Device_USBTask+0x4e>
    1b8a:	84 c0       	rjmp	.+264    	; 0x1c94 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b8c:	81 81       	ldd	r24, Z+1	; 0x01
    1b8e:	8f 70       	andi	r24, 0x0F	; 15
    1b90:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b94:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1b98:	85 ff       	sbrs	r24, 5
    1b9a:	7c c0       	rjmp	.+248    	; 0x1c94 <HID_Device_USBTask+0x156>
    1b9c:	6d b6       	in	r6, 0x3d	; 61
    1b9e:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1ba0:	40 85       	ldd	r20, Z+8	; 0x08
    1ba2:	8d b7       	in	r24, 0x3d	; 61
    1ba4:	9e b7       	in	r25, 0x3e	; 62
    1ba6:	84 1b       	sub	r24, r20
    1ba8:	91 09       	sbc	r25, r1
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	9e bf       	out	0x3e, r25	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	8d bf       	out	0x3d, r24	; 61
    1bb4:	cd b6       	in	r12, 0x3d	; 61
    1bb6:	de b6       	in	r13, 0x3e	; 62
    1bb8:	ef ef       	ldi	r30, 0xFF	; 255
    1bba:	ce 1a       	sub	r12, r30
    1bbc:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    1bbe:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
    1bc2:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1bc4:	46 01       	movw	r8, r12
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	c6 01       	movw	r24, r12
    1bce:	b3 d0       	rcall	.+358    	; 0x1d36 <memset>
    1bd0:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1bd2:	0f 5f       	subi	r16, 0xFF	; 255
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	96 01       	movw	r18, r12
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	be 01       	movw	r22, r28
    1bdc:	6d 5f       	subi	r22, 0xFD	; 253
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	c7 01       	movw	r24, r14
    1be2:	0e 94 b5 02 	call	0x56a	; 0x56a <CALLBACK_HID_Device_CreateHIDReport>
    1be6:	58 2e       	mov	r5, r24
    1be8:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1bea:	84 85       	ldd	r24, Z+12	; 0x0c
    1bec:	95 85       	ldd	r25, Z+13	; 0x0d
    1bee:	89 2b       	or	r24, r25
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <HID_Device_USBTask+0xc0>
    1bf2:	01 e0       	ldi	r16, 0x01	; 1
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	86 85       	ldd	r24, Z+14	; 0x0e
    1bf8:	97 85       	ldd	r25, Z+15	; 0x0f
    1bfa:	89 2b       	or	r24, r25
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <HID_Device_USBTask+0xc4>
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1c04:	c6 80       	ldd	r12, Z+6	; 0x06
    1c06:	d7 80       	ldd	r13, Z+7	; 0x07
    1c08:	c1 14       	cp	r12, r1
    1c0a:	d1 04       	cpc	r13, r1
    1c0c:	89 f0       	breq	.+34     	; 0x1c30 <HID_Device_USBTask+0xf2>
    1c0e:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1c10:	5a 81       	ldd	r21, Y+2	; 0x02
    1c12:	b6 01       	movw	r22, r12
    1c14:	c4 01       	movw	r24, r8
    1c16:	79 d0       	rcall	.+242    	; 0x1d0a <memcmp>
    1c18:	44 24       	eor	r4, r4
    1c1a:	43 94       	inc	r4
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <HID_Device_USBTask+0xe4>
    1c20:	41 2c       	mov	r4, r1
    1c22:	f7 01       	movw	r30, r14
    1c24:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	b4 01       	movw	r22, r8
    1c2a:	c6 01       	movw	r24, r12
    1c2c:	7b d0       	rcall	.+246    	; 0x1d24 <memcpy>
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <HID_Device_USBTask+0xf4>
    1c30:	41 2c       	mov	r4, r1
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1c36:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1c38:	f9 f0       	breq	.+62     	; 0x1c78 <HID_Device_USBTask+0x13a>
    1c3a:	51 10       	cpse	r5, r1
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <HID_Device_USBTask+0x108>
    1c3e:	41 10       	cpse	r4, r1
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <HID_Device_USBTask+0x108>
    1c42:	00 ff       	sbrs	r16, 0
    1c44:	19 c0       	rjmp	.+50     	; 0x1c78 <HID_Device_USBTask+0x13a>
    1c46:	f7 01       	movw	r30, r14
    1c48:	84 85       	ldd	r24, Z+12	; 0x0c
    1c4a:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1c4c:	97 87       	std	Z+15, r25	; 0x0f
    1c4e:	86 87       	std	Z+14, r24	; 0x0e
    1c50:	81 81       	ldd	r24, Z+1	; 0x01
    1c52:	8f 70       	andi	r24, 0x0F	; 15
    1c54:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1c60:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c62:	7a 81       	ldd	r23, Y+2	; 0x02
    1c64:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	c4 01       	movw	r24, r8
    1c6a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Endpoint_Write_Stream_LE>
    1c6e:	80 91 e8 00 	lds	r24, 0x00E8
    1c72:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c74:	80 93 e8 00 	sts	0x00E8, r24
    1c78:	80 91 e4 00 	lds	r24, 0x00E4
    1c7c:	90 91 e5 00 	lds	r25, 0x00E5
    1c80:	f7 01       	movw	r30, r14
    1c82:	93 87       	std	Z+11, r25	; 0x0b
    1c84:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1c86:	86 2d       	mov	r24, r6
    1c88:	97 2d       	mov	r25, r7
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	9e bf       	out	0x3e, r25	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	8d bf       	out	0x3d, r24	; 61
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	be be       	out	0x3e, r11	; 62
	}
}
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	ad be       	out	0x3d, r10	; 61
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	9f 90       	pop	r9
    1cba:	8f 90       	pop	r8
    1cbc:	7f 90       	pop	r7
    1cbe:	6f 90       	pop	r6
    1cc0:	5f 90       	pop	r5
    1cc2:	4f 90       	pop	r4
    1cc4:	08 95       	ret

00001cc6 <__udivmodsi4>:
    1cc6:	a1 e2       	ldi	r26, 0x21	; 33
    1cc8:	1a 2e       	mov	r1, r26
    1cca:	aa 1b       	sub	r26, r26
    1ccc:	bb 1b       	sub	r27, r27
    1cce:	fd 01       	movw	r30, r26
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <__udivmodsi4_ep>

00001cd2 <__udivmodsi4_loop>:
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	ee 1f       	adc	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	a2 17       	cp	r26, r18
    1cdc:	b3 07       	cpc	r27, r19
    1cde:	e4 07       	cpc	r30, r20
    1ce0:	f5 07       	cpc	r31, r21
    1ce2:	20 f0       	brcs	.+8      	; 0x1cec <__udivmodsi4_ep>
    1ce4:	a2 1b       	sub	r26, r18
    1ce6:	b3 0b       	sbc	r27, r19
    1ce8:	e4 0b       	sbc	r30, r20
    1cea:	f5 0b       	sbc	r31, r21

00001cec <__udivmodsi4_ep>:
    1cec:	66 1f       	adc	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	1a 94       	dec	r1
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <__udivmodsi4_loop>
    1cf8:	60 95       	com	r22
    1cfa:	70 95       	com	r23
    1cfc:	80 95       	com	r24
    1cfe:	90 95       	com	r25
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	bd 01       	movw	r22, r26
    1d06:	cf 01       	movw	r24, r30
    1d08:	08 95       	ret

00001d0a <memcmp>:
    1d0a:	fb 01       	movw	r30, r22
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <memcmp+0xe>
    1d10:	8d 91       	ld	r24, X+
    1d12:	01 90       	ld	r0, Z+
    1d14:	80 19       	sub	r24, r0
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <memcmp+0x16>
    1d18:	41 50       	subi	r20, 0x01	; 1
    1d1a:	50 40       	sbci	r21, 0x00	; 0
    1d1c:	c8 f7       	brcc	.-14     	; 0x1d10 <memcmp+0x6>
    1d1e:	88 1b       	sub	r24, r24
    1d20:	99 0b       	sbc	r25, r25
    1d22:	08 95       	ret

00001d24 <memcpy>:
    1d24:	fb 01       	movw	r30, r22
    1d26:	dc 01       	movw	r26, r24
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <memcpy+0xa>
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	0d 92       	st	X+, r0
    1d2e:	41 50       	subi	r20, 0x01	; 1
    1d30:	50 40       	sbci	r21, 0x00	; 0
    1d32:	d8 f7       	brcc	.-10     	; 0x1d2a <memcpy+0x6>
    1d34:	08 95       	ret

00001d36 <memset>:
    1d36:	dc 01       	movw	r26, r24
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <memset+0x6>
    1d3a:	6d 93       	st	X+, r22
    1d3c:	41 50       	subi	r20, 0x01	; 1
    1d3e:	50 40       	sbci	r21, 0x00	; 0
    1d40:	e0 f7       	brcc	.-8      	; 0x1d3a <memset+0x4>
    1d42:	08 95       	ret

00001d44 <_exit>:
    1d44:	f8 94       	cli

00001d46 <__stop_program>:
    1d46:	ff cf       	rjmp	.-2      	; 0x1d46 <__stop_program>
