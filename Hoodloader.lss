
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000261a  000026ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000261a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  00800136  00800136  000026e4  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003d9b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00003dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e5ef  00000000  00000000  0000465d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b63  00000000  00000000  00012c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000059d0  00000000  00000000  000167af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000155c  00000000  00000000  0001c180  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004915  00000000  00000000  0001d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008805  00000000  00000000  00021ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a70  00000000  00000000  0002a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	92 c2       	rjmp	.+1316   	; 0x582 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 3f 09 01 81 02 95 3f     .u...&...?.....?
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	04 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	ea e1       	ldi	r30, 0x1A	; 26
     2fc:	f6 e2       	ldi	r31, 0x26	; 38
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a0 35       	cpi	r26, 0x50	; 80
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	30 d0       	rcall	.+96     	; 0x37c <main>
				break;
     31c:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <SetupHardware>:
     322:	84 b7       	in	r24, 0x34	; 52
				break;
     324:	87 7f       	andi	r24, 0xF7	; 247

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	84 bf       	out	0x34, r24	; 52
     328:	28 e1       	ldi	r18, 0x18	; 24
     32a:	0f b6       	in	r0, 0x3f	; 63

				if (ParserData->UsingReportIDs)
     32c:	f8 94       	cli
     32e:	20 93 60 00 	sts	0x0060, r18
     332:	10 92 60 00 	sts	0x0060, r1
     336:	0f be       	out	0x3f, r0	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	80 e1       	ldi	r24, 0x10	; 16
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 cd 00 	sts	0x00CD, r25
     340:	80 93 cc 00 	sts	0x00CC, r24
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	80 93 ca 00 	sts	0x00CA, r24

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	80 93 c8 00 	sts	0x00C8, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	20 93 c9 00 	sts	0x00C9, r18
     354:	53 9a       	sbi	0x0a, 3	; 10
     356:	5a 9a       	sbi	0x0b, 2	; 11
     358:	0e 94 b1 09 	call	0x1362	; 0x1362 <SerialInitHID>
     35c:	8a b1       	in	r24, 0x0a	; 10
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	80 63       	ori	r24, 0x30	; 48
     360:	8a b9       	out	0x0a, r24	; 10
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	80 63       	ori	r24, 0x30	; 48
     366:	8b b9       	out	0x0b, r24	; 11
     368:	0e 94 b3 0c 	call	0x1966	; 0x1966 <USB_Init>
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	85 bd       	out	0x25, r24	; 37
     370:	5f 9a       	sbi	0x0b, 7	; 11
     372:	57 9a       	sbi	0x0a, 7	; 10
     374:	20 9a       	sbi	0x04, 0	; 4
     376:	22 98       	cbi	0x04, 2	; 4

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	2a 9a       	sbi	0x05, 2	; 5
     37a:	08 95       	ret

0000037c <main>:
     37c:	4a e0       	ldi	r20, 0x0A	; 10
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 04 13 	call	0x2608	; 0x2608 <memset>
     38c:	e6 e3       	ldi	r30, 0x36	; 54
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	9f b7       	in	r25, 0x3f	; 63
     392:	f8 94       	cli
     394:	80 81       	ld	r24, Z
     396:	80 78       	andi	r24, 0x80	; 128
     398:	80 68       	ori	r24, 0x80	; 128
     39a:	80 83       	st	Z, r24
     39c:	11 82       	std	Z+1, r1	; 0x01
     39e:	9f bf       	out	0x3f, r25	; 63
     3a0:	80 91 42 01 	lds	r24, 0x0142
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	80 7c       	andi	r24, 0xC0	; 192
     3a6:	80 93 42 01 	sts	0x0142, r24
     3aa:	8b b1       	in	r24, 0x0b	; 11
     3ac:	80 63       	ori	r24, 0x30	; 48
     3ae:	8b b9       	out	0x0b, r24	; 11
     3b0:	80 91 0f 02 	lds	r24, 0x020F
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	80 68       	ori	r24, 0x80	; 128
     3b6:	8f 7b       	andi	r24, 0xBF	; 191
     3b8:	80 93 0f 02 	sts	0x020F, r24
     3bc:	10 92 c3 01 	sts	0x01C3, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3c0:	10 92 39 01 	sts	0x0139, r1
     3c4:	10 92 38 01 	sts	0x0138, r1
     3c8:	10 92 3b 01 	sts	0x013B, r1
				break;
     3cc:	10 92 3a 01 	sts	0x013A, r1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3d0:	10 92 3d 01 	sts	0x013D, r1
     3d4:	10 92 3c 01 	sts	0x013C, r1
     3d8:	a4 df       	rcall	.-184    	; 0x322 <SetupHardware>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	78 94       	sei
     3dc:	06 e3       	ldi	r16, 0x36	; 54
     3de:	11 e0       	ldi	r17, 0x01	; 1
     3e0:	80 e1       	ldi	r24, 0x10	; 16
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CDC_Device_ReceiveByte>
     3e8:	97 fd       	sbrc	r25, 7
     3ea:	1b c0       	rjmp	.+54     	; 0x422 <main+0xa6>
     3ec:	40 91 24 01 	lds	r20, 0x0124
     3f0:	50 91 25 01 	lds	r21, 0x0125
     3f4:	60 91 26 01 	lds	r22, 0x0126
     3f8:	70 91 27 01 	lds	r23, 0x0127
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	41 30       	cpi	r20, 0x01	; 1
     3fe:	51 05       	cpc	r21, r1
     400:	61 05       	cpc	r22, r1
     402:	71 05       	cpc	r23, r1
     404:	11 f4       	brne	.+4      	; 0x40a <main+0x8e>
     406:	d7 d5       	rcall	.+2990   	; 0xfb6 <avrisp>
     408:	0c c0       	rjmp	.+24     	; 0x422 <main+0xa6>

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	5c 98       	cbi	0x0b, 4	; 11
     40c:	90 91 42 01 	lds	r25, 0x0142
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	9c 60       	ori	r25, 0x0C	; 12
     412:	90 93 42 01 	sts	0x0142, r25
     416:	90 91 c8 00 	lds	r25, 0x00C8
     41a:	95 ff       	sbrs	r25, 5
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	fc cf       	rjmp	.-8      	; 0x416 <main+0x9a>
     41e:	80 93 ce 00 	sts	0x00CE, r24
     422:	9f b7       	in	r25, 0x3f	; 63
     424:	f8 94       	cli
     426:	80 91 36 01 	lds	r24, 0x0136

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	88 0f       	add	r24, r24
     42c:	88 0b       	sbc	r24, r24
     42e:	20 91 37 01 	lds	r18, 0x0137
     432:	82 23       	and	r24, r18
     434:	9f bf       	out	0x3f, r25	; 63
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	19 f4       	brne	.+6      	; 0x442 <main+0xc6>
     43c:	a8 99       	sbic	0x15, 0	; 21
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	35 c0       	rjmp	.+106    	; 0x4aa <main+0x12e>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	89 c0       	rjmp	.+274    	; 0x554 <main+0x1d8>
     442:	5d 98       	cbi	0x0b, 5	; 11
     444:	20 91 42 01 	lds	r18, 0x0142
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	23 60       	ori	r18, 0x03	; 3
     44a:	20 93 42 01 	sts	0x0142, r18
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	20 91 11 01 	lds	r18, 0x0111
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	2f 70       	andi	r18, 0x0F	; 15
     454:	20 93 e9 00 	sts	0x00E9, r18
     458:	20 91 e8 00 	lds	r18, 0x00E8
     45c:	20 ff       	sbrs	r18, 0
     45e:	ee cf       	rjmp	.-36     	; 0x43c <main+0xc0>

				if (UsageListSize)
     460:	80 34       	cpi	r24, 0x40	; 64
     462:	91 05       	cpc	r25, r1
     464:	10 f0       	brcs	.+4      	; 0x46a <main+0xee>
     466:	8f e3       	ldi	r24, 0x3F	; 63
     468:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	f8 2e       	mov	r15, r24
     46c:	c0 e0       	ldi	r28, 0x00	; 0
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	19 c0       	rjmp	.+50     	; 0x4a4 <main+0x128>
     472:	f8 01       	movw	r30, r16
     474:	2f b7       	in	r18, 0x3f	; 63
     476:	f8 94       	cli
     478:	a0 81       	ld	r26, Z
     47a:	a7 ff       	sbrs	r26, 7
     47c:	03 c0       	rjmp	.+6      	; 0x484 <main+0x108>
     47e:	91 81       	ldd	r25, Z+1	; 0x01

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	91 11       	cpse	r25, r1
     482:	04 c0       	rjmp	.+8      	; 0x48c <main+0x110>
					  UsageList[i - 1] = UsageList[i];
     484:	2f bf       	out	0x3f, r18	; 63
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	9f ef       	ldi	r25, 0xFF	; 255
     48a:	0a c0       	rjmp	.+20     	; 0x4a0 <main+0x124>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	a9 1b       	sub	r26, r25
     48e:	af 77       	andi	r26, 0x7F	; 127
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	aa 5c       	subi	r26, 0xCA	; 202
     494:	be 4f       	sbci	r27, 0xFE	; 254
     496:	1d 96       	adiw	r26, 0x0d	; 13
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	8c 91       	ld	r24, X
     49a:	91 50       	subi	r25, 0x01	; 1
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	2f bf       	out	0x3f, r18	; 63
     4a0:	b8 d1       	rcall	.+880    	; 0x812 <checkNHPProtocol>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	21 96       	adiw	r28, 0x01	; 1
     4a4:	fc 12       	cpse	r15, r28
     4a6:	e5 cf       	rjmp	.-54     	; 0x472 <main+0xf6>
     4a8:	c9 cf       	rjmp	.-110    	; 0x43c <main+0xc0>
     4aa:	a8 9a       	sbi	0x15, 0	; 21
     4ac:	90 91 42 01 	lds	r25, 0x0142
     4b0:	89 2f       	mov	r24, r25
     4b2:	80 73       	andi	r24, 0x30	; 48
     4b4:	69 f1       	breq	.+90     	; 0x510 <main+0x194>
     4b6:	89 2f       	mov	r24, r25
     4b8:	82 95       	swap	r24
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	8d 5f       	subi	r24, 0xFD	; 253
     4be:	83 70       	andi	r24, 0x03	; 3
     4c0:	28 2f       	mov	r18, r24
     4c2:	22 95       	swap	r18
     4c4:	20 7f       	andi	r18, 0xF0	; 240
     4c6:	9f 7c       	andi	r25, 0xCF	; 207
     4c8:	92 2b       	or	r25, r18
     4ca:	90 93 42 01 	sts	0x0142, r25
     4ce:	81 11       	cpse	r24, r1
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	1f c0       	rjmp	.+62     	; 0x510 <main+0x194>
     4d2:	75 d1       	rcall	.+746    	; 0x7be <checkNHPControlAddressError>
     4d4:	90 91 0f 02 	lds	r25, 0x020F
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	89 2f       	mov	r24, r25
     4da:	86 95       	lsr	r24
     4dc:	86 95       	lsr	r24
				break;
     4de:	86 95       	lsr	r24
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	97 ff       	sbrs	r25, 7
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <main+0x16e>
     4e4:	87 70       	andi	r24, 0x07	; 7
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <main+0x174>
     4ea:	68 2f       	mov	r22, r24
     4ec:	67 70       	andi	r22, 0x07	; 7
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	96 ff       	sbrs	r25, 6
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <main+0x17c>
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <main+0x180>
     4f8:	66 23       	and	r22, r22
     4fa:	21 f0       	breq	.+8      	; 0x504 <main+0x188>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	8c 5e       	subi	r24, 0xEC	; 236
     500:	9d 4f       	sbci	r25, 0xFD	; 253
     502:	48 d1       	rcall	.+656    	; 0x794 <writeToCDC>
     504:	80 91 0f 02 	lds	r24, 0x020F

					if (UsageListSize)
     508:	80 68       	ori	r24, 0x80	; 128
     50a:	8f 7b       	andi	r24, 0xBF	; 191
     50c:	80 93 0f 02 	sts	0x020F, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	90 91 42 01 	lds	r25, 0x0142
     514:	89 2f       	mov	r24, r25
     516:	83 70       	andi	r24, 0x03	; 3
     518:	49 f0       	breq	.+18     	; 0x52c <main+0x1b0>
     51a:	81 50       	subi	r24, 0x01	; 1
     51c:	83 70       	andi	r24, 0x03	; 3
     51e:	9c 7f       	andi	r25, 0xFC	; 252
     520:	98 2b       	or	r25, r24
     522:	90 93 42 01 	sts	0x0142, r25

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	81 11       	cpse	r24, r1
     528:	01 c0       	rjmp	.+2      	; 0x52c <main+0x1b0>
						  UsageList[i - 1] = UsageList[i];
     52a:	5d 9a       	sbi	0x0b, 5	; 11
     52c:	90 91 42 01 	lds	r25, 0x0142
     530:	89 2f       	mov	r24, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	8c 70       	andi	r24, 0x0C	; 12
     534:	79 f0       	breq	.+30     	; 0x554 <main+0x1d8>
     536:	89 2f       	mov	r24, r25
     538:	86 95       	lsr	r24
     53a:	86 95       	lsr	r24
     53c:	8d 5f       	subi	r24, 0xFD	; 253
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	83 70       	andi	r24, 0x03	; 3
     540:	28 2f       	mov	r18, r24
     542:	22 0f       	add	r18, r18
     544:	22 0f       	add	r18, r18
     546:	93 7f       	andi	r25, 0xF3	; 243
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	92 2b       	or	r25, r18
     54a:	90 93 42 01 	sts	0x0142, r25
     54e:	81 11       	cpse	r24, r1
     550:	01 c0       	rjmp	.+2      	; 0x554 <main+0x1d8>
     552:	5c 9a       	sbi	0x0b, 4	; 11
     554:	80 e1       	ldi	r24, 0x10	; 16
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <CDC_Device_USBTask>
     55c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USB_USBTask>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     560:	3f cf       	rjmp	.-386    	; 0x3e0 <main+0x64>

00000562 <EVENT_USB_Device_Connect>:
     562:	08 95       	ret

00000564 <EVENT_USB_Device_Disconnect>:
     564:	08 95       	ret

00000566 <EVENT_USB_Device_ConfigurationChanged>:
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <HID_Device_ConfigureEndpoints>
     56e:	80 e1       	ldi	r24, 0x10	; 16
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <CDC_Device_ConfigureEndpoints>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     576:	e2 ee       	ldi	r30, 0xE2	; 226
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	84 60       	ori	r24, 0x04	; 4
     57e:	80 83       	st	Z, r24
     580:	08 95       	ret

00000582 <__vector_23>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	2f 93       	push	r18
     58e:	3f 93       	push	r19
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
     59c:	80 91 ce 00 	lds	r24, 0x00CE
     5a0:	90 91 47 02 	lds	r25, 0x0247

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a4:	94 30       	cpi	r25, 0x04	; 4
     5a6:	e1 f4       	brne	.+56     	; 0x5e0 <__vector_23+0x5e>
     5a8:	e6 e3       	ldi	r30, 0x36	; 54
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	2f b7       	in	r18, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	90 81       	ld	r25, Z

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	97 ff       	sbrs	r25, 7
     5b4:	14 c0       	rjmp	.+40     	; 0x5de <__vector_23+0x5c>
     5b6:	31 81       	ldd	r19, Z+1	; 0x01
     5b8:	30 38       	cpi	r19, 0x80	; 128
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_23+0x3c>
     5bc:	10 c0       	rjmp	.+32     	; 0x5de <__vector_23+0x5c>
     5be:	9f 77       	andi	r25, 0x7F	; 127
     5c0:	a9 2f       	mov	r26, r25
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	aa 5c       	subi	r26, 0xCA	; 202
     5c6:	be 4f       	sbci	r27, 0xFE	; 254
     5c8:	1d 96       	adiw	r26, 0x0d	; 13
     5ca:	8c 93       	st	X, r24
     5cc:	9f 5f       	subi	r25, 0xFF	; 255
     5ce:	9f 77       	andi	r25, 0x7F	; 127
     5d0:	80 81       	ld	r24, Z
     5d2:	80 78       	andi	r24, 0x80	; 128
     5d4:	89 2b       	or	r24, r25
     5d6:	80 83       	st	Z, r24
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	81 83       	std	Z+1, r24	; 0x01
     5de:	2f bf       	out	0x3f, r18	; 63
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <EVENT_USB_Device_ControlRequest>:
					  return HID_PARSE_InsufficientReportItems;
     5fa:	80 e1       	ldi	r24, 0x10	; 16
     5fc:	91 e0       	ldi	r25, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	0e 94 0b 10 	call	0x2016	; 0x2016 <CDC_Device_ProcessControlRequest>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <HID_Device_ProcessControlRequest>

0000060a <EVENT_USB_Device_StartOfFrame>:
     60a:	80 91 0e 01 	lds	r24, 0x010E
     60e:	90 91 0f 01 	lds	r25, 0x010F
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	29 f0       	breq	.+10     	; 0x620 <EVENT_USB_Device_StartOfFrame+0x16>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	90 93 0f 01 	sts	0x010F, r25
     61c:	80 93 0e 01 	sts	0x010E, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     620:	08 95       	ret

00000622 <CALLBACK_USB_GetDescriptor>:
     622:	29 2f       	mov	r18, r25
     624:	33 27       	eor	r19, r19
     626:	23 30       	cpi	r18, 0x03	; 3
     628:	31 05       	cpc	r19, r1
     62a:	b1 f0       	breq	.+44     	; 0x658 <CALLBACK_USB_GetDescriptor+0x36>
     62c:	4c f4       	brge	.+18     	; 0x640 <CALLBACK_USB_GetDescriptor+0x1e>
     62e:	21 30       	cpi	r18, 0x01	; 1
     630:	31 05       	cpc	r19, r1
     632:	09 f4       	brne	.+2      	; 0x636 <CALLBACK_USB_GetDescriptor+0x14>
     634:	39 c0       	rjmp	.+114    	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x86>
     636:	22 30       	cpi	r18, 0x02	; 2
     638:	31 05       	cpc	r19, r1
     63a:	09 f0       	breq	.+2      	; 0x63e <CALLBACK_USB_GetDescriptor+0x1c>
     63c:	3a c0       	rjmp	.+116    	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x90>
     63e:	07 c0       	rjmp	.+14     	; 0x64e <CALLBACK_USB_GetDescriptor+0x2c>
     640:	21 32       	cpi	r18, 0x21	; 33
     642:	31 05       	cpc	r19, r1
     644:	39 f1       	breq	.+78     	; 0x694 <CALLBACK_USB_GetDescriptor+0x72>
     646:	22 32       	cpi	r18, 0x22	; 34
     648:	31 05       	cpc	r19, r1
     64a:	49 f1       	breq	.+82     	; 0x69e <CALLBACK_USB_GetDescriptor+0x7c>
     64c:	32 c0       	rjmp	.+100    	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x90>
     64e:	ef e5       	ldi	r30, 0x5F	; 95
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	8e eb       	ldi	r24, 0xBE	; 190
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	31 c0       	rjmp	.+98     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     658:	99 27       	eor	r25, r25
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	91 05       	cpc	r25, r1
     65e:	61 f0       	breq	.+24     	; 0x678 <CALLBACK_USB_GetDescriptor+0x56>
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	91 05       	cpc	r25, r1
     664:	81 f0       	breq	.+32     	; 0x686 <CALLBACK_USB_GetDescriptor+0x64>
     666:	89 2b       	or	r24, r25
     668:	21 f5       	brne	.+72     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x90>
     66a:	ea eb       	ldi	r30, 0xBA	; 186
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	e4 91       	lpm	r30, Z+
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	8a eb       	ldi	r24, 0xBA	; 186
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	21 c0       	rjmp	.+66     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     678:	e6 ea       	ldi	r30, 0xA6	; 166
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e4 91       	lpm	r30, Z+
					  ParserData->TotalReportItems++;
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	86 ea       	ldi	r24, 0xA6	; 166
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	1a c0       	rjmp	.+52     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	e4 e7       	ldi	r30, 0x74	; 116
     688:	f0 e0       	ldi	r31, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	e4 91       	lpm	r30, Z+
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	f0 e0       	ldi	r31, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	84 e7       	ldi	r24, 0x74	; 116
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	13 c0       	rjmp	.+38     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     694:	e9 e0       	ldi	r30, 0x09	; 9
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	8d e0       	ldi	r24, 0x0D	; 13
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e c0       	rjmp	.+28     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     69e:	e8 eb       	ldi	r30, 0xB8	; 184
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	8f e2       	ldi	r24, 0x2F	; 47
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	09 c0       	rjmp	.+18     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     6a8:	e2 e1       	ldi	r30, 0x12	; 18
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	8d e1       	ldi	r24, 0x1D	; 29
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <CALLBACK_USB_GetDescriptor+0x98>
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	da 01       	movw	r26, r20

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	8d 93       	st	X+, r24
     6be:	9c 93       	st	X, r25
     6c0:	cf 01       	movw	r24, r30
     6c2:	08 95       	ret

000006c4 <CALLBACK_HID_Device_CreateHIDReport>:
     6c4:	ef 92       	push	r14
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	7b 01       	movw	r14, r22
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	c9 01       	movw	r24, r18
     6d4:	e8 01       	movw	r28, r16
     6d6:	e0 91 c3 01 	lds	r30, 0x01C3
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6da:	ee 23       	and	r30, r30
     6dc:	29 f1       	breq	.+74     	; 0x728 <CALLBACK_HID_Device_CreateHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	40 91 c4 01 	lds	r20, 0x01C4
     6e2:	20 91 c5 01 	lds	r18, 0x01C5
     6e6:	42 13       	cpse	r20, r18
     6e8:	1f c0       	rjmp	.+62     	; 0x728 <CALLBACK_HID_Device_CreateHIDReport+0x64>
     6ea:	e3 30       	cpi	r30, 0x03	; 3
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	39 f0       	breq	.+14     	; 0x6fc <CALLBACK_HID_Device_CreateHIDReport+0x38>
     6ee:	51 e0       	ldi	r21, 0x01	; 1
     6f0:	50 93 05 02 	sts	0x0205, r21
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	eb 5f       	subi	r30, 0xFB	; 251

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	fd 4f       	sbci	r31, 0xFD	; 253
     6fa:	50 83       	st	Z, r21
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	e6 ec       	ldi	r30, 0xC6	; 198
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	bf 01       	movw	r22, r30
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <memcpy>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	80 91 c3 01 	lds	r24, 0x01C3
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	f7 01       	movw	r30, r14
     70e:	80 83       	st	Z, r24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	80 91 c4 01 	lds	r24, 0x01C4
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	88 83       	st	Y, r24
     716:	19 82       	std	Y+1, r1	; 0x01
     718:	10 92 c3 01 	sts	0x01C3, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	10 92 c5 01 	sts	0x01C5, r1
     720:	10 92 c4 01 	sts	0x01C4, r1
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <CALLBACK_HID_Device_CreateHIDReport+0x66>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	08 95       	ret

00000738 <CALLBACK_HID_Device_ProcessHIDReport>:
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	c9 01       	movw	r24, r18
     73e:	63 30       	cpi	r22, 0x03	; 3
     740:	51 f4       	brne	.+20     	; 0x756 <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
     742:	5c 98       	cbi	0x0b, 4	; 11
     744:	20 91 42 01 	lds	r18, 0x0142
     748:	2c 60       	ori	r18, 0x0C	; 12
     74a:	20 93 42 01 	sts	0x0142, r18
     74e:	b8 01       	movw	r22, r16
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
	}
}
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     754:	a9 c6       	rjmp	.+3410   	; 0x14a8 <Serial_SendData>
     756:	1f 91       	pop	r17
	}
}
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <flushHID>:
	}
	// clear the flag that >0 reports were set
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void flushHID(void){
     75c:	04 c0       	rjmp	.+8      	; 0x766 <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 08 12 	call	0x2410	; 0x2410 <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     766:	80 91 c3 01 	lds	r24, 0x01C3
     76a:	88 23       	and	r24, r24
     76c:	31 f0       	breq	.+12     	; 0x77a <flushHID+0x1e>
     76e:	90 91 c4 01 	lds	r25, 0x01C4
     772:	80 91 c5 01 	lds	r24, 0x01C5
     776:	98 17       	cp	r25, r24
     778:	91 f3       	breq	.-28     	; 0x75e <flushHID+0x2>
     77a:	08 95       	ret

0000077c <getHIDReportLength>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

uint8_t getHIDReportLength(uint8_t ID){
     77c:	e0 91 c3 01 	lds	r30, 0x01C3
     780:	e1 50       	subi	r30, 0x01	; 1
     782:	e9 30       	cpi	r30, 0x09	; 9
     784:	28 f4       	brcc	.+10     	; 0x790 <getHIDReportLength+0x14>
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	e5 5d       	subi	r30, 0xD5	; 213
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	80 81       	ld	r24, Z
     78e:	08 95       	ret
	// Get the length of the report
	switch (ram.HID.ID){
     790:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     792:	08 95       	ret

00000794 <writeToCDC>:


void writeToCDC(uint8_t buffer[], uint8_t length){
     794:	46 2f       	mov	r20, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     796:	20 91 11 01 	lds	r18, 0x0111
     79a:	2f 70       	andi	r18, 0x0F	; 15
     79c:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7a0:	20 91 e8 00 	lds	r18, 0x00E8
	//CDC_Device_USBTask(&VirtualSerial_CDC_Interface);

	// Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
	// until it completes as there is a chance nothing is listening and a lengthy timeout could occur
	Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);
	while (!Endpoint_IsINReady());
     7a4:	20 ff       	sbrs	r18, 0
     7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <writeToCDC+0xc>

	// Try to send the next bytes to the host, abort if DTR isnt set to not block serial reading
	bool CurrentDTRState = (VirtualSerial_CDC_Interface.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     7a8:	20 91 20 01 	lds	r18, 0x0120
	if (CurrentDTRState)
     7ac:	20 ff       	sbrs	r18, 0
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <writeToCDC+0x28>
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	bc 01       	movw	r22, r24
     7b4:	80 e1       	ldi	r24, 0x10	; 16
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <CDC_Device_SendData>
     7bc:	08 95       	ret

000007be <checkNHPControlAddressError>:
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}

void checkNHPControlAddressError(void){
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <checkNHPControlAddressError+0x6>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <checkNHPControlAddressError+0x8>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <checkNHPControlAddressError+0xa>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     7cc:	60 91 c3 01 	lds	r22, 0x01C3
     7d0:	66 23       	and	r22, r22
     7d2:	79 f0       	breq	.+30     	; 0x7f2 <checkNHPControlAddressError+0x34>
     7d4:	80 91 c5 01 	lds	r24, 0x01C5
     7d8:	81 11       	cpse	r24, r1
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <checkNHPControlAddressError+0x34>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	71 60       	ori	r23, 0x01	; 1
     7e0:	ae 01       	movw	r20, r28
     7e2:	4f 5f       	subi	r20, 0xFF	; 255
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	6f d5       	rcall	.+2782   	; 0x12c8 <NHPwriteChecksum>
     7ea:	68 2f       	mov	r22, r24

		// Writes the NHP read buffer with the given length
		// If host is not listening it will discard all bytes to not block any HID reading
		writeToCDC(buff, length);
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	d1 df       	rcall	.-94     	; 0x794 <writeToCDC>
     7f2:	b4 df       	rcall	.-152    	; 0x75c <flushHID>
     7f4:	10 92 c3 01 	sts	0x01C3, r1
	}
	// bug in 1.6 - 1.7.2 found
	flushHID();
     7f8:	10 92 c5 01 	sts	0x01C5, r1

	// reset any pending HID reports
	ram.HID.ID = 0;
     7fc:	10 92 c4 01 	sts	0x01C4, r1
	ram.HID.recvlength = 0; // just to be sure
     800:	26 96       	adiw	r28, 0x06	; 6
	ram.HID.length = 0; // just to be sure
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
}
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <checkNHPProtocol>:
	if (CurrentDTRState)
		CDC_Device_SendData(&VirtualSerial_CDC_Interface, buffer, length);
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     812:	cf 93       	push	r28
	// set new timeout mark
	ram.PulseMSRemaining.NHPTimeout = NHP_TIMEOUT_MS;
     814:	90 91 42 01 	lds	r25, 0x0142
     818:	90 63       	ori	r25, 0x30	; 48
     81a:	90 93 42 01 	sts	0x0142, r25

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     81e:	6f e0       	ldi	r22, 0x0F	; 15
     820:	72 e0       	ldi	r23, 0x02	; 2
     822:	2f d5       	rcall	.+2654   	; 0x1282 <NHPreadChecksum>
     824:	c8 2f       	mov	r28, r24
     826:	88 23       	and	r24, r24

	if (address == 0)
     828:	09 f4       	brne	.+2      	; 0x82c <checkNHPProtocol+0x1a>
     82a:	75 c0       	rjmp	.+234    	; 0x916 <checkNHPProtocol+0x104>
     82c:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     82e:	19 c0       	rjmp	.+50     	; 0x862 <checkNHPProtocol+0x50>
     830:	c6 df       	rcall	.-116    	; 0x7be <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     832:	80 91 0f 02 	lds	r24, 0x020F

		// ignore command
		uint8_t length = ram.NHP.readlength;
     836:	68 2f       	mov	r22, r24
     838:	66 95       	lsr	r22
     83a:	66 95       	lsr	r22
     83c:	66 95       	lsr	r22
     83e:	67 70       	andi	r22, 0x07	; 7
     840:	86 ff       	sbrs	r24, 6
     842:	06 c0       	rjmp	.+12     	; 0x850 <checkNHPProtocol+0x3e>
		if (ram.NHP.leadError && address == NHP_COMMAND){
     844:	cf 3f       	cpi	r28, 0xFF	; 255
     846:	21 f4       	brne	.+8      	; 0x850 <checkNHPProtocol+0x3e>
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	8f 7b       	andi	r24, 0xBF	; 191
			length ++;
     84c:	80 93 0f 02 	sts	0x020F, r24
			ram.NHP.leadError = false;
     850:	84 e1       	ldi	r24, 0x14	; 20
     852:	92 e0       	ldi	r25, 0x02	; 2
		}

		// error while reading, write down current buffer
		writeToCDC(ram.NHP.readbuffer, length);
     854:	9f df       	rcall	.-194    	; 0x794 <writeToCDC>
     856:	80 91 0f 02 	lds	r24, 0x020F
     85a:	80 68       	ori	r24, 0x80	; 128
		//for (int i = 0; i < length; i++)
		//	RingBuffer_Insert(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer[i]);

		// reset buffer. Tell the timeout function that this part is written down
		ram.NHP.reset = true;
     85c:	80 93 0f 02 	sts	0x020F, r24
     860:	5a c0       	rjmp	.+180    	; 0x916 <checkNHPProtocol+0x104>
     862:	7c df       	rcall	.-264    	; 0x75c <flushHID>
     864:	c1 30       	cpi	r28, 0x01	; 1
		return;
     866:	c9 f4       	brne	.+50     	; 0x89a <checkNHPProtocol+0x88>
	}

	// we have a pending HID report, flush it first
	flushHID();
     868:	80 91 11 02 	lds	r24, 0x0211

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	a9 f4       	brne	.+42     	; 0x89a <checkNHPProtocol+0x88>
     870:	a6 df       	rcall	.-180    	; 0x7be <checkNHPControlAddressError>
     872:	80 91 10 02 	lds	r24, 0x0210
     876:	80 93 c3 01 	sts	0x01C3, r24
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     87a:	10 92 c5 01 	sts	0x01C5, r1

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     87e:	9f e3       	ldi	r25, 0x3F	; 63
     880:	e6 ec       	ldi	r30, 0xC6	; 198
     882:	f1 e0       	ldi	r31, 0x01	; 1
		ram.HID.recvlength = 0;
     884:	df 01       	movw	r26, r30
     886:	1d 92       	st	X+, r1
		memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));
     888:	9a 95       	dec	r25
     88a:	e9 f7       	brne	.-6      	; 0x886 <checkNHPProtocol+0x74>
     88c:	77 df       	rcall	.-274    	; 0x77c <getHIDReportLength>
     88e:	80 93 c4 01 	sts	0x01C4, r24
     892:	81 11       	cpse	r24, r1
     894:	40 c0       	rjmp	.+128    	; 0x916 <checkNHPProtocol+0x104>

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     896:	cf 91       	pop	r28
     898:	92 cf       	rjmp	.-220    	; 0x7be <checkNHPControlAddressError>
     89a:	80 91 c3 01 	lds	r24, 0x01C3

		// error, write down this wrong ID report
		if (!ram.HID.length)
     89e:	88 23       	and	r24, r24
     8a0:	79 f1       	breq	.+94     	; 0x900 <checkNHPProtocol+0xee>
		checkNHPControlAddressError();

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}
     8a2:	60 91 c5 01 	lds	r22, 0x01C5
		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);

		// error, write down this wrong ID report
		if (!ram.HID.length)
			checkNHPControlAddressError();
     8a6:	46 2f       	mov	r20, r22
		// The Protocol received a valid signal with inverse checksum
		// Do not write the buff in the loop above or below, filter it out at the end
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	8c 2f       	mov	r24, r28
     8ac:	99 27       	eor	r25, r25
     8ae:	87 fd       	sbrc	r24, 7
     8b0:	90 95       	com	r25
     8b2:	9a 01       	movw	r18, r20
     8b4:	2e 5f       	subi	r18, 0xFE	; 254
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	35 95       	asr	r19
     8ba:	27 95       	ror	r18
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	82 17       	cp	r24, r18
     8c2:	93 07       	cpc	r25, r19
     8c4:	e9 f4       	brne	.+58     	; 0x900 <checkNHPProtocol+0xee>
     8c6:	fa 01       	movw	r30, r20
     8c8:	ea 53       	subi	r30, 0x3A	; 58
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	80 91 10 02 	lds	r24, 0x0210
     8d0:	80 83       	st	Z, r24
     8d2:	e6 2f       	mov	r30, r22
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     8d4:	ef 5f       	subi	r30, 0xFF	; 255
     8d6:	e0 93 c5 01 	sts	0x01C5, r30
     8da:	80 91 c4 01 	lds	r24, 0x01C4
     8de:	8e 17       	cp	r24, r30
     8e0:	49 f0       	breq	.+18     	; 0x8f4 <checkNHPProtocol+0xe2>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	ea 53       	subi	r30, 0x3A	; 58
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     8e8:	90 91 11 02 	lds	r25, 0x0211
     8ec:	90 83       	st	Z, r25
     8ee:	6e 5f       	subi	r22, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     8f0:	60 93 c5 01 	sts	0x01C5, r22
     8f4:	90 91 c5 01 	lds	r25, 0x01C5
     8f8:	89 13       	cpse	r24, r25
     8fa:	0d c0       	rjmp	.+26     	; 0x916 <checkNHPProtocol+0x104>
     8fc:	cf 91       	pop	r28
     8fe:	2e cf       	rjmp	.-420    	; 0x75c <flushHID>
     900:	5e df       	rcall	.-324    	; 0x7be <checkNHPControlAddressError>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     902:	60 91 0f 02 	lds	r22, 0x020F
     906:	66 95       	lsr	r22
     908:	66 95       	lsr	r22
		checkNHPControlAddressError();

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
	}
}
     90a:	66 95       	lsr	r22
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
			flushHID();
     90c:	67 70       	andi	r22, 0x07	; 7
     90e:	84 e1       	ldi	r24, 0x14	; 20

	// we received a corrupt data packet
	else{
		// check if previous reading was a valid Control Address and write it down
		// if not discard the bytes because we assume it is corrupted data
		checkNHPControlAddressError();
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	cf 91       	pop	r28

		// just a normal Protocol outside our control address (or corrupted packet), write it down
		writeToCDC(ram.NHP.readbuffer, ram.NHP.readlength);
     914:	3f cf       	rjmp	.-386    	; 0x794 <writeToCDC>
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <LEDs_TurnOnLEDs>:
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     91a:	9b b1       	in	r25, 0x0b	; 11
     91c:	80 95       	com	r24
     91e:	89 23       	and	r24, r25
     920:	8b b9       	out	0x0b, r24	; 11
     922:	08 95       	ret

00000924 <sendCDCbyte>:

}

void sendCDCbyte(uint8_t b){
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     924:	68 2f       	mov	r22, r24
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <CDC_Device_SendByte>
     92e:	88 23       	and	r24, r24
     930:	e9 f0       	breq	.+58     	; 0x96c <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     932:	80 e1       	ldi	r24, 0x10	; 16
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <CDC_Device_USBTask>
		USB_USBTask();
     93a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     93e:	80 e1       	ldi	r24, 0x10	; 16
     940:	ec df       	rcall	.-40     	; 0x91a <LEDs_TurnOnLEDs>
     942:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	81 ee       	ldi	r24, 0xE1	; 225
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <sendCDCbyte+0x24>
     950:	00 c0       	rjmp	.+0      	; 0x952 <sendCDCbyte+0x2e>
     952:	00 00       	nop
     954:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     956:	e1 df       	rcall	.-62     	; 0x91a <LEDs_TurnOnLEDs>
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	81 ee       	ldi	r24, 0xE1	; 225
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	80 40       	sbci	r24, 0x00	; 0
     962:	90 40       	sbci	r25, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <sendCDCbyte+0x3a>
     966:	00 c0       	rjmp	.+0      	; 0x968 <sendCDCbyte+0x44>
     968:	00 00       	nop
     96a:	e9 cf       	rjmp	.-46     	; 0x93e <sendCDCbyte+0x1a>
     96c:	08 95       	ret

0000096e <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     96e:	80 e1       	ldi	r24, 0x10	; 16
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     976:	97 fd       	sbrc	r25, 7
     978:	fa cf       	rjmp	.-12     	; 0x96e <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     97a:	08 95       	ret

0000097c <fill>:

void fill(int n) {
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	7c 01       	movw	r14, r24
     98a:	03 e4       	ldi	r16, 0x43	; 67
     98c:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     98e:	c0 e0       	ldi	r28, 0x00	; 0
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	05 c0       	rjmp	.+10     	; 0x99e <fill+0x22>
		ram.ispBuffer[x] = getch();
     994:	ec df       	rcall	.-40     	; 0x96e <getch>
     996:	f8 01       	movw	r30, r16
     998:	81 93       	st	Z+, r24
     99a:	8f 01       	movw	r16, r30
     99c:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     99e:	ce 15       	cp	r28, r14
     9a0:	df 05       	cpc	r29, r15
     9a2:	c4 f3       	brlt	.-16     	; 0x994 <fill+0x18>
     9a4:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     9b2:	90 91 4f 01 	lds	r25, 0x014F
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	20 91 50 01 	lds	r18, 0x0150
     9bc:	82 0f       	add	r24, r18
     9be:	91 1d       	adc	r25, r1
     9c0:	90 93 3f 01 	sts	0x013F, r25
     9c4:	80 93 3e 01 	sts	0x013E, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     9c8:	90 91 51 01 	lds	r25, 0x0151
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	20 91 52 01 	lds	r18, 0x0152
     9d2:	82 0f       	add	r24, r18
     9d4:	91 1d       	adc	r25, r1
     9d6:	90 93 41 01 	sts	0x0141, r25
     9da:	80 93 40 01 	sts	0x0140, r24
     9de:	08 95       	ret

000009e0 <breply>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void breply(uint8_t b) {
     9e0:	cf 93       	push	r28
     9e2:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     9e4:	c4 df       	rcall	.-120    	; 0x96e <getch>
     9e6:	80 32       	cpi	r24, 0x20	; 32
     9e8:	39 f4       	brne	.+14     	; 0x9f8 <breply+0x18>
     9ea:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     9ec:	9b df       	rcall	.-202    	; 0x924 <sendCDCbyte>
     9ee:	8c 2f       	mov	r24, r28
     9f0:	99 df       	rcall	.-206    	; 0x924 <sendCDCbyte>
		sendCDCbyte(b);
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	cf 91       	pop	r28
     9f6:	96 cf       	rjmp	.-212    	; 0x924 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     9f8:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     9fa:	94 df       	rcall	.-216    	; 0x924 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     9fc:	80 91 38 01 	lds	r24, 0x0138
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     a00:	90 91 39 01 	lds	r25, 0x0139
     a04:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     a06:	90 93 39 01 	sts	0x0139, r25
     a0a:	80 93 38 01 	sts	0x0138, r24
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <get_parameters>:
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}

void get_parameters(uint8_t c) {
     a12:	81 38       	cpi	r24, 0x81	; 129
     a14:	59 f0       	breq	.+22     	; 0xa2c <get_parameters+0x1a>
     a16:	18 f4       	brcc	.+6      	; 0xa1e <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     a18:	80 38       	cpi	r24, 0x80	; 128
     a1a:	71 f4       	brne	.+28     	; 0xa38 <get_parameters+0x26>
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <get_parameters+0x16>
     a1e:	82 38       	cpi	r24, 0x82	; 130
     a20:	39 f0       	breq	.+14     	; 0xa30 <get_parameters+0x1e>
     a22:	83 39       	cpi	r24, 0x93	; 147
     a24:	49 f4       	brne	.+18     	; 0xa38 <get_parameters+0x26>
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <get_parameters+0x22>
}

void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     a30:	82 e1       	ldi	r24, 0x12	; 18
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     a34:	83 e5       	ldi	r24, 0x53	; 83
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <get_parameters+0x28>
		break;
	default:
		breply(0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	d2 cf       	rjmp	.-92     	; 0x9e0 <breply>

00000a3c <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     a3c:	98 df       	rcall	.-208    	; 0x96e <getch>
     a3e:	80 32       	cpi	r24, 0x20	; 32
     a40:	21 f4       	brne	.+8      	; 0xa4a <replyOK+0xe>
     a42:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     a44:	6f df       	rcall	.-290    	; 0x924 <sendCDCbyte>
     a46:	80 e1       	ldi	r24, 0x10	; 16
     a48:	6d cf       	rjmp	.-294    	; 0x924 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     a4a:	80 e2       	ldi	r24, 0x20	; 32
     a4c:	66 df       	rcall	.-308    	; 0x91a <LEDs_TurnOnLEDs>
     a4e:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     a50:	80 e7       	ldi	r24, 0x70	; 112
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	21 50       	subi	r18, 0x01	; 1
     a56:	80 40       	sbci	r24, 0x00	; 0
     a58:	90 40       	sbci	r25, 0x00	; 0
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <replyOK+0x18>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <replyOK+0x22>
     a5e:	00 00       	nop
     a60:	5d 9a       	sbi	0x0b, 5	; 11
     a62:	2f ef       	ldi	r18, 0xFF	; 255
     a64:	80 e7       	ldi	r24, 0x70	; 112
     a66:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     a68:	21 50       	subi	r18, 0x01	; 1
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <replyOK+0x2c>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <replyOK+0x36>
     a72:	00 00       	nop
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	51 df       	rcall	.-350    	; 0x91a <LEDs_TurnOnLEDs>
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	90 40       	sbci	r25, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <replyOK+0x42>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <replyOK+0x4c>
     a88:	00 00       	nop
     a8a:	5d 9a       	sbi	0x0b, 5	; 11
     a8c:	85 e1       	ldi	r24, 0x15	; 21
     a8e:	4a df       	rcall	.-364    	; 0x924 <sendCDCbyte>
     a90:	80 91 38 01 	lds	r24, 0x0138
     a94:	90 91 39 01 	lds	r25, 0x0139
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 39 01 	sts	0x0139, r25
		ram.isp.error++;
     a9e:	80 93 38 01 	sts	0x0138, r24
     aa2:	08 95       	ret

00000aa4 <spi_init>:
	DDRB |= (1 << AVR_MOSI); // OUTPUT
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = 1;
}

void spi_init(void) {
     aa4:	83 e5       	ldi	r24, 0x53	; 83
     aa6:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     aa8:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     aaa:	8e b5       	in	r24, 0x2e	; 46
     aac:	08 95       	ret

00000aae <spi_wait>:
	sei();
#endif
	return reply;
}

void spi_wait(void) {
     aae:	0d b4       	in	r0, 0x2d	; 45
     ab0:	07 fe       	sbrs	r0, 7
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <spi_wait>
	do {
	} while (!(SPSR & (1 << SPIF)));
}
     ab4:	08 95       	ret

00000ab6 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     ab6:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     ab8:	fa df       	rcall	.-12     	; 0xaae <spi_wait>
     aba:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     abc:	08 95       	ret

00000abe <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <spi_transaction+0x6>
     ac4:	1f 92       	push	r1
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     aca:	2b 83       	std	Y+3, r18	; 0x03
     acc:	4a 83       	std	Y+2, r20	; 0x02
     ace:	69 83       	std	Y+1, r22	; 0x01
     ad0:	f2 df       	rcall	.-28     	; 0xab6 <spi_send>
     ad2:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     ad4:	86 2f       	mov	r24, r22
     ad6:	ef df       	rcall	.-34     	; 0xab6 <spi_send>
     ad8:	4a 81       	ldd	r20, Y+2	; 0x02
     ada:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     adc:	ec df       	rcall	.-40     	; 0xab6 <spi_send>
     ade:	2b 81       	ldd	r18, Y+3	; 0x03
     ae0:	82 2f       	mov	r24, r18
     ae2:	0f 90       	pop	r0
	return spi_send(d);
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	e4 cf       	rjmp	.-56     	; 0xab6 <spi_send>

00000aee <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     aee:	e6 e3       	ldi	r30, 0x36	; 54
     af0:	f1 e0       	ldi	r31, 0x01	; 1
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     af2:	8f b7       	in	r24, 0x3f	; 63
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
     af4:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Index = 0;
		Buffer->Enabled = false;
     af6:	10 82       	st	Z, r1
		Buffer->Count = 0;
     af8:	11 82       	std	Z+1, r1	; 0x01
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     afa:	8f bf       	out	0x3f, r24	; 63

void start_pmode(void) {
	// do not write into Serial buffer, we need this ram now
	LRingBuffer_DisableBuffer(&ram.USARTtoUSB_Buffer);

	spi_init();
     afc:	d3 df       	rcall	.-90     	; 0xaa4 <spi_init>
     afe:	24 9a       	sbi	0x04, 4	; 4
	// following delays may not work on all targets...
	DDRB |= (1 << AVR_SS); // OUTPUT
     b00:	2c 9a       	sbi	0x05, 4	; 5
	PORTB |= (1 << AVR_SS); // HIGH
     b02:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1 << AVR_SCK); // OUTPUT
     b04:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1 << AVR_SCK); // LOW
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	80 e7       	ldi	r24, 0x70	; 112
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	21 50       	subi	r18, 0x01	; 1
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	90 40       	sbci	r25, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <start_pmode+0x1e>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <start_pmode+0x28>
     b16:	00 00       	nop
     b18:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);
	PORTB &= ~(1 << AVR_SS); // LOW
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	80 e7       	ldi	r24, 0x70	; 112
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <start_pmode+0x32>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <start_pmode+0x3c>
     b2a:	00 00       	nop
     b2c:	23 98       	cbi	0x04, 3	; 4
	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	DDRB &= ~(1 << AVR_MISO); // INPUT
     b2e:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << AVR_MOSI); // OUTPUT
     b30:	20 e0       	ldi	r18, 0x00	; 0
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	63 e5       	ldi	r22, 0x53	; 83
     b36:	8c ea       	ldi	r24, 0xAC	; 172
     b38:	c2 df       	rcall	.-124    	; 0xabe <spi_transaction>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
	ram.isp.pmode = 1;
     b3e:	90 93 3b 01 	sts	0x013B, r25
     b42:	80 93 3a 01 	sts	0x013A, r24
     b46:	08 95       	ret

00000b48 <flash_read>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t flash_read(uint8_t hilo, int addr) {
     b48:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     b4a:	88 0f       	add	r24, r24
     b4c:	88 0f       	add	r24, r24
     b4e:	88 0f       	add	r24, r24
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	67 2f       	mov	r22, r23
     b54:	80 5e       	subi	r24, 0xE0	; 224
     b56:	b3 cf       	rjmp	.-154    	; 0xabe <spi_transaction>

00000b58 <flash_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	19 c0       	rjmp	.+50     	; 0xb9a <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     b68:	60 91 3c 01 	lds	r22, 0x013C
     b6c:	70 91 3d 01 	lds	r23, 0x013D
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	ea df       	rcall	.-44     	; 0xb48 <flash_read>
     b74:	d7 de       	rcall	.-594    	; 0x924 <sendCDCbyte>
		sendCDCbyte(low);
     b76:	60 91 3c 01 	lds	r22, 0x013C
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     b7a:	70 91 3d 01 	lds	r23, 0x013D
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	e3 df       	rcall	.-58     	; 0xb48 <flash_read>
     b82:	d0 de       	rcall	.-608    	; 0x924 <sendCDCbyte>
     b84:	20 91 3c 01 	lds	r18, 0x013C
		sendCDCbyte(high);
     b88:	30 91 3d 01 	lds	r19, 0x013D
		ram.isp._addr++;
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	30 93 3d 01 	sts	0x013D, r19
     b94:	20 93 3c 01 	sts	0x013C, r18
     b98:	22 96       	adiw	r28, 0x02	; 2
     b9a:	c0 17       	cp	r28, r16
     b9c:	d1 07       	cpc	r29, r17
     b9e:	24 f3       	brlt	.-56     	; 0xb68 <flash_read_page+0x10>
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <universal>:

void universal(void) {
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	e5 de       	rcall	.-566    	; 0x97c <fill>
     bb2:	20 91 46 01 	lds	r18, 0x0146
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
     bb6:	40 91 45 01 	lds	r20, 0x0145
     bba:	60 91 44 01 	lds	r22, 0x0144
     bbe:	80 91 43 01 	lds	r24, 0x0143
     bc2:	7d df       	rcall	.-262    	; 0xabe <spi_transaction>
     bc4:	0d cf       	rjmp	.-486    	; 0x9e0 <breply>

00000bc6 <read_signature>:
	breply(ch);
}

void read_signature(void) {
     bc6:	d3 de       	rcall	.-602    	; 0x96e <getch>
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	59 f0       	breq	.+22     	; 0xbe2 <read_signature+0x1c>
     bcc:	80 91 38 01 	lds	r24, 0x0138
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     bd0:	90 91 39 01 	lds	r25, 0x0139
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 39 01 	sts	0x0139, r25
     bda:	80 93 38 01 	sts	0x0138, r24
     bde:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     be0:	15 c0       	rjmp	.+42     	; 0xc0c <read_signature+0x46>
     be2:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     be4:	9f de       	rcall	.-706    	; 0x924 <sendCDCbyte>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e3       	ldi	r24, 0x30	; 48
     bee:	67 df       	rcall	.-306    	; 0xabe <spi_transaction>
     bf0:	99 de       	rcall	.-718    	; 0x924 <sendCDCbyte>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     bfa:	61 df       	rcall	.-318    	; 0xabe <spi_transaction>
     bfc:	93 de       	rcall	.-730    	; 0x924 <sendCDCbyte>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	42 e0       	ldi	r20, 0x02	; 2
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     c06:	5b df       	rcall	.-330    	; 0xabe <spi_transaction>
     c08:	8d de       	rcall	.-742    	; 0x924 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     c0a:	80 e1       	ldi	r24, 0x10	; 16
     c0c:	8b ce       	rjmp	.-746    	; 0x924 <sendCDCbyte>

00000c0e <end_pmode>:
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void end_pmode(void) {
     c0e:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     c10:	22 98       	cbi	0x04, 2	; 4

	// Hardwaresetup to turn off the HID function with shorting the MOSI pin with GND next to it
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP
     c12:	22 9a       	sbi	0x04, 2	; 4

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
     c14:	21 98       	cbi	0x04, 1	; 4
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     c16:	24 98       	cbi	0x04, 4	; 4
	// do not short this pin in AVRISP mode!!!
	AVR_SPI_DDR |= (1 << AVR_MOSI); // PULLUP

	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SS); // INPUT
	ram.isp.pmode = 0;
     c18:	10 92 3b 01 	sts	0x013B, r1
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
     c1c:	10 92 3a 01 	sts	0x013A, r1
	AVR_SPI_DDR &= ~(1 << AVR_SCK); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SS); // INPUT
	ram.isp.pmode = 0;

	// configure Serial with HID baud to work after reprogramming
	if (VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
     c20:	80 91 24 01 	lds	r24, 0x0124
     c24:	90 91 25 01 	lds	r25, 0x0125
     c28:	a0 91 26 01 	lds	r26, 0x0126
     c2c:	b0 91 27 01 	lds	r27, 0x0127
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	91 f4       	brne	.+36     	; 0xc5c <end_pmode+0x4e>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     c38:	80 e1       	ldi	r24, 0x10	; 16
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 cd 00 	sts	0x00CD, r25
     c40:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     c44:	86 e0       	ldi	r24, 0x06	; 6
     c46:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     c50:	88 e1       	ldi	r24, 0x18	; 24
     c52:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     c56:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     c58:	5a 9a       	sbi	0x0b, 2	; 11
		Serial_Init(115200, true);
		SerialInitHID();
     c5a:	83 d3       	rcall	.+1798   	; 0x1362 <SerialInitHID>
     c5c:	9f b7       	in	r25, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c5e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c60:	80 91 36 01 	lds	r24, 0x0136
		bool state;

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		state = Buffer->Enabled;
     c64:	87 fb       	bst	r24, 7
     c66:	88 27       	eor	r24, r24
     c68:	80 f9       	bld	r24, 0
     c6a:	9f bf       	out	0x3f, r25	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c6c:	81 11       	cpse	r24, r1
	} //TODO remove (changed by cdc interrupt)

	// enable Serial buffer again
	if (!LRingBuffer_IsEnabled(&ram.USARTtoUSB_Buffer))
     c6e:	0a c0       	rjmp	.+20     	; 0xc84 <end_pmode+0x76>
     c70:	e6 e3       	ldi	r30, 0x36	; 54
	 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
	 */
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	9f b7       	in	r25, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c76:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c78:	80 81       	ld	r24, Z

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Index = 0;
     c7a:	80 78       	andi	r24, 0x80	; 128
		Buffer->Enabled = true;
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	80 83       	st	Z, r24
     c80:	11 82       	std	Z+1, r1	; 0x01
		Buffer->Count = 0;
     c82:	9f bf       	out	0x3f, r25	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c84:	80 91 0f 02 	lds	r24, 0x020F
		LRingBuffer_InitBuffer(&ram.USARTtoUSB_Buffer);

	// HID Setup
	ram.NHP.reset = true;
     c88:	80 68       	ori	r24, 0x80	; 128
	ram.NHP.leadError = false;
     c8a:	8f 7b       	andi	r24, 0xBF	; 191
     c8c:	80 93 0f 02 	sts	0x020F, r24
     c90:	10 92 c3 01 	sts	0x01C3, r1
	ram.HID.ID = 0;
     c94:	08 95       	ret

00000c96 <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	d8 2f       	mov	r29, r24
     ca8:	c9 2f       	mov	r28, r25
     caa:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     cac:	cb 01       	movw	r24, r22
     cae:	66 de       	rcall	.-820    	; 0x97c <fill>
     cb0:	5d 9a       	sbi	0x0b, 5	; 11
     cb2:	83 e4       	ldi	r24, 0x43	; 67
     cb4:	c8 2e       	mov	r12, r24
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	d8 2e       	mov	r13, r24
     cba:	0d 2f       	mov	r16, r29
     cbc:	1c 2f       	mov	r17, r28
     cbe:	e8 01       	movw	r28, r16
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <write_eeprom_chunk+0x4e>
     cc2:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
     cc4:	21 91       	ld	r18, Z+
     cc6:	6f 01       	movw	r12, r30
     cc8:	4c 2f       	mov	r20, r28
     cca:	6d 2f       	mov	r22, r29
     ccc:	80 ec       	ldi	r24, 0xC0	; 192
     cce:	f7 de       	rcall	.-530    	; 0xabe <spi_transaction>
     cd0:	ff e7       	ldi	r31, 0x7F	; 127
     cd2:	22 e3       	ldi	r18, 0x32	; 50
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	f1 50       	subi	r31, 0x01	; 1
     cd8:	20 40       	sbci	r18, 0x00	; 0
     cda:	80 40       	sbci	r24, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <write_eeprom_chunk+0x40>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <write_eeprom_chunk+0x4a>
     ce0:	00 00       	nop
     ce2:	21 96       	adiw	r28, 0x01	; 1
     ce4:	ce 01       	movw	r24, r28
     ce6:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     ce8:	91 0b       	sbc	r25, r17
     cea:	8e 15       	cp	r24, r14
     cec:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
     cee:	4c f3       	brlt	.-46     	; 0xcc2 <write_eeprom_chunk+0x2c>
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	13 de       	rcall	.-986    	; 0x91a <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
     cf4:	80 e1       	ldi	r24, 0x10	; 16
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
	return STK_OK;
}
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	08 95       	ret

00000d08 <write_eeprom>:
	}
}


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d10:	c0 91 3c 01 	lds	r28, 0x013C
     d14:	d0 91 3d 01 	lds	r29, 0x013D
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
     d18:	20 91 40 01 	lds	r18, 0x0140
     d1c:	30 91 41 01 	lds	r19, 0x0141
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	24 f0       	brlt	.+8      	; 0xd2e <write_eeprom+0x26>


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     d26:	cc 0f       	add	r28, r28
     d28:	dd 1f       	adc	r29, r29
     d2a:	8c 01       	movw	r16, r24
     d2c:	12 c0       	rjmp	.+36     	; 0xd52 <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
     d2e:	80 91 38 01 	lds	r24, 0x0138
     d32:	90 91 39 01 	lds	r25, 0x0139
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 39 01 	sts	0x0139, r25
     d3c:	80 93 38 01 	sts	0x0138, r24
		return STK_FAILED;
     d40:	81 e1       	ldi	r24, 0x11	; 17
     d42:	0e c0       	rjmp	.+28     	; 0xd60 <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
     d44:	60 e2       	ldi	r22, 0x20	; 32
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ce 01       	movw	r24, r28
     d4a:	a5 df       	rcall	.-182    	; 0xc96 <write_eeprom_chunk>
     d4c:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
     d4e:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
     d50:	11 09       	sbc	r17, r1
     d52:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
     d54:	11 05       	cpc	r17, r1
     d56:	b4 f7       	brge	.-20     	; 0xd44 <write_eeprom+0x3c>
     d58:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
     d5a:	ce 01       	movw	r24, r28
     d5c:	9c df       	rcall	.-200    	; 0xc96 <write_eeprom_chunk>
     d5e:	80 e1       	ldi	r24, 0x10	; 16
     d60:	df 91       	pop	r29
	return STK_OK;
     d62:	cf 91       	pop	r28
}
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <eeprom_read_page>:
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     d78:	00 91 3c 01 	lds	r16, 0x013C
     d7c:	10 91 3d 01 	lds	r17, 0x013D
     d80:	00 0f       	add	r16, r16
     d82:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     d84:	e8 01       	movw	r28, r16
     d86:	07 c0       	rjmp	.+14     	; 0xd96 <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     d88:	2f ef       	ldi	r18, 0xFF	; 255
     d8a:	4c 2f       	mov	r20, r28
     d8c:	6d 2f       	mov	r22, r29
     d8e:	80 ea       	ldi	r24, 0xA0	; 160
     d90:	96 de       	rcall	.-724    	; 0xabe <spi_transaction>
     d92:	c8 dd       	rcall	.-1136   	; 0x924 <sendCDCbyte>
		sendCDCbyte(ee);
     d94:	21 96       	adiw	r28, 0x01	; 1
     d96:	ce 01       	movw	r24, r28
     d98:	80 1b       	sub	r24, r16
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     d9a:	91 0b       	sbc	r25, r17
     d9c:	8e 15       	cp	r24, r14
     d9e:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     da0:	9c f3       	brlt	.-26     	; 0xd88 <eeprom_read_page+0x1e>
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	08 95       	ret

00000db2 <read_page>:
	//LEDs_TurnOnLEDs(LEDS_ALL_LEDS);
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     db8:	da dd       	rcall	.-1100   	; 0x96e <getch>
     dba:	d8 2f       	mov	r29, r24
     dbc:	d8 dd       	rcall	.-1104   	; 0x96e <getch>
	length += getch();
     dbe:	c8 2f       	mov	r28, r24
     dc0:	d6 dd       	rcall	.-1108   	; 0x96e <getch>
     dc2:	18 2f       	mov	r17, r24
	char memtype = getch();
     dc4:	d4 dd       	rcall	.-1112   	; 0x96e <getch>
     dc6:	80 32       	cpi	r24, 0x20	; 32
     dc8:	59 f0       	breq	.+22     	; 0xde0 <read_page+0x2e>
	if (CRC_EOP != getch()) {
     dca:	80 91 38 01 	lds	r24, 0x0138
     dce:	90 91 39 01 	lds	r25, 0x0139
		ram.isp.error++;
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	90 93 39 01 	sts	0x0139, r25
     dd8:	80 93 38 01 	sts	0x0138, r24
     ddc:	85 e1       	ldi	r24, 0x15	; 21
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <read_page+0x54>
     de0:	3d 2f       	mov	r19, r29
     de2:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     de4:	c9 01       	movw	r24, r18
     de6:	8c 0f       	add	r24, r28
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     de8:	91 1d       	adc	r25, r1
     dea:	ec 01       	movw	r28, r24
	length += getch();
     dec:	84 e1       	ldi	r24, 0x14	; 20
     dee:	9a dd       	rcall	.-1228   	; 0x924 <sendCDCbyte>
     df0:	16 34       	cpi	r17, 0x46	; 70
     df2:	19 f4       	brne	.+6      	; 0xdfa <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
     df4:	ce 01       	movw	r24, r28
     df6:	b0 de       	rcall	.-672    	; 0xb58 <flash_read_page>
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
     dfa:	15 34       	cpi	r17, 0x45	; 69
     dfc:	19 f4       	brne	.+6      	; 0xe04 <read_page+0x52>
     dfe:	ce 01       	movw	r24, r28
     e00:	b4 df       	rcall	.-152    	; 0xd6a <eeprom_read_page>
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <read_page+0x54>
     e04:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	8b cd       	rjmp	.-1258   	; 0x924 <sendCDCbyte>

00000e0e <commit>:
	}
	commit(page);
	return STK_OK;
}

void commit(int addr) {
     e0e:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
     e10:	20 e0       	ldi	r18, 0x00	; 0
	//_delay_ms(200);
	//LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
}

void read_page(void) {
	char result = (char)STK_FAILED;
     e12:	48 2f       	mov	r20, r24
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
     e14:	69 2f       	mov	r22, r25
     e16:	8c e4       	ldi	r24, 0x4C	; 76
     e18:	52 de       	rcall	.-860    	; 0xabe <spi_transaction>
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
     e1a:	2f ef       	ldi	r18, 0xFF	; 255
     e1c:	86 e7       	ldi	r24, 0x76	; 118
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	21 50       	subi	r18, 0x01	; 1
     e22:	80 40       	sbci	r24, 0x00	; 0
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <commit+0x12>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <commit+0x1c>
     e2a:	00 00       	nop
     e2c:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
     e2e:	75 cd       	rjmp	.-1302   	; 0x91a <LEDs_TurnOnLEDs>

00000e30 <current_page>:
}

int current_page(void) {
     e30:	80 91 3e 01 	lds	r24, 0x013E
     e34:	90 91 3f 01 	lds	r25, 0x013F
     e38:	20 91 3c 01 	lds	r18, 0x013C
     e3c:	30 91 3d 01 	lds	r19, 0x013D
     e40:	80 32       	cpi	r24, 0x20	; 32
     e42:	91 05       	cpc	r25, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     e46:	20 7f       	andi	r18, 0xF0	; 240
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     e4a:	80 34       	cpi	r24, 0x40	; 64
     e4c:	91 05       	cpc	r25, r1
     e4e:	11 f4       	brne	.+4      	; 0xe54 <current_page+0x24>
     e50:	20 7e       	andi	r18, 0xE0	; 224
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     e54:	80 38       	cpi	r24, 0x80	; 128
     e56:	91 05       	cpc	r25, r1
     e58:	11 f4       	brne	.+4      	; 0xe5e <current_page+0x2e>
     e5a:	20 7c       	andi	r18, 0xC0	; 192
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     e5e:	81 15       	cp	r24, r1
     e60:	91 40       	sbci	r25, 0x01	; 1
     e62:	09 f4       	brne	.+2      	; 0xe66 <current_page+0x36>
     e64:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     e66:	c9 01       	movw	r24, r18
     e68:	08 95       	ret

00000e6a <flash>:

void flash(uint8_t hilo, int addr, uint8_t data) {
     e6a:	96 2f       	mov	r25, r22
     e6c:	67 2f       	mov	r22, r23
     e6e:	24 2f       	mov	r18, r20
	spi_transaction(0x40 + 8 * hilo,
     e70:	88 0f       	add	r24, r24
     e72:	88 0f       	add	r24, r24
     e74:	88 0f       	add	r24, r24
     e76:	49 2f       	mov	r20, r25
     e78:	80 5c       	subi	r24, 0xC0	; 192
     e7a:	21 ce       	rjmp	.-958    	; 0xabe <spi_transaction>

00000e7c <write_flash_pages>:
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	6c 01       	movw	r12, r24
	int x = 0;
	int page = current_page();
     e8e:	d0 df       	rcall	.-96     	; 0xe30 <current_page>
     e90:	8c 01       	movw	r16, r24
     e92:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
	int x = 0;
     e94:	d0 e0       	ldi	r29, 0x00	; 0
     e96:	29 c0       	rjmp	.+82     	; 0xeea <write_flash_pages+0x6e>
	int page = current_page();
	while (x < length) {
     e98:	cb df       	rcall	.-106    	; 0xe30 <current_page>
		if (page != current_page()) {
     e9a:	08 17       	cp	r16, r24
     e9c:	19 07       	cpc	r17, r25
     e9e:	21 f0       	breq	.+8      	; 0xea8 <write_flash_pages+0x2c>
     ea0:	c8 01       	movw	r24, r16
     ea2:	b5 df       	rcall	.-150    	; 0xe0e <commit>
			commit(page);
     ea4:	c5 df       	rcall	.-118    	; 0xe30 <current_page>
     ea6:	8c 01       	movw	r16, r24
     ea8:	46 e3       	ldi	r20, 0x36	; 54
			page = current_page();
     eaa:	e4 2e       	mov	r14, r20
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	f4 2e       	mov	r15, r20
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
     eb0:	ec 0e       	add	r14, r28
     eb2:	fd 1e       	adc	r15, r29
     eb4:	60 91 3c 01 	lds	r22, 0x013C
     eb8:	70 91 3d 01 	lds	r23, 0x013D
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
     ebc:	f7 01       	movw	r30, r14
     ebe:	45 85       	ldd	r20, Z+13	; 0x0d
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	d3 df       	rcall	.-90     	; 0xe6a <flash>
     ec4:	22 96       	adiw	r28, 0x02	; 2
     ec6:	60 91 3c 01 	lds	r22, 0x013C
     eca:	70 91 3d 01 	lds	r23, 0x013D
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
     ece:	f7 01       	movw	r30, r14
     ed0:	46 85       	ldd	r20, Z+14	; 0x0e
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	ca df       	rcall	.-108    	; 0xe6a <flash>
     ed6:	20 91 3c 01 	lds	r18, 0x013C
     eda:	30 91 3d 01 	lds	r19, 0x013D
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
		ram.isp._addr++;
     ee2:	30 93 3d 01 	sts	0x013D, r19
     ee6:	20 93 3c 01 	sts	0x013C, r18
     eea:	cc 15       	cp	r28, r12
     eec:	dd 05       	cpc	r29, r13
     eee:	a4 f2       	brlt	.-88     	; 0xe98 <write_flash_pages+0x1c>
     ef0:	c8 01       	movw	r24, r16
     ef2:	8d df       	rcall	.-230    	; 0xe0e <commit>
     ef4:	80 e1       	ldi	r24, 0x10	; 16
}

uint8_t write_flash_pages(int length) {
	int x = 0;
	int page = current_page();
	while (x < length) {
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
	return STK_OK;
}
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	08 95       	ret

00000f08 <write_flash>:
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}

void write_flash(int length) {
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
	// TODO compare with ada <--
	fill(length);
     f0e:	36 dd       	rcall	.-1428   	; 0x97c <fill>
     f10:	2e dd       	rcall	.-1444   	; 0x96e <getch>
	if (CRC_EOP == getch()) {
     f12:	80 32       	cpi	r24, 0x20	; 32
     f14:	29 f4       	brne	.+10     	; 0xf20 <write_flash+0x18>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	05 dd       	rcall	.-1526   	; 0x924 <sendCDCbyte>
		sendCDCbyte(STK_INSYNC);
     f1a:	ce 01       	movw	r24, r28
     f1c:	af df       	rcall	.-162    	; 0xe7c <write_flash_pages>
     f1e:	0a c0       	rjmp	.+20     	; 0xf34 <write_flash+0x2c>
		sendCDCbyte(write_flash_pages(length));
     f20:	80 91 38 01 	lds	r24, 0x0138
     f24:	90 91 39 01 	lds	r25, 0x0139
	}
	else {
		ram.isp.error++;
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	90 93 39 01 	sts	0x0139, r25
     f2e:	80 93 38 01 	sts	0x0138, r24
     f32:	85 e1       	ldi	r24, 0x15	; 21
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	f5 cc       	rjmp	.-1558   	; 0x924 <sendCDCbyte>

00000f3a <program_page>:
		sendCDCbyte(STK_NOSYNC);
     f3a:	cf 93       	push	r28
	}
}
     f3c:	df 93       	push	r29
	} while (!(SPSR & (1 << SPIF)));
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     f3e:	17 dd       	rcall	.-1490   	; 0x96e <getch>
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(write_flash_pages(length));
	}
	else {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
     f40:	d8 2f       	mov	r29, r24
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	c8 2f       	mov	r28, r24
     f46:	13 dd       	rcall	.-1498   	; 0x96e <getch>
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
	length += getch();
     f48:	c8 0f       	add	r28, r24
     f4a:	d1 1d       	adc	r29, r1
     f4c:	c1 30       	cpi	r28, 0x01	; 1
     f4e:	81 e0       	ldi	r24, 0x01	; 1

	// added from ada <--
	if (length > 256) {
     f50:	d8 07       	cpc	r29, r24
     f52:	64 f0       	brlt	.+24     	; 0xf6c <program_page+0x32>
     f54:	81 e1       	ldi	r24, 0x11	; 17
     f56:	e6 dc       	rcall	.-1588   	; 0x924 <sendCDCbyte>
		sendCDCbyte(STK_FAILED);
     f58:	80 91 38 01 	lds	r24, 0x0138
     f5c:	90 91 39 01 	lds	r25, 0x0139
		ram.isp.error++;
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 39 01 	sts	0x0139, r25
     f66:	80 93 38 01 	sts	0x0138, r24
     f6a:	22 c0       	rjmp	.+68     	; 0xfb0 <program_page+0x76>
     f6c:	00 dd       	rcall	.-1536   	; 0x96e <getch>
     f6e:	86 34       	cpi	r24, 0x46	; 70
		return;
     f70:	21 f4       	brne	.+8      	; 0xf7a <program_page+0x40>
	}

	// todo compare with ada <--

	char memtype = getch();
     f72:	ce 01       	movw	r24, r28
     f74:	df 91       	pop	r29
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
     f76:	cf 91       	pop	r28
     f78:	c7 cf       	rjmp	.-114    	; 0xf08 <write_flash>
		write_flash(length);
     f7a:	85 34       	cpi	r24, 0x45	; 69
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
     f7c:	a9 f4       	brne	.+42     	; 0xfa8 <program_page+0x6e>
     f7e:	ce 01       	movw	r24, r28
	// todo compare with ada <--

	char memtype = getch();
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
		write_flash(length);
     f80:	c3 de       	rcall	.-634    	; 0xd08 <write_eeprom>
     f82:	c8 2f       	mov	r28, r24
		return;
	}
	if (memtype == 'E') {
     f84:	f4 dc       	rcall	.-1560   	; 0x96e <getch>
     f86:	80 32       	cpi	r24, 0x20	; 32
		result = (char)write_eeprom(length);
     f88:	21 f4       	brne	.+8      	; 0xf92 <program_page+0x58>
     f8a:	84 e1       	ldi	r24, 0x14	; 20
     f8c:	cb dc       	rcall	.-1642   	; 0x924 <sendCDCbyte>
     f8e:	8c 2f       	mov	r24, r28
		if (CRC_EOP == getch()) {
     f90:	0c c0       	rjmp	.+24     	; 0xfaa <program_page+0x70>
     f92:	80 91 38 01 	lds	r24, 0x0138
     f96:	90 91 39 01 	lds	r25, 0x0139
			sendCDCbyte(STK_INSYNC);
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	90 93 39 01 	sts	0x0139, r25
			sendCDCbyte(result);
     fa0:	80 93 38 01 	sts	0x0138, r24
		}
		else {
			ram.isp.error++;
     fa4:	85 e1       	ldi	r24, 0x15	; 21
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <program_page+0x70>
     fa8:	81 e1       	ldi	r24, 0x11	; 17
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	ba cc       	rjmp	.-1676   	; 0x924 <sendCDCbyte>
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
			sendCDCbyte(STK_NOSYNC);
     fb4:	08 95       	ret

00000fb6 <avrisp>:

//================================================================================
// AVRISP
//================================================================================

void avrisp(int ReceivedByte){
     fb6:	cf 93       	push	r28
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
     fb8:	df 93       	push	r29
	return;
}
     fba:	ec 01       	movw	r28, r24
// AVRISP
//================================================================================

void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
     fbc:	80 91 3a 01 	lds	r24, 0x013A
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
     fc0:	90 91 3b 01 	lds	r25, 0x013B
	return;
}
     fc4:	89 2b       	or	r24, r25
     fc6:	19 f0       	breq	.+6      	; 0xfce <avrisp+0x18>
// AVRISP
//================================================================================

void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	a7 dc       	rcall	.-1714   	; 0x91a <LEDs_TurnOnLEDs>
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <avrisp+0x1a>
     fce:	5d 9a       	sbi	0x0b, 5	; 11
     fd0:	80 91 38 01 	lds	r24, 0x0138
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
     fd4:	90 91 39 01 	lds	r25, 0x0139
     fd8:	89 2b       	or	r24, r25
     fda:	19 f0       	breq	.+6      	; 0xfe2 <avrisp+0x2c>
     fdc:	80 e1       	ldi	r24, 0x10	; 16
     fde:	9d dc       	rcall	.-1734   	; 0x91a <LEDs_TurnOnLEDs>
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <avrisp+0x2e>
     fe2:	5c 9a       	sbi	0x0b, 4	; 11
     fe4:	d7 fd       	sbrc	r29, 7
     fe6:	ae c0       	rjmp	.+348    	; 0x1144 <avrisp+0x18e>
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
     fe8:	c1 35       	cpi	r28, 0x51	; 81
     fea:	d1 05       	cpc	r29, r1
		switch (ReceivedByte) {
     fec:	09 f4       	brne	.+2      	; 0xff0 <avrisp+0x3a>
     fee:	85 c0       	rjmp	.+266    	; 0x10fa <avrisp+0x144>
     ff0:	e4 f4       	brge	.+56     	; 0x102a <avrisp+0x74>
     ff2:	c1 34       	cpi	r28, 0x41	; 65
     ff4:	d1 05       	cpc	r29, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <avrisp+0x44>
     ff8:	52 c0       	rjmp	.+164    	; 0x109e <avrisp+0xe8>
     ffa:	54 f4       	brge	.+20     	; 0x1010 <avrisp+0x5a>
     ffc:	c0 33       	cpi	r28, 0x30	; 48
     ffe:	d1 05       	cpc	r29, r1
    1000:	99 f1       	breq	.+102    	; 0x1068 <avrisp+0xb2>
    1002:	c1 33       	cpi	r28, 0x31	; 49
    1004:	d1 05       	cpc	r29, r1
    1006:	a9 f1       	breq	.+106    	; 0x1072 <avrisp+0xbc>
    1008:	a0 97       	sbiw	r28, 0x20	; 32
    100a:	09 f0       	breq	.+2      	; 0x100e <avrisp+0x58>
    100c:	89 c0       	rjmp	.+274    	; 0x1120 <avrisp+0x16a>
    100e:	7e c0       	rjmp	.+252    	; 0x110c <avrisp+0x156>
    1010:	c5 34       	cpi	r28, 0x45	; 69
    1012:	d1 05       	cpc	r29, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <avrisp+0x62>
    1016:	4e c0       	rjmp	.+156    	; 0x10b4 <avrisp+0xfe>
    1018:	c0 35       	cpi	r28, 0x50	; 80
    101a:	d1 05       	cpc	r29, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <avrisp+0x6a>
    101e:	4e c0       	rjmp	.+156    	; 0x10bc <avrisp+0x106>
    1020:	c2 34       	cpi	r28, 0x42	; 66
    1022:	d1 05       	cpc	r29, r1
    1024:	09 f0       	breq	.+2      	; 0x1028 <avrisp+0x72>
    1026:	7c c0       	rjmp	.+248    	; 0x1120 <avrisp+0x16a>
    1028:	3e c0       	rjmp	.+124    	; 0x10a6 <avrisp+0xf0>
    102a:	c1 36       	cpi	r28, 0x61	; 97
    102c:	d1 05       	cpc	r29, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <avrisp+0x7c>
    1030:	59 c0       	rjmp	.+178    	; 0x10e4 <avrisp+0x12e>
    1032:	6c f4       	brge	.+26     	; 0x104e <avrisp+0x98>
    1034:	c6 35       	cpi	r28, 0x56	; 86
    1036:	d1 05       	cpc	r29, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <avrisp+0x86>
    103a:	5c c0       	rjmp	.+184    	; 0x10f4 <avrisp+0x13e>
    103c:	c0 36       	cpi	r28, 0x60	; 96
    103e:	d1 05       	cpc	r29, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <avrisp+0x8e>
    1042:	4f c0       	rjmp	.+158    	; 0x10e2 <avrisp+0x12c>
    1044:	c5 35       	cpi	r28, 0x55	; 85
    1046:	d1 05       	cpc	r29, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <avrisp+0x96>
    104a:	6a c0       	rjmp	.+212    	; 0x1120 <avrisp+0x16a>
    104c:	39 c0       	rjmp	.+114    	; 0x10c0 <avrisp+0x10a>
    104e:	c4 37       	cpi	r28, 0x74	; 116
    1050:	d1 05       	cpc	r29, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <avrisp+0xa0>
    1054:	4c c0       	rjmp	.+152    	; 0x10ee <avrisp+0x138>
    1056:	c5 37       	cpi	r28, 0x75	; 117
    1058:	d1 05       	cpc	r29, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <avrisp+0xa8>
    105c:	54 c0       	rjmp	.+168    	; 0x1106 <avrisp+0x150>
    105e:	c4 36       	cpi	r28, 0x64	; 100
    1060:	d1 05       	cpc	r29, r1
    1062:	09 f0       	breq	.+2      	; 0x1066 <avrisp+0xb0>
    1064:	5d c0       	rjmp	.+186    	; 0x1120 <avrisp+0x16a>
    1066:	40 c0       	rjmp	.+128    	; 0x10e8 <avrisp+0x132>
    1068:	10 92 39 01 	sts	0x0139, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    106c:	10 92 38 01 	sts	0x0138, r1
    1070:	1e c0       	rjmp	.+60     	; 0x10ae <avrisp+0xf8>
    1072:	7d dc       	rcall	.-1798   	; 0x96e <getch>
    1074:	80 32       	cpi	r24, 0x20	; 32
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    1076:	09 f0       	breq	.+2      	; 0x107a <avrisp+0xc4>
    1078:	65 c0       	rjmp	.+202    	; 0x1144 <avrisp+0x18e>
    107a:	84 e1       	ldi	r24, 0x14	; 20
    107c:	53 dc       	rcall	.-1882   	; 0x924 <sendCDCbyte>
    107e:	81 e4       	ldi	r24, 0x41	; 65
				sendCDCbyte(STK_INSYNC);
    1080:	51 dc       	rcall	.-1886   	; 0x924 <sendCDCbyte>
    1082:	86 e5       	ldi	r24, 0x56	; 86
    1084:	4f dc       	rcall	.-1890   	; 0x924 <sendCDCbyte>
				sendCDCbyte('A');
    1086:	82 e5       	ldi	r24, 0x52	; 82
    1088:	4d dc       	rcall	.-1894   	; 0x924 <sendCDCbyte>
    108a:	80 e2       	ldi	r24, 0x20	; 32
				sendCDCbyte('V');
    108c:	4b dc       	rcall	.-1898   	; 0x924 <sendCDCbyte>
    108e:	89 e4       	ldi	r24, 0x49	; 73
    1090:	49 dc       	rcall	.-1902   	; 0x924 <sendCDCbyte>
				sendCDCbyte('R');
    1092:	83 e5       	ldi	r24, 0x53	; 83
    1094:	47 dc       	rcall	.-1906   	; 0x924 <sendCDCbyte>
    1096:	80 e5       	ldi	r24, 0x50	; 80
				sendCDCbyte(' ');
    1098:	45 dc       	rcall	.-1910   	; 0x924 <sendCDCbyte>
    109a:	80 e1       	ldi	r24, 0x10	; 16
    109c:	50 c0       	rjmp	.+160    	; 0x113e <avrisp+0x188>
				sendCDCbyte('I');
    109e:	67 dc       	rcall	.-1842   	; 0x96e <getch>
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
				sendCDCbyte('S');
    10a4:	b6 cc       	rjmp	.-1684   	; 0xa12 <get_parameters>
    10a6:	84 e1       	ldi	r24, 0x14	; 20
    10a8:	90 e0       	ldi	r25, 0x00	; 0
				sendCDCbyte('P');
    10aa:	68 dc       	rcall	.-1840   	; 0x97c <fill>
    10ac:	82 dc       	rcall	.-1788   	; 0x9b2 <set_parameters>
    10ae:	df 91       	pop	r29
				sendCDCbyte(STK_OK);
    10b0:	cf 91       	pop	r28
    10b2:	c4 cc       	rjmp	.-1656   	; 0xa3c <replyOK>
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    10b4:	85 e0       	ldi	r24, 0x05	; 5
    10b6:	90 e0       	ldi	r25, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    10b8:	61 dc       	rcall	.-1854   	; 0x97c <fill>
    10ba:	f9 cf       	rjmp	.-14     	; 0x10ae <avrisp+0xf8>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    10bc:	18 dd       	rcall	.-1488   	; 0xaee <start_pmode>
    10be:	f7 cf       	rjmp	.-18     	; 0x10ae <avrisp+0xf8>
			break;
		case STK_SET_PARM:
			fill(20);
    10c0:	56 dc       	rcall	.-1876   	; 0x96e <getch>
    10c2:	c8 2f       	mov	r28, r24
    10c4:	d0 e0       	ldi	r29, 0x00	; 0
    10c6:	d0 93 3d 01 	sts	0x013D, r29
			set_parameters();
    10ca:	c0 93 3c 01 	sts	0x013C, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    10ce:	4f dc       	rcall	.-1890   	; 0x96e <getch>
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    10d0:	38 2f       	mov	r19, r24
    10d2:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    10d4:	2c 0f       	add	r18, r28
    10d6:	3d 1f       	adc	r19, r29
    10d8:	30 93 3d 01 	sts	0x013D, r19
    10dc:	20 93 3c 01 	sts	0x013C, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    10e0:	e6 cf       	rjmp	.-52     	; 0x10ae <avrisp+0xf8>
    10e2:	45 dc       	rcall	.-1910   	; 0x96e <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    10e4:	44 dc       	rcall	.-1912   	; 0x96e <getch>
    10e6:	e3 cf       	rjmp	.-58     	; 0x10ae <avrisp+0xf8>
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	26 cf       	rjmp	.-436    	; 0xf3a <program_page>
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	5f ce       	rjmp	.-834    	; 0xdb2 <read_page>
			ram.isp._addr += 256 * getch();
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	59 cd       	rjmp	.-1358   	; 0xbac <universal>
    10fa:	10 92 39 01 	sts	0x0139, r1
    10fe:	10 92 38 01 	sts	0x0138, r1
    1102:	85 dd       	rcall	.-1270   	; 0xc0e <end_pmode>
    1104:	d4 cf       	rjmp	.-88     	; 0x10ae <avrisp+0xf8>
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    110a:	5d cd       	rjmp	.-1350   	; 0xbc6 <read_signature>
    110c:	80 91 38 01 	lds	r24, 0x0138
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1110:	90 91 39 01 	lds	r25, 0x0139
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	90 93 39 01 	sts	0x0139, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    111a:	80 93 38 01 	sts	0x0138, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    111e:	0e c0       	rjmp	.+28     	; 0x113c <avrisp+0x186>
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1120:	80 91 38 01 	lds	r24, 0x0138
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1124:	90 91 39 01 	lds	r25, 0x0139
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	90 93 39 01 	sts	0x0139, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    112e:	80 93 38 01 	sts	0x0138, r24
    1132:	1d dc       	rcall	.-1990   	; 0x96e <getch>
			end_pmode();
    1134:	80 32       	cpi	r24, 0x20	; 32
    1136:	11 f4       	brne	.+4      	; 0x113c <avrisp+0x186>
    1138:	82 e1       	ldi	r24, 0x12	; 18
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    113a:	01 c0       	rjmp	.+2      	; 0x113e <avrisp+0x188>
    113c:	85 e1       	ldi	r24, 0x15	; 21
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1142:	f0 cb       	rjmp	.-2080   	; 0x924 <sendCDCbyte>
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	fb 01       	movw	r30, r22
	// completely reset the protocol after sucessfull reading/error last time
	if (protocol->reset || protocol->leadError){
    1150:	30 81       	ld	r19, Z
    1152:	93 2f       	mov	r25, r19
    1154:	90 7c       	andi	r25, 0xC0	; 192
    1156:	89 f0       	breq	.+34     	; 0x117a <NHPread+0x30>
		protocol->mBlocks = 0;
    1158:	23 2f       	mov	r18, r19
    115a:	28 7f       	andi	r18, 0xF8	; 248
    115c:	20 83       	st	Z, r18
		// check if previous reading had a lead error, copy that lead byte to the beginning
		if (protocol->leadError){
    115e:	36 ff       	sbrs	r19, 6
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <NHPread+0x2e>
			protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1162:	26 95       	lsr	r18
    1164:	26 95       	lsr	r18
    1166:	26 95       	lsr	r18
    1168:	27 70       	andi	r18, 0x07	; 7
    116a:	db 01       	movw	r26, r22
    116c:	a2 0f       	add	r26, r18
    116e:	b1 1d       	adc	r27, r1
    1170:	15 96       	adiw	r26, 0x05	; 5
    1172:	2c 91       	ld	r18, X
    1174:	25 83       	std	Z+5, r18	; 0x05
			protocol->readlength = 1;
    1176:	98 60       	ori	r25, 0x08	; 8
		}
		else
			protocol->readlength = 0;
    1178:	90 83       	st	Z, r25
	}

	// reset leadError indicator every time
	protocol->leadError = false;
    117a:	90 81       	ld	r25, Z
	protocol->reset = false;
    117c:	9f 7b       	andi	r25, 0xBF	; 191
    117e:	9f 77       	andi	r25, 0x7F	; 127
    1180:	90 83       	st	Z, r25

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    1182:	96 95       	lsr	r25
    1184:	96 95       	lsr	r25
    1186:	96 95       	lsr	r25
    1188:	97 70       	andi	r25, 0x07	; 7
    118a:	df 01       	movw	r26, r30
    118c:	a9 0f       	add	r26, r25
    118e:	b1 1d       	adc	r27, r1
    1190:	15 96       	adiw	r26, 0x05	; 5
    1192:	8c 93       	st	X, r24
    1194:	29 2f       	mov	r18, r25
    1196:	2f 5f       	subi	r18, 0xFF	; 255
    1198:	27 70       	andi	r18, 0x07	; 7
    119a:	22 0f       	add	r18, r18
    119c:	22 0f       	add	r18, r18
    119e:	22 0f       	add	r18, r18
    11a0:	40 81       	ld	r20, Z
    11a2:	47 7c       	andi	r20, 0xC7	; 199
    11a4:	42 2b       	or	r20, r18
    11a6:	40 83       	st	Z, r20
	// create errorLevel that will be returned (contain errors or address)
	NHP_Enum_t errorLevel; //TODO initiaslze as no error?


	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    11a8:	28 2f       	mov	r18, r24
    11aa:	20 7c       	andi	r18, 0xC0	; 192
    11ac:	34 2f       	mov	r19, r20
    11ae:	37 70       	andi	r19, 0x07	; 7
    11b0:	20 38       	cpi	r18, 0x80	; 128
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <NHPread+0x6c>
    11b4:	51 c0       	rjmp	.+162    	; 0x1258 <NHPread+0x10e>
    11b6:	20 3c       	cpi	r18, 0xC0	; 192
    11b8:	99 f5       	brne	.+102    	; 0x1220 <NHPread+0xd6>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    11ba:	28 2f       	mov	r18, r24
    11bc:	28 73       	andi	r18, 0x38	; 56
    11be:	26 95       	lsr	r18
    11c0:	26 95       	lsr	r18
    11c2:	26 95       	lsr	r18

		if (protocol->mBlocks){
    11c4:	33 23       	and	r19, r19
    11c6:	49 f0       	breq	.+18     	; 0x11da <NHPread+0x90>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    11c8:	99 0f       	add	r25, r25
    11ca:	99 0f       	add	r25, r25
    11cc:	99 0f       	add	r25, r25
    11ce:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    11d0:	49 2b       	or	r20, r25
    11d2:	40 64       	ori	r20, 0x40	; 64
    11d4:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    11d6:	9e ef       	ldi	r25, 0xFE	; 254
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <NHPread+0x92>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    11da:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <NHPread+0x98>
    11e0:	46 c0       	rjmp	.+140    	; 0x126e <NHPread+0x124>
			// return command indicator
			errorLevel = NHP_COMMAND;
			break;
		}

		else if (blocks == 7){
    11e2:	27 30       	cpi	r18, 0x07	; 7
    11e4:	59 f4       	brne	.+22     	; 0x11fc <NHPread+0xb2>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    11e6:	08 2f       	mov	r16, r24
    11e8:	0f 70       	andi	r16, 0x0F	; 15
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	01 83       	std	Z+1, r16	; 0x01
    11f2:	12 83       	std	Z+2, r17	; 0x02
    11f4:	23 83       	std	Z+3, r18	; 0x03
    11f6:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    11f8:	25 e0       	ldi	r18, 0x05	; 5
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <NHPread+0xc6>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    11fc:	48 2f       	mov	r20, r24
    11fe:	47 70       	andi	r20, 0x07	; 7
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	41 83       	std	Z+1, r20	; 0x01
    1208:	52 83       	std	Z+2, r21	; 0x02
    120a:	63 83       	std	Z+3, r22	; 0x03
    120c:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    120e:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1210:	27 70       	andi	r18, 0x07	; 7
    1212:	80 81       	ld	r24, Z
    1214:	88 7f       	andi	r24, 0xF8	; 248
    1216:	82 2b       	or	r24, r18
    1218:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command, ignore in progress reading or lead error
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
    121a:	91 11       	cpse	r25, r1
    121c:	22 c0       	rjmp	.+68     	; 0x1262 <NHPread+0x118>
    121e:	2d c0       	rjmp	.+90     	; 0x127a <NHPread+0x130>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1220:	03 2f       	mov	r16, r19
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	02 30       	cpi	r16, 0x02	; 2
    1226:	11 05       	cpc	r17, r1
    1228:	24 f1       	brlt	.+72     	; 0x1272 <NHPread+0x128>
			// get next 7 bits of data
			protocol->mBlocks--;
    122a:	39 5f       	subi	r19, 0xF9	; 249
    122c:	37 70       	andi	r19, 0x07	; 7
    122e:	48 7f       	andi	r20, 0xF8	; 248
    1230:	43 2b       	or	r20, r19
    1232:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1234:	41 81       	ldd	r20, Z+1	; 0x01
    1236:	52 81       	ldd	r21, Z+2	; 0x02
    1238:	63 81       	ldd	r22, Z+3	; 0x03
    123a:	74 81       	ldd	r23, Z+4	; 0x04
    123c:	97 e0       	ldi	r25, 0x07	; 7
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	66 1f       	adc	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	9a 95       	dec	r25
    1248:	d1 f7       	brne	.-12     	; 0x123e <NHPread+0xf4>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    124a:	48 2b       	or	r20, r24
    124c:	41 83       	std	Z+1, r20	; 0x01
    124e:	52 83       	std	Z+2, r21	; 0x02
    1250:	63 83       	std	Z+3, r22	; 0x03
    1252:	74 83       	std	Z+4, r23	; 0x04
			errorLevel = NHP_NO_ERR;
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	11 c0       	rjmp	.+34     	; 0x127a <NHPread+0x130>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    1258:	31 30       	cpi	r19, 0x01	; 1
    125a:	69 f4       	brne	.+26     	; 0x1276 <NHPread+0x12c>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    125c:	98 2f       	mov	r25, r24
    125e:	9f 73       	andi	r25, 0x3F	; 63
    1260:	9f 5f       	subi	r25, 0xFF	; 255
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command, ignore in progress reading or lead error
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	51 f0       	breq	.+20     	; 0x127a <NHPread+0x130>
		protocol->reset = true;
    1266:	80 81       	ld	r24, Z
    1268:	80 68       	ori	r24, 0x80	; 128
    126a:	80 83       	st	Z, r24
    126c:	06 c0       	rjmp	.+12     	; 0x127a <NHPread+0x130>
		if (blocks == 0 || blocks == 1){
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// return command indicator
			errorLevel = NHP_COMMAND;
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	fa cf       	rjmp	.-12     	; 0x1266 <NHPread+0x11c>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    1272:	9d ef       	ldi	r25, 0xFD	; 253
    1274:	f8 cf       	rjmp	.-16     	; 0x1266 <NHPread+0x11c>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    1276:	9c ef       	ldi	r25, 0xFC	; 252
    1278:	f6 cf       	rjmp	.-20     	; 0x1266 <NHPread+0x11c>
	if (errorLevel != NHP_NO_ERR && errorLevel != NHP_ERR_LEAD)
		protocol->reset = true;

	// return the errors
	return errorLevel;
}
    127a:	89 2f       	mov	r24, r25
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <NHPreadChecksum>:

//================================================================================
// Read NHP
//================================================================================

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    128c:	5e df       	rcall	.-324    	; 0x114a <NHPread>
    128e:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    1290:	b4 f4       	brge	.+44     	; 0x12be <NHPreadChecksum+0x3c>
    1292:	09 81       	ldd	r16, Y+1	; 0x01
    1294:	1a 81       	ldd	r17, Y+2	; 0x02
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	a9 01       	movw	r20, r18
    129c:	66 27       	eor	r22, r22
    129e:	77 27       	eor	r23, r23
    12a0:	22 27       	eor	r18, r18
    12a2:	33 27       	eor	r19, r19
    12a4:	40 27       	eor	r20, r16
    12a6:	51 27       	eor	r21, r17
    12a8:	62 27       	eor	r22, r18
    12aa:	73 27       	eor	r23, r19
    12ac:	4f 3f       	cpi	r20, 0xFF	; 255
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	61 05       	cpc	r22, r1
    12b2:	71 05       	cpc	r23, r1
    12b4:	21 f0       	breq	.+8      	; 0x12be <NHPreadChecksum+0x3c>
    12b6:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    12b8:	80 68       	ori	r24, 0x80	; 128
    12ba:	88 83       	st	Y, r24
    12bc:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    12be:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    12c8:	fa 01       	movw	r30, r20
    12ca:	2c e1       	ldi	r18, 0x1C	; 28
    12cc:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    12ce:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    12d0:	ab 01       	movw	r20, r22
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <NHPwriteChecksum+0x12>
    12d6:	56 95       	lsr	r21
    12d8:	47 95       	ror	r20
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    12de:	48 30       	cpi	r20, 0x08	; 8
    12e0:	28 f0       	brcs	.+10     	; 0x12ec <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    12e2:	97 30       	cpi	r25, 0x07	; 7
    12e4:	59 f4       	brne	.+22     	; 0x12fc <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    12e6:	40 83       	st	Z, r20
				blocks--;
    12e8:	96 e0       	ldi	r25, 0x06	; 6
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    12ec:	40 83       	st	Z, r20
			blocks--;
    12ee:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    12f0:	41 11       	cpse	r20, r1
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <NHPwriteChecksum+0x34>
    12f4:	27 50       	subi	r18, 0x07	; 7
    12f6:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    12f8:	92 30       	cpi	r25, 0x02	; 2
    12fa:	51 f7       	brne	.-44     	; 0x12d0 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    12fc:	49 2f       	mov	r20, r25
    12fe:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1300:	0d c0       	rjmp	.+26     	; 0x131c <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1302:	df 01       	movw	r26, r30
    1304:	a4 0f       	add	r26, r20
    1306:	b1 1d       	adc	r27, r1
    1308:	9b 01       	movw	r18, r22
    130a:	2f 77       	andi	r18, 0x7F	; 127
    130c:	33 27       	eor	r19, r19
    130e:	2c 93       	st	X, r18
		data >>= 7;
    1310:	66 0f       	add	r22, r22
    1312:	67 2f       	mov	r22, r23
    1314:	66 1f       	adc	r22, r22
    1316:	77 0b       	sbc	r23, r23
    1318:	71 95       	neg	r23
		datablocks--;
    131a:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    131c:	41 11       	cpse	r20, r1
    131e:	f1 cf       	rjmp	.-30     	; 0x1302 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1320:	49 2f       	mov	r20, r25
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	9a 01       	movw	r18, r20
    1326:	63 e0       	ldi	r22, 0x03	; 3
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	6a 95       	dec	r22
    132e:	e1 f7       	brne	.-8      	; 0x1328 <NHPwriteChecksum+0x60>
    1330:	20 6c       	ori	r18, 0xC0	; 192
    1332:	3f 6f       	ori	r19, 0xFF	; 255
    1334:	30 81       	ld	r19, Z
    1336:	32 2b       	or	r19, r18
    1338:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    133a:	e4 0f       	add	r30, r20
    133c:	f5 1f       	adc	r31, r21
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	8f 73       	andi	r24, 0x3F	; 63
    1344:	80 68       	ori	r24, 0x80	; 128
    1346:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    1348:	89 2f       	mov	r24, r25
    134a:	08 95       	ret

0000134c <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    134c:	fc 01       	movw	r30, r24
    134e:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    1350:	20 ff       	sbrs	r18, 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    1354:	5f 98       	cbi	0x0b, 7	; 11
    1356:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    1358:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    135a:	8b b1       	in	r24, 0x0b	; 11
    135c:	80 63       	ori	r24, 0x30	; 48
    135e:	8b b9       	out	0x0b, r24	; 11
    1360:	08 95       	ret

00001362 <SerialInitHID>:
		LEDs_SetAllLEDs(LEDS_NO_LEDS); //<--new
	}
}

// change Serial baud to 115200 for HID
void SerialInitHID(void){
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	// Added for correct Serial connection at baud 115200 <--
	// TODO PD3 ??
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    1366:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    1368:	e9 ec       	ldi	r30, 0xC9	; 201
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	10 82       	st	Z, r1
	UCSR1A = 0;
    136e:	a8 ec       	ldi	r26, 0xC8	; 200
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	1c 92       	st	X, r1
	UCSR1C = 0;
    1374:	ca ec       	ldi	r28, 0xCA	; 202
    1376:	d0 e0       	ldi	r29, 0x00	; 0
    1378:	18 82       	st	Y, r1

	// these are values for baud 115200. i just read them manual from change
	// its needed to start with baud 115200 on powerup
	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10)); //C: 0x06
    137a:	86 e0       	ldi	r24, 0x06	; 6
    137c:	88 83       	st	Y, r24
	UCSR1A = (1 << U2X1); //A: 0x02
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1)); //B: 0x98
    1382:	88 e9       	ldi	r24, 0x98	; 152
    1384:	80 83       	st	Z, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    1386:	5b 98       	cbi	0x0b, 3	; 11
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	ec 01       	movw	r28, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1396:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1398:	f8 94       	cli
		bool state;

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		state = Buffer->Enabled;
    139a:	80 91 36 01 	lds	r24, 0x0136
    139e:	87 fb       	bst	r24, 7
    13a0:	88 27       	eor	r24, r24
    13a2:	80 f9       	bld	r24, 0
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13a4:	9f bf       	out	0x3f, r25	; 63
	// enable Serial buffer again
	if (!LRingBuffer_IsEnabled(&ram.USARTtoUSB_Buffer))
    13a6:	81 11       	cpse	r24, r1
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <EVENT_CDC_Device_LineEncodingChanged+0x30>
	 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
	 */
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
    13aa:	e6 e3       	ldi	r30, 0x36	; 54
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    13ae:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    13b0:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Index = 0;
    13b2:	80 81       	ld	r24, Z
		Buffer->Enabled = true;
    13b4:	80 78       	andi	r24, 0x80	; 128
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	80 83       	st	Z, r24
		Buffer->Count = 0;
    13ba:	11 82       	std	Z+1, r1	; 0x01
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13bc:	9f bf       	out	0x3f, r25	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    13be:	e9 8d       	ldd	r30, Y+25	; 0x19
    13c0:	e1 50       	subi	r30, 0x01	; 1
    13c2:	e2 30       	cpi	r30, 0x02	; 2
    13c4:	28 f4       	brcc	.+10     	; 0x13d0 <EVENT_CDC_Device_LineEncodingChanged+0x42>
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ec 5c       	subi	r30, 0xCC	; 204
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	10 81       	ld	r17, Z
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <EVENT_CDC_Device_LineEncodingChanged+0x44>
		LRingBuffer_InitBuffer(&ram.USARTtoUSB_Buffer);

	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    13d0:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    13d2:	88 8d       	ldd	r24, Y+24	; 0x18
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	09 f4       	brne	.+2      	; 0x13da <EVENT_CDC_Device_LineEncodingChanged+0x4c>
		ConfigMask |= (1 << USBS1);
    13d8:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    13da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13dc:	87 30       	cpi	r24, 0x07	; 7
    13de:	31 f0       	breq	.+12     	; 0x13ec <EVENT_CDC_Device_LineEncodingChanged+0x5e>
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <EVENT_CDC_Device_LineEncodingChanged+0x62>
    13e4:	86 30       	cpi	r24, 0x06	; 6
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <EVENT_CDC_Device_LineEncodingChanged+0x64>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    13e8:	12 60       	ori	r17, 0x02	; 2
		break;
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <EVENT_CDC_Device_LineEncodingChanged+0x64>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    13ec:	14 60       	ori	r17, 0x04	; 4
		break;
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <EVENT_CDC_Device_LineEncodingChanged+0x64>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    13f0:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    13f2:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    13f4:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    13f8:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    13fc:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1400:	2c 89       	ldd	r18, Y+20	; 0x14
    1402:	3d 89       	ldd	r19, Y+21	; 0x15
    1404:	4e 89       	ldd	r20, Y+22	; 0x16
    1406:	5f 89       	ldd	r21, Y+23	; 0x17
    1408:	21 15       	cp	r18, r1
    140a:	81 ee       	ldi	r24, 0xE1	; 225
    140c:	38 07       	cpc	r19, r24
    140e:	41 05       	cpc	r20, r1
    1410:	51 05       	cpc	r21, r1
    1412:	79 f0       	breq	.+30     	; 0x1432 <EVENT_CDC_Device_LineEncodingChanged+0xa4>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1414:	ca 01       	movw	r24, r20
    1416:	b9 01       	movw	r22, r18
    1418:	96 95       	lsr	r25
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	60 58       	subi	r22, 0x80	; 128
    1422:	7b 47       	sbci	r23, 0x7B	; 123
    1424:	81 4e       	sbci	r24, 0xE1	; 225
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	0e 94 cc 12 	call	0x2598	; 0x2598 <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	31 09       	sbc	r19, r1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <EVENT_CDC_Device_LineEncodingChanged+0xa8>
    1432:	20 e1       	ldi	r18, 0x10	; 16
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	30 93 cd 00 	sts	0x00CD, r19
    143a:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    143e:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1442:	8c 89       	ldd	r24, Y+20	; 0x14
    1444:	9d 89       	ldd	r25, Y+21	; 0x15
    1446:	ae 89       	ldd	r26, Y+22	; 0x16
    1448:	bf 89       	ldd	r27, Y+23	; 0x17
    144a:	81 15       	cp	r24, r1
    144c:	91 4e       	sbci	r25, 0xE1	; 225
    144e:	a1 05       	cpc	r26, r1
    1450:	b1 05       	cpc	r27, r1
    1452:	11 f4       	brne	.+4      	; 0x1458 <EVENT_CDC_Device_LineEncodingChanged+0xca>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	01 c0       	rjmp	.+2      	; 0x145a <EVENT_CDC_Device_LineEncodingChanged+0xcc>
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    145e:	88 e9       	ldi	r24, 0x98	; 152
    1460:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    1464:	5b 98       	cbi	0x0b, 3	; 11

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
    1466:	8c 89       	ldd	r24, Y+20	; 0x14
    1468:	9d 89       	ldd	r25, Y+21	; 0x15
    146a:	ae 89       	ldd	r26, Y+22	; 0x16
    146c:	bf 89       	ldd	r27, Y+23	; 0x17
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	a1 05       	cpc	r26, r1
    1472:	b1 05       	cpc	r27, r1
    1474:	a9 f4       	brne	.+42     	; 0x14a0 <EVENT_CDC_Device_LineEncodingChanged+0x112>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1476:	80 e1       	ldi	r24, 0x10	; 16
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	90 93 cd 00 	sts	0x00CD, r25
    147e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    148e:	88 e1       	ldi	r24, 0x18	; 24
    1490:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
    1494:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    1496:	5a 9a       	sbi	0x0b, 2	; 11
		Serial_Init(115200, true);
		SerialInitHID();
	}

}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
		Serial_Init(115200, true);
		SerialInitHID();
    149e:	61 cf       	rjmp	.-318    	; 0x1362 <SerialInitHID>
    14a0:	df 91       	pop	r29
	}

}
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	08 95       	ret

000014a8 <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    14a8:	68 0f       	add	r22, r24
    14aa:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    14ae:	fc 01       	movw	r30, r24
    14b0:	21 91       	ld	r18, Z+
    14b2:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14b4:	30 91 c8 00 	lds	r19, 0x00C8
    14b8:	35 ff       	sbrs	r19, 5
    14ba:	fc cf       	rjmp	.-8      	; 0x14b4 <Serial_SendData+0xc>
				UDR1 = DataByte;
    14bc:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    14c0:	86 17       	cp	r24, r22
    14c2:	97 07       	cpc	r25, r23
    14c4:	a1 f7       	brne	.-24     	; 0x14ae <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    14c6:	08 95       	ret

000014c8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	7c 01       	movw	r14, r24
    14dc:	8b 01       	movw	r16, r22
    14de:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14e0:	d7 d1       	rcall	.+942    	; 0x1890 <Endpoint_WaitUntilReady>
    14e2:	b8 2e       	mov	r11, r24
    14e4:	81 11       	cpse	r24, r1
    14e6:	32 c0       	rjmp	.+100    	; 0x154c <Endpoint_Write_Stream_LE+0x84>
    14e8:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <Endpoint_Write_Stream_LE+0x30>
    14ec:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    14ee:	39 81       	ldd	r19, Y+1	; 0x01
    14f0:	02 1b       	sub	r16, r18
    14f2:	13 0b       	sbc	r17, r19
    14f4:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14f6:	f3 1e       	adc	r15, r19
    14f8:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14fa:	d1 2c       	mov	r13, r1
    14fc:	22 c0       	rjmp	.+68     	; 0x1542 <Endpoint_Write_Stream_LE+0x7a>
    14fe:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1502:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1504:	14 c0       	rjmp	.+40     	; 0x152e <Endpoint_Write_Stream_LE+0x66>
    1506:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    150a:	8e 77       	andi	r24, 0x7E	; 126
    150c:	80 93 e8 00 	sts	0x00E8, r24
    1510:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1512:	49 f0       	breq	.+18     	; 0x1526 <Endpoint_Write_Stream_LE+0x5e>
    1514:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1516:	99 81       	ldd	r25, Y+1	; 0x01
    1518:	8c 0d       	add	r24, r12
    151a:	9d 1d       	adc	r25, r13
    151c:	99 83       	std	Y+1, r25	; 0x01
    151e:	88 83       	st	Y, r24
    1520:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1522:	b2 2e       	mov	r11, r18
    1524:	13 c0       	rjmp	.+38     	; 0x154c <Endpoint_Write_Stream_LE+0x84>
    1526:	b4 d1       	rcall	.+872    	; 0x1890 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1528:	88 23       	and	r24, r24
    152a:	59 f0       	breq	.+22     	; 0x1542 <Endpoint_Write_Stream_LE+0x7a>
    152c:	0e c0       	rjmp	.+28     	; 0x154a <Endpoint_Write_Stream_LE+0x82>
    152e:	f7 01       	movw	r30, r14
    1530:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1532:	7f 01       	movw	r14, r30
    1534:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1538:	01 50       	subi	r16, 0x01	; 1
    153a:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    153c:	ff ef       	ldi	r31, 0xFF	; 255
    153e:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1540:	df 0a       	sbc	r13, r31
    1542:	01 15       	cp	r16, r1
    1544:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1546:	d9 f6       	brne	.-74     	; 0x14fe <Endpoint_Write_Stream_LE+0x36>
    1548:	01 c0       	rjmp	.+2      	; 0x154c <Endpoint_Write_Stream_LE+0x84>
    154a:	b8 2e       	mov	r11, r24
    154c:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    154e:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	df 90       	pop	r13
    155c:	cf 90       	pop	r12
    155e:	bf 90       	pop	r11
    1560:	08 95       	ret

00001562 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1562:	20 91 4e 02 	lds	r18, 0x024E
    1566:	30 91 4f 02 	lds	r19, 0x024F
    156a:	26 17       	cp	r18, r22
    156c:	37 07       	cpc	r19, r23
    156e:	48 f0       	brcs	.+18     	; 0x1582 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1570:	61 15       	cp	r22, r1
    1572:	71 05       	cpc	r23, r1
    1574:	39 f4       	brne	.+14     	; 0x1584 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1576:	20 91 e8 00 	lds	r18, 0x00E8
    157a:	2e 77       	andi	r18, 0x7E	; 126
    157c:	20 93 e8 00 	sts	0x00E8, r18
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1582:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1584:	9c 01       	movw	r18, r24
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	34 c0       	rjmp	.+104    	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    158a:	90 91 47 02 	lds	r25, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    158e:	99 23       	and	r25, r25
    1590:	09 f4       	brne	.+2      	; 0x1594 <Endpoint_Write_Control_Stream_LE+0x32>
    1592:	43 c0       	rjmp	.+134    	; 0x161a <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1594:	95 30       	cpi	r25, 0x05	; 5
    1596:	09 f4       	brne	.+2      	; 0x159a <Endpoint_Write_Control_Stream_LE+0x38>
    1598:	42 c0       	rjmp	.+132    	; 0x161e <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    159a:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    159e:	93 fd       	sbrc	r25, 3
    15a0:	3a c0       	rjmp	.+116    	; 0x1616 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15a2:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    15a6:	92 fd       	sbrc	r25, 2
    15a8:	30 c0       	rjmp	.+96     	; 0x160a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15aa:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    15ae:	90 ff       	sbrs	r25, 0
    15b0:	20 c0       	rjmp	.+64     	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    15b2:	80 91 f2 00 	lds	r24, 0x00F2
    15b6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15b8:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    15ba:	82 1b       	sub	r24, r18
    15bc:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15c0:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15c2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    15c6:	61 50       	subi	r22, 0x01	; 1
    15c8:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    15ca:	9f 01       	movw	r18, r30
    15cc:	28 0f       	add	r18, r24
    15ce:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15d0:	61 15       	cp	r22, r1
    15d2:	71 05       	cpc	r23, r1
    15d4:	19 f0       	breq	.+6      	; 0x15dc <Endpoint_Write_Control_Stream_LE+0x7a>
    15d6:	28 30       	cpi	r18, 0x08	; 8
    15d8:	31 05       	cpc	r19, r1
    15da:	90 f3       	brcs	.-28     	; 0x15c0 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	28 30       	cpi	r18, 0x08	; 8
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <Endpoint_Write_Control_Stream_LE+0x84>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15e6:	90 91 e8 00 	lds	r25, 0x00E8
    15ea:	9e 77       	andi	r25, 0x7E	; 126
    15ec:	90 93 e8 00 	sts	0x00E8, r25
    15f0:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15f2:	61 15       	cp	r22, r1
    15f4:	71 05       	cpc	r23, r1
    15f6:	49 f6       	brne	.-110    	; 0x158a <Endpoint_Write_Control_Stream_LE+0x28>
    15f8:	81 11       	cpse	r24, r1
    15fa:	c7 cf       	rjmp	.-114    	; 0x158a <Endpoint_Write_Control_Stream_LE+0x28>
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15fe:	80 91 47 02 	lds	r24, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1602:	88 23       	and	r24, r24
    1604:	51 f0       	breq	.+20     	; 0x161a <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1606:	85 30       	cpi	r24, 0x05	; 5
    1608:	51 f0       	breq	.+20     	; 0x161e <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    160a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    160e:	82 ff       	sbrs	r24, 2
    1610:	f6 cf       	rjmp	.-20     	; 0x15fe <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    161e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1620:	08 95       	ret

00001622 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1622:	61 15       	cp	r22, r1
    1624:	71 05       	cpc	r23, r1
    1626:	29 f4       	brne	.+10     	; 0x1632 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1628:	20 91 e8 00 	lds	r18, 0x00E8
    162c:	2b 77       	andi	r18, 0x7B	; 123
    162e:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1632:	9c 01       	movw	r18, r24
    1634:	21 c0       	rjmp	.+66     	; 0x1678 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1636:	80 91 47 02 	lds	r24, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    163a:	88 23       	and	r24, r24
    163c:	81 f1       	breq	.+96     	; 0x169e <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    163e:	85 30       	cpi	r24, 0x05	; 5
    1640:	41 f1       	breq	.+80     	; 0x1692 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1642:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1646:	83 fd       	sbrc	r24, 3
    1648:	26 c0       	rjmp	.+76     	; 0x1696 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    164a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    164e:	82 ff       	sbrs	r24, 2
    1650:	f2 cf       	rjmp	.-28     	; 0x1636 <Endpoint_Read_Control_Stream_LE+0x14>
    1652:	f9 01       	movw	r30, r18
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1656:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    165a:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    165c:	9f 01       	movw	r18, r30
				Length--;
    165e:	61 50       	subi	r22, 0x01	; 1
    1660:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1662:	29 f0       	breq	.+10     	; 0x166e <Endpoint_Read_Control_Stream_LE+0x4c>
    1664:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1666:	80 91 f2 00 	lds	r24, 0x00F2
    166a:	81 11       	cpse	r24, r1
    166c:	f4 cf       	rjmp	.-24     	; 0x1656 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    166e:	80 91 e8 00 	lds	r24, 0x00E8
    1672:	8b 77       	andi	r24, 0x7B	; 123
    1674:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1678:	61 15       	cp	r22, r1
    167a:	71 05       	cpc	r23, r1
    167c:	e1 f6       	brne	.-72     	; 0x1636 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    167e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1682:	80 fd       	sbrc	r24, 0
    1684:	0a c0       	rjmp	.+20     	; 0x169a <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1686:	80 91 47 02 	lds	r24, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    168a:	88 23       	and	r24, r24
    168c:	41 f0       	breq	.+16     	; 0x169e <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    168e:	85 30       	cpi	r24, 0x05	; 5
    1690:	b1 f7       	brne	.-20     	; 0x167e <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    169e:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16a0:	08 95       	ret

000016a2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    16a2:	20 91 4e 02 	lds	r18, 0x024E
    16a6:	30 91 4f 02 	lds	r19, 0x024F
    16aa:	26 17       	cp	r18, r22
    16ac:	37 07       	cpc	r19, r23
    16ae:	48 f0       	brcs	.+18     	; 0x16c2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16b0:	61 15       	cp	r22, r1
    16b2:	71 05       	cpc	r23, r1
    16b4:	39 f4       	brne	.+14     	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16b6:	20 91 e8 00 	lds	r18, 0x00E8
    16ba:	2e 77       	andi	r18, 0x7E	; 126
    16bc:	20 93 e8 00 	sts	0x00E8, r18
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    16c2:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16c4:	9c 01       	movw	r18, r24
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	35 c0       	rjmp	.+106    	; 0x1734 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16ca:	90 91 47 02 	lds	r25, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16ce:	99 23       	and	r25, r25
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0x32>
    16d2:	44 c0       	rjmp	.+136    	; 0x175c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16d4:	95 30       	cpi	r25, 0x05	; 5
    16d6:	09 f4       	brne	.+2      	; 0x16da <Endpoint_Write_Control_PStream_LE+0x38>
    16d8:	43 c0       	rjmp	.+134    	; 0x1760 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16da:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16de:	93 fd       	sbrc	r25, 3
    16e0:	3b c0       	rjmp	.+118    	; 0x1758 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16e2:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    16e6:	92 fd       	sbrc	r25, 2
    16e8:	31 c0       	rjmp	.+98     	; 0x174c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16ea:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    16ee:	90 ff       	sbrs	r25, 0
    16f0:	21 c0       	rjmp	.+66     	; 0x1734 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    16f2:	80 91 f2 00 	lds	r24, 0x00F2
    16f6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16f8:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    16fa:	82 1b       	sub	r24, r18
    16fc:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1700:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1702:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1706:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1708:	61 50       	subi	r22, 0x01	; 1
    170a:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    170c:	9c 01       	movw	r18, r24
    170e:	2e 0f       	add	r18, r30
    1710:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	19 f0       	breq	.+6      	; 0x171e <Endpoint_Write_Control_PStream_LE+0x7c>
    1718:	28 30       	cpi	r18, 0x08	; 8
    171a:	31 05       	cpc	r19, r1
    171c:	88 f3       	brcs	.-30     	; 0x1700 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	28 30       	cpi	r18, 0x08	; 8
    1722:	31 05       	cpc	r19, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <Endpoint_Write_Control_PStream_LE+0x86>
    1726:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1728:	90 91 e8 00 	lds	r25, 0x00E8
    172c:	9e 77       	andi	r25, 0x7E	; 126
    172e:	90 93 e8 00 	sts	0x00E8, r25
    1732:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1734:	61 15       	cp	r22, r1
    1736:	71 05       	cpc	r23, r1
    1738:	41 f6       	brne	.-112    	; 0x16ca <Endpoint_Write_Control_PStream_LE+0x28>
    173a:	81 11       	cpse	r24, r1
    173c:	c6 cf       	rjmp	.-116    	; 0x16ca <Endpoint_Write_Control_PStream_LE+0x28>
    173e:	06 c0       	rjmp	.+12     	; 0x174c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1740:	80 91 47 02 	lds	r24, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1744:	88 23       	and	r24, r24
    1746:	51 f0       	breq	.+20     	; 0x175c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1748:	85 30       	cpi	r24, 0x05	; 5
    174a:	51 f0       	breq	.+20     	; 0x1760 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    174c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1750:	82 ff       	sbrs	r24, 2
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1760:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1762:	08 95       	ret

00001764 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1764:	98 2f       	mov	r25, r24
    1766:	2c c0       	rjmp	.+88     	; 0x17c0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1768:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    176c:	98 17       	cp	r25, r24
    176e:	39 f0       	breq	.+14     	; 0x177e <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1770:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1774:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1778:	50 91 f0 00 	lds	r21, 0x00F0
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    177e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1780:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1782:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1784:	21 fd       	sbrc	r18, 1
    1786:	02 c0       	rjmp	.+4      	; 0x178c <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	1a c0       	rjmp	.+52     	; 0x17c0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    178c:	30 91 eb 00 	lds	r19, 0x00EB
    1790:	3e 7f       	andi	r19, 0xFE	; 254
    1792:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1796:	30 91 ed 00 	lds	r19, 0x00ED
    179a:	3d 7f       	andi	r19, 0xFD	; 253
    179c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    17a0:	30 91 eb 00 	lds	r19, 0x00EB
    17a4:	31 60       	ori	r19, 0x01	; 1
    17a6:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    17aa:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    17ae:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    17b2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17b6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    17ba:	27 fd       	sbrc	r18, 7
    17bc:	e5 cf       	rjmp	.-54     	; 0x1788 <Endpoint_ConfigureEndpoint_Prv+0x24>
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17c0:	95 30       	cpi	r25, 0x05	; 5
    17c2:	90 f2       	brcs	.-92     	; 0x1768 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c4:	8f 70       	andi	r24, 0x0F	; 15
    17c6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    17d0:	08 95       	ret

000017d2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	06 2f       	mov	r16, r22
    17dc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    17de:	10 e0       	ldi	r17, 0x00	; 0
    17e0:	2e c0       	rjmp	.+92     	; 0x183e <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    17e2:	98 81       	ld	r25, Y
    17e4:	91 11       	cpse	r25, r1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    17e8:	1f 5f       	subi	r17, 0xFF	; 255
    17ea:	25 96       	adiw	r28, 0x05	; 5
    17ec:	28 c0       	rjmp	.+80     	; 0x183e <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	e9 81       	ldd	r30, Y+1	; 0x01
    17f2:	fa 81       	ldd	r31, Y+2	; 0x02
    17f4:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    17f6:	89 2f       	mov	r24, r25
    17f8:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    17fa:	85 30       	cpi	r24, 0x05	; 5
    17fc:	10 f0       	brcs	.+4      	; 0x1802 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	21 c0       	rjmp	.+66     	; 0x1844 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	10 f0       	brcs	.+4      	; 0x180a <Endpoint_ConfigureEndpointTable+0x38>
    1806:	56 e0       	ldi	r21, 0x06	; 6
    1808:	01 c0       	rjmp	.+2      	; 0x180c <Endpoint_ConfigureEndpointTable+0x3a>
    180a:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    180c:	28 e0       	ldi	r18, 0x08	; 8
    180e:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	03 c0       	rjmp	.+6      	; 0x181a <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1814:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    181a:	2e 17       	cp	r18, r30
    181c:	3f 07       	cpc	r19, r31
    181e:	d0 f3       	brcs	.-12     	; 0x1814 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1820:	42 95       	swap	r20
    1822:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1824:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1826:	99 1f       	adc	r25, r25
    1828:	99 27       	eor	r25, r25
    182a:	99 1f       	adc	r25, r25
    182c:	62 95       	swap	r22
    182e:	66 0f       	add	r22, r22
    1830:	66 0f       	add	r22, r22
    1832:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1834:	69 2b       	or	r22, r25
    1836:	96 df       	rcall	.-212    	; 0x1764 <Endpoint_ConfigureEndpoint_Prv>
    1838:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    183a:	d6 cf       	rjmp	.-84     	; 0x17e8 <Endpoint_ConfigureEndpointTable+0x16>
    183c:	e0 cf       	rjmp	.-64     	; 0x17fe <Endpoint_ConfigureEndpointTable+0x2c>
    183e:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1840:	d0 cf       	rjmp	.-96     	; 0x17e2 <Endpoint_ConfigureEndpointTable+0x10>
    1842:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1844:	df 91       	pop	r29
}
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    184e:	80 91 48 02 	lds	r24, 0x0248
    1852:	87 fd       	sbrc	r24, 7
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    185a:	80 ff       	sbrs	r24, 0
    185c:	0e c0       	rjmp	.+28     	; 0x187a <Endpoint_ClearStatusStage+0x2c>
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1860:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1864:	82 fd       	sbrc	r24, 2
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1868:	80 91 47 02 	lds	r24, 0x0247
    186c:	81 11       	cpse	r24, r1
    186e:	f8 cf       	rjmp	.-16     	; 0x1860 <Endpoint_ClearStatusStage+0x12>
    1870:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1872:	80 91 e8 00 	lds	r24, 0x00E8
    1876:	8b 77       	andi	r24, 0x7B	; 123
    1878:	08 c0       	rjmp	.+16     	; 0x188a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    187a:	80 91 47 02 	lds	r24, 0x0247
    187e:	81 11       	cpse	r24, r1
    1880:	ea cf       	rjmp	.-44     	; 0x1856 <Endpoint_ClearStatusStage+0x8>
    1882:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1884:	80 91 e8 00 	lds	r24, 0x00E8
    1888:	8e 77       	andi	r24, 0x7E	; 126
    188a:	80 93 e8 00 	sts	0x00E8, r24
    188e:	08 95       	ret

00001890 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1890:	80 91 e4 00 	lds	r24, 0x00E4
    1894:	90 91 e5 00 	lds	r25, 0x00E5
    1898:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    189a:	20 91 ec 00 	lds	r18, 0x00EC
    189e:	20 fd       	sbrc	r18, 0
    18a0:	1f c0       	rjmp	.+62     	; 0x18e0 <Endpoint_WaitUntilReady+0x50>
    18a2:	23 c0       	rjmp	.+70     	; 0x18ea <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18a4:	20 91 47 02 	lds	r18, 0x0247

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18a8:	22 23       	and	r18, r18
    18aa:	91 f0       	breq	.+36     	; 0x18d0 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ac:	25 30       	cpi	r18, 0x05	; 5
    18ae:	91 f0       	breq	.+36     	; 0x18d4 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18b0:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    18b4:	25 fd       	sbrc	r18, 5
    18b6:	10 c0       	rjmp	.+32     	; 0x18d8 <Endpoint_WaitUntilReady+0x48>
    18b8:	20 91 e4 00 	lds	r18, 0x00E4
    18bc:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	51 f3       	breq	.-44     	; 0x189a <Endpoint_WaitUntilReady+0xa>
    18c6:	41 50       	subi	r20, 0x01	; 1
    18c8:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    18ca:	39 f7       	brne	.-50     	; 0x189a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18e0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    18e4:	20 ff       	sbrs	r18, 0
    18e6:	de cf       	rjmp	.-68     	; 0x18a4 <Endpoint_WaitUntilReady+0x14>
    18e8:	f9 cf       	rjmp	.-14     	; 0x18dc <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ea:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    18ee:	22 ff       	sbrs	r18, 2
    18f0:	d9 cf       	rjmp	.-78     	; 0x18a4 <Endpoint_WaitUntilReady+0x14>
    18f2:	f4 cf       	rjmp	.-24     	; 0x18dc <Endpoint_WaitUntilReady+0x4c>

000018f4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18f4:	41 d0       	rcall	.+130    	; 0x1978 <USB_INT_DisableAllInterrupts>
    18f6:	43 d0       	rcall	.+134    	; 0x197e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18f8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	80 93 d8 00 	sts	0x00D8, r24
    1902:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1906:	80 68       	ori	r24, 0x80	; 128
    1908:	80 93 d8 00 	sts	0x00D8, r24
    190c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1910:	8f 7d       	andi	r24, 0xDF	; 223
    1912:	80 93 d8 00 	sts	0x00D8, r24
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    191a:	86 e0       	ldi	r24, 0x06	; 6
    191c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    191e:	09 b4       	in	r0, 0x29	; 41
    1920:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1922:	fd cf       	rjmp	.-6      	; 0x191e <USB_ResetInterface+0x2a>
    1924:	10 92 47 02 	sts	0x0247, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1928:	10 92 43 02 	sts	0x0243, r1
	USB_Device_ConfigurationNumber  = 0;
    192c:	10 92 45 02 	sts	0x0245, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1930:	10 92 44 02 	sts	0x0244, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1934:	42 e0       	ldi	r20, 0x02	; 2
    1936:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	14 df       	rcall	.-472    	; 0x1764 <Endpoint_ConfigureEndpoint_Prv>
    193c:	80 91 e1 00 	lds	r24, 0x00E1
    1940:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1942:	80 93 e1 00 	sts	0x00E1, r24
    1946:	80 91 e2 00 	lds	r24, 0x00E2
    194a:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    194c:	80 93 e2 00 	sts	0x00E2, r24
    1950:	80 91 e2 00 	lds	r24, 0x00E2
    1954:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1956:	80 93 e2 00 	sts	0x00E2, r24
    195a:	80 91 e0 00 	lds	r24, 0x00E0
    195e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1960:	80 93 e0 00 	sts	0x00E0, r24
    1964:	08 95       	ret

00001966 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1966:	e3 e6       	ldi	r30, 0x63	; 99
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8e 7f       	andi	r24, 0xFE	; 254
    196e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 46 02 	sts	0x0246, r24

	USB_ResetInterface();
    1976:	be cf       	rjmp	.-132    	; 0x18f4 <USB_ResetInterface>

00001978 <USB_INT_DisableAllInterrupts>:
    1978:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    197c:	08 95       	ret

0000197e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    197e:	10 92 e1 00 	sts	0x00E1, r1
    1982:	08 95       	ret

00001984 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    19a6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    19aa:	82 ff       	sbrs	r24, 2
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    19ae:	80 91 e2 00 	lds	r24, 0x00E2
    19b2:	82 ff       	sbrs	r24, 2
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    19b6:	80 91 e1 00 	lds	r24, 0x00E1
    19ba:	8b 7f       	andi	r24, 0xFB	; 251
    19bc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    19c0:	0e 94 05 03 	call	0x60a	; 0x60a <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    19c4:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    19c8:	80 ff       	sbrs	r24, 0
    19ca:	18 c0       	rjmp	.+48     	; 0x19fc <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    19cc:	80 91 e2 00 	lds	r24, 0x00E2
    19d0:	80 ff       	sbrs	r24, 0
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    19d4:	80 91 e2 00 	lds	r24, 0x00E2
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    19de:	80 91 e2 00 	lds	r24, 0x00E2
    19e2:	80 61       	ori	r24, 0x10	; 16
    19e4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    19e8:	80 91 d8 00 	lds	r24, 0x00D8
    19ec:	80 62       	ori	r24, 0x20	; 32
    19ee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    19f2:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    19f4:	10 92 47 02 	sts	0x0247, r1
		EVENT_USB_Device_Disconnect();
    19f8:	0e 94 b2 02 	call	0x564	; 0x564 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    19fc:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a00:	84 ff       	sbrs	r24, 4
    1a02:	30 c0       	rjmp	.+96     	; 0x1a64 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a04:	80 91 e2 00 	lds	r24, 0x00E2
    1a08:	84 ff       	sbrs	r24, 4
    1a0a:	2c c0       	rjmp	.+88     	; 0x1a64 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a14:	09 b4       	in	r0, 0x29	; 41
    1a16:	00 fe       	sbrs	r0, 0
    1a18:	fd cf       	rjmp	.-6      	; 0x1a14 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a1a:	80 91 d8 00 	lds	r24, 0x00D8
    1a1e:	8f 7d       	andi	r24, 0xDF	; 223
    1a20:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a24:	80 91 e1 00 	lds	r24, 0x00E1
    1a28:	8f 7e       	andi	r24, 0xEF	; 239
    1a2a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a2e:	80 91 e2 00 	lds	r24, 0x00E2
    1a32:	8f 7e       	andi	r24, 0xEF	; 239
    1a34:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a38:	80 91 e2 00 	lds	r24, 0x00E2
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a42:	80 91 43 02 	lds	r24, 0x0243
    1a46:	88 23       	and	r24, r24
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1a4a:	84 e0       	ldi	r24, 0x04	; 4
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1a4e:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1a52:	87 ff       	sbrs	r24, 7
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <__vector_11+0xd6>
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <__vector_11+0xd8>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 47 02 	sts	0x0247, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1a60:	0e 94 b1 02 	call	0x562	; 0x562 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a64:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a68:	83 ff       	sbrs	r24, 3
    1a6a:	27 c0       	rjmp	.+78     	; 0x1aba <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a6c:	80 91 e2 00 	lds	r24, 0x00E2
    1a70:	83 ff       	sbrs	r24, 3
    1a72:	23 c0       	rjmp	.+70     	; 0x1aba <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1a74:	80 91 e1 00 	lds	r24, 0x00E1
    1a78:	87 7f       	andi	r24, 0xF7	; 247
    1a7a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	80 93 47 02 	sts	0x0247, r24
		USB_Device_ConfigurationNumber = 0;
    1a84:	10 92 43 02 	sts	0x0243, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a88:	80 91 e1 00 	lds	r24, 0x00E1
    1a8c:	8e 7f       	andi	r24, 0xFE	; 254
    1a8e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a92:	80 91 e2 00 	lds	r24, 0x00E2
    1a96:	8e 7f       	andi	r24, 0xFE	; 254
    1a98:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a9c:	80 91 e2 00 	lds	r24, 0x00E2
    1aa0:	80 61       	ori	r24, 0x10	; 16
    1aa2:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1aa6:	42 e0       	ldi	r20, 0x02	; 2
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	5b de       	rcall	.-842    	; 0x1764 <Endpoint_ConfigureEndpoint_Prv>
    1aae:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ab2:	88 60       	ori	r24, 0x08	; 8
    1ab4:	80 93 f0 00 	sts	0x00F0, r24
    1ab8:	b8 d1       	rcall	.+880    	; 0x1e2a <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	cf 93       	push	r28
    1afc:	ef 93       	push	r30
    1afe:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b00:	80 91 e9 00 	lds	r24, 0x00E9
    1b04:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b06:	90 91 ec 00 	lds	r25, 0x00EC
    1b0a:	90 ff       	sbrs	r25, 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <__vector_12+0x36>
    1b0e:	90 e8       	ldi	r25, 0x80	; 128
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <__vector_12+0x38>
    1b12:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b14:	c9 2f       	mov	r28, r25
    1b16:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b18:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1b1c:	80 91 f0 00 	lds	r24, 0x00F0
    1b20:	87 7f       	andi	r24, 0xF7	; 247
    1b22:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1b26:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1b28:	1c d0       	rcall	.+56     	; 0x1b62 <USB_Device_ProcessControlRequest>
    1b2a:	10 92 e9 00 	sts	0x00E9, r1
    1b2e:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b32:	88 60       	ori	r24, 0x08	; 8
    1b34:	80 93 f0 00 	sts	0x00F0, r24
    1b38:	cf 70       	andi	r28, 0x0F	; 15
    1b3a:	c0 93 e9 00 	sts	0x00E9, r28
    1b3e:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1b40:	ef 91       	pop	r30
    1b42:	cf 91       	pop	r28
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <USB_Device_ProcessControlRequest>:
    1b62:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	ac 97       	sbiw	r28, 0x2c	; 44
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1b78:	e8 e4       	ldi	r30, 0x48	; 72
    1b7a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b7c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b80:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b82:	22 e0       	ldi	r18, 0x02	; 2
    1b84:	e0 35       	cpi	r30, 0x50	; 80
    1b86:	f2 07       	cpc	r31, r18
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b8a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b92:	83 ff       	sbrs	r24, 3
    1b94:	32 c1       	rjmp	.+612    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b96:	80 91 48 02 	lds	r24, 0x0248

		switch (USB_ControlRequest.bRequest)
    1b9a:	90 91 49 02 	lds	r25, 0x0249
    1b9e:	95 30       	cpi	r25, 0x05	; 5
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <USB_Device_ProcessControlRequest+0x42>
    1ba2:	87 c0       	rjmp	.+270    	; 0x1cb2 <USB_Device_ProcessControlRequest+0x150>
    1ba4:	38 f4       	brcc	.+14     	; 0x1bb4 <USB_Device_ProcessControlRequest+0x52>
    1ba6:	91 30       	cpi	r25, 0x01	; 1
    1ba8:	b1 f1       	breq	.+108    	; 0x1c16 <USB_Device_ProcessControlRequest+0xb4>
    1baa:	70 f0       	brcs	.+28     	; 0x1bc8 <USB_Device_ProcessControlRequest+0x66>
    1bac:	93 30       	cpi	r25, 0x03	; 3
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <USB_Device_ProcessControlRequest+0x50>
    1bb0:	24 c1       	rjmp	.+584    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1bb2:	31 c0       	rjmp	.+98     	; 0x1c16 <USB_Device_ProcessControlRequest+0xb4>
    1bb4:	98 30       	cpi	r25, 0x08	; 8
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <USB_Device_ProcessControlRequest+0x58>
    1bb8:	f4 c0       	rjmp	.+488    	; 0x1da2 <USB_Device_ProcessControlRequest+0x240>
    1bba:	99 30       	cpi	r25, 0x09	; 9
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <USB_Device_ProcessControlRequest+0x5e>
    1bbe:	00 c1       	rjmp	.+512    	; 0x1dc0 <USB_Device_ProcessControlRequest+0x25e>
    1bc0:	96 30       	cpi	r25, 0x06	; 6
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <USB_Device_ProcessControlRequest+0x64>
    1bc4:	1a c1       	rjmp	.+564    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1bc6:	9b c0       	rjmp	.+310    	; 0x1cfe <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bc8:	80 38       	cpi	r24, 0x80	; 128
    1bca:	21 f0       	breq	.+8      	; 0x1bd4 <USB_Device_ProcessControlRequest+0x72>
    1bcc:	82 38       	cpi	r24, 0x82	; 130
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <USB_Device_ProcessControlRequest+0x70>
    1bd0:	14 c1       	rjmp	.+552    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1bd2:	08 c0       	rjmp	.+16     	; 0x1be4 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1bd4:	80 91 44 02 	lds	r24, 0x0244
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1bd8:	90 91 45 02 	lds	r25, 0x0245
    1bdc:	99 23       	and	r25, r25
    1bde:	89 f0       	breq	.+34     	; 0x1c02 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1be0:	82 60       	ori	r24, 0x02	; 2
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1be4:	80 91 4c 02 	lds	r24, 0x024C
    1be8:	90 91 4d 02 	lds	r25, 0x024D
    1bec:	8f 70       	andi	r24, 0x0F	; 15
    1bee:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bf0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bf4:	80 91 eb 00 	lds	r24, 0x00EB
    1bf8:	85 fb       	bst	r24, 5
    1bfa:	88 27       	eor	r24, r24
    1bfc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bfe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c02:	90 91 e8 00 	lds	r25, 0x00E8
    1c06:	97 7f       	andi	r25, 0xF7	; 247
    1c08:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1c0c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1c10:	10 92 f1 00 	sts	0x00F1, r1
    1c14:	d1 c0       	rjmp	.+418    	; 0x1db8 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c16:	88 23       	and	r24, r24
    1c18:	19 f0       	breq	.+6      	; 0x1c20 <USB_Device_ProcessControlRequest+0xbe>
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <USB_Device_ProcessControlRequest+0xbe>
    1c1e:	ed c0       	rjmp	.+474    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1c20:	8f 71       	andi	r24, 0x1F	; 31
    1c22:	21 f0       	breq	.+8      	; 0x1c2c <USB_Device_ProcessControlRequest+0xca>
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <USB_Device_ProcessControlRequest+0xc8>
    1c28:	e8 c0       	rjmp	.+464    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1c2a:	0b c0       	rjmp	.+22     	; 0x1c42 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c2c:	80 91 4a 02 	lds	r24, 0x024A
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <USB_Device_ProcessControlRequest+0xd4>
    1c34:	e2 c0       	rjmp	.+452    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c36:	93 30       	cpi	r25, 0x03	; 3
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <USB_Device_ProcessControlRequest+0xda>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	80 93 45 02 	sts	0x0245, r24
    1c40:	2f c0       	rjmp	.+94     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1c42:	80 91 4a 02 	lds	r24, 0x024A
    1c46:	81 11       	cpse	r24, r1
    1c48:	2b c0       	rjmp	.+86     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1c4a:	80 91 4c 02 	lds	r24, 0x024C
    1c4e:	90 91 4d 02 	lds	r25, 0x024D
    1c52:	8f 70       	andi	r24, 0x0F	; 15
    1c54:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <USB_Device_ProcessControlRequest+0xfa>
    1c5a:	cf c0       	rjmp	.+414    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c5c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c60:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c64:	20 ff       	sbrs	r18, 0
    1c66:	1c c0       	rjmp	.+56     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c68:	20 91 49 02 	lds	r18, 0x0249
    1c6c:	23 30       	cpi	r18, 0x03	; 3
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c70:	80 91 eb 00 	lds	r24, 0x00EB
    1c74:	80 62       	ori	r24, 0x20	; 32
    1c76:	12 c0       	rjmp	.+36     	; 0x1c9c <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c78:	90 91 eb 00 	lds	r25, 0x00EB
    1c7c:	90 61       	ori	r25, 0x10	; 16
    1c7e:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c82:	21 e0       	ldi	r18, 0x01	; 1
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <USB_Device_ProcessControlRequest+0x128>
    1c88:	22 0f       	add	r18, r18
    1c8a:	8a 95       	dec	r24
    1c8c:	ea f7       	brpl	.-6      	; 0x1c88 <USB_Device_ProcessControlRequest+0x126>
    1c8e:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c92:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c96:	80 91 eb 00 	lds	r24, 0x00EB
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ca0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ca4:	80 91 e8 00 	lds	r24, 0x00E8
    1ca8:	87 7f       	andi	r24, 0xF7	; 247
    1caa:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1cae:	cf dd       	rcall	.-1122   	; 0x184e <Endpoint_ClearStatusStage>
    1cb0:	a4 c0       	rjmp	.+328    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1cb2:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1cb4:	a2 c0       	rjmp	.+324    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1cb6:	80 91 4a 02 	lds	r24, 0x024A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1cba:	90 91 4b 02 	lds	r25, 0x024B
    1cbe:	8f 77       	andi	r24, 0x7F	; 127
    1cc0:	99 27       	eor	r25, r25
    1cc2:	18 2f       	mov	r17, r24
    1cc4:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1cc8:	90 78       	andi	r25, 0x80	; 128
    1cca:	98 2b       	or	r25, r24
    1ccc:	90 93 e3 00 	sts	0x00E3, r25
    1cd0:	80 91 e8 00 	lds	r24, 0x00E8
    1cd4:	87 7f       	andi	r24, 0xF7	; 247
    1cd6:	80 93 e8 00 	sts	0x00E8, r24
    1cda:	b9 dd       	rcall	.-1166   	; 0x184e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1cdc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ce0:	80 ff       	sbrs	r24, 0
    1ce2:	fc cf       	rjmp	.-8      	; 0x1cdc <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1ce4:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	80 93 e3 00 	sts	0x00E3, r24
    1cee:	11 23       	and	r17, r17
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <USB_Device_ProcessControlRequest+0x196>
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	80 93 47 02 	sts	0x0247, r24
    1cfc:	7e c0       	rjmp	.+252    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1cfe:	80 58       	subi	r24, 0x80	; 128
    1d00:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <USB_Device_ProcessControlRequest+0x1a4>
    1d04:	7a c0       	rjmp	.+244    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1d06:	80 91 4a 02 	lds	r24, 0x024A
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1d0a:	90 91 4b 02 	lds	r25, 0x024B
    1d0e:	8c 3d       	cpi	r24, 0xDC	; 220
    1d10:	23 e0       	ldi	r18, 0x03	; 3
    1d12:	92 07       	cpc	r25, r18
    1d14:	71 f5       	brne	.+92     	; 0x1d72 <USB_Device_ProcessControlRequest+0x210>
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1d1a:	8a e2       	ldi	r24, 0x2A	; 42
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1d1e:	4f b7       	in	r20, 0x3f	; 63
    1d20:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1d22:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1d24:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d2a:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1d2c:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	50 93 57 00 	sts	0x0057, r21
    1d34:	e4 91       	lpm	r30, Z+
    1d36:	20 ff       	sbrs	r18, 0
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1d3a:	e2 95       	swap	r30
    1d3c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1d3e:	3f 5f       	subi	r19, 0xFF	; 255
    1d40:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1d42:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	ea 30       	cpi	r30, 0x0A	; 10
    1d48:	10 f0       	brcs	.+4      	; 0x1d4e <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1d4a:	c7 96       	adiw	r24, 0x37	; 55
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <USB_Device_ProcessControlRequest+0x1ee>
    1d4e:	c0 96       	adiw	r24, 0x30	; 48
    1d50:	8d 93       	st	X+, r24
    1d52:	9d 93       	st	X+, r25
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d58:	49 f7       	brne	.-46     	; 0x1d2c <USB_Device_ProcessControlRequest+0x1ca>
    1d5a:	4f bf       	out	0x3f, r20	; 63
    1d5c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d60:	87 7f       	andi	r24, 0xF7	; 247
    1d62:	80 93 e8 00 	sts	0x00E8, r24
    1d66:	6a e2       	ldi	r22, 0x2A	; 42
    1d68:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	f9 db       	rcall	.-2062   	; 0x1562 <Endpoint_Write_Control_Stream_LE>
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <USB_Device_ProcessControlRequest+0x234>
    1d72:	ae 01       	movw	r20, r28
    1d74:	45 5d       	subi	r20, 0xD5	; 213
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1d78:	60 91 4c 02 	lds	r22, 0x024C
    1d7c:	0e 94 11 03 	call	0x622	; 0x622 <CALLBACK_USB_GetDescriptor>
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	d9 f1       	breq	.+118    	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1d84:	20 91 e8 00 	lds	r18, 0x00E8
    1d88:	27 7f       	andi	r18, 0xF7	; 247
    1d8a:	20 93 e8 00 	sts	0x00E8, r18
    1d8e:	bc 01       	movw	r22, r24
    1d90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d92:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1d94:	86 dc       	rcall	.-1780   	; 0x16a2 <Endpoint_Write_Control_PStream_LE>
    1d96:	80 91 e8 00 	lds	r24, 0x00E8
    1d9a:	8b 77       	andi	r24, 0x7B	; 123
    1d9c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1da0:	2c c0       	rjmp	.+88     	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1da2:	80 38       	cpi	r24, 0x80	; 128
    1da4:	51 f5       	brne	.+84     	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1da6:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1daa:	87 7f       	andi	r24, 0xF7	; 247
    1dac:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1db0:	80 91 43 02 	lds	r24, 0x0243
    1db4:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1db8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1dbc:	8e 77       	andi	r24, 0x7E	; 126
    1dbe:	75 cf       	rjmp	.-278    	; 0x1caa <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	1b c0       	rjmp	.+54     	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
    1dc4:	90 91 4a 02 	lds	r25, 0x024A
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1dc8:	92 30       	cpi	r25, 0x02	; 2
    1dca:	b8 f4       	brcc	.+46     	; 0x1dfa <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1dcc:	80 91 e8 00 	lds	r24, 0x00E8
    1dd0:	87 7f       	andi	r24, 0xF7	; 247
    1dd2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dd6:	90 93 43 02 	sts	0x0243, r25
    1dda:	39 dd       	rcall	.-1422   	; 0x184e <Endpoint_ClearStatusStage>
    1ddc:	80 91 43 02 	lds	r24, 0x0243
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1de0:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <USB_Device_ProcessControlRequest+0x28a>
    1de4:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1de8:	87 ff       	sbrs	r24, 7
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <USB_Device_ProcessControlRequest+0x28e>
    1dec:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <USB_Device_ProcessControlRequest+0x290>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1df2:	80 93 47 02 	sts	0x0247, r24
    1df6:	0e 94 b3 02 	call	0x566	; 0x566 <EVENT_USB_Device_ConfigurationChanged>
    1dfa:	80 91 e8 00 	lds	r24, 0x00E8
    1dfe:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1e00:	0a c0       	rjmp	.+20     	; 0x1e16 <USB_Device_ProcessControlRequest+0x2b4>
    1e02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e06:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1e08:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e0c:	80 91 eb 00 	lds	r24, 0x00EB
    1e10:	80 62       	ori	r24, 0x20	; 32
    1e12:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e16:	ac 96       	adiw	r28, 0x2c	; 44
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	08 95       	ret

00001e2a <USB_Event_Stub>:
    1e2a:	08 95       	ret

00001e2c <USB_USBTask>:
    1e2c:	cf 93       	push	r28
    1e2e:	80 91 47 02 	lds	r24, 0x0247
    1e32:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e34:	a9 f0       	breq	.+42     	; 0x1e60 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e36:	80 91 e9 00 	lds	r24, 0x00E9
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e3c:	90 91 ec 00 	lds	r25, 0x00EC
    1e40:	90 ff       	sbrs	r25, 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <USB_USBTask+0x1c>
    1e44:	90 e8       	ldi	r25, 0x80	; 128
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <USB_USBTask+0x1e>
    1e48:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e4a:	c9 2f       	mov	r28, r25
    1e4c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e4e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e52:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1e56:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1e58:	84 de       	rcall	.-760    	; 0x1b62 <USB_Device_ProcessControlRequest>
    1e5a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e5c:	c0 93 e9 00 	sts	0x00E9, r28
    1e60:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e62:	08 95       	ret

00001e64 <CDC_Device_ConfigureEndpoints>:
    1e64:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1e66:	df 93       	push	r29
    1e68:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1e6a:	40 96       	adiw	r24, 0x10	; 16
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	8b e0       	ldi	r24, 0x0B	; 11
    1e70:	df 01       	movw	r26, r30
    1e72:	1d 92       	st	X+, r1
    1e74:	8a 95       	dec	r24
    1e76:	e9 f7       	brne	.-6      	; 0x1e72 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1e7c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	ce 01       	movw	r24, r28
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	a4 dc       	rcall	.-1720   	; 0x17d2 <Endpoint_ConfigureEndpointTable>
    1e8a:	88 23       	and	r24, r24
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <CDC_Device_ConfigureEndpoints+0x42>
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1e90:	ce 01       	movw	r24, r28
    1e92:	06 96       	adiw	r24, 0x06	; 6
    1e94:	9e dc       	rcall	.-1732   	; 0x17d2 <Endpoint_ConfigureEndpointTable>
    1e96:	88 23       	and	r24, r24
    1e98:	31 f0       	breq	.+12     	; 0x1ea6 <CDC_Device_ConfigureEndpoints+0x42>
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1e9e:	0b 96       	adiw	r24, 0x0b	; 11
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
	  return false;

	return true;
}
    1ea4:	96 cc       	rjmp	.-1748   	; 0x17d2 <Endpoint_ConfigureEndpointTable>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
	  return false;

	return true;
}
    1eac:	08 95       	ret

00001eae <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	ba 01       	movw	r22, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1eb8:	20 91 47 02 	lds	r18, 0x0247
    1ebc:	24 30       	cpi	r18, 0x04	; 4
    1ebe:	89 f4       	brne	.+34     	; 0x1ee2 <CDC_Device_SendData+0x34>
    1ec0:	04 89       	ldd	r16, Z+20	; 0x14
    1ec2:	15 89       	ldd	r17, Z+21	; 0x15
    1ec4:	26 89       	ldd	r18, Z+22	; 0x16
    1ec6:	37 89       	ldd	r19, Z+23	; 0x17
    1ec8:	01 2b       	or	r16, r17
    1eca:	02 2b       	or	r16, r18
    1ecc:	03 2b       	or	r16, r19
    1ece:	49 f0       	breq	.+18     	; 0x1ee2 <CDC_Device_SendData+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed0:	21 81       	ldd	r18, Z+1	; 0x01
    1ed2:	2f 70       	andi	r18, 0x0F	; 15
    1ed4:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	50 e0       	ldi	r21, 0x00	; 0
}
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    1ee0:	f3 ca       	rjmp	.-2586   	; 0x14c8 <Endpoint_Write_Stream_LE>
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
}
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1eea:	cf 93       	push	r28
    1eec:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1eee:	20 91 47 02 	lds	r18, 0x0247
    1ef2:	24 30       	cpi	r18, 0x04	; 4
    1ef4:	f1 f4       	brne	.+60     	; 0x1f32 <CDC_Device_SendByte+0x48>
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	44 89       	ldd	r20, Z+20	; 0x14
    1efa:	55 89       	ldd	r21, Z+21	; 0x15
    1efc:	66 89       	ldd	r22, Z+22	; 0x16
    1efe:	77 89       	ldd	r23, Z+23	; 0x17
    1f00:	45 2b       	or	r20, r21
    1f02:	46 2b       	or	r20, r22
    1f04:	47 2b       	or	r20, r23
    1f06:	a9 f0       	breq	.+42     	; 0x1f32 <CDC_Device_SendByte+0x48>
    1f08:	81 81       	ldd	r24, Z+1	; 0x01
    1f0a:	8f 70       	andi	r24, 0x0F	; 15
    1f0c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f10:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1f14:	85 ff       	sbrs	r24, 5
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f18:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	0a c0       	rjmp	.+20     	; 0x1f34 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f20:	80 91 e8 00 	lds	r24, 0x00E8
    1f24:	8e 77       	andi	r24, 0x7E	; 126
    1f26:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1f2a:	b2 dc       	rcall	.-1692   	; 0x1890 <Endpoint_WaitUntilReady>
    1f2c:	88 23       	and	r24, r24
    1f2e:	a1 f3       	breq	.-24     	; 0x1f18 <CDC_Device_SendByte+0x2e>
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <CDC_Device_SendByte+0x4a>
    1f32:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1f34:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1f36:	08 95       	ret

00001f38 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f38:	20 91 47 02 	lds	r18, 0x0247
    1f3c:	24 30       	cpi	r18, 0x04	; 4
    1f3e:	29 f5       	brne	.+74     	; 0x1f8a <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f40:	fc 01       	movw	r30, r24
    1f42:	44 89       	ldd	r20, Z+20	; 0x14
    1f44:	55 89       	ldd	r21, Z+21	; 0x15
    1f46:	66 89       	ldd	r22, Z+22	; 0x16
    1f48:	77 89       	ldd	r23, Z+23	; 0x17
    1f4a:	45 2b       	or	r20, r21
    1f4c:	46 2b       	or	r20, r22
    1f4e:	47 2b       	or	r20, r23
    1f50:	e1 f0       	breq	.+56     	; 0x1f8a <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f52:	81 81       	ldd	r24, Z+1	; 0x01
    1f54:	8f 70       	andi	r24, 0x0F	; 15
    1f56:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1f5a:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1f5e:	81 11       	cpse	r24, r1
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f66:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f6a:	80 91 e8 00 	lds	r24, 0x00E8
    1f6e:	8e 77       	andi	r24, 0x7E	; 126
    1f70:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1f74:	95 fd       	sbrc	r25, 5
    1f76:	f5 cf       	rjmp	.-22     	; 0x1f62 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1f78:	8b dc       	rcall	.-1770   	; 0x1890 <Endpoint_WaitUntilReady>
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <CDC_Device_Flush+0x54>
    1f7e:	90 91 e8 00 	lds	r25, 0x00E8
    1f82:	9e 77       	andi	r25, 0x7E	; 126
    1f84:	90 93 e8 00 	sts	0x00E8, r25
    1f88:	08 95       	ret
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1f8c:	08 95       	ret

00001f8e <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1f8e:	20 91 47 02 	lds	r18, 0x0247
    1f92:	24 30       	cpi	r18, 0x04	; 4
    1f94:	89 f4       	brne	.+34     	; 0x1fb8 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f96:	fc 01       	movw	r30, r24
    1f98:	44 89       	ldd	r20, Z+20	; 0x14
    1f9a:	55 89       	ldd	r21, Z+21	; 0x15
    1f9c:	66 89       	ldd	r22, Z+22	; 0x16
    1f9e:	77 89       	ldd	r23, Z+23	; 0x17
    1fa0:	45 2b       	or	r20, r21
    1fa2:	46 2b       	or	r20, r22
    1fa4:	47 2b       	or	r20, r23
    1fa6:	41 f0       	breq	.+16     	; 0x1fb8 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fa8:	21 81       	ldd	r18, Z+1	; 0x01
    1faa:	2f 70       	andi	r18, 0x0F	; 15
    1fac:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fb0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1fb4:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    1fb6:	c0 cf       	rjmp	.-128    	; 0x1f38 <CDC_Device_Flush>
    1fb8:	08 95       	ret

00001fba <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1fba:	20 91 47 02 	lds	r18, 0x0247
    1fbe:	24 30       	cpi	r18, 0x04	; 4
    1fc0:	19 f0       	breq	.+6      	; 0x1fc8 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1fc2:	2f ef       	ldi	r18, 0xFF	; 255
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	24 c0       	rjmp	.+72     	; 0x2010 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1fc8:	fc 01       	movw	r30, r24
    1fca:	44 89       	ldd	r20, Z+20	; 0x14
    1fcc:	55 89       	ldd	r21, Z+21	; 0x15
    1fce:	66 89       	ldd	r22, Z+22	; 0x16
    1fd0:	77 89       	ldd	r23, Z+23	; 0x17
    1fd2:	45 2b       	or	r20, r21
    1fd4:	46 2b       	or	r20, r22
    1fd6:	47 2b       	or	r20, r23
    1fd8:	a1 f3       	breq	.-24     	; 0x1fc2 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fda:	86 81       	ldd	r24, Z+6	; 0x06
    1fdc:	8f 70       	andi	r24, 0x0F	; 15
    1fde:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fe2:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1fe6:	82 ff       	sbrs	r24, 2
    1fe8:	ec cf       	rjmp	.-40     	; 0x1fc2 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1fea:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1fee:	88 23       	and	r24, r24
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ff2:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1ffa:	2f ef       	ldi	r18, 0xFF	; 255
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1ffe:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2002:	81 11       	cpse	r24, r1
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2006:	80 91 e8 00 	lds	r24, 0x00E8
    200a:	8b 77       	andi	r24, 0x7B	; 123
    200c:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    2010:	c9 01       	movw	r24, r18
    2012:	08 95       	ret

00002014 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2014:	08 95       	ret

00002016 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    201c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2020:	83 ff       	sbrs	r24, 3
    2022:	a7 c0       	rjmp	.+334    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2024:	88 81       	ld	r24, Y
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	20 91 4c 02 	lds	r18, 0x024C
    202c:	30 91 4d 02 	lds	r19, 0x024D
    2030:	28 17       	cp	r18, r24
    2032:	39 07       	cpc	r19, r25
    2034:	09 f0       	breq	.+2      	; 0x2038 <CDC_Device_ProcessControlRequest+0x22>
    2036:	9d c0       	rjmp	.+314    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    2038:	80 91 49 02 	lds	r24, 0x0249
    203c:	81 32       	cpi	r24, 0x21	; 33
    203e:	61 f0       	breq	.+24     	; 0x2058 <CDC_Device_ProcessControlRequest+0x42>
    2040:	20 f4       	brcc	.+8      	; 0x204a <CDC_Device_ProcessControlRequest+0x34>
    2042:	80 32       	cpi	r24, 0x20	; 32
    2044:	09 f0       	breq	.+2      	; 0x2048 <CDC_Device_ProcessControlRequest+0x32>
    2046:	95 c0       	rjmp	.+298    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    2048:	3d c0       	rjmp	.+122    	; 0x20c4 <CDC_Device_ProcessControlRequest+0xae>
    204a:	82 32       	cpi	r24, 0x22	; 34
    204c:	09 f4       	brne	.+2      	; 0x2050 <CDC_Device_ProcessControlRequest+0x3a>
    204e:	6d c0       	rjmp	.+218    	; 0x212a <CDC_Device_ProcessControlRequest+0x114>
    2050:	83 32       	cpi	r24, 0x23	; 35
    2052:	09 f0       	breq	.+2      	; 0x2056 <CDC_Device_ProcessControlRequest+0x40>
    2054:	8e c0       	rjmp	.+284    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    2056:	7d c0       	rjmp	.+250    	; 0x2152 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2058:	80 91 48 02 	lds	r24, 0x0248
    205c:	81 3a       	cpi	r24, 0xA1	; 161
    205e:	09 f0       	breq	.+2      	; 0x2062 <CDC_Device_ProcessControlRequest+0x4c>
    2060:	88 c0       	rjmp	.+272    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2062:	80 91 e8 00 	lds	r24, 0x00E8
    2066:	87 7f       	andi	r24, 0xF7	; 247
    2068:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    206c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2070:	80 ff       	sbrs	r24, 0
    2072:	fc cf       	rjmp	.-8      	; 0x206c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2074:	4c 89       	ldd	r20, Y+20	; 0x14
    2076:	5d 89       	ldd	r21, Y+21	; 0x15
    2078:	6e 89       	ldd	r22, Y+22	; 0x16
    207a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    207c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2080:	bb 27       	eor	r27, r27
    2082:	a7 2f       	mov	r26, r23
    2084:	96 2f       	mov	r25, r22
    2086:	85 2f       	mov	r24, r21
    2088:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    208c:	cb 01       	movw	r24, r22
    208e:	aa 27       	eor	r26, r26
    2090:	bb 27       	eor	r27, r27
    2092:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2096:	47 2f       	mov	r20, r23
    2098:	55 27       	eor	r21, r21
    209a:	66 27       	eor	r22, r22
    209c:	77 27       	eor	r23, r23
    209e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    20a2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20a4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    20a8:	89 8d       	ldd	r24, Y+25	; 0x19
    20aa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    20ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20b0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20b4:	80 91 e8 00 	lds	r24, 0x00E8
    20b8:	8e 77       	andi	r24, 0x7E	; 126
    20ba:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    20c2:	c5 cb       	rjmp	.-2166   	; 0x184e <Endpoint_ClearStatusStage>
    20c4:	80 91 48 02 	lds	r24, 0x0248
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20c8:	81 32       	cpi	r24, 0x21	; 33
    20ca:	09 f0       	breq	.+2      	; 0x20ce <CDC_Device_ProcessControlRequest+0xb8>
    20cc:	52 c0       	rjmp	.+164    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    20ce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20d2:	87 7f       	andi	r24, 0xF7	; 247
    20d4:	80 93 e8 00 	sts	0x00E8, r24
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <CDC_Device_ProcessControlRequest+0xce>
    20da:	80 91 47 02 	lds	r24, 0x0247
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    20de:	88 23       	and	r24, r24
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <CDC_Device_ProcessControlRequest+0xce>
    20e2:	47 c0       	rjmp	.+142    	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    20e4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20e8:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    20ea:	f7 cf       	rjmp	.-18     	; 0x20da <CDC_Device_ProcessControlRequest+0xc4>
    20ec:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    20f0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    20f4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    20f8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    20fc:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    20fe:	2d 8b       	std	Y+21, r18	; 0x15
    2100:	9e 8b       	std	Y+22, r25	; 0x16
    2102:	8f 8b       	std	Y+23, r24	; 0x17
    2104:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2108:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    210a:	80 91 f1 00 	lds	r24, 0x00F1
    210e:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2110:	80 91 f1 00 	lds	r24, 0x00F1
    2114:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2116:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    211a:	8b 77       	andi	r24, 0x7B	; 123
    211c:	80 93 e8 00 	sts	0x00E8, r24
    2120:	96 db       	rcall	.-2260   	; 0x184e <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2122:	ce 01       	movw	r24, r28
    2124:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2126:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2128:	32 c9       	rjmp	.-3484   	; 0x138e <EVENT_CDC_Device_LineEncodingChanged>
    212a:	80 91 48 02 	lds	r24, 0x0248
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    212e:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2130:	01 f5       	brne	.+64     	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    2132:	80 91 e8 00 	lds	r24, 0x00E8
    2136:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2138:	80 93 e8 00 	sts	0x00E8, r24
    213c:	88 db       	rcall	.-2288   	; 0x184e <Endpoint_ClearStatusStage>
    213e:	80 91 4a 02 	lds	r24, 0x024A
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2142:	90 91 4b 02 	lds	r25, 0x024B

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2146:	99 8b       	std	Y+17, r25	; 0x11
    2148:	88 8b       	std	Y+16, r24	; 0x10
    214a:	ce 01       	movw	r24, r28
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	fd c8       	rjmp	.-3590   	; 0x134c <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2152:	80 91 48 02 	lds	r24, 0x0248
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2156:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2158:	61 f4       	brne	.+24     	; 0x2172 <CDC_Device_ProcessControlRequest+0x15c>
    215a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    215e:	87 7f       	andi	r24, 0xF7	; 247
    2160:	80 93 e8 00 	sts	0x00E8, r24
    2164:	74 db       	rcall	.-2328   	; 0x184e <Endpoint_ClearStatusStage>
    2166:	60 91 4a 02 	lds	r22, 0x024A
    216a:	ce 01       	movw	r24, r28
    216c:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    216e:	cf 91       	pop	r28
    2170:	51 cf       	rjmp	.-350    	; 0x2014 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    2178:	6f 92       	push	r6
    217a:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    217c:	8f 92       	push	r8
    217e:	9f 92       	push	r9
			}

			break;
	}
}
    2180:	af 92       	push	r10
    2182:	bf 92       	push	r11
    2184:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	00 d0       	rcall	.+0      	; 0x2196 <HID_Device_ProcessControlRequest+0x1e>
    2196:	1f 92       	push	r1
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    219e:	ad b6       	in	r10, 0x3d	; 61
    21a0:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21a2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    21a6:	83 ff       	sbrs	r24, 3
    21a8:	07 c1       	rjmp	.+526    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    21aa:	f7 01       	movw	r30, r14
    21ac:	80 81       	ld	r24, Z
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	20 91 4c 02 	lds	r18, 0x024C
    21b4:	30 91 4d 02 	lds	r19, 0x024D
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <HID_Device_ProcessControlRequest+0x48>
    21be:	fc c0       	rjmp	.+504    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    21c0:	80 91 49 02 	lds	r24, 0x0249
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	09 f4       	brne	.+2      	; 0x21ca <HID_Device_ProcessControlRequest+0x52>
    21c8:	9e c0       	rjmp	.+316    	; 0x2306 <HID_Device_ProcessControlRequest+0x18e>
    21ca:	30 f4       	brcc	.+12     	; 0x21d8 <HID_Device_ProcessControlRequest+0x60>
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	71 f0       	breq	.+28     	; 0x21ec <HID_Device_ProcessControlRequest+0x74>
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <HID_Device_ProcessControlRequest+0x5e>
    21d4:	f1 c0       	rjmp	.+482    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    21d6:	d4 c0       	rjmp	.+424    	; 0x2380 <HID_Device_ProcessControlRequest+0x208>
    21d8:	8a 30       	cpi	r24, 0x0A	; 10
    21da:	09 f4       	brne	.+2      	; 0x21de <HID_Device_ProcessControlRequest+0x66>
    21dc:	b9 c0       	rjmp	.+370    	; 0x2350 <HID_Device_ProcessControlRequest+0x1d8>
    21de:	8b 30       	cpi	r24, 0x0B	; 11
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <HID_Device_ProcessControlRequest+0x6c>
    21e2:	a2 c0       	rjmp	.+324    	; 0x2328 <HID_Device_ProcessControlRequest+0x1b0>
    21e4:	89 30       	cpi	r24, 0x09	; 9
    21e6:	09 f0       	breq	.+2      	; 0x21ea <HID_Device_ProcessControlRequest+0x72>
    21e8:	e7 c0       	rjmp	.+462    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    21ea:	4c c0       	rjmp	.+152    	; 0x2284 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21ec:	80 91 48 02 	lds	r24, 0x0248
    21f0:	81 3a       	cpi	r24, 0xA1	; 161
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <HID_Device_ProcessControlRequest+0x7e>
    21f4:	e1 c0       	rjmp	.+450    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    21f6:	8d b6       	in	r8, 0x3d	; 61
    21f8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    21fe:	80 91 4a 02 	lds	r24, 0x024A
    2202:	10 91 4b 02 	lds	r17, 0x024B
    2206:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2208:	f7 01       	movw	r30, r14
    220a:	40 85       	ldd	r20, Z+8	; 0x08
    220c:	8d b7       	in	r24, 0x3d	; 61
    220e:	9e b7       	in	r25, 0x3e	; 62
    2210:	84 1b       	sub	r24, r20
    2212:	91 09       	sbc	r25, r1
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	9e bf       	out	0x3e, r25	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	8d bf       	out	0x3d, r24	; 61
    221e:	cd b6       	in	r12, 0x3d	; 61
    2220:	de b6       	in	r13, 0x3e	; 62
    2222:	ef ef       	ldi	r30, 0xFF	; 255
    2224:	ce 1a       	sub	r12, r30
    2226:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    2228:	36 01       	movw	r6, r12
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	c6 01       	movw	r24, r12
    2232:	ea d1       	rcall	.+980    	; 0x2608 <memset>
    2234:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2236:	41 50       	subi	r20, 0x01	; 1
    2238:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    223a:	0f 5f       	subi	r16, 0xFF	; 255
    223c:	1f 4f       	sbci	r17, 0xFF	; 255
    223e:	96 01       	movw	r18, r12
    2240:	be 01       	movw	r22, r28
    2242:	6d 5f       	subi	r22, 0xFD	; 253
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	c7 01       	movw	r24, r14
    2248:	0e 94 62 03 	call	0x6c4	; 0x6c4 <CALLBACK_HID_Device_CreateHIDReport>
    224c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    224e:	26 81       	ldd	r18, Z+6	; 0x06
    2250:	37 81       	ldd	r19, Z+7	; 0x07
    2252:	21 15       	cp	r18, r1
    2254:	31 05       	cpc	r19, r1
    2256:	29 f0       	breq	.+10     	; 0x2262 <HID_Device_ProcessControlRequest+0xea>
    2258:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	b6 01       	movw	r22, r12
    225e:	c9 01       	movw	r24, r18
    2260:	ca d1       	rcall	.+916    	; 0x25f6 <memcpy>
    2262:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2266:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    226a:	87 7f       	andi	r24, 0xF7	; 247
    226c:	80 93 e8 00 	sts	0x00E8, r24
    2270:	69 81       	ldd	r22, Y+1	; 0x01
    2272:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2274:	c3 01       	movw	r24, r6
    2276:	75 d9       	rcall	.-3350   	; 0x1562 <Endpoint_Write_Control_Stream_LE>
    2278:	80 91 e8 00 	lds	r24, 0x00E8
    227c:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    227e:	80 93 e8 00 	sts	0x00E8, r24
    2282:	39 c0       	rjmp	.+114    	; 0x22f6 <HID_Device_ProcessControlRequest+0x17e>
    2284:	80 91 48 02 	lds	r24, 0x0248
    2288:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    228a:	09 f0       	breq	.+2      	; 0x228e <HID_Device_ProcessControlRequest+0x116>
    228c:	95 c0       	rjmp	.+298    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    228e:	8d b6       	in	r8, 0x3d	; 61
    2290:	9e b6       	in	r9, 0x3e	; 62
    2292:	00 91 4e 02 	lds	r16, 0x024E
    2296:	10 91 4f 02 	lds	r17, 0x024F
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    229a:	70 90 4a 02 	lds	r7, 0x024A
    229e:	60 90 4b 02 	lds	r6, 0x024B
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    22a2:	8d b7       	in	r24, 0x3d	; 61
    22a4:	9e b7       	in	r25, 0x3e	; 62
    22a6:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    22a8:	91 0b       	sbc	r25, r17
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	9e bf       	out	0x3e, r25	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	8d bf       	out	0x3d, r24	; 61
    22b4:	cd b6       	in	r12, 0x3d	; 61
    22b6:	de b6       	in	r13, 0x3e	; 62
    22b8:	ef ef       	ldi	r30, 0xFF	; 255
    22ba:	ce 1a       	sub	r12, r30
    22bc:	de 0a       	sbc	r13, r30
    22be:	80 91 e8 00 	lds	r24, 0x00E8
    22c2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22c4:	80 93 e8 00 	sts	0x00E8, r24
    22c8:	b8 01       	movw	r22, r16
    22ca:	c6 01       	movw	r24, r12
    22cc:	aa d9       	rcall	.-3244   	; 0x1622 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    22ce:	80 91 e8 00 	lds	r24, 0x00E8
    22d2:	8e 77       	andi	r24, 0x7E	; 126
    22d4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22d8:	21 e0       	ldi	r18, 0x01	; 1
    22da:	71 10       	cpse	r7, r1
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <HID_Device_ProcessControlRequest+0x168>
    22de:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	02 1b       	sub	r16, r18
    22e4:	13 0b       	sbc	r17, r19
    22e6:	2c 0d       	add	r18, r12
    22e8:	3d 1d       	adc	r19, r13
    22ea:	46 2d       	mov	r20, r6
    22ec:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    22ee:	67 2d       	mov	r22, r7
    22f0:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    22f2:	0e 94 9c 03 	call	0x738	; 0x738 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    22f6:	88 2d       	mov	r24, r8
    22f8:	99 2d       	mov	r25, r9
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	9e bf       	out	0x3e, r25	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	8d bf       	out	0x3d, r24	; 61
    2304:	59 c0       	rjmp	.+178    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2306:	80 91 48 02 	lds	r24, 0x0248
    230a:	81 3a       	cpi	r24, 0xA1	; 161
    230c:	09 f0       	breq	.+2      	; 0x2310 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    230e:	54 c0       	rjmp	.+168    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2310:	80 91 e8 00 	lds	r24, 0x00E8
    2314:	87 7f       	andi	r24, 0xF7	; 247
    2316:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    231a:	80 91 e8 00 	lds	r24, 0x00E8
    231e:	80 ff       	sbrs	r24, 0
    2320:	fc cf       	rjmp	.-8      	; 0x231a <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2322:	f7 01       	movw	r30, r14
    2324:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2326:	40 c0       	rjmp	.+128    	; 0x23a8 <HID_Device_ProcessControlRequest+0x230>
    2328:	80 91 48 02 	lds	r24, 0x0248
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    232c:	81 32       	cpi	r24, 0x21	; 33
    232e:	09 f0       	breq	.+2      	; 0x2332 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2330:	43 c0       	rjmp	.+134    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2332:	80 91 e8 00 	lds	r24, 0x00E8
    2336:	87 7f       	andi	r24, 0xF7	; 247
    2338:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    233c:	88 da       	rcall	.-2800   	; 0x184e <Endpoint_ClearStatusStage>
    233e:	90 91 4a 02 	lds	r25, 0x024A
    2342:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2344:	91 11       	cpse	r25, r1
    2346:	01 c0       	rjmp	.+2      	; 0x234a <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	f7 01       	movw	r30, r14
    234c:	81 87       	std	Z+9, r24	; 0x09
    234e:	34 c0       	rjmp	.+104    	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2350:	80 91 48 02 	lds	r24, 0x0248
    2354:	81 32       	cpi	r24, 0x21	; 33
    2356:	81 f5       	brne	.+96     	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2358:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    235c:	87 7f       	andi	r24, 0xF7	; 247
    235e:	80 93 e8 00 	sts	0x00E8, r24
    2362:	75 da       	rcall	.-2838   	; 0x184e <Endpoint_ClearStatusStage>
    2364:	80 91 4a 02 	lds	r24, 0x024A
    2368:	90 91 4b 02 	lds	r25, 0x024B
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    236c:	88 27       	eor	r24, r24
    236e:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2370:	96 95       	lsr	r25
    2372:	87 95       	ror	r24
    2374:	3a 95       	dec	r19
    2376:	e1 f7       	brne	.-8      	; 0x2370 <HID_Device_ProcessControlRequest+0x1f8>
    2378:	f7 01       	movw	r30, r14
    237a:	95 87       	std	Z+13, r25	; 0x0d
    237c:	84 87       	std	Z+12, r24	; 0x0c
    237e:	1c c0       	rjmp	.+56     	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2380:	80 91 48 02 	lds	r24, 0x0248
    2384:	81 3a       	cpi	r24, 0xA1	; 161
    2386:	c1 f4       	brne	.+48     	; 0x23b8 <HID_Device_ProcessControlRequest+0x240>
    2388:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	80 93 e8 00 	sts	0x00E8, r24
    2392:	80 91 e8 00 	lds	r24, 0x00E8
    2396:	80 ff       	sbrs	r24, 0
    2398:	fc cf       	rjmp	.-8      	; 0x2392 <HID_Device_ProcessControlRequest+0x21a>
    239a:	f7 01       	movw	r30, r14
    239c:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    239e:	95 85       	ldd	r25, Z+13	; 0x0d
    23a0:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    23a2:	87 95       	ror	r24
    23a4:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    23a6:	87 95       	ror	r24
    23a8:	80 93 f1 00 	sts	0x00F1, r24
    23ac:	80 91 e8 00 	lds	r24, 0x00E8
    23b0:	8e 77       	andi	r24, 0x7E	; 126
    23b2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23b6:	4b da       	rcall	.-2922   	; 0x184e <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	be be       	out	0x3e, r11	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
			}

			break;
	}
}
    23c6:	0f 90       	pop	r0
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	af 90       	pop	r10
    23dc:	9f 90       	pop	r9
    23de:	8f 90       	pop	r8
    23e0:	7f 90       	pop	r7
    23e2:	6f 90       	pop	r6
    23e4:	08 95       	ret

000023e6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    23e6:	9c 01       	movw	r18, r24
    23e8:	27 5f       	subi	r18, 0xF7	; 247
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	f9 01       	movw	r30, r18
    23ee:	27 e0       	ldi	r18, 0x07	; 7
    23f0:	df 01       	movw	r26, r30
    23f2:	1d 92       	st	X+, r1
    23f4:	2a 95       	dec	r18
    23f6:	e9 f7       	brne	.-6      	; 0x23f2 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    23f8:	21 e0       	ldi	r18, 0x01	; 1
    23fa:	fc 01       	movw	r30, r24
    23fc:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    23fe:	24 ef       	ldi	r18, 0xF4	; 244
    2400:	31 e0       	ldi	r19, 0x01	; 1
    2402:	35 87       	std	Z+13, r19	; 0x0d
    2404:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2406:	23 e0       	ldi	r18, 0x03	; 3
    2408:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	e1 c9       	rjmp	.-3134   	; 0x17d2 <Endpoint_ConfigureEndpointTable>

00002410 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2410:	4f 92       	push	r4
    2412:	5f 92       	push	r5
    2414:	6f 92       	push	r6
    2416:	7f 92       	push	r7
    2418:	8f 92       	push	r8
    241a:	9f 92       	push	r9
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	00 d0       	rcall	.+0      	; 0x2432 <HID_Device_USBTask+0x22>
    2432:	1f 92       	push	r1
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    243a:	ad b6       	in	r10, 0x3d	; 61
    243c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    243e:	80 91 47 02 	lds	r24, 0x0247
    2442:	84 30       	cpi	r24, 0x04	; 4
    2444:	09 f0       	breq	.+2      	; 0x2448 <HID_Device_USBTask+0x38>
    2446:	8f c0       	rjmp	.+286    	; 0x2566 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2448:	80 91 e4 00 	lds	r24, 0x00E4
    244c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2450:	f7 01       	movw	r30, r14
    2452:	22 85       	ldd	r18, Z+10	; 0x0a
    2454:	33 85       	ldd	r19, Z+11	; 0x0b
    2456:	28 17       	cp	r18, r24
    2458:	39 07       	cpc	r19, r25
    245a:	09 f4       	brne	.+2      	; 0x245e <HID_Device_USBTask+0x4e>
    245c:	84 c0       	rjmp	.+264    	; 0x2566 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    245e:	81 81       	ldd	r24, Z+1	; 0x01
    2460:	8f 70       	andi	r24, 0x0F	; 15
    2462:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2466:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    246a:	85 ff       	sbrs	r24, 5
    246c:	7c c0       	rjmp	.+248    	; 0x2566 <HID_Device_USBTask+0x156>
    246e:	6d b6       	in	r6, 0x3d	; 61
    2470:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2472:	40 85       	ldd	r20, Z+8	; 0x08
    2474:	8d b7       	in	r24, 0x3d	; 61
    2476:	9e b7       	in	r25, 0x3e	; 62
    2478:	84 1b       	sub	r24, r20
    247a:	91 09       	sbc	r25, r1
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	9e bf       	out	0x3e, r25	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	8d bf       	out	0x3d, r24	; 61
    2486:	cd b6       	in	r12, 0x3d	; 61
    2488:	de b6       	in	r13, 0x3e	; 62
    248a:	ef ef       	ldi	r30, 0xFF	; 255
    248c:	ce 1a       	sub	r12, r30
    248e:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2490:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2492:	1a 82       	std	Y+2, r1	; 0x02
    2494:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2496:	46 01       	movw	r8, r12
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	c6 01       	movw	r24, r12
    24a0:	b3 d0       	rcall	.+358    	; 0x2608 <memset>
    24a2:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    24a4:	0f 5f       	subi	r16, 0xFF	; 255
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	96 01       	movw	r18, r12
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	be 01       	movw	r22, r28
    24ae:	6d 5f       	subi	r22, 0xFD	; 253
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	c7 01       	movw	r24, r14
    24b4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <CALLBACK_HID_Device_CreateHIDReport>
    24b8:	58 2e       	mov	r5, r24
    24ba:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    24bc:	84 85       	ldd	r24, Z+12	; 0x0c
    24be:	95 85       	ldd	r25, Z+13	; 0x0d
    24c0:	89 2b       	or	r24, r25
    24c2:	31 f0       	breq	.+12     	; 0x24d0 <HID_Device_USBTask+0xc0>
    24c4:	01 e0       	ldi	r16, 0x01	; 1
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	86 85       	ldd	r24, Z+14	; 0x0e
    24ca:	97 85       	ldd	r25, Z+15	; 0x0f
    24cc:	89 2b       	or	r24, r25
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <HID_Device_USBTask+0xc4>
    24d0:	00 e0       	ldi	r16, 0x00	; 0
    24d2:	10 e0       	ldi	r17, 0x00	; 0
    24d4:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    24d6:	c6 80       	ldd	r12, Z+6	; 0x06
    24d8:	d7 80       	ldd	r13, Z+7	; 0x07
    24da:	c1 14       	cp	r12, r1
    24dc:	d1 04       	cpc	r13, r1
    24de:	89 f0       	breq	.+34     	; 0x2502 <HID_Device_USBTask+0xf2>
    24e0:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    24e2:	5a 81       	ldd	r21, Y+2	; 0x02
    24e4:	b6 01       	movw	r22, r12
    24e6:	c4 01       	movw	r24, r8
    24e8:	79 d0       	rcall	.+242    	; 0x25dc <memcmp>
    24ea:	44 24       	eor	r4, r4
    24ec:	43 94       	inc	r4
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <HID_Device_USBTask+0xe4>
    24f2:	41 2c       	mov	r4, r1
    24f4:	f7 01       	movw	r30, r14
    24f6:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	b4 01       	movw	r22, r8
    24fc:	c6 01       	movw	r24, r12
    24fe:	7b d0       	rcall	.+246    	; 0x25f6 <memcpy>
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <HID_Device_USBTask+0xf4>
    2502:	41 2c       	mov	r4, r1
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2508:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    250a:	f9 f0       	breq	.+62     	; 0x254a <HID_Device_USBTask+0x13a>
    250c:	51 10       	cpse	r5, r1
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <HID_Device_USBTask+0x108>
    2510:	41 10       	cpse	r4, r1
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <HID_Device_USBTask+0x108>
    2514:	00 ff       	sbrs	r16, 0
    2516:	19 c0       	rjmp	.+50     	; 0x254a <HID_Device_USBTask+0x13a>
    2518:	f7 01       	movw	r30, r14
    251a:	84 85       	ldd	r24, Z+12	; 0x0c
    251c:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    251e:	97 87       	std	Z+15, r25	; 0x0f
    2520:	86 87       	std	Z+14, r24	; 0x0e
    2522:	81 81       	ldd	r24, Z+1	; 0x01
    2524:	8f 70       	andi	r24, 0x0F	; 15
    2526:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	81 11       	cpse	r24, r1
    252e:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2532:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2534:	7a 81       	ldd	r23, Y+2	; 0x02
    2536:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	c4 01       	movw	r24, r8
    253c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <Endpoint_Write_Stream_LE>
    2540:	80 91 e8 00 	lds	r24, 0x00E8
    2544:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2546:	80 93 e8 00 	sts	0x00E8, r24
    254a:	80 91 e4 00 	lds	r24, 0x00E4
    254e:	90 91 e5 00 	lds	r25, 0x00E5
    2552:	f7 01       	movw	r30, r14
    2554:	93 87       	std	Z+11, r25	; 0x0b
    2556:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2558:	86 2d       	mov	r24, r6
    255a:	97 2d       	mov	r25, r7
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	9e bf       	out	0x3e, r25	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	8d bf       	out	0x3d, r24	; 61
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	be be       	out	0x3e, r11	; 62
	}
}
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	ad be       	out	0x3d, r10	; 61
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	4f 90       	pop	r4
    2596:	08 95       	ret

00002598 <__udivmodsi4>:
    2598:	a1 e2       	ldi	r26, 0x21	; 33
    259a:	1a 2e       	mov	r1, r26
    259c:	aa 1b       	sub	r26, r26
    259e:	bb 1b       	sub	r27, r27
    25a0:	fd 01       	movw	r30, r26
    25a2:	0d c0       	rjmp	.+26     	; 0x25be <__udivmodsi4_ep>

000025a4 <__udivmodsi4_loop>:
    25a4:	aa 1f       	adc	r26, r26
    25a6:	bb 1f       	adc	r27, r27
    25a8:	ee 1f       	adc	r30, r30
    25aa:	ff 1f       	adc	r31, r31
    25ac:	a2 17       	cp	r26, r18
    25ae:	b3 07       	cpc	r27, r19
    25b0:	e4 07       	cpc	r30, r20
    25b2:	f5 07       	cpc	r31, r21
    25b4:	20 f0       	brcs	.+8      	; 0x25be <__udivmodsi4_ep>
    25b6:	a2 1b       	sub	r26, r18
    25b8:	b3 0b       	sbc	r27, r19
    25ba:	e4 0b       	sbc	r30, r20
    25bc:	f5 0b       	sbc	r31, r21

000025be <__udivmodsi4_ep>:
    25be:	66 1f       	adc	r22, r22
    25c0:	77 1f       	adc	r23, r23
    25c2:	88 1f       	adc	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	1a 94       	dec	r1
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <__udivmodsi4_loop>
    25ca:	60 95       	com	r22
    25cc:	70 95       	com	r23
    25ce:	80 95       	com	r24
    25d0:	90 95       	com	r25
    25d2:	9b 01       	movw	r18, r22
    25d4:	ac 01       	movw	r20, r24
    25d6:	bd 01       	movw	r22, r26
    25d8:	cf 01       	movw	r24, r30
    25da:	08 95       	ret

000025dc <memcmp>:
    25dc:	fb 01       	movw	r30, r22
    25de:	dc 01       	movw	r26, r24
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <memcmp+0xe>
    25e2:	8d 91       	ld	r24, X+
    25e4:	01 90       	ld	r0, Z+
    25e6:	80 19       	sub	r24, r0
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <memcmp+0x16>
    25ea:	41 50       	subi	r20, 0x01	; 1
    25ec:	50 40       	sbci	r21, 0x00	; 0
    25ee:	c8 f7       	brcc	.-14     	; 0x25e2 <memcmp+0x6>
    25f0:	88 1b       	sub	r24, r24
    25f2:	99 0b       	sbc	r25, r25
    25f4:	08 95       	ret

000025f6 <memcpy>:
    25f6:	fb 01       	movw	r30, r22
    25f8:	dc 01       	movw	r26, r24
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <memcpy+0xa>
    25fc:	01 90       	ld	r0, Z+
    25fe:	0d 92       	st	X+, r0
    2600:	41 50       	subi	r20, 0x01	; 1
    2602:	50 40       	sbci	r21, 0x00	; 0
    2604:	d8 f7       	brcc	.-10     	; 0x25fc <memcpy+0x6>
    2606:	08 95       	ret

00002608 <memset>:
    2608:	dc 01       	movw	r26, r24
    260a:	01 c0       	rjmp	.+2      	; 0x260e <memset+0x6>
    260c:	6d 93       	st	X+, r22
    260e:	41 50       	subi	r20, 0x01	; 1
    2610:	50 40       	sbci	r21, 0x00	; 0
    2612:	e0 f7       	brcc	.-8      	; 0x260c <memset+0x4>
    2614:	08 95       	ret

00002616 <_exit>:
    2616:	f8 94       	cli

00002618 <__stop_program>:
    2618:	ff cf       	rjmp	.-2      	; 0x2618 <__stop_program>
