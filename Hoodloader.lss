
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000281c  000028b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000281c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  00800136  00800136  000028e6  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008c8  00000000  00000000  00003fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e8fc  00000000  00000000  00004889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c22  00000000  00000000  00013185  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005ab5  00000000  00000000  00016da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015d0  00000000  00000000  0001c85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a38  00000000  00000000  0001de2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000088a5  00000000  00000000  00022864  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a68  00000000  00000000  0002b109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
       6:	00 00       	nop
				UDR1 = DataByte;
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	45 c3       	rjmp	.+1674   	; 0x6e8 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 20 00 01        !...."...... ..

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 3f 09 01 81 02 95 3f     .u...&...?.....?
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff ff 19 00 2a ff ff 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	04 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	ec e1       	ldi	r30, 0x1C	; 28
     2fc:	f8 e2       	ldi	r31, 0x28	; 40
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	12 e0       	ldi	r17, 0x02	; 2
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	a3 35       	cpi	r26, 0x53	; 83
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	6c d0       	rcall	.+216    	; 0x3f4 <main>
				break;
     31c:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <LRingBuffer_Remove.constprop.2>:
     322:	e6 e3       	ldi	r30, 0x36	; 54
				break;
     324:	f1 e0       	ldi	r31, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	5f b7       	in	r21, 0x3f	; 63
     328:	f8 94       	cli
     32a:	20 81       	ld	r18, Z

				if (ParserData->UsingReportIDs)
     32c:	31 81       	ldd	r19, Z+1	; 0x01
     32e:	21 15       	cp	r18, r1
     330:	31 05       	cpc	r19, r1
     332:	19 f0       	breq	.+6      	; 0x33a <LRingBuffer_Remove.constprop.2+0x18>
     334:	44 81       	ldd	r20, Z+4	; 0x04
     336:	41 11       	cpse	r20, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	04 c0       	rjmp	.+8      	; 0x342 <LRingBuffer_Remove.constprop.2+0x20>
     33a:	5f bf       	out	0x3f, r21	; 63
     33c:	2f ef       	ldi	r18, 0xFF	; 255
     33e:	3f ef       	ldi	r19, 0xFF	; 255
     340:	11 c0       	rjmp	.+34     	; 0x364 <LRingBuffer_Remove.constprop.2+0x42>
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	84 1b       	sub	r24, r20
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	91 09       	sbc	r25, r1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	97 ff       	sbrs	r25, 7
     34c:	03 c0       	rjmp	.+6      	; 0x354 <LRingBuffer_Remove.constprop.2+0x32>
     34e:	63 81       	ldd	r22, Z+3	; 0x03
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	86 0f       	add	r24, r22
     352:	91 1d       	adc	r25, r1
     354:	d9 01       	movw	r26, r18
     356:	a8 0f       	add	r26, r24
     358:	b9 1f       	adc	r27, r25
     35a:	2c 91       	ld	r18, X
     35c:	41 50       	subi	r20, 0x01	; 1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	44 83       	std	Z+4, r20	; 0x04
     360:	5f bf       	out	0x3f, r21	; 63
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	c9 01       	movw	r24, r18
     366:	08 95       	ret

00000368 <LRingBuffer_Append.constprop.4>:
     368:	e6 e3       	ldi	r30, 0x36	; 54
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	4f b7       	in	r20, 0x3f	; 63
     36e:	f8 94       	cli
     370:	20 81       	ld	r18, Z
     372:	31 81       	ldd	r19, Z+1	; 0x01
     374:	21 15       	cp	r18, r1
     376:	31 05       	cpc	r19, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	09 f4       	brne	.+2      	; 0x37c <LRingBuffer_Append.constprop.4+0x14>
     37a:	1d c0       	rjmp	.+58     	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     37c:	82 81       	ldd	r24, Z+2	; 0x02
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	54 81       	ldd	r21, Z+4	; 0x04
     382:	85 1b       	sub	r24, r21
     384:	91 09       	sbc	r25, r1
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	97 ff       	sbrs	r25, 7
     38a:	03 c0       	rjmp	.+6      	; 0x392 <LRingBuffer_Append.constprop.4+0x2a>
     38c:	53 81       	ldd	r21, Z+3	; 0x03
     38e:	85 0f       	add	r24, r21
     390:	91 1d       	adc	r25, r1
     392:	d9 01       	movw	r26, r18
     394:	a8 0f       	add	r26, r24
     396:	b9 1f       	adc	r27, r25
     398:	6c 93       	st	X, r22
     39a:	84 81       	ldd	r24, Z+4	; 0x04
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	89 13       	cpse	r24, r25
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <LRingBuffer_Append.constprop.4+0x4a>
     3a2:	92 81       	ldd	r25, Z+2	; 0x02
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	91 11       	cpse	r25, r1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <LRingBuffer_Append.constprop.4+0x42>
     3a8:	82 83       	std	Z+2, r24	; 0x02
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	81 50       	subi	r24, 0x01	; 1
     3ae:	82 83       	std	Z+2, r24	; 0x02
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	4f bf       	out	0x3f, r20	; 63
     3b8:	08 95       	ret

000003ba <SetupHardware>:
     3ba:	84 b7       	in	r24, 0x34	; 52
     3bc:	87 7f       	andi	r24, 0xF7	; 247

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	84 bf       	out	0x34, r24	; 52
     3c0:	88 e1       	ldi	r24, 0x18	; 24
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	80 93 60 00 	sts	0x0060, r24
     3ca:	10 92 60 00 	sts	0x0060, r1
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SerialInitHID>
     3d4:	8a b1       	in	r24, 0x0a	; 10
     3d6:	80 63       	ori	r24, 0x30	; 48
     3d8:	8a b9       	out	0x0a, r24	; 10
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	80 63       	ori	r24, 0x30	; 48
     3de:	8b b9       	out	0x0b, r24	; 11
     3e0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <USB_Init>
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	85 bd       	out	0x25, r24	; 37
     3e8:	5f 9a       	sbi	0x0b, 7	; 11
     3ea:	57 9a       	sbi	0x0a, 7	; 10
     3ec:	20 98       	cbi	0x04, 0	; 4
     3ee:	25 98       	cbi	0x04, 5	; 4
     3f0:	2d 9a       	sbi	0x05, 5	; 5
     3f2:	08 95       	ret

000003f4 <main>:
     3f4:	e6 e3       	ldi	r30, 0x36	; 54
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	2f b7       	in	r18, 0x3f	; 63
				break;
     3fa:	f8 94       	cli
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	86 e4       	ldi	r24, 0x46	; 70
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	12 82       	std	Z+2, r1	; 0x02
     406:	84 e6       	ldi	r24, 0x64	; 100
     408:	83 83       	std	Z+3, r24	; 0x03

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	14 82       	std	Z+4, r1	; 0x04
     40c:	2f bf       	out	0x3f, r18	; 63
     40e:	10 92 3b 01 	sts	0x013B, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     412:	86 ef       	ldi	r24, 0xF6	; 246
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	aa d7       	rcall	.+3924   	; 0x136c <NHPreset>
     418:	10 92 45 01 	sts	0x0145, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	97 d3       	rcall	.+1838   	; 0xb4c <HIDreset>
     41e:	a9 d3       	rcall	.+1874   	; 0xb72 <avrispReset>
     420:	cc df       	rcall	.-104    	; 0x3ba <SetupHardware>
     422:	78 94       	sei
     424:	80 91 3e 01 	lds	r24, 0x013E

					while (CurrCollectionPath->Parent != NULL)
     428:	81 11       	cpse	r24, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	06 c0       	rjmp	.+12     	; 0x438 <main+0x44>
     42c:	83 b1       	in	r24, 0x03	; 3
     42e:	80 72       	andi	r24, 0x20	; 32
     430:	83 b9       	out	0x03, r24	; 3
     432:	81 11       	cpse	r24, r1
     434:	01 c0       	rjmp	.+2      	; 0x438 <main+0x44>
     436:	c5 d2       	rcall	.+1418   	; 0x9c2 <clearHIDReports>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 de 10 	call	0x21bc	; 0x21bc <CDC_Device_ReceiveByte>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	97 fd       	sbrc	r25, 7
     442:	1b c0       	rjmp	.+54     	; 0x47a <main+0x86>
     444:	40 91 24 01 	lds	r20, 0x0124
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	50 91 25 01 	lds	r21, 0x0125
     44c:	60 91 26 01 	lds	r22, 0x0126
				}

				CurrCollectionPath->Type       = ReportItemData;
     450:	70 91 27 01 	lds	r23, 0x0127
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     454:	41 30       	cpi	r20, 0x01	; 1
     456:	51 05       	cpc	r21, r1
     458:	61 05       	cpc	r22, r1
     45a:	71 05       	cpc	r23, r1
     45c:	11 f4       	brne	.+4      	; 0x462 <main+0x6e>
     45e:	be d6       	rcall	.+3452   	; 0x11dc <avrisp>

				if (UsageListSize)
     460:	0c c0       	rjmp	.+24     	; 0x47a <main+0x86>
     462:	5c 98       	cbi	0x0b, 4	; 11
     464:	90 91 45 01 	lds	r25, 0x0145
     468:	9c 60       	ori	r25, 0x0C	; 12
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	90 93 45 01 	sts	0x0145, r25
     46e:	90 91 c8 00 	lds	r25, 0x00C8
     472:	95 ff       	sbrs	r25, 5
     474:	fc cf       	rjmp	.-8      	; 0x46e <main+0x7a>
     476:	80 93 ce 00 	sts	0x00CE, r24
     47a:	2f b7       	in	r18, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	80 91 36 01 	lds	r24, 0x0136

					for (uint8_t i = 1; i < UsageListSize; i++)
     482:	90 91 37 01 	lds	r25, 0x0137
					  UsageList[i - 1] = UsageList[i];
     486:	89 2b       	or	r24, r25
     488:	19 f0       	breq	.+6      	; 0x490 <main+0x9c>
     48a:	80 91 3a 01 	lds	r24, 0x013A

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48e:	01 c0       	rjmp	.+2      	; 0x492 <main+0x9e>
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	2f bf       	out	0x3f, r18	; 63
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	00 97       	sbiw	r24, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	19 f4       	brne	.+6      	; 0x4a0 <main+0xac>
     49a:	a8 99       	sbic	0x15, 0	; 21
     49c:	89 c0       	rjmp	.+274    	; 0x5b0 <main+0x1bc>
     49e:	0d c1       	rjmp	.+538    	; 0x6ba <main+0x2c6>
     4a0:	5d 98       	cbi	0x0b, 5	; 11
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	20 91 45 01 	lds	r18, 0x0145
     4a6:	23 60       	ori	r18, 0x03	; 3
     4a8:	20 93 45 01 	sts	0x0145, r18
     4ac:	20 91 11 01 	lds	r18, 0x0111
     4b0:	2f 70       	andi	r18, 0x0F	; 15
     4b2:	20 93 e9 00 	sts	0x00E9, r18
     4b6:	20 91 e8 00 	lds	r18, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	20 ff       	sbrs	r18, 0
     4bc:	ee cf       	rjmp	.-36     	; 0x49a <main+0xa6>
     4be:	80 34       	cpi	r24, 0x40	; 64
     4c0:	91 05       	cpc	r25, r1
     4c2:	10 f0       	brcs	.+4      	; 0x4c8 <main+0xd4>
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	18 2f       	mov	r17, r24
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
     4ce:	6d c0       	rjmp	.+218    	; 0x5aa <main+0x1b6>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	80 91 24 01 	lds	r24, 0x0124
     4d4:	90 91 25 01 	lds	r25, 0x0125
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	a0 91 26 01 	lds	r26, 0x0126
     4dc:	b0 91 27 01 	lds	r27, 0x0127
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	20 91 3b 01 	lds	r18, 0x013B
     4e4:	22 23       	and	r18, r18
     4e6:	29 f0       	breq	.+10     	; 0x4f2 <main+0xfe>
     4e8:	80 91 3b 01 	lds	r24, 0x013B
     4ec:	81 11       	cpse	r24, r1
     4ee:	11 c0       	rjmp	.+34     	; 0x512 <main+0x11e>
     4f0:	16 c0       	rjmp	.+44     	; 0x51e <main+0x12a>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	91 05       	cpc	r25, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	a1 05       	cpc	r26, r1
     4f8:	b1 05       	cpc	r27, r1
     4fa:	28 f0       	brcs	.+10     	; 0x506 <main+0x112>
     4fc:	81 15       	cp	r24, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	92 4c       	sbci	r25, 0xC2	; 194
     500:	a1 40       	sbci	r26, 0x01	; 1
     502:	b1 05       	cpc	r27, r1
     504:	89 f7       	brne	.-30     	; 0x4e8 <main+0xf4>

					if (UsageListSize)
     506:	93 b1       	in	r25, 0x03	; 3
     508:	90 72       	andi	r25, 0x20	; 32
     50a:	93 b9       	out	0x03, r25	; 3
     50c:	99 23       	and	r25, r25
     50e:	61 f3       	breq	.-40     	; 0x4e8 <main+0xf4>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	47 c0       	rjmp	.+142    	; 0x5a0 <main+0x1ac>
     512:	80 91 45 01 	lds	r24, 0x0145
     516:	80 63       	ori	r24, 0x30	; 48
     518:	80 93 45 01 	sts	0x0145, r24
     51c:	01 c0       	rjmp	.+2      	; 0x520 <main+0x12c>
     51e:	51 d2       	rcall	.+1186   	; 0x9c2 <clearHIDReports>
     520:	80 91 20 01 	lds	r24, 0x0120
     524:	80 fd       	sbrc	r24, 0

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	0c c0       	rjmp	.+24     	; 0x540 <main+0x14c>
     528:	80 91 3b 01 	lds	r24, 0x013B
						  UsageList[i - 1] = UsageList[i];
     52c:	88 23       	and	r24, r24
     52e:	41 f0       	breq	.+16     	; 0x540 <main+0x14c>
     530:	86 e3       	ldi	r24, 0x36	; 54

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	f6 de       	rcall	.-532    	; 0x322 <LRingBuffer_Remove.constprop.2>
     536:	80 91 3b 01 	lds	r24, 0x013B
     53a:	81 11       	cpse	r24, r1
     53c:	2d c0       	rjmp	.+90     	; 0x598 <main+0x1a4>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	34 c0       	rjmp	.+104    	; 0x5a8 <main+0x1b4>
     540:	7f b7       	in	r23, 0x3f	; 63
     542:	f8 94       	cli
     544:	20 91 36 01 	lds	r18, 0x0136
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	30 91 37 01 	lds	r19, 0x0137
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	41 f0       	breq	.+16     	; 0x562 <main+0x16e>
     552:	40 91 3a 01 	lds	r20, 0x013A
     556:	44 23       	and	r20, r20
     558:	21 f0       	breq	.+8      	; 0x562 <main+0x16e>
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	14 16       	cp	r1, r20
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	15 06       	cpc	r1, r21
     560:	24 f0       	brlt	.+8      	; 0x56a <main+0x176>
     562:	7f bf       	out	0x3f, r23	; 63
     564:	6f ef       	ldi	r22, 0xFF	; 255
     566:	7f ef       	ldi	r23, 0xFF	; 255
     568:	10 c0       	rjmp	.+32     	; 0x58a <main+0x196>
     56a:	80 91 38 01 	lds	r24, 0x0138
     56e:	90 e0       	ldi	r25, 0x00	; 0
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	84 1b       	sub	r24, r20
     572:	95 0b       	sbc	r25, r21
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	97 ff       	sbrs	r25, 7
     576:	04 c0       	rjmp	.+8      	; 0x580 <main+0x18c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	40 91 39 01 	lds	r20, 0x0139
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	84 0f       	add	r24, r20
     57e:	91 1d       	adc	r25, r1
     580:	f9 01       	movw	r30, r18
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	60 81       	ld	r22, Z
     588:	7f bf       	out	0x3f, r23	; 63
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 76 10 	call	0x20ec	; 0x20ec <CDC_Device_SendByte>
     592:	88 23       	and	r24, r24
     594:	69 f2       	breq	.-102    	; 0x530 <main+0x13c>
     596:	81 cf       	rjmp	.-254    	; 0x49a <main+0xa6>
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	80 93 3b 01 	sts	0x013B, r24
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <main+0x1b4>
     5a0:	86 e3       	ldi	r24, 0x36	; 54

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	be de       	rcall	.-644    	; 0x322 <LRingBuffer_Remove.constprop.2>
     5a6:	51 d2       	rcall	.+1186   	; 0xa4a <checkNHPProtocol>
     5a8:	21 96       	adiw	r28, 0x01	; 1
     5aa:	1c 13       	cpse	r17, r28
     5ac:	91 cf       	rjmp	.-222    	; 0x4d0 <main+0xdc>
     5ae:	75 cf       	rjmp	.-278    	; 0x49a <main+0xa6>
     5b0:	a8 9a       	sbi	0x15, 0	; 21

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	90 91 45 01 	lds	r25, 0x0145
     5b6:	89 2f       	mov	r24, r25
     5b8:	80 73       	andi	r24, 0x30	; 48
     5ba:	09 f4       	brne	.+2      	; 0x5be <main+0x1ca>
     5bc:	5c c0       	rjmp	.+184    	; 0x676 <main+0x282>
     5be:	89 2f       	mov	r24, r25
     5c0:	82 95       	swap	r24
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	8d 5f       	subi	r24, 0xFD	; 253
     5c6:	83 70       	andi	r24, 0x03	; 3
     5c8:	28 2f       	mov	r18, r24
     5ca:	22 95       	swap	r18
     5cc:	20 7f       	andi	r18, 0xF0	; 240
     5ce:	9f 7c       	andi	r25, 0xCF	; 207
     5d0:	92 2b       	or	r25, r18
     5d2:	90 93 45 01 	sts	0x0145, r25
     5d6:	81 11       	cpse	r24, r1
     5d8:	4e c0       	rjmp	.+156    	; 0x676 <main+0x282>
     5da:	80 91 3e 01 	lds	r24, 0x013E
     5de:	81 11       	cpse	r24, r1
     5e0:	4a c0       	rjmp	.+148    	; 0x676 <main+0x282>
     5e2:	e0 91 f6 01 	lds	r30, 0x01F6
     5e6:	e6 ff       	sbrs	r30, 6
     5e8:	15 c0       	rjmp	.+42     	; 0x614 <main+0x220>
     5ea:	e6 95       	lsr	r30
     5ec:	e6 95       	lsr	r30
     5ee:	e6 95       	lsr	r30
     5f0:	e7 70       	andi	r30, 0x07	; 7

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	e5 50       	subi	r30, 0x05	; 5
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	60 81       	ld	r22, Z
					  return HID_PARSE_InsufficientReportItems;
     5fa:	86 e3       	ldi	r24, 0x36	; 54
     5fc:	91 e0       	ldi	r25, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	b4 de       	rcall	.-664    	; 0x368 <LRingBuffer_Append.constprop.4>
     600:	80 91 f6 01 	lds	r24, 0x01F6
     604:	86 fb       	bst	r24, 6
     606:	88 27       	eor	r24, r24
     608:	80 f9       	bld	r24, 0
     60a:	90 91 3b 01 	lds	r25, 0x013B
     60e:	89 0f       	add	r24, r25
     610:	80 93 3b 01 	sts	0x013B, r24
     614:	00 91 f6 01 	lds	r16, 0x01F6
     618:	07 fd       	sbrc	r16, 7
     61a:	29 c0       	rjmp	.+82     	; 0x66e <main+0x27a>
     61c:	06 95       	lsr	r16
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	06 95       	lsr	r16
     620:	06 95       	lsr	r16
     622:	07 70       	andi	r16, 0x07	; 7
     624:	c0 e0       	ldi	r28, 0x00	; 0
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	86 e3       	ldi	r24, 0x36	; 54
     62c:	e8 2e       	mov	r14, r24
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	f8 2e       	mov	r15, r24
     632:	e0 0e       	add	r14, r16
     634:	f1 1e       	adc	r15, r17
     636:	09 c0       	rjmp	.+18     	; 0x64a <main+0x256>
     638:	f7 01       	movw	r30, r14
     63a:	ec 0f       	add	r30, r28
     63c:	fd 1f       	adc	r31, r29
     63e:	eb 53       	subi	r30, 0x3B	; 59
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	60 81       	ld	r22, Z
     644:	86 e3       	ldi	r24, 0x36	; 54
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	8f de       	rcall	.-738    	; 0x368 <LRingBuffer_Append.constprop.4>
     64a:	21 97       	sbiw	r28, 0x01	; 1
     64c:	ce 01       	movw	r24, r28
     64e:	80 95       	com	r24
     650:	90 95       	com	r25
     652:	80 17       	cp	r24, r16
     654:	91 07       	cpc	r25, r17
     656:	84 f3       	brlt	.-32     	; 0x638 <main+0x244>
     658:	80 91 f6 01 	lds	r24, 0x01F6
     65c:	86 95       	lsr	r24
     65e:	86 95       	lsr	r24
     660:	86 95       	lsr	r24
     662:	87 70       	andi	r24, 0x07	; 7
     664:	90 91 3b 01 	lds	r25, 0x013B
     668:	89 0f       	add	r24, r25
     66a:	80 93 3b 01 	sts	0x013B, r24
     66e:	86 ef       	ldi	r24, 0xF6	; 246
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	7c d6       	rcall	.+3320   	; 0x136c <NHPreset>
     674:	b6 d1       	rcall	.+876    	; 0x9e2 <checkNHPControlAddressError>
     676:	90 91 45 01 	lds	r25, 0x0145
     67a:	89 2f       	mov	r24, r25
     67c:	83 70       	andi	r24, 0x03	; 3
					  ParserData->TotalReportItems++;
     67e:	49 f0       	breq	.+18     	; 0x692 <main+0x29e>
     680:	81 50       	subi	r24, 0x01	; 1
     682:	83 70       	andi	r24, 0x03	; 3
     684:	9c 7f       	andi	r25, 0xFC	; 252
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	98 2b       	or	r25, r24
     688:	90 93 45 01 	sts	0x0145, r25
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	81 11       	cpse	r24, r1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	01 c0       	rjmp	.+2      	; 0x692 <main+0x29e>
     690:	5d 9a       	sbi	0x0b, 5	; 11
     692:	90 91 45 01 	lds	r25, 0x0145
     696:	89 2f       	mov	r24, r25
     698:	8c 70       	andi	r24, 0x0C	; 12
     69a:	79 f0       	breq	.+30     	; 0x6ba <main+0x2c6>
     69c:	89 2f       	mov	r24, r25
     69e:	86 95       	lsr	r24
     6a0:	86 95       	lsr	r24
     6a2:	8d 5f       	subi	r24, 0xFD	; 253
     6a4:	83 70       	andi	r24, 0x03	; 3
     6a6:	28 2f       	mov	r18, r24
     6a8:	22 0f       	add	r18, r18
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	22 0f       	add	r18, r18
     6ac:	93 7f       	andi	r25, 0xF3	; 243
     6ae:	92 2b       	or	r25, r18
     6b0:	90 93 45 01 	sts	0x0145, r25
     6b4:	81 11       	cpse	r24, r1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <main+0x2c6>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	5c 9a       	sbi	0x0b, 4	; 11
     6ba:	80 e1       	ldi	r24, 0x10	; 16

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 c8 10 	call	0x2190	; 0x2190 <CDC_Device_USBTask>
     6c2:	0e 94 35 10 	call	0x206a	; 0x206a <USB_USBTask>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	ae ce       	rjmp	.-676    	; 0x424 <main+0x30>

000006c8 <EVENT_USB_Device_Connect>:
     6c8:	08 95       	ret

000006ca <EVENT_USB_Device_Disconnect>:
     6ca:	08 95       	ret

000006cc <EVENT_USB_Device_ConfigurationChanged>:
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <HID_Device_ConfigureEndpoints>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d4:	80 e1       	ldi	r24, 0x10	; 16
     6d6:	91 e0       	ldi	r25, 0x01	; 1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <CDC_Device_ConfigureEndpoints>
     6dc:	e2 ee       	ldi	r30, 0xE2	; 226
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	84 60       	ori	r24, 0x04	; 4
     6e4:	80 83       	st	Z, r24
     6e6:	08 95       	ret

000006e8 <__vector_23>:
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	2f 93       	push	r18
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	3f 93       	push	r19
     6f6:	4f 93       	push	r20

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	5f 93       	push	r21
     6fa:	8f 93       	push	r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	ff 93       	push	r31
     706:	40 91 ce 00 	lds	r20, 0x00CE

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     70a:	80 91 4a 02 	lds	r24, 0x024A
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70e:	84 30       	cpi	r24, 0x04	; 4
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	e9 f4       	brne	.+58     	; 0x74c <__vector_23+0x64>
     712:	e6 e3       	ldi	r30, 0x36	; 54
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	2f b7       	in	r18, 0x3f	; 63
     718:	f8 94       	cli
     71a:	80 81       	ld	r24, Z

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	a1 f0       	breq	.+40     	; 0x74a <__vector_23+0x62>
     722:	54 81       	ldd	r21, Z+4	; 0x04
     724:	33 81       	ldd	r19, Z+3	; 0x03
     726:	53 13       	cpse	r21, r19
     728:	01 c0       	rjmp	.+2      	; 0x72c <__vector_23+0x44>
     72a:	0f c0       	rjmp	.+30     	; 0x74a <__vector_23+0x62>
     72c:	32 81       	ldd	r19, Z+2	; 0x02
     72e:	dc 01       	movw	r26, r24
     730:	a3 0f       	add	r26, r19
     732:	b1 1d       	adc	r27, r1
     734:	4c 93       	st	X, r20
     736:	83 2f       	mov	r24, r19
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	93 81       	ldd	r25, Z+3	; 0x03
     73e:	89 13       	cpse	r24, r25
     740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_23+0x5c>
     742:	12 82       	std	Z+2, r1	; 0x02
     744:	84 81       	ldd	r24, Z+4	; 0x04
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	84 83       	std	Z+4, r24	; 0x04
     74a:	2f bf       	out	0x3f, r18	; 63
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
	uint8_t ReceivedByte = UDR1;

	// save new byte to the buffer (automatically discards if its disabled or full)
	if (USB_DeviceState == DEVICE_STATE_Configured)
		LRingBuffer_Insert(&ram.USARTtoUSB_Buffer, ReceivedByte);
}
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	5f 91       	pop	r21
     75a:	4f 91       	pop	r20
     75c:	3f 91       	pop	r19
     75e:	2f 91       	pop	r18
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     76a:	80 e1       	ldi	r24, 0x10	; 16
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 0c 11 	call	0x2218	; 0x2218 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface); //<--new
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0c 94 bd 11 	jmp	0x237a	; 0x237a <HID_Device_ProcessControlRequest>

0000077a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     77a:	80 91 0e 01 	lds	r24, 0x010E
     77e:	90 91 0f 01 	lds	r25, 0x010F
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	29 f0       	breq	.+10     	; 0x790 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	90 93 0f 01 	sts	0x010F, r25
     78c:	80 93 0e 01 	sts	0x010E, r24
     790:	08 95       	ret

00000792 <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     792:	29 2f       	mov	r18, r25
     794:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     796:	23 30       	cpi	r18, 0x03	; 3
     798:	31 05       	cpc	r19, r1
     79a:	b1 f0       	breq	.+44     	; 0x7c8 <CALLBACK_USB_GetDescriptor+0x36>
     79c:	4c f4       	brge	.+18     	; 0x7b0 <CALLBACK_USB_GetDescriptor+0x1e>
     79e:	21 30       	cpi	r18, 0x01	; 1
     7a0:	31 05       	cpc	r19, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <CALLBACK_USB_GetDescriptor+0x14>
     7a4:	39 c0       	rjmp	.+114    	; 0x818 <CALLBACK_USB_GetDescriptor+0x86>
     7a6:	22 30       	cpi	r18, 0x02	; 2
     7a8:	31 05       	cpc	r19, r1
     7aa:	09 f0       	breq	.+2      	; 0x7ae <CALLBACK_USB_GetDescriptor+0x1c>
     7ac:	3a c0       	rjmp	.+116    	; 0x822 <CALLBACK_USB_GetDescriptor+0x90>
     7ae:	07 c0       	rjmp	.+14     	; 0x7be <CALLBACK_USB_GetDescriptor+0x2c>
     7b0:	21 32       	cpi	r18, 0x21	; 33
     7b2:	31 05       	cpc	r19, r1
     7b4:	39 f1       	breq	.+78     	; 0x804 <CALLBACK_USB_GetDescriptor+0x72>
     7b6:	22 32       	cpi	r18, 0x22	; 34
     7b8:	31 05       	cpc	r19, r1
     7ba:	49 f1       	breq	.+82     	; 0x80e <CALLBACK_USB_GetDescriptor+0x7c>
     7bc:	32 c0       	rjmp	.+100    	; 0x822 <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7be:	ef e5       	ldi	r30, 0x5F	; 95
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7c2:	8e eb       	ldi	r24, 0xBE	; 190
     7c4:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7c6:	31 c0       	rjmp	.+98     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7c8:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	91 05       	cpc	r25, r1
     7ce:	61 f0       	breq	.+24     	; 0x7e8 <CALLBACK_USB_GetDescriptor+0x56>
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	91 05       	cpc	r25, r1
     7d4:	81 f0       	breq	.+32     	; 0x7f6 <CALLBACK_USB_GetDescriptor+0x64>
     7d6:	89 2b       	or	r24, r25
     7d8:	21 f5       	brne	.+72     	; 0x822 <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7da:	ea eb       	ldi	r30, 0xBA	; 186
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e4 91       	lpm	r30, Z+
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     7e2:	8a eb       	ldi	r24, 0xBA	; 186
     7e4:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     7e6:	21 c0       	rjmp	.+66     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     7e8:	e6 ea       	ldi	r30, 0xA6	; 166
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	e4 91       	lpm	r30, Z+
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     7f0:	86 ea       	ldi	r24, 0xA6	; 166
     7f2:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     7f4:	1a c0       	rjmp	.+52     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     7f6:	e4 e7       	ldi	r30, 0x74	; 116
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e4 91       	lpm	r30, Z+
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     7fe:	84 e7       	ldi	r24, 0x74	; 116
     800:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     802:	13 c0       	rjmp	.+38     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     804:	e9 e0       	ldi	r30, 0x09	; 9
     806:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     808:	8d e0       	ldi	r24, 0x0D	; 13
     80a:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     80c:	0e c0       	rjmp	.+28     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     80e:	e8 eb       	ldi	r30, 0xB8	; 184
     810:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     812:	8f e2       	ldi	r24, 0x2F	; 47
     814:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     816:	09 c0       	rjmp	.+18     	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     818:	e2 e1       	ldi	r30, 0x12	; 18
     81a:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     81c:	8d e1       	ldi	r24, 0x1D	; 29
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	04 c0       	rjmp	.+8      	; 0x82a <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     822:	e0 e0       	ldi	r30, 0x00	; 0
     824:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     82a:	da 01       	movw	r26, r20
     82c:	8d 93       	st	X+, r24
     82e:	9c 93       	st	X, r25
	return Size;
}
     830:	cf 01       	movw	r24, r30
     832:	08 95       	ret

00000834 <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     844:	64 0f       	add	r22, r20
     846:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     848:	c6 e3       	ldi	r28, 0x36	; 54
     84a:	d1 e0       	ldi	r29, 0x01	; 1
     84c:	2c c0       	rjmp	.+88     	; 0x8a6 <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     84e:	fb 01       	movw	r30, r22
     850:	e2 1b       	sub	r30, r18
     852:	f3 0b       	sbc	r31, r19
     854:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     856:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     858:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     85a:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     85c:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     85e:	a0 81       	ld	r26, Z
     860:	b1 81       	ldd	r27, Z+1	; 0x01
     862:	10 97       	sbiw	r26, 0x00	; 0
     864:	09 f4       	brne	.+2      	; 0x868 <LRingBuffer_Append_Buffer.constprop.0+0x34>
     866:	1c c0       	rjmp	.+56     	; 0x8a0 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	f4 80       	ldd	r15, Z+4	; 0x04
     86e:	8f 19       	sub	r24, r15
     870:	91 09       	sbc	r25, r1
     872:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     874:	97 ff       	sbrs	r25, 7
     876:	03 c0       	rjmp	.+6      	; 0x87e <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     878:	f3 80       	ldd	r15, Z+3	; 0x03
     87a:	8f 0d       	add	r24, r15
     87c:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     87e:	a8 0f       	add	r26, r24
     880:	b9 1f       	adc	r27, r25
     882:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     884:	84 81       	ldd	r24, Z+4	; 0x04
     886:	93 81       	ldd	r25, Z+3	; 0x03
     888:	89 13       	cpse	r24, r25
     88a:	08 c0       	rjmp	.+16     	; 0x89c <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     88c:	92 81       	ldd	r25, Z+2	; 0x02
     88e:	91 11       	cpse	r25, r1
     890:	01 c0       	rjmp	.+2      	; 0x894 <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     892:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	81 50       	subi	r24, 0x01	; 1
     898:	82 83       	std	Z+2, r24	; 0x02
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8a0:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	24 17       	cp	r18, r20
     8a8:	35 07       	cpc	r19, r21
     8aa:	8c f2       	brlt	.-94     	; 0x84e <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	08 95       	ret

000008b8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	7b 01       	movw	r14, r22
     8c6:	c9 01       	movw	r24, r18
     8c8:	e8 01       	movw	r28, r16
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
     8ca:	e0 91 aa 01 	lds	r30, 0x01AA
     8ce:	e3 30       	cpi	r30, 0x03	; 3
     8d0:	31 f0       	breq	.+12     	; 0x8de <CALLBACK_HID_Device_CreateHIDReport+0x26>
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
     8d2:	10 92 ec 01 	sts	0x01EC, r1
		ram.HID.isEmpty[ram.HID.ID] = false;
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e4 51       	subi	r30, 0x14	; 20
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	10 82       	st	Z, r1
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
     8de:	40 91 ab 01 	lds	r20, 0x01AB
     8e2:	ed ea       	ldi	r30, 0xAD	; 173
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	bf 01       	movw	r22, r30
     8ea:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <memcpy>
	*ReportID = ram.HID.ID;
     8ee:	80 91 aa 01 	lds	r24, 0x01AA
     8f2:	f7 01       	movw	r30, r14
     8f4:	80 83       	st	Z, r24
	*ReportSize = ram.HID.length;
     8f6:	80 91 ab 01 	lds	r24, 0x01AB
     8fa:	88 83       	st	Y, r24
     8fc:	19 82       	std	Y+1, r1	; 0x01

	// reset ID
	ram.HID.ID = 0;
     8fe:	10 92 aa 01 	sts	0x01AA, r1
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
     902:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
     906:	10 92 ab 01 	sts	0x01AB, r1
	// this will forcewrite the report every time
	return true;

	//}
	//else return false;
}
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	08 95       	ret

0000091a <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	c9 01       	movw	r24, r18
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
     920:	63 30       	cpi	r22, 0x03	; 3
     922:	51 f4       	brne	.+20     	; 0x938 <CALLBACK_HID_Device_ProcessHIDReport+0x1e>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     924:	5c 98       	cbi	0x0b, 4	; 11
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     926:	20 91 45 01 	lds	r18, 0x0145
     92a:	2c 60       	ori	r18, 0x0C	; 12
     92c:	20 93 45 01 	sts	0x0145, r18

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     930:	b8 01       	movw	r22, r16
	}
}
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
     936:	d7 c6       	rjmp	.+3502   	; 0x16e6 <Serial_SendData>
     938:	1f 91       	pop	r17
	}
}
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <flushHID>:

	// save new empty state
	ram.HID.isEmpty[ID] = true;
}

void flushHID(void){
     93e:	04 c0       	rjmp	.+8      	; 0x948 <flushHID+0xa>
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 09 13 	call	0x2612	; 0x2612 <HID_Device_USBTask>
}

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
     948:	80 91 aa 01 	lds	r24, 0x01AA
     94c:	88 23       	and	r24, r24
     94e:	31 f0       	breq	.+12     	; 0x95c <flushHID+0x1e>
     950:	90 91 ab 01 	lds	r25, 0x01AB
     954:	80 91 ac 01 	lds	r24, 0x01AC
     958:	98 17       	cp	r25, r24
     95a:	91 f3       	breq	.-28     	; 0x940 <flushHID+0x2>
     95c:	08 95       	ret

0000095e <getHIDReportLength>:
		HID_Device_USBTask(&Device_HID_Interface);
}


uint8_t getHIDReportLength(uint8_t ID){
     95e:	81 50       	subi	r24, 0x01	; 1
     960:	89 30       	cpi	r24, 0x09	; 9
     962:	30 f4       	brcc	.+12     	; 0x970 <getHIDReportLength+0x12>
     964:	e8 2f       	mov	r30, r24
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	e5 5d       	subi	r30, 0xD5	; 213
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	80 81       	ld	r24, Z
     96e:	08 95       	ret
     970:	80 e0       	ldi	r24, 0x00	; 0
		// error, write down this wrong ID report
		return 0;
		break;
	} //end switch
	return 0;
}
     972:	08 95       	ret

00000974 <clearHIDReport>:
	
	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	18 2f       	mov	r17, r24
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
     97c:	c8 2f       	mov	r28, r24
     97e:	d0 e0       	ldi	r29, 0x00	; 0
     980:	c4 51       	subi	r28, 0x14	; 20
     982:	de 4f       	sbci	r29, 0xFE	; 254
     984:	88 81       	ld	r24, Y
     986:	81 11       	cpse	r24, r1
     988:	18 c0       	rjmp	.+48     	; 0x9ba <clearHIDReport+0x46>
     98a:	13 30       	cpi	r17, 0x03	; 3
     98c:	b1 f0       	breq	.+44     	; 0x9ba <clearHIDReport+0x46>

	// get length of the report if its a valid report
	uint8_t length = getHIDReportLength(ID);
     98e:	81 2f       	mov	r24, r17
     990:	e6 df       	rcall	.-52     	; 0x95e <getHIDReportLength>
     992:	88 23       	and	r24, r24
	if (!length) return;
     994:	91 f0       	breq	.+36     	; 0x9ba <clearHIDReport+0x46>
     996:	80 93 ac 01 	sts	0x01AC, r24

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
     99a:	80 93 ab 01 	sts	0x01AB, r24
     99e:	10 93 aa 01 	sts	0x01AA, r17
	ram.HID.ID = ID;
     9a2:	2d ea       	ldi	r18, 0xAD	; 173
	memset(&ram.HID.buffer, 0x00, length);
     9a4:	31 e0       	ldi	r19, 0x01	; 1
     9a6:	48 2f       	mov	r20, r24
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	c9 01       	movw	r24, r18
     9b0:	0e 94 05 14 	call	0x280a	; 0x280a <memset>
     9b4:	c4 df       	rcall	.-120    	; 0x93e <flushHID>

	// flush HID
	flushHID();
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	88 83       	st	Y, r24

	// save new empty state
	ram.HID.isEmpty[ID] = true;
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
}
     9be:	1f 91       	pop	r17
     9c0:	08 95       	ret

000009c2 <clearHIDReports>:
		Serial_SendData(ReportData, ReportSize);
	}
}


void clearHIDReports(void){
     9c2:	cf 93       	push	r28
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;
     9c4:	80 91 ec 01 	lds	r24, 0x01EC
     9c8:	81 11       	cpse	r24, r1
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <clearHIDReports+0x1c>
     9cc:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
			clearHIDReport(i);
     9ce:	8c 2f       	mov	r24, r28
     9d0:	d1 df       	rcall	.-94     	; 0x974 <clearHIDReport>
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
     9d4:	ca 30       	cpi	r28, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if the main flag is empty
	if (ram.HID.isEmpty[HID_REPORTID_NotAReport]) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     9d6:	d9 f7       	brne	.-10     	; 0x9ce <clearHIDReports+0xc>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
			clearHIDReport(i);
	
	// clear the main flag that all reports are empty
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
     9da:	80 93 ec 01 	sts	0x01EC, r24
     9de:	cf 91       	pop	r28
}
     9e0:	08 95       	ret

000009e2 <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <checkNHPControlAddressError+0x8>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <checkNHPControlAddressError+0xa>
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <checkNHPControlAddressError+0xc>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and just
	// discard all the bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     9f2:	60 91 aa 01 	lds	r22, 0x01AA
     9f6:	66 23       	and	r22, r22
     9f8:	c1 f0       	breq	.+48     	; 0xa2a <checkNHPControlAddressError+0x48>
     9fa:	80 91 ac 01 	lds	r24, 0x01AC
     9fe:	81 11       	cpse	r24, r1
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <checkNHPControlAddressError+0x48>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	71 60       	ori	r23, 0x01	; 1
     a06:	ae 01       	movw	r20, r28
     a08:	4f 5f       	subi	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	84 d5       	rcall	.+2824   	; 0x1518 <NHPwriteChecksum>
     a10:	18 2f       	mov	r17, r24
     a12:	48 2f       	mov	r20, r24

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
     a14:	be 01       	movw	r22, r28
     a16:	6f 5f       	subi	r22, 0xFF	; 255
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	86 e3       	ldi	r24, 0x36	; 54
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0a df       	rcall	.-492    	; 0x834 <LRingBuffer_Append_Buffer.constprop.0>
     a20:	90 91 3b 01 	lds	r25, 0x013B
		ram.skipNHP += length;
     a24:	91 0f       	add	r25, r17
     a26:	90 93 3b 01 	sts	0x013B, r25
     a2a:	10 92 aa 01 	sts	0x01AA, r1
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     a2e:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.recvlength = 0; // just to be sure
     a32:	10 92 ab 01 	sts	0x01AB, r1
	ram.HID.length = 0; // just to be sure
     a36:	26 96       	adiw	r28, 0x06	; 6
     a38:	0f b6       	in	r0, 0x3f	; 63
}
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	08 95       	ret

00000a4a <checkNHPProtocol>:
	} //end switch
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     a4a:	90 91 45 01 	lds	r25, 0x0145
     a4e:	90 63       	ori	r25, 0x30	; 48
     a50:	90 93 45 01 	sts	0x0145, r25
	// set new timeout mark
	ram.PulseMSRemaining.NHPTimeout = NHP_TIMEOUT_MS;

	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     a54:	66 ef       	ldi	r22, 0xF6	; 246
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	3c d5       	rcall	.+2680   	; 0x14d2 <NHPreadChecksum>
     a5a:	88 23       	and	r24, r24

	if (address == 0)
     a5c:	09 f4       	brne	.+2      	; 0xa60 <checkNHPProtocol+0x16>
     a5e:	75 c0       	rjmp	.+234    	; 0xb4a <checkNHPProtocol+0x100>
     a60:	87 ff       	sbrs	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     a62:	18 c0       	rjmp	.+48     	; 0xa94 <checkNHPProtocol+0x4a>
     a64:	be df       	rcall	.-132    	; 0x9e2 <checkNHPControlAddressError>
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     a66:	40 91 f6 01 	lds	r20, 0x01F6

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
     a6a:	46 95       	lsr	r20
     a6c:	46 95       	lsr	r20
     a6e:	46 95       	lsr	r20
     a70:	47 70       	andi	r20, 0x07	; 7
     a72:	6b ef       	ldi	r22, 0xFB	; 251
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	86 e3       	ldi	r24, 0x36	; 54
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	dc de       	rcall	.-584    	; 0x834 <LRingBuffer_Append_Buffer.constprop.0>
     a7c:	80 91 f6 01 	lds	r24, 0x01F6
     a80:	86 95       	lsr	r24
		ram.skipNHP += ram.NHP.readlength;
     a82:	86 95       	lsr	r24
     a84:	86 95       	lsr	r24
     a86:	87 70       	andi	r24, 0x07	; 7
     a88:	90 91 3b 01 	lds	r25, 0x013B
     a8c:	89 0f       	add	r24, r25
     a8e:	80 93 3b 01 	sts	0x013B, r24
     a92:	08 95       	ret
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	89 f4       	brne	.+34     	; 0xaba <checkNHPProtocol+0x70>
		return;
     a98:	90 91 f8 01 	lds	r25, 0x01F8
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     a9c:	91 30       	cpi	r25, 0x01	; 1
     a9e:	69 f4       	brne	.+26     	; 0xaba <checkNHPProtocol+0x70>
     aa0:	a0 df       	rcall	.-192    	; 0x9e2 <checkNHPControlAddressError>
     aa2:	80 91 f7 01 	lds	r24, 0x01F7
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     aa6:	80 93 aa 01 	sts	0x01AA, r24

		// get the new report ID and reset the buffer
		ram.HID.ID = ram.NHP.mWorkData & 0xFF;
     aaa:	10 92 ac 01 	sts	0x01AC, r1
     aae:	57 df       	rcall	.-338    	; 0x95e <getHIDReportLength>
     ab0:	80 93 ab 01 	sts	0x01AB, r24
		ram.HID.recvlength = 0;
     ab4:	81 11       	cpse	r24, r1

		// TODO remove this cleaning
		//memset(ram.HID.buffer, 0, sizeof(ram.HID.buffer));

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);
     ab6:	49 c0       	rjmp	.+146    	; 0xb4a <checkNHPProtocol+0x100>
     ab8:	47 c0       	rjmp	.+142    	; 0xb48 <checkNHPProtocol+0xfe>
     aba:	90 91 aa 01 	lds	r25, 0x01AA

		// error, write down this wrong ID report
		if (!ram.HID.length)
     abe:	99 23       	and	r25, r25
     ac0:	69 f1       	breq	.+90     	; 0xb1c <checkNHPProtocol+0xd2>
     ac2:	60 91 ac 01 	lds	r22, 0x01AC
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     ac6:	46 2f       	mov	r20, r22
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	99 27       	eor	r25, r25
     acc:	87 fd       	sbrc	r24, 7
     ace:	90 95       	com	r25
     ad0:	9a 01       	movw	r18, r20
     ad2:	2e 5f       	subi	r18, 0xFE	; 254
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	35 95       	asr	r19
     ad8:	27 95       	ror	r18
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	82 17       	cp	r24, r18
     ae0:	93 07       	cpc	r25, r19
     ae2:	e1 f4       	brne	.+56     	; 0xb1c <checkNHPProtocol+0xd2>
     ae4:	fa 01       	movw	r30, r20
     ae6:	e3 55       	subi	r30, 0x53	; 83
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	80 91 f7 01 	lds	r24, 0x01F7
		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     aee:	80 83       	st	Z, r24
     af0:	e6 2f       	mov	r30, r22
     af2:	ef 5f       	subi	r30, 0xFF	; 255
     af4:	e0 93 ac 01 	sts	0x01AC, r30
     af8:	80 91 ab 01 	lds	r24, 0x01AB
     afc:	8e 17       	cp	r24, r30
     afe:	49 f0       	breq	.+18     	; 0xb12 <checkNHPProtocol+0xc8>
     b00:	f0 e0       	ldi	r31, 0x00	; 0

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (ram.HID.length != ram.HID.recvlength)
     b02:	e3 55       	subi	r30, 0x53	; 83
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	90 91 f8 01 	lds	r25, 0x01F8
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     b0a:	90 83       	st	Z, r25
     b0c:	6e 5f       	subi	r22, 0xFE	; 254
     b0e:	60 93 ac 01 	sts	0x01AC, r22
     b12:	90 91 ac 01 	lds	r25, 0x01AC
     b16:	89 13       	cpse	r24, r25
     b18:	18 c0       	rjmp	.+48     	; 0xb4a <checkNHPProtocol+0x100>
     b1a:	11 cf       	rjmp	.-478    	; 0x93e <flushHID>

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.length == ram.HID.recvlength)
     b1c:	40 91 f6 01 	lds	r20, 0x01F6
     b20:	46 95       	lsr	r20
     b22:	46 95       	lsr	r20
			flushHID();
     b24:	46 95       	lsr	r20
     b26:	47 70       	andi	r20, 0x07	; 7
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
     b28:	6b ef       	ldi	r22, 0xFB	; 251
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	86 e3       	ldi	r24, 0x36	; 54
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	81 de       	rcall	.-766    	; 0x834 <LRingBuffer_Append_Buffer.constprop.0>
     b32:	80 91 f6 01 	lds	r24, 0x01F6
     b36:	86 95       	lsr	r24
     b38:	86 95       	lsr	r24
     b3a:	86 95       	lsr	r24
     b3c:	87 70       	andi	r24, 0x07	; 7
     b3e:	90 91 3b 01 	lds	r25, 0x013B
		ram.skipNHP += ram.NHP.readlength;
     b42:	89 0f       	add	r24, r25
     b44:	80 93 3b 01 	sts	0x013B, r24
     b48:	4c cf       	rjmp	.-360    	; 0x9e2 <checkNHPControlAddressError>
     b4a:	08 95       	ret

00000b4c <HIDreset>:
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
}

void HIDreset(void){
     b4c:	10 92 aa 01 	sts	0x01AA, r1
	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
     b50:	10 92 ac 01 	sts	0x01AC, r1
	ram.HID.length = 0; // just to be sure
     b54:	10 92 ab 01 	sts	0x01AB, r1

	// all reports are empty by default
	memset(&ram.HID.isEmpty, true, sizeof(ram.HID.isEmpty));
     b58:	4a e0       	ldi	r20, 0x0A	; 10
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	8c ee       	ldi	r24, 0xEC	; 236
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0c 94 05 14 	jmp	0x280a	; 0x280a <memset>

00000b68 <LEDs_TurnOnLEDs>:
     b68:	9b b1       	in	r25, 0x0b	; 11
     b6a:	80 95       	com	r24
     b6c:	89 23       	and	r24, r25
     b6e:	8b b9       	out	0x0b, r24	; 11
     b70:	08 95       	ret

00000b72 <avrispReset>:
//================================================================================
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
     b72:	10 92 3d 01 	sts	0x013D, r1
     b76:	10 92 3c 01 	sts	0x013C, r1
	ram.isp.pmode = false;
     b7a:	10 92 3e 01 	sts	0x013E, r1
	ram.isp._addr = 0; // just to be sure
     b7e:	10 92 40 01 	sts	0x0140, r1
     b82:	10 92 3f 01 	sts	0x013F, r1
     b86:	08 95       	ret

00000b88 <sendCDCbyte>:
}

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     b88:	68 2f       	mov	r22, r24
     b8a:	80 e1       	ldi	r24, 0x10	; 16
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 76 10 	call	0x20ec	; 0x20ec <CDC_Device_SendByte>
     b92:	88 23       	and	r24, r24
     b94:	e9 f0       	breq	.+58     	; 0xbd0 <sendCDCbyte+0x48>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     b96:	80 e1       	ldi	r24, 0x10	; 16
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 c8 10 	call	0x2190	; 0x2190 <CDC_Device_USBTask>
		USB_USBTask();
     b9e:	0e 94 35 10 	call	0x206a	; 0x206a <USB_USBTask>
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
     ba2:	80 e1       	ldi	r24, 0x10	; 16
     ba4:	e1 df       	rcall	.-62     	; 0xb68 <LEDs_TurnOnLEDs>
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba8:	81 ee       	ldi	r24, 0xE1	; 225
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <sendCDCbyte+0x24>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <sendCDCbyte+0x2e>
     bb6:	00 00       	nop
     bb8:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
     bba:	d6 df       	rcall	.-84     	; 0xb68 <LEDs_TurnOnLEDs>
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	81 ee       	ldi	r24, 0xE1	; 225
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <sendCDCbyte+0x3a>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <sendCDCbyte+0x44>
     bcc:	00 00       	nop
     bce:	e9 cf       	rjmp	.-46     	; 0xba2 <sendCDCbyte+0x1a>
     bd0:	08 95       	ret

00000bd2 <getch>:
			_delay_ms(100);
		}
	}
}

uint8_t getch() {
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 de 10 	call	0x21bc	; 0x21bc <CDC_Device_ReceiveByte>
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     bda:	97 fd       	sbrc	r25, 7
     bdc:	fa cf       	rjmp	.-12     	; 0xbd2 <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     bde:	08 95       	ret

00000be0 <fill>:

void fill(int n) {
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	7c 01       	movw	r14, r24
     bee:	06 e4       	ldi	r16, 0x46	; 70
     bf0:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <fill+0x22>
		ram.ispBuffer[x] = getch();
     bf8:	ec df       	rcall	.-40     	; 0xbd2 <getch>
     bfa:	f8 01       	movw	r30, r16
     bfc:	81 93       	st	Z+, r24
     bfe:	8f 01       	movw	r16, r30
     c00:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     c02:	ce 15       	cp	r28, r14
     c04:	df 05       	cpc	r29, r15
     c06:	c4 f3       	brlt	.-16     	; 0xbf8 <fill+0x18>
     c08:	df 91       	pop	r29
		ram.ispBuffer[x] = getch();
}
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <set_parameters>:
	default:
		breply(0);
	}
}

void set_parameters(void) {
     c16:	90 91 52 01 	lds	r25, 0x0152
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	20 91 53 01 	lds	r18, 0x0153
     c20:	82 0f       	add	r24, r18
     c22:	91 1d       	adc	r25, r1
     c24:	90 93 42 01 	sts	0x0142, r25
     c28:	80 93 41 01 	sts	0x0141, r24
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.ispBuffer[12]);
	ram.isp.param.eepromsize = beget16(&ram.ispBuffer[14]);
     c2c:	90 91 54 01 	lds	r25, 0x0154
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	20 91 55 01 	lds	r18, 0x0155
     c36:	82 0f       	add	r24, r18
     c38:	91 1d       	adc	r25, r1
     c3a:	90 93 44 01 	sts	0x0144, r25
     c3e:	80 93 43 01 	sts	0x0143, r24
     c42:	08 95       	ret

00000c44 <breply>:
	//	+ buff[18] * 0x00000100
	//	+ buff[19];

}

void breply(uint8_t b) {
     c44:	cf 93       	push	r28
     c46:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {  // EOP should be next char
     c48:	c4 df       	rcall	.-120    	; 0xbd2 <getch>
     c4a:	80 32       	cpi	r24, 0x20	; 32
     c4c:	39 f4       	brne	.+14     	; 0xc5c <breply+0x18>
     c4e:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     c50:	9b df       	rcall	.-202    	; 0xb88 <sendCDCbyte>
     c52:	8c 2f       	mov	r24, r28
     c54:	99 df       	rcall	.-206    	; 0xb88 <sendCDCbyte>
		sendCDCbyte(b);
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	cf 91       	pop	r28
     c5a:	96 cf       	rjmp	.-212    	; 0xb88 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     c5c:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c5e:	94 df       	rcall	.-216    	; 0xb88 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     c60:	80 91 3c 01 	lds	r24, 0x013C
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     c64:	90 91 3d 01 	lds	r25, 0x013D
     c68:	01 96       	adiw	r24, 0x01	; 1
		ram.isp.error++;
     c6a:	90 93 3d 01 	sts	0x013D, r25
     c6e:	80 93 3c 01 	sts	0x013C, r24
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <get_parameters>:
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}

void get_parameters(uint8_t c) {
     c76:	81 38       	cpi	r24, 0x81	; 129
     c78:	59 f0       	breq	.+22     	; 0xc90 <get_parameters+0x1a>
     c7a:	18 f4       	brcc	.+6      	; 0xc82 <get_parameters+0xc>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     c7c:	80 38       	cpi	r24, 0x80	; 128
     c7e:	71 f4       	brne	.+28     	; 0xc9c <get_parameters+0x26>
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <get_parameters+0x16>
     c82:	82 38       	cpi	r24, 0x82	; 130
     c84:	39 f0       	breq	.+14     	; 0xc94 <get_parameters+0x1e>
     c86:	83 39       	cpi	r24, 0x93	; 147
     c88:	49 f4       	brne	.+18     	; 0xc9c <get_parameters+0x26>
     c8a:	06 c0       	rjmp	.+12     	; 0xc98 <get_parameters+0x22>
}

void get_parameters(uint8_t c) {
	switch (c) {
	case 0x80:
		breply(HWVER);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     c94:	82 e1       	ldi	r24, 0x12	; 18
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     c98:	83 e5       	ldi	r24, 0x53	; 83
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <get_parameters+0x28>
		break;
	default:
		breply(0);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	d2 cf       	rjmp	.-92     	; 0xc44 <breply>

00000ca0 <replyOK>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void replyOK(void) {
     ca0:	98 df       	rcall	.-208    	; 0xbd2 <getch>
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	21 f4       	brne	.+8      	; 0xcae <replyOK+0xe>
     ca6:	84 e1       	ldi	r24, 0x14	; 20
	//  if (EOP_SEEN == true) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
     ca8:	6f df       	rcall	.-290    	; 0xb88 <sendCDCbyte>
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	6d cf       	rjmp	.-294    	; 0xb88 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	5b df       	rcall	.-330    	; 0xb68 <LEDs_TurnOnLEDs>
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
     cb4:	80 e7       	ldi	r24, 0x70	; 112
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <replyOK+0x18>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <replyOK+0x22>
     cc2:	00 00       	nop
     cc4:	5d 9a       	sbi	0x0b, 5	; 11
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	80 e7       	ldi	r24, 0x70	; 112
     cca:	92 e0       	ldi	r25, 0x02	; 2
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <replyOK+0x2c>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <replyOK+0x36>
     cd6:	00 00       	nop
     cd8:	80 e2       	ldi	r24, 0x20	; 32
     cda:	46 df       	rcall	.-372    	; 0xb68 <LEDs_TurnOnLEDs>
     cdc:	2f ef       	ldi	r18, 0xFF	; 255
     cde:	80 e7       	ldi	r24, 0x70	; 112
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	80 40       	sbci	r24, 0x00	; 0
     ce6:	90 40       	sbci	r25, 0x00	; 0
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <replyOK+0x42>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <replyOK+0x4c>
     cec:	00 00       	nop
     cee:	5d 9a       	sbi	0x0b, 5	; 11
     cf0:	85 e1       	ldi	r24, 0x15	; 21
     cf2:	4a df       	rcall	.-364    	; 0xb88 <sendCDCbyte>
     cf4:	80 91 3c 01 	lds	r24, 0x013C
     cf8:	90 91 3d 01 	lds	r25, 0x013D
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 3d 01 	sts	0x013D, r25
		ram.isp.error++;
     d02:	80 93 3c 01 	sts	0x013C, r24
     d06:	08 95       	ret

00000d08 <end_pmode>:
	spi_transaction(0xAC, 0x53, 0x00, 0x00);
	ram.isp.pmode = true;
	return;
}

void end_pmode(void) {
     d08:	23 98       	cbi	0x04, 3	; 4
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     d0a:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     d0c:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     d0e:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     d10:	20 98       	cbi	0x04, 0	; 4

	ram.isp.pmode = false;
     d12:	10 92 3e 01 	sts	0x013E, r1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d16:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d18:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if Base points to a buffer
		if (Buffer->Base == NULL)
     d1a:	80 91 36 01 	lds	r24, 0x0136
     d1e:	90 91 37 01 	lds	r25, 0x0137
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d22:	2f bf       	out	0x3f, r18	; 63

	// enable Serial buffer again
	if (!LRingBuffer_IsEnabled(&ram.USARTtoUSB_Buffer))
     d24:	89 2b       	or	r24, r25
     d26:	69 f4       	brne	.+26     	; 0xd42 <end_pmode+0x3a>
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     d28:	e6 e3       	ldi	r30, 0x36	; 54
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d2c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d2e:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = DataPtr;
     d30:	86 e4       	ldi	r24, 0x46	; 70
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
		Buffer->Index = 0;
     d38:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = Size;
     d3a:	84 e6       	ldi	r24, 0x64	; 100
     d3c:	83 83       	std	Z+3, r24	; 0x03
		Buffer->Count = 0;
     d3e:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d40:	2f bf       	out	0x3f, r18	; 63
		LRingBuffer_InitBuffer(&ram.USARTtoUSB_Buffer, ram.USARTtoUSB_Buffer_Data, sizeof(ram.USARTtoUSB_Buffer_Data));

	// HID Setup
	HIDreset();
     d42:	04 df       	rcall	.-504    	; 0xb4c <HIDreset>
     d44:	10 92 3b 01 	sts	0x013B, r1

	ram.skipNHP = 0;
     d48:	86 ef       	ldi	r24, 0xF6	; 246
	NHPreset(&ram.NHP);
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0f c3       	rjmp	.+1566   	; 0x136c <NHPreset>

00000d4e <spi_init>:
}

void spi_init(void) {
     d4e:	83 e5       	ldi	r24, 0x53	; 83
     d50:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     d52:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     d54:	8e b5       	in	r24, 0x2e	; 46
     d56:	08 95       	ret

00000d58 <spi_wait>:
	return reply;
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fe       	sbrs	r0, 7
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <spi_wait>
}
     d5e:	08 95       	ret

00000d60 <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     d60:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     d62:	fa df       	rcall	.-12     	; 0xd58 <spi_wait>
     d64:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     d66:	08 95       	ret

00000d68 <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <spi_transaction+0x6>
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	SPDR;
}

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	//uint8_t n;
	spi_send(a);
     d74:	2b 83       	std	Y+3, r18	; 0x03
     d76:	4a 83       	std	Y+2, r20	; 0x02
     d78:	69 83       	std	Y+1, r22	; 0x01
     d7a:	f2 df       	rcall	.-28     	; 0xd60 <spi_send>
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
	//n = spi_send(b);
	spi_send(b);
     d7e:	86 2f       	mov	r24, r22
     d80:	ef df       	rcall	.-34     	; 0xd60 <spi_send>
     d82:	4a 81       	ldd	r20, Y+2	; 0x02
     d84:	84 2f       	mov	r24, r20
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
     d86:	ec df       	rcall	.-40     	; 0xd60 <spi_send>
     d88:	2b 81       	ldd	r18, Y+3	; 0x03
     d8a:	82 2f       	mov	r24, r18
     d8c:	0f 90       	pop	r0
	return spi_send(d);
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	e4 cf       	rjmp	.-56     	; 0xd60 <spi_send>

00000d98 <start_pmode>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void start_pmode(void) {
     d98:	e6 e3       	ldi	r30, 0x36	; 54
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
     d9c:	8f b7       	in	r24, 0x3f	; 63
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
     d9e:	f8 94       	cli
		GCC_FORCE_POINTER_ACCESS(Buffer);

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
     da0:	11 82       	std	Z+1, r1	; 0x01
     da2:	10 82       	st	Z, r1
		Buffer->Index = 0;
     da4:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = 0;
     da6:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Count = 0;
     da8:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     daa:	8f bf       	out	0x3f, r24	; 63

	// do not write into Serial buffer, we need this ram now
	LRingBuffer_DisableBuffer(&ram.USARTtoUSB_Buffer);

	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
     dac:	20 9a       	sbi	0x04, 0	; 4
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);
     dae:	28 9a       	sbi	0x05, 0	; 5

	spi_init();
     db0:	ce df       	rcall	.-100    	; 0xd4e <spi_init>
     db2:	24 9a       	sbi	0x04, 4	; 4

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     db4:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     db6:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     db8:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	80 e7       	ldi	r24, 0x70	; 112
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	80 40       	sbci	r24, 0x00	; 0
     dc4:	90 40       	sbci	r25, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <start_pmode+0x28>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <start_pmode+0x32>
     dca:	00 00       	nop
     dcc:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     dce:	2f ef       	ldi	r18, 0xFF	; 255
     dd0:	80 e7       	ldi	r24, 0x70	; 112
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	80 40       	sbci	r24, 0x00	; 0
     dd8:	90 40       	sbci	r25, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <start_pmode+0x3c>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <start_pmode+0x46>
     dde:	00 00       	nop
     de0:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     de2:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     de4:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	63 e5       	ldi	r22, 0x53	; 83
     dea:	8c ea       	ldi	r24, 0xAC	; 172
     dec:	bd df       	rcall	.-134    	; 0xd68 <spi_transaction>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 3e 01 	sts	0x013E, r24
	ram.isp.pmode = true;
     df4:	08 95       	ret

00000df6 <flash_read>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t flash_read(uint8_t hilo, int addr) {
     df6:	46 2f       	mov	r20, r22
	return spi_transaction(0x20 + hilo * 8,
     df8:	88 0f       	add	r24, r24
     dfa:	88 0f       	add	r24, r24
     dfc:	88 0f       	add	r24, r24
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	67 2f       	mov	r22, r23
     e02:	80 5e       	subi	r24, 0xE0	; 224
     e04:	b1 cf       	rjmp	.-158    	; 0xd68 <spi_transaction>

00000e06 <flash_read_page>:
		(addr >> 8) & 0xFF,
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	8c 01       	movw	r16, r24
	for (int x = 0; x < length; x += 2) {
     e10:	c0 e0       	ldi	r28, 0x00	; 0
     e12:	d0 e0       	ldi	r29, 0x00	; 0
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <flash_read_page+0x42>
		uint8_t low = flash_read(LOW, ram.isp._addr);
     e16:	60 91 3f 01 	lds	r22, 0x013F
     e1a:	70 91 40 01 	lds	r23, 0x0140
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	ea df       	rcall	.-44     	; 0xdf6 <flash_read>
     e22:	b2 de       	rcall	.-668    	; 0xb88 <sendCDCbyte>
		sendCDCbyte(low);
     e24:	60 91 3f 01 	lds	r22, 0x013F
		uint8_t high = flash_read(HIGH, ram.isp._addr);
     e28:	70 91 40 01 	lds	r23, 0x0140
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	e3 df       	rcall	.-58     	; 0xdf6 <flash_read>
     e30:	ab de       	rcall	.-682    	; 0xb88 <sendCDCbyte>
     e32:	20 91 3f 01 	lds	r18, 0x013F
		sendCDCbyte(high);
     e36:	30 91 40 01 	lds	r19, 0x0140
		ram.isp._addr++;
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	30 93 40 01 	sts	0x0140, r19
     e42:	20 93 3f 01 	sts	0x013F, r18
     e46:	22 96       	adiw	r28, 0x02	; 2
     e48:	c0 17       	cp	r28, r16
     e4a:	d1 07       	cpc	r29, r17
     e4c:	24 f3       	brlt	.-56     	; 0xe16 <flash_read_page+0x10>
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
     e4e:	80 e1       	ldi	r24, 0x10	; 16
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <universal>:

void universal(void) {
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	c0 de       	rcall	.-640    	; 0xbe0 <fill>
     e60:	20 91 49 01 	lds	r18, 0x0149
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
     e64:	40 91 48 01 	lds	r20, 0x0148
     e68:	60 91 47 01 	lds	r22, 0x0147
     e6c:	80 91 46 01 	lds	r24, 0x0146
     e70:	7b df       	rcall	.-266    	; 0xd68 <spi_transaction>
     e72:	e8 ce       	rjmp	.-560    	; 0xc44 <breply>

00000e74 <read_signature>:
	breply(ch);
}

void read_signature(void) {
     e74:	ae de       	rcall	.-676    	; 0xbd2 <getch>
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.ispBuffer[0], ram.ispBuffer[1], ram.ispBuffer[2], ram.ispBuffer[3]);
	breply(ch);
     e76:	80 32       	cpi	r24, 0x20	; 32
     e78:	59 f0       	breq	.+22     	; 0xe90 <read_signature+0x1c>
     e7a:	80 91 3c 01 	lds	r24, 0x013C
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     e7e:	90 91 3d 01 	lds	r25, 0x013D
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	90 93 3d 01 	sts	0x013D, r25
     e88:	80 93 3c 01 	sts	0x013C, r24
     e8c:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     e8e:	15 c0       	rjmp	.+42     	; 0xeba <read_signature+0x46>
     e90:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e92:	7a de       	rcall	.-780    	; 0xb88 <sendCDCbyte>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	65 df       	rcall	.-310    	; 0xd68 <spi_transaction>
     e9e:	74 de       	rcall	.-792    	; 0xb88 <sendCDCbyte>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     ea8:	5f df       	rcall	.-322    	; 0xd68 <spi_transaction>
     eaa:	6e de       	rcall	.-804    	; 0xb88 <sendCDCbyte>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	42 e0       	ldi	r20, 0x02	; 2
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     eb4:	59 df       	rcall	.-334    	; 0xd68 <spi_transaction>
     eb6:	68 de       	rcall	.-816    	; 0xb88 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     eb8:	80 e1       	ldi	r24, 0x10	; 16
     eba:	66 ce       	rjmp	.-820    	; 0xb88 <sendCDCbyte>

00000ebc <write_eeprom_chunk>:
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
	sendCDCbyte(STK_OK);
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	d8 2f       	mov	r29, r24
     ece:	c9 2f       	mov	r28, r25
     ed0:	7b 01       	movw	r14, r22
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     ed2:	cb 01       	movw	r24, r22
     ed4:	85 de       	rcall	.-758    	; 0xbe0 <fill>
     ed6:	5d 9a       	sbi	0x0b, 5	; 11
     ed8:	86 e4       	ldi	r24, 0x46	; 70
     eda:	c8 2e       	mov	r12, r24
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	d8 2e       	mov	r13, r24
     ee0:	0d 2f       	mov	r16, r29
     ee2:	1c 2f       	mov	r17, r28
     ee4:	e8 01       	movw	r28, r16
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <write_eeprom_chunk+0x4e>
     ee8:	f6 01       	movw	r30, r12
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
     eea:	21 91       	ld	r18, Z+
     eec:	6f 01       	movw	r12, r30
     eee:	4c 2f       	mov	r20, r28
     ef0:	6d 2f       	mov	r22, r29
     ef2:	80 ec       	ldi	r24, 0xC0	; 192
     ef4:	39 df       	rcall	.-398    	; 0xd68 <spi_transaction>
     ef6:	ff e7       	ldi	r31, 0x7F	; 127
     ef8:	22 e3       	ldi	r18, 0x32	; 50
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	f1 50       	subi	r31, 0x01	; 1
     efe:	20 40       	sbci	r18, 0x00	; 0
     f00:	80 40       	sbci	r24, 0x00	; 0
     f02:	e1 f7       	brne	.-8      	; 0xefc <write_eeprom_chunk+0x40>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <write_eeprom_chunk+0x4a>
     f06:	00 00       	nop
     f08:	21 96       	adiw	r28, 0x01	; 1
     f0a:	ce 01       	movw	r24, r28
     f0c:	80 1b       	sub	r24, r16
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
     f0e:	91 0b       	sbc	r25, r17
     f10:	8e 15       	cp	r24, r14
     f12:	9f 05       	cpc	r25, r15
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
     f14:	4c f3       	brlt	.-46     	; 0xee8 <write_eeprom_chunk+0x2c>
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	27 de       	rcall	.-946    	; 0xb68 <LEDs_TurnOnLEDs>
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
	return STK_OK;
}
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	08 95       	ret

00000f2e <write_eeprom>:
	}
}


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     f36:	c0 91 3f 01 	lds	r28, 0x013F
     f3a:	d0 91 40 01 	lds	r29, 0x0140
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
     f3e:	20 91 43 01 	lds	r18, 0x0143
     f42:	30 91 44 01 	lds	r19, 0x0144
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	24 f0       	brlt	.+8      	; 0xf54 <write_eeprom+0x26>


#define EECHUNK (32)
uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
     f4c:	cc 0f       	add	r28, r28
     f4e:	dd 1f       	adc	r29, r29
     f50:	8c 01       	movw	r16, r24
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <write_eeprom+0x4a>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
     f54:	80 91 3c 01 	lds	r24, 0x013C
     f58:	90 91 3d 01 	lds	r25, 0x013D
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	90 93 3d 01 	sts	0x013D, r25
     f62:	80 93 3c 01 	sts	0x013C, r24
		return STK_FAILED;
     f66:	81 e1       	ldi	r24, 0x11	; 17
     f68:	0e c0       	rjmp	.+28     	; 0xf86 <write_eeprom+0x58>
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
     f6a:	60 e2       	ldi	r22, 0x20	; 32
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	ce 01       	movw	r24, r28
     f70:	a5 df       	rcall	.-182    	; 0xebc <write_eeprom_chunk>
     f72:	a0 96       	adiw	r28, 0x20	; 32
		start += EECHUNK;
     f74:	00 52       	subi	r16, 0x20	; 32
		remaining -= EECHUNK;
     f76:	11 09       	sbc	r17, r1
     f78:	01 32       	cpi	r16, 0x21	; 33
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
     f7a:	11 05       	cpc	r17, r1
     f7c:	b4 f7       	brge	.-20     	; 0xf6a <write_eeprom+0x3c>
     f7e:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, EECHUNK);
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
     f80:	ce 01       	movw	r24, r28
     f82:	9c df       	rcall	.-200    	; 0xebc <write_eeprom_chunk>
     f84:	80 e1       	ldi	r24, 0x10	; 16
     f86:	df 91       	pop	r29
	return STK_OK;
     f88:	cf 91       	pop	r28
}
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <eeprom_read_page>:
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	7c 01       	movw	r14, r24
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
     f9e:	00 91 3f 01 	lds	r16, 0x013F
     fa2:	10 91 40 01 	lds	r17, 0x0140
     fa6:	00 0f       	add	r16, r16
     fa8:	11 1f       	adc	r17, r17
	for (int x = 0; x < length; x++) {
     faa:	e8 01       	movw	r28, r16
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <eeprom_read_page+0x2c>
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
     fae:	2f ef       	ldi	r18, 0xFF	; 255
     fb0:	4c 2f       	mov	r20, r28
     fb2:	6d 2f       	mov	r22, r29
     fb4:	80 ea       	ldi	r24, 0xA0	; 160
     fb6:	d8 de       	rcall	.-592    	; 0xd68 <spi_transaction>
     fb8:	e7 dd       	rcall	.-1074   	; 0xb88 <sendCDCbyte>
		sendCDCbyte(ee);
     fba:	21 96       	adiw	r28, 0x01	; 1
     fbc:	ce 01       	movw	r24, r28
     fbe:	80 1b       	sub	r24, r16
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}

char eeprom_read_page(int length) {
     fc0:	91 0b       	sbc	r25, r17
     fc2:	8e 15       	cp	r24, r14
     fc4:	9f 05       	cpc	r25, r15
	// TODO comapre with ada
	// here again we have a word address
	int start = ram.isp._addr * 2;
	for (int x = 0; x < length; x++) {
     fc6:	9c f3       	brlt	.-26     	; 0xfae <eeprom_read_page+0x1e>
     fc8:	80 e1       	ldi	r24, 0x10	; 16
     fca:	df 91       	pop	r29
		int addr = start + x;
		uint8_t ee = spi_transaction(0xA0, (addr >> 8) & 0xFF, addr & 0xFF, 0xFF);
		sendCDCbyte(ee);
	}
	return STK_OK;
}
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <read_page>:
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void read_page(void) {
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
     fde:	f9 dd       	rcall	.-1038   	; 0xbd2 <getch>
     fe0:	d8 2f       	mov	r29, r24
     fe2:	f7 dd       	rcall	.-1042   	; 0xbd2 <getch>
	length += getch();
     fe4:	c8 2f       	mov	r28, r24
     fe6:	f5 dd       	rcall	.-1046   	; 0xbd2 <getch>
     fe8:	18 2f       	mov	r17, r24
	char memtype = getch();
     fea:	f3 dd       	rcall	.-1050   	; 0xbd2 <getch>
     fec:	80 32       	cpi	r24, 0x20	; 32
     fee:	59 f0       	breq	.+22     	; 0x1006 <read_page+0x2e>
	if (CRC_EOP != getch()) {
     ff0:	80 91 3c 01 	lds	r24, 0x013C
     ff4:	90 91 3d 01 	lds	r25, 0x013D
		ram.isp.error++;
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	90 93 3d 01 	sts	0x013D, r25
     ffe:	80 93 3c 01 	sts	0x013C, r24
    1002:	85 e1       	ldi	r24, 0x15	; 21
    1004:	13 c0       	rjmp	.+38     	; 0x102c <read_page+0x54>
    1006:	3d 2f       	mov	r19, r29
    1008:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
    100a:	c9 01       	movw	r24, r18
    100c:	8c 0f       	add	r24, r28
	sendCDCbyte(STK_OK);
}

void read_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    100e:	91 1d       	adc	r25, r1
    1010:	ec 01       	movw	r28, r24
	length += getch();
    1012:	84 e1       	ldi	r24, 0x14	; 20
    1014:	b9 dd       	rcall	.-1166   	; 0xb88 <sendCDCbyte>
    1016:	16 34       	cpi	r17, 0x46	; 70
    1018:	19 f4       	brne	.+6      	; 0x1020 <read_page+0x48>
	if (CRC_EOP != getch()) {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}
	sendCDCbyte(STK_INSYNC);
    101a:	ce 01       	movw	r24, r28
    101c:	f4 de       	rcall	.-536    	; 0xe06 <flash_read_page>
    101e:	06 c0       	rjmp	.+12     	; 0x102c <read_page+0x54>
	if (memtype == 'F') result = flash_read_page(length);
    1020:	15 34       	cpi	r17, 0x45	; 69
    1022:	19 f4       	brne	.+6      	; 0x102a <read_page+0x52>
    1024:	ce 01       	movw	r24, r28
    1026:	b4 df       	rcall	.-152    	; 0xf90 <eeprom_read_page>
    1028:	01 c0       	rjmp	.+2      	; 0x102c <read_page+0x54>
    102a:	81 e1       	ldi	r24, 0x11	; 17
	if (memtype == 'E') result = eeprom_read_page(length);
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	aa cd       	rjmp	.-1196   	; 0xb88 <sendCDCbyte>

00001034 <commit>:
	}
	commit(page);
	return STK_OK;
}

void commit(int addr) {
    1034:	5d 9a       	sbi	0x0b, 5	; 11
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
    1036:	20 e0       	ldi	r18, 0x00	; 0
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void read_page(void) {
	char result = (char)STK_FAILED;
    1038:	48 2f       	mov	r20, r24
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
    103a:	69 2f       	mov	r22, r25
    103c:	8c e4       	ldi	r24, 0x4C	; 76
    103e:	94 de       	rcall	.-728    	; 0xd68 <spi_transaction>
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	86 e7       	ldi	r24, 0x76	; 118
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	21 50       	subi	r18, 0x01	; 1
    1048:	80 40       	sbci	r24, 0x00	; 0
    104a:	90 40       	sbci	r25, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <commit+0x12>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <commit+0x1c>
    1050:	00 00       	nop
    1052:	80 e2       	ldi	r24, 0x20	; 32

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	spi_transaction(0x4C, (addr >> 8) & 0xFF, addr & 0xFF, 0);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
    1054:	89 cd       	rjmp	.-1262   	; 0xb68 <LEDs_TurnOnLEDs>

00001056 <current_page>:
}

int current_page(void) {
    1056:	80 91 41 01 	lds	r24, 0x0141
    105a:	90 91 42 01 	lds	r25, 0x0142
    105e:	20 91 3f 01 	lds	r18, 0x013F
    1062:	30 91 40 01 	lds	r19, 0x0140
    1066:	80 32       	cpi	r24, 0x20	; 32
    1068:	91 05       	cpc	r25, r1
    106a:	11 f4       	brne	.+4      	; 0x1070 <current_page+0x1a>
	// TODO input useless??
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
    106c:	20 7f       	andi	r18, 0xF0	; 240
    106e:	0e c0       	rjmp	.+28     	; 0x108c <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
    1070:	80 34       	cpi	r24, 0x40	; 64
    1072:	91 05       	cpc	r25, r1
    1074:	11 f4       	brne	.+4      	; 0x107a <current_page+0x24>
    1076:	20 7e       	andi	r18, 0xE0	; 224
    1078:	09 c0       	rjmp	.+18     	; 0x108c <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
    107a:	80 38       	cpi	r24, 0x80	; 128
    107c:	91 05       	cpc	r25, r1
    107e:	11 f4       	brne	.+4      	; 0x1084 <current_page+0x2e>
    1080:	20 7c       	andi	r18, 0xC0	; 192
    1082:	04 c0       	rjmp	.+8      	; 0x108c <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
    1084:	81 15       	cp	r24, r1
    1086:	91 40       	sbci	r25, 0x01	; 1
    1088:	09 f4       	brne	.+2      	; 0x108c <current_page+0x36>
    108a:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
    108c:	c9 01       	movw	r24, r18
    108e:	08 95       	ret

00001090 <flash>:

void flash(uint8_t hilo, int addr, uint8_t data) {
    1090:	96 2f       	mov	r25, r22
    1092:	67 2f       	mov	r22, r23
    1094:	24 2f       	mov	r18, r20
	spi_transaction(0x40 + 8 * hilo,
    1096:	88 0f       	add	r24, r24
    1098:	88 0f       	add	r24, r24
    109a:	88 0f       	add	r24, r24
    109c:	49 2f       	mov	r20, r25
    109e:	80 5c       	subi	r24, 0xC0	; 192
    10a0:	63 ce       	rjmp	.-826    	; 0xd68 <spi_transaction>

000010a2 <write_flash_pages>:
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	6c 01       	movw	r12, r24
	int x = 0;
	int page = current_page();
    10b4:	d0 df       	rcall	.-96     	; 0x1056 <current_page>
    10b6:	8c 01       	movw	r16, r24
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
	int x = 0;
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
    10bc:	29 c0       	rjmp	.+82     	; 0x1110 <write_flash_pages+0x6e>
	int page = current_page();
	while (x < length) {
    10be:	cb df       	rcall	.-106    	; 0x1056 <current_page>
		if (page != current_page()) {
    10c0:	08 17       	cp	r16, r24
    10c2:	19 07       	cpc	r17, r25
    10c4:	21 f0       	breq	.+8      	; 0x10ce <write_flash_pages+0x2c>
    10c6:	c8 01       	movw	r24, r16
    10c8:	b5 df       	rcall	.-150    	; 0x1034 <commit>
			commit(page);
    10ca:	c5 df       	rcall	.-118    	; 0x1056 <current_page>
    10cc:	8c 01       	movw	r16, r24
    10ce:	46 e3       	ldi	r20, 0x36	; 54
			page = current_page();
    10d0:	e4 2e       	mov	r14, r20
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	f4 2e       	mov	r15, r20
		sendCDCbyte(ee);
	}
	return STK_OK;
}

uint8_t write_flash_pages(int length) {
    10d6:	ec 0e       	add	r14, r28
    10d8:	fd 1e       	adc	r15, r29
    10da:	60 91 3f 01 	lds	r22, 0x013F
    10de:	70 91 40 01 	lds	r23, 0x0140
	while (x < length) {
		if (page != current_page()) {
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
    10e2:	f7 01       	movw	r30, r14
    10e4:	40 89       	ldd	r20, Z+16	; 0x10
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	d3 df       	rcall	.-90     	; 0x1090 <flash>
    10ea:	22 96       	adiw	r28, 0x02	; 2
    10ec:	60 91 3f 01 	lds	r22, 0x013F
    10f0:	70 91 40 01 	lds	r23, 0x0140
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
    10f4:	f7 01       	movw	r30, r14
    10f6:	41 89       	ldd	r20, Z+17	; 0x11
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	ca df       	rcall	.-108    	; 0x1090 <flash>
    10fc:	20 91 3f 01 	lds	r18, 0x013F
    1100:	30 91 40 01 	lds	r19, 0x0140
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
		ram.isp._addr++;
    1108:	30 93 40 01 	sts	0x0140, r19
    110c:	20 93 3f 01 	sts	0x013F, r18
    1110:	cc 15       	cp	r28, r12
    1112:	dd 05       	cpc	r29, r13
    1114:	a4 f2       	brlt	.-88     	; 0x10be <write_flash_pages+0x1c>
    1116:	c8 01       	movw	r24, r16
    1118:	8d df       	rcall	.-230    	; 0x1034 <commit>
    111a:	80 e1       	ldi	r24, 0x10	; 16
}

uint8_t write_flash_pages(int length) {
	int x = 0;
	int page = current_page();
	while (x < length) {
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
	}
	commit(page);
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
	return STK_OK;
}
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	08 95       	ret

0000112e <write_flash>:
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}

void write_flash(int length) {
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
	// TODO compare with ada <--
	fill(length);
    1134:	55 dd       	rcall	.-1366   	; 0xbe0 <fill>
    1136:	4d dd       	rcall	.-1382   	; 0xbd2 <getch>
	if (CRC_EOP == getch()) {
    1138:	80 32       	cpi	r24, 0x20	; 32
    113a:	29 f4       	brne	.+10     	; 0x1146 <write_flash+0x18>
    113c:	84 e1       	ldi	r24, 0x14	; 20
    113e:	24 dd       	rcall	.-1464   	; 0xb88 <sendCDCbyte>
		sendCDCbyte(STK_INSYNC);
    1140:	ce 01       	movw	r24, r28
    1142:	af df       	rcall	.-162    	; 0x10a2 <write_flash_pages>
    1144:	0a c0       	rjmp	.+20     	; 0x115a <write_flash+0x2c>
		sendCDCbyte(write_flash_pages(length));
    1146:	80 91 3c 01 	lds	r24, 0x013C
    114a:	90 91 3d 01 	lds	r25, 0x013D
	}
	else {
		ram.isp.error++;
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	90 93 3d 01 	sts	0x013D, r25
    1154:	80 93 3c 01 	sts	0x013C, r24
    1158:	85 e1       	ldi	r24, 0x15	; 21
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	14 cd       	rjmp	.-1496   	; 0xb88 <sendCDCbyte>

00001160 <program_page>:
		sendCDCbyte(STK_NOSYNC);
    1160:	cf 93       	push	r28
	}
}
    1162:	df 93       	push	r29
	} while (!(SPSR & (1 << SPIF)));
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    1164:	36 dd       	rcall	.-1428   	; 0xbd2 <getch>
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(write_flash_pages(length));
	}
	else {
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
    1166:	d8 2f       	mov	r29, r24
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	c8 2f       	mov	r28, r24
    116c:	32 dd       	rcall	.-1436   	; 0xbd2 <getch>
}

void program_page(void) {
	char result = (char)STK_FAILED;
	int length = 256 * getch();
	length += getch();
    116e:	c8 0f       	add	r28, r24
    1170:	d1 1d       	adc	r29, r1
    1172:	c1 30       	cpi	r28, 0x01	; 1
    1174:	81 e0       	ldi	r24, 0x01	; 1

	// added from ada <--
	if (length > 256) {
    1176:	d8 07       	cpc	r29, r24
    1178:	64 f0       	brlt	.+24     	; 0x1192 <program_page+0x32>
    117a:	81 e1       	ldi	r24, 0x11	; 17
    117c:	05 dd       	rcall	.-1526   	; 0xb88 <sendCDCbyte>
		sendCDCbyte(STK_FAILED);
    117e:	80 91 3c 01 	lds	r24, 0x013C
    1182:	90 91 3d 01 	lds	r25, 0x013D
		ram.isp.error++;
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 3d 01 	sts	0x013D, r25
    118c:	80 93 3c 01 	sts	0x013C, r24
    1190:	22 c0       	rjmp	.+68     	; 0x11d6 <program_page+0x76>
    1192:	1f dd       	rcall	.-1474   	; 0xbd2 <getch>
    1194:	86 34       	cpi	r24, 0x46	; 70
		return;
    1196:	21 f4       	brne	.+8      	; 0x11a0 <program_page+0x40>
	}

	// todo compare with ada <--

	char memtype = getch();
    1198:	ce 01       	movw	r24, r28
    119a:	df 91       	pop	r29
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    119c:	cf 91       	pop	r28
    119e:	c7 cf       	rjmp	.-114    	; 0x112e <write_flash>
		write_flash(length);
    11a0:	85 34       	cpi	r24, 0x45	; 69
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
    11a2:	a9 f4       	brne	.+42     	; 0x11ce <program_page+0x6e>
    11a4:	ce 01       	movw	r24, r28
	// todo compare with ada <--

	char memtype = getch();
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
		write_flash(length);
    11a6:	c3 de       	rcall	.-634    	; 0xf2e <write_eeprom>
    11a8:	c8 2f       	mov	r28, r24
		return;
	}
	if (memtype == 'E') {
    11aa:	13 dd       	rcall	.-1498   	; 0xbd2 <getch>
    11ac:	80 32       	cpi	r24, 0x20	; 32
		result = (char)write_eeprom(length);
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <program_page+0x58>
    11b0:	84 e1       	ldi	r24, 0x14	; 20
    11b2:	ea dc       	rcall	.-1580   	; 0xb88 <sendCDCbyte>
    11b4:	8c 2f       	mov	r24, r28
		if (CRC_EOP == getch()) {
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <program_page+0x70>
    11b8:	80 91 3c 01 	lds	r24, 0x013C
    11bc:	90 91 3d 01 	lds	r25, 0x013D
			sendCDCbyte(STK_INSYNC);
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	90 93 3d 01 	sts	0x013D, r25
			sendCDCbyte(result);
    11c6:	80 93 3c 01 	sts	0x013C, r24
		}
		else {
			ram.isp.error++;
    11ca:	85 e1       	ldi	r24, 0x15	; 21
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <program_page+0x70>
    11ce:	81 e1       	ldi	r24, 0x11	; 17
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	d9 cc       	rjmp	.-1614   	; 0xb88 <sendCDCbyte>
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
			sendCDCbyte(STK_NOSYNC);
    11da:	08 95       	ret

000011dc <avrisp>:
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}


void avrisp(int ReceivedByte){
    11dc:	cf 93       	push	r28
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11de:	df 93       	push	r29
	return;
}
    11e0:	ec 01       	movw	r28, r24
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11e2:	80 91 3e 01 	lds	r24, 0x013E
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11e6:	88 23       	and	r24, r24
	return;
}
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <avrisp+0x14>
}


void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11ea:	80 e2       	ldi	r24, 0x20	; 32
    11ec:	bd dc       	rcall	.-1670   	; 0xb68 <LEDs_TurnOnLEDs>
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <avrisp+0x16>
    11f0:	5d 9a       	sbi	0x0b, 5	; 11
    11f2:	80 91 3c 01 	lds	r24, 0x013C
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    11f6:	90 91 3d 01 	lds	r25, 0x013D
    11fa:	89 2b       	or	r24, r25
    11fc:	19 f0       	breq	.+6      	; 0x1204 <avrisp+0x28>
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	b3 dc       	rcall	.-1690   	; 0xb68 <LEDs_TurnOnLEDs>
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <avrisp+0x2a>
    1204:	5c 9a       	sbi	0x0b, 4	; 11
    1206:	d7 fd       	sbrc	r29, 7
    1208:	ae c0       	rjmp	.+348    	; 0x1366 <avrisp+0x18a>
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    120a:	c1 35       	cpi	r28, 0x51	; 81
    120c:	d1 05       	cpc	r29, r1
		switch (ReceivedByte) {
    120e:	09 f4       	brne	.+2      	; 0x1212 <avrisp+0x36>
    1210:	85 c0       	rjmp	.+266    	; 0x131c <avrisp+0x140>
    1212:	e4 f4       	brge	.+56     	; 0x124c <avrisp+0x70>
    1214:	c1 34       	cpi	r28, 0x41	; 65
    1216:	d1 05       	cpc	r29, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <avrisp+0x40>
    121a:	52 c0       	rjmp	.+164    	; 0x12c0 <avrisp+0xe4>
    121c:	54 f4       	brge	.+20     	; 0x1232 <avrisp+0x56>
    121e:	c0 33       	cpi	r28, 0x30	; 48
    1220:	d1 05       	cpc	r29, r1
    1222:	99 f1       	breq	.+102    	; 0x128a <avrisp+0xae>
    1224:	c1 33       	cpi	r28, 0x31	; 49
    1226:	d1 05       	cpc	r29, r1
    1228:	a9 f1       	breq	.+106    	; 0x1294 <avrisp+0xb8>
    122a:	a0 97       	sbiw	r28, 0x20	; 32
    122c:	09 f0       	breq	.+2      	; 0x1230 <avrisp+0x54>
    122e:	89 c0       	rjmp	.+274    	; 0x1342 <avrisp+0x166>
    1230:	7e c0       	rjmp	.+252    	; 0x132e <avrisp+0x152>
    1232:	c5 34       	cpi	r28, 0x45	; 69
    1234:	d1 05       	cpc	r29, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <avrisp+0x5e>
    1238:	4e c0       	rjmp	.+156    	; 0x12d6 <avrisp+0xfa>
    123a:	c0 35       	cpi	r28, 0x50	; 80
    123c:	d1 05       	cpc	r29, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <avrisp+0x66>
    1240:	4e c0       	rjmp	.+156    	; 0x12de <avrisp+0x102>
    1242:	c2 34       	cpi	r28, 0x42	; 66
    1244:	d1 05       	cpc	r29, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <avrisp+0x6e>
    1248:	7c c0       	rjmp	.+248    	; 0x1342 <avrisp+0x166>
    124a:	3e c0       	rjmp	.+124    	; 0x12c8 <avrisp+0xec>
    124c:	c1 36       	cpi	r28, 0x61	; 97
    124e:	d1 05       	cpc	r29, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <avrisp+0x78>
    1252:	59 c0       	rjmp	.+178    	; 0x1306 <avrisp+0x12a>
    1254:	6c f4       	brge	.+26     	; 0x1270 <avrisp+0x94>
    1256:	c6 35       	cpi	r28, 0x56	; 86
    1258:	d1 05       	cpc	r29, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <avrisp+0x82>
    125c:	5c c0       	rjmp	.+184    	; 0x1316 <avrisp+0x13a>
    125e:	c0 36       	cpi	r28, 0x60	; 96
    1260:	d1 05       	cpc	r29, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <avrisp+0x8a>
    1264:	4f c0       	rjmp	.+158    	; 0x1304 <avrisp+0x128>
    1266:	c5 35       	cpi	r28, 0x55	; 85
    1268:	d1 05       	cpc	r29, r1
    126a:	09 f0       	breq	.+2      	; 0x126e <avrisp+0x92>
    126c:	6a c0       	rjmp	.+212    	; 0x1342 <avrisp+0x166>
    126e:	39 c0       	rjmp	.+114    	; 0x12e2 <avrisp+0x106>
    1270:	c4 37       	cpi	r28, 0x74	; 116
    1272:	d1 05       	cpc	r29, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <avrisp+0x9c>
    1276:	4c c0       	rjmp	.+152    	; 0x1310 <avrisp+0x134>
    1278:	c5 37       	cpi	r28, 0x75	; 117
    127a:	d1 05       	cpc	r29, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <avrisp+0xa4>
    127e:	54 c0       	rjmp	.+168    	; 0x1328 <avrisp+0x14c>
    1280:	c4 36       	cpi	r28, 0x64	; 100
    1282:	d1 05       	cpc	r29, r1
    1284:	09 f0       	breq	.+2      	; 0x1288 <avrisp+0xac>
    1286:	5d c0       	rjmp	.+186    	; 0x1342 <avrisp+0x166>
    1288:	40 c0       	rjmp	.+128    	; 0x130a <avrisp+0x12e>
    128a:	10 92 3d 01 	sts	0x013D, r1
		case STK_GET_SYNC:
			ram.isp.error = 0;
    128e:	10 92 3c 01 	sts	0x013C, r1
    1292:	1e c0       	rjmp	.+60     	; 0x12d0 <avrisp+0xf4>
    1294:	9e dc       	rcall	.-1732   	; 0xbd2 <getch>
    1296:	80 32       	cpi	r24, 0x20	; 32
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    1298:	09 f0       	breq	.+2      	; 0x129c <avrisp+0xc0>
    129a:	65 c0       	rjmp	.+202    	; 0x1366 <avrisp+0x18a>
    129c:	84 e1       	ldi	r24, 0x14	; 20
    129e:	74 dc       	rcall	.-1816   	; 0xb88 <sendCDCbyte>
    12a0:	81 e4       	ldi	r24, 0x41	; 65
				sendCDCbyte(STK_INSYNC);
    12a2:	72 dc       	rcall	.-1820   	; 0xb88 <sendCDCbyte>
    12a4:	86 e5       	ldi	r24, 0x56	; 86
    12a6:	70 dc       	rcall	.-1824   	; 0xb88 <sendCDCbyte>
				sendCDCbyte('A');
    12a8:	82 e5       	ldi	r24, 0x52	; 82
    12aa:	6e dc       	rcall	.-1828   	; 0xb88 <sendCDCbyte>
    12ac:	80 e2       	ldi	r24, 0x20	; 32
				sendCDCbyte('V');
    12ae:	6c dc       	rcall	.-1832   	; 0xb88 <sendCDCbyte>
    12b0:	89 e4       	ldi	r24, 0x49	; 73
    12b2:	6a dc       	rcall	.-1836   	; 0xb88 <sendCDCbyte>
				sendCDCbyte('R');
    12b4:	83 e5       	ldi	r24, 0x53	; 83
    12b6:	68 dc       	rcall	.-1840   	; 0xb88 <sendCDCbyte>
    12b8:	80 e5       	ldi	r24, 0x50	; 80
				sendCDCbyte(' ');
    12ba:	66 dc       	rcall	.-1844   	; 0xb88 <sendCDCbyte>
    12bc:	80 e1       	ldi	r24, 0x10	; 16
    12be:	50 c0       	rjmp	.+160    	; 0x1360 <avrisp+0x184>
				sendCDCbyte('I');
    12c0:	88 dc       	rcall	.-1776   	; 0xbd2 <getch>
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
				sendCDCbyte('S');
    12c6:	d7 cc       	rjmp	.-1618   	; 0xc76 <get_parameters>
    12c8:	84 e1       	ldi	r24, 0x14	; 20
    12ca:	90 e0       	ldi	r25, 0x00	; 0
				sendCDCbyte('P');
    12cc:	89 dc       	rcall	.-1774   	; 0xbe0 <fill>
    12ce:	a3 dc       	rcall	.-1722   	; 0xc16 <set_parameters>
    12d0:	df 91       	pop	r29
				sendCDCbyte(STK_OK);
    12d2:	cf 91       	pop	r28
    12d4:	e5 cc       	rjmp	.-1590   	; 0xca0 <replyOK>
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12d6:	85 e0       	ldi	r24, 0x05	; 5
    12d8:	90 e0       	ldi	r25, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12da:	82 dc       	rcall	.-1788   	; 0xbe0 <fill>
    12dc:	f9 cf       	rjmp	.-14     	; 0x12d0 <avrisp+0xf4>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12de:	5c dd       	rcall	.-1352   	; 0xd98 <start_pmode>
    12e0:	f7 cf       	rjmp	.-18     	; 0x12d0 <avrisp+0xf4>
			break;
		case STK_SET_PARM:
			fill(20);
    12e2:	77 dc       	rcall	.-1810   	; 0xbd2 <getch>
    12e4:	c8 2f       	mov	r28, r24
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	d0 93 40 01 	sts	0x0140, r29
			set_parameters();
    12ec:	c0 93 3f 01 	sts	0x013F, r28
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12f0:	70 dc       	rcall	.-1824   	; 0xbd2 <getch>
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			fill(20);
			set_parameters();
			replyOK();
    12f2:	38 2f       	mov	r19, r24
    12f4:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    12f6:	2c 0f       	add	r18, r28
    12f8:	3d 1f       	adc	r19, r29
    12fa:	30 93 40 01 	sts	0x0140, r19
    12fe:	20 93 3f 01 	sts	0x013F, r18
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    1302:	e6 cf       	rjmp	.-52     	; 0x12d0 <avrisp+0xf4>
    1304:	66 dc       	rcall	.-1844   	; 0xbd2 <getch>
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    1306:	65 dc       	rcall	.-1846   	; 0xbd2 <getch>
    1308:	e3 cf       	rjmp	.-58     	; 0x12d0 <avrisp+0xf4>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	28 cf       	rjmp	.-432    	; 0x1160 <program_page>
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	61 ce       	rjmp	.-830    	; 0xfd8 <read_page>
			ram.isp._addr += 256 * getch();
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	9f cd       	rjmp	.-1218   	; 0xe5a <universal>
    131c:	10 92 3d 01 	sts	0x013D, r1
    1320:	10 92 3c 01 	sts	0x013C, r1
    1324:	f1 dc       	rcall	.-1566   	; 0xd08 <end_pmode>
    1326:	d4 cf       	rjmp	.-88     	; 0x12d0 <avrisp+0xf4>
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    132c:	a3 cd       	rjmp	.-1210   	; 0xe74 <read_signature>
    132e:	80 91 3c 01 	lds	r24, 0x013C
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1332:	90 91 3d 01 	lds	r25, 0x013D
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	90 93 3d 01 	sts	0x013D, r25
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    133c:	80 93 3c 01 	sts	0x013C, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1340:	0e c0       	rjmp	.+28     	; 0x135e <avrisp+0x182>
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1342:	80 91 3c 01 	lds	r24, 0x013C
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1346:	90 91 3d 01 	lds	r25, 0x013D
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	90 93 3d 01 	sts	0x013D, r25
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    1350:	80 93 3c 01 	sts	0x013C, r24
    1354:	3e dc       	rcall	.-1924   	; 0xbd2 <getch>
			end_pmode();
    1356:	80 32       	cpi	r24, 0x20	; 32
    1358:	11 f4       	brne	.+4      	; 0x135e <avrisp+0x182>
    135a:	82 e1       	ldi	r24, 0x12	; 18
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <avrisp+0x184>
    135e:	85 e1       	ldi	r24, 0x15	; 21
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1364:	11 cc       	rjmp	.-2014   	; 0xb88 <sendCDCbyte>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    136c:	fc 01       	movw	r30, r24
    136e:	20 81       	ld	r18, Z
	protocol->leadError = false;
    1370:	20 68       	ori	r18, 0x80	; 128
    1372:	2f 7b       	andi	r18, 0xBF	; 191
    1374:	20 83       	st	Z, r18
    1376:	08 95       	ret

00001378 <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    137e:	90 81       	ld	r25, Z
    1380:	96 ff       	sbrs	r25, 6
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1384:	29 2f       	mov	r18, r25
    1386:	26 95       	lsr	r18
    1388:	26 95       	lsr	r18
    138a:	26 95       	lsr	r18
    138c:	27 70       	andi	r18, 0x07	; 7
    138e:	db 01       	movw	r26, r22
    1390:	a2 0f       	add	r26, r18
    1392:	b1 1d       	adc	r27, r1
    1394:	15 96       	adiw	r26, 0x05	; 5
    1396:	2c 91       	ld	r18, X
    1398:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    139a:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    139c:	98 60       	ori	r25, 0x08	; 8
    139e:	9f 7b       	andi	r25, 0xBF	; 191
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    13a2:	97 ff       	sbrs	r25, 7
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    13a6:	90 7c       	andi	r25, 0xC0	; 192
    13a8:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    13aa:	90 81       	ld	r25, Z
    13ac:	96 95       	lsr	r25
    13ae:	96 95       	lsr	r25
    13b0:	96 95       	lsr	r25
    13b2:	97 70       	andi	r25, 0x07	; 7
    13b4:	df 01       	movw	r26, r30
    13b6:	a9 0f       	add	r26, r25
    13b8:	b1 1d       	adc	r27, r1
    13ba:	15 96       	adiw	r26, 0x05	; 5
    13bc:	8c 93       	st	X, r24
    13be:	29 2f       	mov	r18, r25
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
    13c2:	27 70       	andi	r18, 0x07	; 7
    13c4:	22 0f       	add	r18, r18
    13c6:	22 0f       	add	r18, r18
    13c8:	22 0f       	add	r18, r18
    13ca:	40 81       	ld	r20, Z
    13cc:	47 7c       	andi	r20, 0xC7	; 199
    13ce:	42 2b       	or	r20, r18
    13d0:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    13d2:	28 2f       	mov	r18, r24
    13d4:	20 7c       	andi	r18, 0xC0	; 192
    13d6:	34 2f       	mov	r19, r20
    13d8:	37 70       	andi	r19, 0x07	; 7
    13da:	20 38       	cpi	r18, 0x80	; 128
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <NHPread+0x68>
    13de:	63 c0       	rjmp	.+198    	; 0x14a6 <NHPread+0x12e>
    13e0:	20 3c       	cpi	r18, 0xC0	; 192
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <NHPread+0x6e>
    13e4:	45 c0       	rjmp	.+138    	; 0x1470 <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    13e6:	28 2f       	mov	r18, r24
    13e8:	28 73       	andi	r18, 0x38	; 56
    13ea:	26 95       	lsr	r18
    13ec:	26 95       	lsr	r18
    13ee:	26 95       	lsr	r18

		if (protocol->mBlocks){
    13f0:	33 23       	and	r19, r19
    13f2:	49 f0       	breq	.+18     	; 0x1406 <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    13f4:	99 0f       	add	r25, r25
    13f6:	99 0f       	add	r25, r25
    13f8:	99 0f       	add	r25, r25
    13fa:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    13fc:	49 2b       	or	r20, r25
    13fe:	40 64       	ori	r20, 0x40	; 64
    1400:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    1402:	9e ef       	ldi	r25, 0xFE	; 254
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    1406:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	98 f4       	brcc	.+38     	; 0x1432 <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    140c:	90 81       	ld	r25, Z
    140e:	96 fb       	bst	r25, 6
    1410:	22 27       	eor	r18, r18
    1412:	20 f9       	bld	r18, 0
    1414:	89 2f       	mov	r24, r25
    1416:	86 95       	lsr	r24
    1418:	86 95       	lsr	r24
    141a:	86 95       	lsr	r24
    141c:	82 0f       	add	r24, r18
    141e:	87 70       	andi	r24, 0x07	; 7
    1420:	88 0f       	add	r24, r24
    1422:	88 0f       	add	r24, r24
    1424:	88 0f       	add	r24, r24
    1426:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    1428:	98 2b       	or	r25, r24
    142a:	9f 7b       	andi	r25, 0xBF	; 191
    142c:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    142e:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <NHPread+0x138>
		}

		else if (blocks == 7){
    1432:	27 30       	cpi	r18, 0x07	; 7
    1434:	59 f4       	brne	.+22     	; 0x144c <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    1436:	08 2f       	mov	r16, r24
    1438:	0f 70       	andi	r16, 0x0F	; 15
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	01 83       	std	Z+1, r16	; 0x01
    1442:	12 83       	std	Z+2, r17	; 0x02
    1444:	23 83       	std	Z+3, r18	; 0x03
    1446:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    1448:	25 e0       	ldi	r18, 0x05	; 5
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    144c:	48 2f       	mov	r20, r24
    144e:	47 70       	andi	r20, 0x07	; 7
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	41 83       	std	Z+1, r20	; 0x01
    1458:	52 83       	std	Z+2, r21	; 0x02
    145a:	63 83       	std	Z+3, r22	; 0x03
    145c:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    145e:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1460:	27 70       	andi	r18, 0x07	; 7
    1462:	80 81       	ld	r24, Z
    1464:	88 7f       	andi	r24, 0xF8	; 248
    1466:	82 2b       	or	r24, r18
    1468:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    146a:	99 23       	and	r25, r25
    146c:	29 f1       	breq	.+74     	; 0x14b8 <NHPread+0x140>
    146e:	20 c0       	rjmp	.+64     	; 0x14b0 <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1470:	03 2f       	mov	r16, r19
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	02 30       	cpi	r16, 0x02	; 2
    1476:	11 05       	cpc	r17, r1
    1478:	24 f1       	brlt	.+72     	; 0x14c2 <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    147a:	39 5f       	subi	r19, 0xF9	; 249
    147c:	37 70       	andi	r19, 0x07	; 7
    147e:	48 7f       	andi	r20, 0xF8	; 248
    1480:	43 2b       	or	r20, r19
    1482:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1484:	41 81       	ldd	r20, Z+1	; 0x01
    1486:	52 81       	ldd	r21, Z+2	; 0x02
    1488:	63 81       	ldd	r22, Z+3	; 0x03
    148a:	74 81       	ldd	r23, Z+4	; 0x04
    148c:	97 e0       	ldi	r25, 0x07	; 7
    148e:	44 0f       	add	r20, r20
    1490:	55 1f       	adc	r21, r21
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	9a 95       	dec	r25
    1498:	d1 f7       	brne	.-12     	; 0x148e <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    149a:	48 2b       	or	r20, r24
    149c:	41 83       	std	Z+1, r20	; 0x01
    149e:	52 83       	std	Z+2, r21	; 0x02
    14a0:	63 83       	std	Z+3, r22	; 0x03
    14a2:	74 83       	std	Z+4, r23	; 0x04
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    14a6:	31 30       	cpi	r19, 0x01	; 1
    14a8:	71 f4       	brne	.+28     	; 0x14c6 <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    14aa:	98 2f       	mov	r25, r24
    14ac:	9f 73       	andi	r25, 0x3F	; 63
    14ae:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    14b0:	80 81       	ld	r24, Z
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	80 83       	st	Z, r24
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    14b8:	80 81       	ld	r24, Z
    14ba:	8f 77       	andi	r24, 0x7F	; 127
    14bc:	80 83       	st	Z, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    14c2:	9d ef       	ldi	r25, 0xFD	; 253
    14c4:	f5 cf       	rjmp	.-22     	; 0x14b0 <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    14c6:	9c ef       	ldi	r25, 0xFC	; 252
    14c8:	f3 cf       	rjmp	.-26     	; 0x14b0 <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    14ca:	89 2f       	mov	r24, r25
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    14dc:	4d df       	rcall	.-358    	; 0x1378 <NHPread>
    14de:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    14e0:	b4 f4       	brge	.+44     	; 0x150e <NHPreadChecksum+0x3c>
    14e2:	09 81       	ldd	r16, Y+1	; 0x01
    14e4:	1a 81       	ldd	r17, Y+2	; 0x02
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	a9 01       	movw	r20, r18
    14ec:	66 27       	eor	r22, r22
    14ee:	77 27       	eor	r23, r23
    14f0:	22 27       	eor	r18, r18
    14f2:	33 27       	eor	r19, r19
    14f4:	40 27       	eor	r20, r16
    14f6:	51 27       	eor	r21, r17
    14f8:	62 27       	eor	r22, r18
    14fa:	73 27       	eor	r23, r19
    14fc:	4f 3f       	cpi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	61 05       	cpc	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	21 f0       	breq	.+8      	; 0x150e <NHPreadChecksum+0x3c>
    1506:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	88 83       	st	Y, r24
    150c:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    150e:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    1518:	fa 01       	movw	r30, r20
    151a:	2c e1       	ldi	r18, 0x1C	; 28
    151c:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    151e:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1520:	ab 01       	movw	r20, r22
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <NHPwriteChecksum+0x12>
    1526:	56 95       	lsr	r21
    1528:	47 95       	ror	r20
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    152e:	48 30       	cpi	r20, 0x08	; 8
    1530:	28 f0       	brcs	.+10     	; 0x153c <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    1532:	97 30       	cpi	r25, 0x07	; 7
    1534:	59 f4       	brne	.+22     	; 0x154c <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    1536:	40 83       	st	Z, r20
				blocks--;
    1538:	96 e0       	ldi	r25, 0x06	; 6
    153a:	08 c0       	rjmp	.+16     	; 0x154c <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    153c:	40 83       	st	Z, r20
			blocks--;
    153e:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1540:	41 11       	cpse	r20, r1
    1542:	04 c0       	rjmp	.+8      	; 0x154c <NHPwriteChecksum+0x34>
    1544:	27 50       	subi	r18, 0x07	; 7
    1546:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    1548:	92 30       	cpi	r25, 0x02	; 2
    154a:	51 f7       	brne	.-44     	; 0x1520 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    154c:	49 2f       	mov	r20, r25
    154e:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1550:	0d c0       	rjmp	.+26     	; 0x156c <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1552:	df 01       	movw	r26, r30
    1554:	a4 0f       	add	r26, r20
    1556:	b1 1d       	adc	r27, r1
    1558:	9b 01       	movw	r18, r22
    155a:	2f 77       	andi	r18, 0x7F	; 127
    155c:	33 27       	eor	r19, r19
    155e:	2c 93       	st	X, r18
		data >>= 7;
    1560:	66 0f       	add	r22, r22
    1562:	67 2f       	mov	r22, r23
    1564:	66 1f       	adc	r22, r22
    1566:	77 0b       	sbc	r23, r23
    1568:	71 95       	neg	r23
		datablocks--;
    156a:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    156c:	41 11       	cpse	r20, r1
    156e:	f1 cf       	rjmp	.-30     	; 0x1552 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1570:	49 2f       	mov	r20, r25
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	9a 01       	movw	r18, r20
    1576:	63 e0       	ldi	r22, 0x03	; 3
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	6a 95       	dec	r22
    157e:	e1 f7       	brne	.-8      	; 0x1578 <NHPwriteChecksum+0x60>
    1580:	20 6c       	ori	r18, 0xC0	; 192
    1582:	3f 6f       	ori	r19, 0xFF	; 255
    1584:	30 81       	ld	r19, Z
    1586:	32 2b       	or	r19, r18
    1588:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    158a:	e4 0f       	add	r30, r20
    158c:	f5 1f       	adc	r31, r21
    158e:	31 97       	sbiw	r30, 0x01	; 1
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	8f 73       	andi	r24, 0x3F	; 63
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    1598:	89 2f       	mov	r24, r25
    159a:	08 95       	ret

0000159c <EVENT_CDC_Device_ControLineStateChanged>:
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    159c:	fc 01       	movw	r30, r24
    159e:	20 89       	ldd	r18, Z+16	; 0x10

	if (CurrentDTRState){
    15a0:	20 ff       	sbrs	r18, 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    15a4:	5f 98       	cbi	0x0b, 7	; 11
    15a6:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    15a8:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    15aa:	8b b1       	in	r24, 0x0b	; 11
    15ac:	80 63       	ori	r24, 0x30	; 48
    15ae:	8b b9       	out	0x0b, r24	; 11
    15b0:	08 95       	ret

000015b2 <SerialInitHID>:
	//if (!ram.isp.pmode)
	//clearHIDReports();
}

// change Serial baud to 115200 for HID
void SerialInitHID(void){
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    15b6:	80 e1       	ldi	r24, 0x10	; 16
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	90 93 cd 00 	sts	0x00CD, r25
    15be:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    15c2:	ca ec       	ldi	r28, 0xCA	; 202
    15c4:	d0 e0       	ldi	r29, 0x00	; 0
    15c6:	96 e0       	ldi	r25, 0x06	; 6
    15c8:	98 83       	st	Y, r25
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    15ca:	a8 ec       	ldi	r26, 0xC8	; 200
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	8c 93       	st	X, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    15d2:	e9 ec       	ldi	r30, 0xC9	; 201
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	28 e1       	ldi	r18, 0x18	; 24
    15d8:	20 83       	st	Z, r18

				DDRD  |= (1 << 3);
    15da:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    15dc:	5a 9a       	sbi	0x0b, 2	; 11
	Serial_Init(115200, true);

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	// Added for correct Serial connection at baud 115200 <--
	// TODO PD3 ??
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    15de:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    15e0:	10 82       	st	Z, r1
	UCSR1A = 0;
    15e2:	1c 92       	st	X, r1
	UCSR1C = 0;
    15e4:	18 82       	st	Y, r1

	// these are values for baud 115200. i just read them manual from change
	// its needed to start with baud 115200 on powerup
	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10)); //C: 0x06
    15e6:	98 83       	st	Y, r25
	UCSR1A = (1 << U2X1); //A: 0x02
    15e8:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1)); //B: 0x98
    15ea:	88 e9       	ldi	r24, 0x98	; 152
    15ec:	80 83       	st	Z, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    15ee:	5b 98       	cbi	0x0b, 3	; 11
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1600:	e1 50       	subi	r30, 0x01	; 1
    1602:	e2 30       	cpi	r30, 0x02	; 2
    1604:	28 f4       	brcc	.+10     	; 0x1610 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	ec 5c       	subi	r30, 0xCC	; 204
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	10 81       	ld	r17, Z
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    1610:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    1612:	88 8d       	ldd	r24, Y+24	; 0x18
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	09 f4       	brne	.+2      	; 0x161a <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
    1618:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
    161a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    161c:	87 30       	cpi	r24, 0x07	; 7
    161e:	31 f0       	breq	.+12     	; 0x162c <EVENT_CDC_Device_LineEncodingChanged+0x36>
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	31 f0       	breq	.+12     	; 0x1630 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
    1624:	86 30       	cpi	r24, 0x06	; 6
    1626:	29 f4       	brne	.+10     	; 0x1632 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    1628:	12 60       	ori	r17, 0x02	; 2
		break;
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    162c:	14 60       	ori	r17, 0x04	; 4
		break;
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    1630:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
    1632:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
    1634:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
    1638:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
    163c:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    1640:	2c 89       	ldd	r18, Y+20	; 0x14
    1642:	3d 89       	ldd	r19, Y+21	; 0x15
    1644:	4e 89       	ldd	r20, Y+22	; 0x16
    1646:	5f 89       	ldd	r21, Y+23	; 0x17
    1648:	21 15       	cp	r18, r1
    164a:	81 ee       	ldi	r24, 0xE1	; 225
    164c:	38 07       	cpc	r19, r24
    164e:	41 05       	cpc	r20, r1
    1650:	51 05       	cpc	r21, r1
    1652:	79 f0       	breq	.+30     	; 0x1672 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1654:	ca 01       	movw	r24, r20
    1656:	b9 01       	movw	r22, r18
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	60 58       	subi	r22, 0x80	; 128
    1662:	7b 47       	sbci	r23, 0x7B	; 123
    1664:	81 4e       	sbci	r24, 0xE1	; 225
    1666:	9f 4f       	sbci	r25, 0xFF	; 255
    1668:	0e 94 cd 13 	call	0x279a	; 0x279a <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    166c:	21 50       	subi	r18, 0x01	; 1
    166e:	31 09       	sbc	r19, r1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <EVENT_CDC_Device_LineEncodingChanged+0x80>
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	30 93 cd 00 	sts	0x00CD, r19
    167a:	20 93 cc 00 	sts	0x00CC, r18
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
    167e:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1682:	8c 89       	ldd	r24, Y+20	; 0x14
    1684:	9d 89       	ldd	r25, Y+21	; 0x15
    1686:	ae 89       	ldd	r26, Y+22	; 0x16
    1688:	bf 89       	ldd	r27, Y+23	; 0x17
    168a:	81 15       	cp	r24, r1
    168c:	91 4e       	sbci	r25, 0xE1	; 225
    168e:	a1 05       	cpc	r26, r1
    1690:	b1 05       	cpc	r27, r1
    1692:	11 f4       	brne	.+4      	; 0x1698 <EVENT_CDC_Device_LineEncodingChanged+0xa2>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <EVENT_CDC_Device_LineEncodingChanged+0xa4>
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    169e:	88 e9       	ldi	r24, 0x98	; 152
    16a0:	80 93 c9 00 	sts	0x00C9, r24
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    16a4:	5b 98       	cbi	0x0b, 3	; 11

	// configure Serial with HID baud to work after reprogramming
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == AVRISP_BAUD){
    16a6:	8c 89       	ldd	r24, Y+20	; 0x14
    16a8:	9d 89       	ldd	r25, Y+21	; 0x15
    16aa:	ae 89       	ldd	r26, Y+22	; 0x16
    16ac:	bf 89       	ldd	r27, Y+23	; 0x17
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	a1 05       	cpc	r26, r1
    16b2:	b1 05       	cpc	r27, r1
    16b4:	61 f4       	brne	.+24     	; 0x16ce <EVENT_CDC_Device_LineEncodingChanged+0xd8>
		SerialInitHID();
    16b6:	7d df       	rcall	.-262    	; 0x15b2 <SerialInitHID>
    16b8:	e6 e3       	ldi	r30, 0x36	; 54
	}

	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
    16ba:	f1 e0       	ldi	r31, 0x01	; 1
    16bc:	8f b7       	in	r24, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16be:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16c0:	11 82       	std	Z+1, r1	; 0x01

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
    16c2:	10 82       	st	Z, r1
    16c4:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Index = 0;
    16c6:	13 82       	std	Z+3, r1	; 0x03
		Buffer->Size = 0;
    16c8:	14 82       	std	Z+4, r1	; 0x04
		Buffer->Count = 0;
    16ca:	8f bf       	out	0x3f, r24	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16cc:	52 da       	rcall	.-2908   	; 0xb72 <avrispReset>
		// disable the buffer until pmode has started
		LRingBuffer_DisableBuffer(&ram.USARTtoUSB_Buffer);

		avrispReset();
    16ce:	80 91 3e 01 	lds	r24, 0x013E
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
    16d2:	88 23       	and	r24, r24
    16d4:	21 f0       	breq	.+8      	; 0x16de <EVENT_CDC_Device_LineEncodingChanged+0xe8>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
		//TODO pmode break to get out of this loop
		end_pmode();
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16da:	1f 91       	pop	r17
    16dc:	15 cb       	rjmp	.-2518   	; 0xd08 <end_pmode>
    16de:	df 91       	pop	r29
	}

	// end pmode if needed and setup Serial + HID again (on errors)
	if (ram.isp.pmode)
		//TODO pmode break to get out of this loop
		end_pmode();
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
	// clear HID reports if chip gets restarted
	else
	clearHIDReports();
}
    16e4:	6e c9       	rjmp	.-3364   	; 0x9c2 <clearHIDReports>

000016e6 <Serial_SendData>:
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}

void Serial_SendData(const void* Buffer,
    16e6:	68 0f       	add	r22, r24
    16e8:	79 1f       	adc	r23, r25
                     uint16_t Length)
{
	while (Length--)
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <Serial_SendData+0x18>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    16ec:	fc 01       	movw	r30, r24
    16ee:	21 91       	ld	r18, Z+
    16f0:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    16f2:	30 91 c8 00 	lds	r19, 0x00C8
    16f6:	35 ff       	sbrs	r19, 5
    16f8:	fc cf       	rjmp	.-8      	; 0x16f2 <Serial_SendData+0xc>
				UDR1 = DataByte;
    16fa:	20 93 ce 00 	sts	0x00CE, r18
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	while (Length--)
    16fe:	86 17       	cp	r24, r22
    1700:	97 07       	cpc	r25, r23
    1702:	a1 f7       	brne	.-24     	; 0x16ec <Serial_SendData+0x6>
	  Serial_SendByte(*((uint8_t*)Buffer++));
}
    1704:	08 95       	ret

00001706 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	7c 01       	movw	r14, r24
    171a:	8b 01       	movw	r16, r22
    171c:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    171e:	d7 d1       	rcall	.+942    	; 0x1ace <Endpoint_WaitUntilReady>
    1720:	b8 2e       	mov	r11, r24
    1722:	81 11       	cpse	r24, r1
    1724:	32 c0       	rjmp	.+100    	; 0x178a <Endpoint_Write_Stream_LE+0x84>
    1726:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1728:	31 f0       	breq	.+12     	; 0x1736 <Endpoint_Write_Stream_LE+0x30>
    172a:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    172c:	39 81       	ldd	r19, Y+1	; 0x01
    172e:	02 1b       	sub	r16, r18
    1730:	13 0b       	sbc	r17, r19
    1732:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1734:	f3 1e       	adc	r15, r19
    1736:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1738:	d1 2c       	mov	r13, r1
    173a:	22 c0       	rjmp	.+68     	; 0x1780 <Endpoint_Write_Stream_LE+0x7a>
    173c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1740:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1742:	14 c0       	rjmp	.+40     	; 0x176c <Endpoint_Write_Stream_LE+0x66>
    1744:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1748:	8e 77       	andi	r24, 0x7E	; 126
    174a:	80 93 e8 00 	sts	0x00E8, r24
    174e:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1750:	49 f0       	breq	.+18     	; 0x1764 <Endpoint_Write_Stream_LE+0x5e>
    1752:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1754:	99 81       	ldd	r25, Y+1	; 0x01
    1756:	8c 0d       	add	r24, r12
    1758:	9d 1d       	adc	r25, r13
    175a:	99 83       	std	Y+1, r25	; 0x01
    175c:	88 83       	st	Y, r24
    175e:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1760:	b2 2e       	mov	r11, r18
    1762:	13 c0       	rjmp	.+38     	; 0x178a <Endpoint_Write_Stream_LE+0x84>
    1764:	b4 d1       	rcall	.+872    	; 0x1ace <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1766:	88 23       	and	r24, r24
    1768:	59 f0       	breq	.+22     	; 0x1780 <Endpoint_Write_Stream_LE+0x7a>
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <Endpoint_Write_Stream_LE+0x82>
    176c:	f7 01       	movw	r30, r14
    176e:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1770:	7f 01       	movw	r14, r30
    1772:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1776:	01 50       	subi	r16, 0x01	; 1
    1778:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    177a:	ff ef       	ldi	r31, 0xFF	; 255
    177c:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    177e:	df 0a       	sbc	r13, r31
    1780:	01 15       	cp	r16, r1
    1782:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1784:	d9 f6       	brne	.-74     	; 0x173c <Endpoint_Write_Stream_LE+0x36>
    1786:	01 c0       	rjmp	.+2      	; 0x178a <Endpoint_Write_Stream_LE+0x84>
    1788:	b8 2e       	mov	r11, r24
    178a:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    178c:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	08 95       	ret

000017a0 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    17a0:	20 91 51 02 	lds	r18, 0x0251
    17a4:	30 91 52 02 	lds	r19, 0x0252
    17a8:	26 17       	cp	r18, r22
    17aa:	37 07       	cpc	r19, r23
    17ac:	48 f0       	brcs	.+18     	; 0x17c0 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    17ae:	61 15       	cp	r22, r1
    17b0:	71 05       	cpc	r23, r1
    17b2:	39 f4       	brne	.+14     	; 0x17c2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17b4:	20 91 e8 00 	lds	r18, 0x00E8
    17b8:	2e 77       	andi	r18, 0x7E	; 126
    17ba:	20 93 e8 00 	sts	0x00E8, r18
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17c0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17c2:	9c 01       	movw	r18, r24
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	34 c0       	rjmp	.+104    	; 0x1830 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17c8:	90 91 4a 02 	lds	r25, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17cc:	99 23       	and	r25, r25
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0x32>
    17d0:	43 c0       	rjmp	.+134    	; 0x1858 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17d2:	95 30       	cpi	r25, 0x05	; 5
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <Endpoint_Write_Control_Stream_LE+0x38>
    17d6:	42 c0       	rjmp	.+132    	; 0x185c <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17d8:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17dc:	93 fd       	sbrc	r25, 3
    17de:	3a c0       	rjmp	.+116    	; 0x1854 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17e0:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    17e4:	92 fd       	sbrc	r25, 2
    17e6:	30 c0       	rjmp	.+96     	; 0x1848 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17e8:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    17ec:	90 ff       	sbrs	r25, 0
    17ee:	20 c0       	rjmp	.+64     	; 0x1830 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    17f0:	80 91 f2 00 	lds	r24, 0x00F2
    17f4:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17f6:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17f8:	82 1b       	sub	r24, r18
    17fa:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17fe:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1800:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1804:	61 50       	subi	r22, 0x01	; 1
    1806:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1808:	9f 01       	movw	r18, r30
    180a:	28 0f       	add	r18, r24
    180c:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    180e:	61 15       	cp	r22, r1
    1810:	71 05       	cpc	r23, r1
    1812:	19 f0       	breq	.+6      	; 0x181a <Endpoint_Write_Control_Stream_LE+0x7a>
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	31 05       	cpc	r19, r1
    1818:	90 f3       	brcs	.-28     	; 0x17fe <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	28 30       	cpi	r18, 0x08	; 8
    181e:	31 05       	cpc	r19, r1
    1820:	09 f0       	breq	.+2      	; 0x1824 <Endpoint_Write_Control_Stream_LE+0x84>
    1822:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1824:	90 91 e8 00 	lds	r25, 0x00E8
    1828:	9e 77       	andi	r25, 0x7E	; 126
    182a:	90 93 e8 00 	sts	0x00E8, r25
    182e:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1830:	61 15       	cp	r22, r1
    1832:	71 05       	cpc	r23, r1
    1834:	49 f6       	brne	.-110    	; 0x17c8 <Endpoint_Write_Control_Stream_LE+0x28>
    1836:	81 11       	cpse	r24, r1
    1838:	c7 cf       	rjmp	.-114    	; 0x17c8 <Endpoint_Write_Control_Stream_LE+0x28>
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    183c:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1840:	88 23       	and	r24, r24
    1842:	51 f0       	breq	.+20     	; 0x1858 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1844:	85 30       	cpi	r24, 0x05	; 5
    1846:	51 f0       	breq	.+20     	; 0x185c <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1848:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    184c:	82 ff       	sbrs	r24, 2
    184e:	f6 cf       	rjmp	.-20     	; 0x183c <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    185c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    185e:	08 95       	ret

00001860 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	29 f4       	brne	.+10     	; 0x1870 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1866:	20 91 e8 00 	lds	r18, 0x00E8
    186a:	2b 77       	andi	r18, 0x7B	; 123
    186c:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1870:	9c 01       	movw	r18, r24
    1872:	21 c0       	rjmp	.+66     	; 0x18b6 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1874:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1878:	88 23       	and	r24, r24
    187a:	81 f1       	breq	.+96     	; 0x18dc <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	41 f1       	breq	.+80     	; 0x18d0 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1880:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1884:	83 fd       	sbrc	r24, 3
    1886:	26 c0       	rjmp	.+76     	; 0x18d4 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1888:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    188c:	82 ff       	sbrs	r24, 2
    188e:	f2 cf       	rjmp	.-28     	; 0x1874 <Endpoint_Read_Control_Stream_LE+0x14>
    1890:	f9 01       	movw	r30, r18
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1894:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1898:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    189a:	9f 01       	movw	r18, r30
				Length--;
    189c:	61 50       	subi	r22, 0x01	; 1
    189e:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    18a0:	29 f0       	breq	.+10     	; 0x18ac <Endpoint_Read_Control_Stream_LE+0x4c>
    18a2:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    18a4:	80 91 f2 00 	lds	r24, 0x00F2
    18a8:	81 11       	cpse	r24, r1
    18aa:	f4 cf       	rjmp	.-24     	; 0x1894 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18ac:	80 91 e8 00 	lds	r24, 0x00E8
    18b0:	8b 77       	andi	r24, 0x7B	; 123
    18b2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    18b6:	61 15       	cp	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	e1 f6       	brne	.-72     	; 0x1874 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18bc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    18c0:	80 fd       	sbrc	r24, 0
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18c4:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18c8:	88 23       	and	r24, r24
    18ca:	41 f0       	breq	.+16     	; 0x18dc <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18cc:	85 30       	cpi	r24, 0x05	; 5
    18ce:	b1 f7       	brne	.-20     	; 0x18bc <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18dc:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18de:	08 95       	ret

000018e0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18e0:	20 91 51 02 	lds	r18, 0x0251
    18e4:	30 91 52 02 	lds	r19, 0x0252
    18e8:	26 17       	cp	r18, r22
    18ea:	37 07       	cpc	r19, r23
    18ec:	48 f0       	brcs	.+18     	; 0x1900 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	39 f4       	brne	.+14     	; 0x1902 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18f4:	20 91 e8 00 	lds	r18, 0x00E8
    18f8:	2e 77       	andi	r18, 0x7E	; 126
    18fa:	20 93 e8 00 	sts	0x00E8, r18
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1900:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1902:	9c 01       	movw	r18, r24
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	35 c0       	rjmp	.+106    	; 0x1972 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1908:	90 91 4a 02 	lds	r25, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    190c:	99 23       	and	r25, r25
    190e:	09 f4       	brne	.+2      	; 0x1912 <Endpoint_Write_Control_PStream_LE+0x32>
    1910:	44 c0       	rjmp	.+136    	; 0x199a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1912:	95 30       	cpi	r25, 0x05	; 5
    1914:	09 f4       	brne	.+2      	; 0x1918 <Endpoint_Write_Control_PStream_LE+0x38>
    1916:	43 c0       	rjmp	.+134    	; 0x199e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1918:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    191c:	93 fd       	sbrc	r25, 3
    191e:	3b c0       	rjmp	.+118    	; 0x1996 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1920:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1924:	92 fd       	sbrc	r25, 2
    1926:	31 c0       	rjmp	.+98     	; 0x198a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1928:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    192c:	90 ff       	sbrs	r25, 0
    192e:	21 c0       	rjmp	.+66     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1930:	80 91 f2 00 	lds	r24, 0x00F2
    1934:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1936:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1938:	82 1b       	sub	r24, r18
    193a:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    193c:	06 c0       	rjmp	.+12     	; 0x194a <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    193e:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1940:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1944:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1946:	61 50       	subi	r22, 0x01	; 1
    1948:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    194a:	9c 01       	movw	r18, r24
    194c:	2e 0f       	add	r18, r30
    194e:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1950:	61 15       	cp	r22, r1
    1952:	71 05       	cpc	r23, r1
    1954:	19 f0       	breq	.+6      	; 0x195c <Endpoint_Write_Control_PStream_LE+0x7c>
    1956:	28 30       	cpi	r18, 0x08	; 8
    1958:	31 05       	cpc	r19, r1
    195a:	88 f3       	brcs	.-30     	; 0x193e <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	28 30       	cpi	r18, 0x08	; 8
    1960:	31 05       	cpc	r19, r1
    1962:	09 f0       	breq	.+2      	; 0x1966 <Endpoint_Write_Control_PStream_LE+0x86>
    1964:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1966:	90 91 e8 00 	lds	r25, 0x00E8
    196a:	9e 77       	andi	r25, 0x7E	; 126
    196c:	90 93 e8 00 	sts	0x00E8, r25
    1970:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1972:	61 15       	cp	r22, r1
    1974:	71 05       	cpc	r23, r1
    1976:	41 f6       	brne	.-112    	; 0x1908 <Endpoint_Write_Control_PStream_LE+0x28>
    1978:	81 11       	cpse	r24, r1
    197a:	c6 cf       	rjmp	.-116    	; 0x1908 <Endpoint_Write_Control_PStream_LE+0x28>
    197c:	06 c0       	rjmp	.+12     	; 0x198a <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    197e:	80 91 4a 02 	lds	r24, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1982:	88 23       	and	r24, r24
    1984:	51 f0       	breq	.+20     	; 0x199a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1986:	85 30       	cpi	r24, 0x05	; 5
    1988:	51 f0       	breq	.+20     	; 0x199e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    198a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    198e:	82 ff       	sbrs	r24, 2
    1990:	f6 cf       	rjmp	.-20     	; 0x197e <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    199e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19a0:	08 95       	ret

000019a2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19a2:	98 2f       	mov	r25, r24
    19a4:	2c c0       	rjmp	.+88     	; 0x19fe <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19a6:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19aa:	98 17       	cp	r25, r24
    19ac:	39 f0       	breq	.+14     	; 0x19bc <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19ae:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19b2:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    19b6:	50 91 f0 00 	lds	r21, 0x00F0
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    19bc:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    19be:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    19c0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    19c2:	21 fd       	sbrc	r18, 1
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19c6:	9f 5f       	subi	r25, 0xFF	; 255
    19c8:	1a c0       	rjmp	.+52     	; 0x19fe <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    19ca:	30 91 eb 00 	lds	r19, 0x00EB
    19ce:	3e 7f       	andi	r19, 0xFE	; 254
    19d0:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    19d4:	30 91 ed 00 	lds	r19, 0x00ED
    19d8:	3d 7f       	andi	r19, 0xFD	; 253
    19da:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    19de:	30 91 eb 00 	lds	r19, 0x00EB
    19e2:	31 60       	ori	r19, 0x01	; 1
    19e4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    19e8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    19ec:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    19f0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19f4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19f8:	27 fd       	sbrc	r18, 7
    19fa:	e5 cf       	rjmp	.-54     	; 0x19c6 <Endpoint_ConfigureEndpoint_Prv+0x24>
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19fe:	95 30       	cpi	r25, 0x05	; 5
    1a00:	90 f2       	brcs	.-92     	; 0x19a6 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a02:	8f 70       	andi	r24, 0x0F	; 15
    1a04:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a0e:	08 95       	ret

00001a10 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	06 2f       	mov	r16, r22
    1a1a:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1a1c:	10 e0       	ldi	r17, 0x00	; 0
    1a1e:	2e c0       	rjmp	.+92     	; 0x1a7c <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    1a20:	98 81       	ld	r25, Y
    1a22:	91 11       	cpse	r25, r1
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a26:	1f 5f       	subi	r17, 0xFF	; 255
    1a28:	25 96       	adiw	r28, 0x05	; 5
    1a2a:	28 c0       	rjmp	.+80     	; 0x1a7c <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a30:	fa 81       	ldd	r31, Y+2	; 0x02
    1a32:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1a34:	89 2f       	mov	r24, r25
    1a36:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1a38:	85 30       	cpi	r24, 0x05	; 5
    1a3a:	10 f0       	brcs	.+4      	; 0x1a40 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	21 c0       	rjmp	.+66     	; 0x1a82 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	10 f0       	brcs	.+4      	; 0x1a48 <Endpoint_ConfigureEndpointTable+0x38>
    1a44:	56 e0       	ldi	r21, 0x06	; 6
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <Endpoint_ConfigureEndpointTable+0x3a>
    1a48:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1a4a:	28 e0       	ldi	r18, 0x08	; 8
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a52:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a58:	2e 17       	cp	r18, r30
    1a5a:	3f 07       	cpc	r19, r31
    1a5c:	d0 f3       	brcs	.-12     	; 0x1a52 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1a5e:	42 95       	swap	r20
    1a60:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a62:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1a64:	99 1f       	adc	r25, r25
    1a66:	99 27       	eor	r25, r25
    1a68:	99 1f       	adc	r25, r25
    1a6a:	62 95       	swap	r22
    1a6c:	66 0f       	add	r22, r22
    1a6e:	66 0f       	add	r22, r22
    1a70:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a72:	69 2b       	or	r22, r25
    1a74:	96 df       	rcall	.-212    	; 0x19a2 <Endpoint_ConfigureEndpoint_Prv>
    1a76:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a78:	d6 cf       	rjmp	.-84     	; 0x1a26 <Endpoint_ConfigureEndpointTable+0x16>
    1a7a:	e0 cf       	rjmp	.-64     	; 0x1a3c <Endpoint_ConfigureEndpointTable+0x2c>
    1a7c:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a7e:	d0 cf       	rjmp	.-96     	; 0x1a20 <Endpoint_ConfigureEndpointTable+0x10>
    1a80:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1a82:	df 91       	pop	r29
}
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	08 95       	ret

00001a8c <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1a8c:	80 91 4b 02 	lds	r24, 0x024B
    1a90:	87 fd       	sbrc	r24, 7
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a94:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a98:	80 ff       	sbrs	r24, 0
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <Endpoint_ClearStatusStage+0x2c>
    1a9c:	12 c0       	rjmp	.+36     	; 0x1ac2 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a9e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1aa2:	82 fd       	sbrc	r24, 2
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1aa6:	80 91 4a 02 	lds	r24, 0x024A
    1aaa:	81 11       	cpse	r24, r1
    1aac:	f8 cf       	rjmp	.-16     	; 0x1a9e <Endpoint_ClearStatusStage+0x12>
    1aae:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ab0:	80 91 e8 00 	lds	r24, 0x00E8
    1ab4:	8b 77       	andi	r24, 0x7B	; 123
    1ab6:	08 c0       	rjmp	.+16     	; 0x1ac8 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ab8:	80 91 4a 02 	lds	r24, 0x024A
    1abc:	81 11       	cpse	r24, r1
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <Endpoint_ClearStatusStage+0x8>
    1ac0:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ac2:	80 91 e8 00 	lds	r24, 0x00E8
    1ac6:	8e 77       	andi	r24, 0x7E	; 126
    1ac8:	80 93 e8 00 	sts	0x00E8, r24
    1acc:	08 95       	ret

00001ace <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ace:	80 91 e4 00 	lds	r24, 0x00E4
    1ad2:	90 91 e5 00 	lds	r25, 0x00E5
    1ad6:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ad8:	20 91 ec 00 	lds	r18, 0x00EC
    1adc:	20 fd       	sbrc	r18, 0
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <Endpoint_WaitUntilReady+0x50>
    1ae0:	23 c0       	rjmp	.+70     	; 0x1b28 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ae2:	20 91 4a 02 	lds	r18, 0x024A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ae6:	22 23       	and	r18, r18
    1ae8:	91 f0       	breq	.+36     	; 0x1b0e <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aea:	25 30       	cpi	r18, 0x05	; 5
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aee:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1af2:	25 fd       	sbrc	r18, 5
    1af4:	10 c0       	rjmp	.+32     	; 0x1b16 <Endpoint_WaitUntilReady+0x48>
    1af6:	20 91 e4 00 	lds	r18, 0x00E4
    1afa:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1afe:	28 17       	cp	r18, r24
    1b00:	39 07       	cpc	r19, r25
    1b02:	51 f3       	breq	.-44     	; 0x1ad8 <Endpoint_WaitUntilReady+0xa>
    1b04:	41 50       	subi	r20, 0x01	; 1
    1b06:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b08:	39 f7       	brne	.-50     	; 0x1ad8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b1e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b22:	20 ff       	sbrs	r18, 0
    1b24:	de cf       	rjmp	.-68     	; 0x1ae2 <Endpoint_WaitUntilReady+0x14>
    1b26:	f9 cf       	rjmp	.-14     	; 0x1b1a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b28:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b2c:	22 ff       	sbrs	r18, 2
    1b2e:	d9 cf       	rjmp	.-78     	; 0x1ae2 <Endpoint_WaitUntilReady+0x14>
    1b30:	f4 cf       	rjmp	.-24     	; 0x1b1a <Endpoint_WaitUntilReady+0x4c>

00001b32 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b32:	41 d0       	rcall	.+130    	; 0x1bb6 <USB_INT_DisableAllInterrupts>
    1b34:	43 d0       	rcall	.+134    	; 0x1bbc <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b36:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b3a:	8f 77       	andi	r24, 0x7F	; 127
    1b3c:	80 93 d8 00 	sts	0x00D8, r24
    1b40:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1b44:	80 68       	ori	r24, 0x80	; 128
    1b46:	80 93 d8 00 	sts	0x00D8, r24
    1b4a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b4e:	8f 7d       	andi	r24, 0xDF	; 223
    1b50:	80 93 d8 00 	sts	0x00D8, r24
    1b54:	84 e0       	ldi	r24, 0x04	; 4
    1b56:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b58:	86 e0       	ldi	r24, 0x06	; 6
    1b5a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b5c:	09 b4       	in	r0, 0x29	; 41
    1b5e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b60:	fd cf       	rjmp	.-6      	; 0x1b5c <USB_ResetInterface+0x2a>
    1b62:	10 92 4a 02 	sts	0x024A, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b66:	10 92 46 02 	sts	0x0246, r1
	USB_Device_ConfigurationNumber  = 0;
    1b6a:	10 92 48 02 	sts	0x0248, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b6e:	10 92 47 02 	sts	0x0247, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b72:	42 e0       	ldi	r20, 0x02	; 2
    1b74:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	14 df       	rcall	.-472    	; 0x19a2 <Endpoint_ConfigureEndpoint_Prv>
    1b7a:	80 91 e1 00 	lds	r24, 0x00E1
    1b7e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b80:	80 93 e1 00 	sts	0x00E1, r24
    1b84:	80 91 e2 00 	lds	r24, 0x00E2
    1b88:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b8a:	80 93 e2 00 	sts	0x00E2, r24
    1b8e:	80 91 e2 00 	lds	r24, 0x00E2
    1b92:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b94:	80 93 e2 00 	sts	0x00E2, r24
    1b98:	80 91 e0 00 	lds	r24, 0x00E0
    1b9c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b9e:	80 93 e0 00 	sts	0x00E0, r24
    1ba2:	08 95       	ret

00001ba4 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1ba4:	e3 e6       	ldi	r30, 0x63	; 99
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8e 7f       	andi	r24, 0xFE	; 254
    1bac:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 93 49 02 	sts	0x0249, r24

	USB_ResetInterface();
    1bb4:	be cf       	rjmp	.-132    	; 0x1b32 <USB_ResetInterface>

00001bb6 <USB_INT_DisableAllInterrupts>:
    1bb6:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bba:	08 95       	ret

00001bbc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1bbc:	10 92 e1 00 	sts	0x00E1, r1
    1bc0:	08 95       	ret

00001bc2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1be4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1be8:	82 ff       	sbrs	r24, 2
    1bea:	0b c0       	rjmp	.+22     	; 0x1c02 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1bec:	80 91 e2 00 	lds	r24, 0x00E2
    1bf0:	82 ff       	sbrs	r24, 2
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bf4:	80 91 e1 00 	lds	r24, 0x00E1
    1bf8:	8b 7f       	andi	r24, 0xFB	; 251
    1bfa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1bfe:	0e 94 bd 03 	call	0x77a	; 0x77a <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c02:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c06:	80 ff       	sbrs	r24, 0
    1c08:	18 c0       	rjmp	.+48     	; 0x1c3a <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c0a:	80 91 e2 00 	lds	r24, 0x00E2
    1c0e:	80 ff       	sbrs	r24, 0
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c12:	80 91 e2 00 	lds	r24, 0x00E2
    1c16:	8e 7f       	andi	r24, 0xFE	; 254
    1c18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c1c:	80 91 e2 00 	lds	r24, 0x00E2
    1c20:	80 61       	ori	r24, 0x10	; 16
    1c22:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c26:	80 91 d8 00 	lds	r24, 0x00D8
    1c2a:	80 62       	ori	r24, 0x20	; 32
    1c2c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c30:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1c32:	10 92 4a 02 	sts	0x024A, r1
		EVENT_USB_Device_Disconnect();
    1c36:	0e 94 65 03 	call	0x6ca	; 0x6ca <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c3a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c3e:	84 ff       	sbrs	r24, 4
    1c40:	30 c0       	rjmp	.+96     	; 0x1ca2 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c42:	80 91 e2 00 	lds	r24, 0x00E2
    1c46:	84 ff       	sbrs	r24, 4
    1c48:	2c c0       	rjmp	.+88     	; 0x1ca2 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c4e:	86 e0       	ldi	r24, 0x06	; 6
    1c50:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c52:	09 b4       	in	r0, 0x29	; 41
    1c54:	00 fe       	sbrs	r0, 0
    1c56:	fd cf       	rjmp	.-6      	; 0x1c52 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c58:	80 91 d8 00 	lds	r24, 0x00D8
    1c5c:	8f 7d       	andi	r24, 0xDF	; 223
    1c5e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c62:	80 91 e1 00 	lds	r24, 0x00E1
    1c66:	8f 7e       	andi	r24, 0xEF	; 239
    1c68:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c6c:	80 91 e2 00 	lds	r24, 0x00E2
    1c70:	8f 7e       	andi	r24, 0xEF	; 239
    1c72:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c76:	80 91 e2 00 	lds	r24, 0x00E2
    1c7a:	81 60       	ori	r24, 0x01	; 1
    1c7c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c80:	80 91 46 02 	lds	r24, 0x0246
    1c84:	88 23       	and	r24, r24
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	07 c0       	rjmp	.+14     	; 0x1c9a <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c8c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c90:	87 ff       	sbrs	r24, 7
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <__vector_11+0xd6>
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <__vector_11+0xd8>
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	80 93 4a 02 	sts	0x024A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1c9e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ca2:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ca6:	83 ff       	sbrs	r24, 3
    1ca8:	27 c0       	rjmp	.+78     	; 0x1cf8 <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1caa:	80 91 e2 00 	lds	r24, 0x00E2
    1cae:	83 ff       	sbrs	r24, 3
    1cb0:	23 c0       	rjmp	.+70     	; 0x1cf8 <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1cb2:	80 91 e1 00 	lds	r24, 0x00E1
    1cb6:	87 7f       	andi	r24, 0xF7	; 247
    1cb8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	80 93 4a 02 	sts	0x024A, r24
		USB_Device_ConfigurationNumber = 0;
    1cc2:	10 92 46 02 	sts	0x0246, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cc6:	80 91 e1 00 	lds	r24, 0x00E1
    1cca:	8e 7f       	andi	r24, 0xFE	; 254
    1ccc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cd0:	80 91 e2 00 	lds	r24, 0x00E2
    1cd4:	8e 7f       	andi	r24, 0xFE	; 254
    1cd6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cda:	80 91 e2 00 	lds	r24, 0x00E2
    1cde:	80 61       	ori	r24, 0x10	; 16
    1ce0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ce4:	42 e0       	ldi	r20, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	5b de       	rcall	.-842    	; 0x19a2 <Endpoint_ConfigureEndpoint_Prv>
    1cec:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cf0:	88 60       	ori	r24, 0x08	; 8
    1cf2:	80 93 f0 00 	sts	0x00F0, r24
    1cf6:	b8 d1       	rcall	.+880    	; 0x2068 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cfc:	bf 91       	pop	r27
    1cfe:	af 91       	pop	r26
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	7f 91       	pop	r23
    1d06:	6f 91       	pop	r22
    1d08:	5f 91       	pop	r21
    1d0a:	4f 91       	pop	r20
    1d0c:	3f 91       	pop	r19
    1d0e:	2f 91       	pop	r18
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	cf 93       	push	r28
    1d3a:	ef 93       	push	r30
    1d3c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d3e:	80 91 e9 00 	lds	r24, 0x00E9
    1d42:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d44:	90 91 ec 00 	lds	r25, 0x00EC
    1d48:	90 ff       	sbrs	r25, 0
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <__vector_12+0x36>
    1d4c:	90 e8       	ldi	r25, 0x80	; 128
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <__vector_12+0x38>
    1d50:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d52:	c9 2f       	mov	r28, r25
    1d54:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d56:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d5a:	80 91 f0 00 	lds	r24, 0x00F0
    1d5e:	87 7f       	andi	r24, 0xF7	; 247
    1d60:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1d64:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1d66:	1c d0       	rcall	.+56     	; 0x1da0 <USB_Device_ProcessControlRequest>
    1d68:	10 92 e9 00 	sts	0x00E9, r1
    1d6c:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d70:	88 60       	ori	r24, 0x08	; 8
    1d72:	80 93 f0 00 	sts	0x00F0, r24
    1d76:	cf 70       	andi	r28, 0x0F	; 15
    1d78:	c0 93 e9 00 	sts	0x00E9, r28
    1d7c:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d7e:	ef 91       	pop	r30
    1d80:	cf 91       	pop	r28
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <USB_Device_ProcessControlRequest>:
    1da0:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	ac 97       	sbiw	r28, 0x2c	; 44
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1db6:	eb e4       	ldi	r30, 0x4B	; 75
    1db8:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1dba:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1dbe:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1dc0:	22 e0       	ldi	r18, 0x02	; 2
    1dc2:	e3 35       	cpi	r30, 0x53	; 83
    1dc4:	f2 07       	cpc	r31, r18
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1dc8:	0e 94 b5 03 	call	0x76a	; 0x76a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dcc:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1dd0:	83 ff       	sbrs	r24, 3
    1dd2:	32 c1       	rjmp	.+612    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1dd4:	80 91 4b 02 	lds	r24, 0x024B

		switch (USB_ControlRequest.bRequest)
    1dd8:	90 91 4c 02 	lds	r25, 0x024C
    1ddc:	95 30       	cpi	r25, 0x05	; 5
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <USB_Device_ProcessControlRequest+0x42>
    1de0:	87 c0       	rjmp	.+270    	; 0x1ef0 <USB_Device_ProcessControlRequest+0x150>
    1de2:	38 f4       	brcc	.+14     	; 0x1df2 <USB_Device_ProcessControlRequest+0x52>
    1de4:	91 30       	cpi	r25, 0x01	; 1
    1de6:	b1 f1       	breq	.+108    	; 0x1e54 <USB_Device_ProcessControlRequest+0xb4>
    1de8:	70 f0       	brcs	.+28     	; 0x1e06 <USB_Device_ProcessControlRequest+0x66>
    1dea:	93 30       	cpi	r25, 0x03	; 3
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <USB_Device_ProcessControlRequest+0x50>
    1dee:	24 c1       	rjmp	.+584    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1df0:	31 c0       	rjmp	.+98     	; 0x1e54 <USB_Device_ProcessControlRequest+0xb4>
    1df2:	98 30       	cpi	r25, 0x08	; 8
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <USB_Device_ProcessControlRequest+0x58>
    1df6:	f4 c0       	rjmp	.+488    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x240>
    1df8:	99 30       	cpi	r25, 0x09	; 9
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <USB_Device_ProcessControlRequest+0x5e>
    1dfc:	00 c1       	rjmp	.+512    	; 0x1ffe <USB_Device_ProcessControlRequest+0x25e>
    1dfe:	96 30       	cpi	r25, 0x06	; 6
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <USB_Device_ProcessControlRequest+0x64>
    1e02:	1a c1       	rjmp	.+564    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1e04:	9b c0       	rjmp	.+310    	; 0x1f3c <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e06:	80 38       	cpi	r24, 0x80	; 128
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <USB_Device_ProcessControlRequest+0x72>
    1e0a:	82 38       	cpi	r24, 0x82	; 130
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <USB_Device_ProcessControlRequest+0x70>
    1e0e:	14 c1       	rjmp	.+552    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e12:	80 91 47 02 	lds	r24, 0x0247
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e16:	90 91 48 02 	lds	r25, 0x0248
    1e1a:	99 23       	and	r25, r25
    1e1c:	89 f0       	breq	.+34     	; 0x1e40 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e1e:	82 60       	ori	r24, 0x02	; 2
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e22:	80 91 4f 02 	lds	r24, 0x024F
    1e26:	90 91 50 02 	lds	r25, 0x0250
    1e2a:	8f 70       	andi	r24, 0x0F	; 15
    1e2c:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e2e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e32:	80 91 eb 00 	lds	r24, 0x00EB
    1e36:	85 fb       	bst	r24, 5
    1e38:	88 27       	eor	r24, r24
    1e3a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e3c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e40:	90 91 e8 00 	lds	r25, 0x00E8
    1e44:	97 7f       	andi	r25, 0xF7	; 247
    1e46:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e4a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e4e:	10 92 f1 00 	sts	0x00F1, r1
    1e52:	d1 c0       	rjmp	.+418    	; 0x1ff6 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e54:	88 23       	and	r24, r24
    1e56:	19 f0       	breq	.+6      	; 0x1e5e <USB_Device_ProcessControlRequest+0xbe>
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <USB_Device_ProcessControlRequest+0xbe>
    1e5c:	ed c0       	rjmp	.+474    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e5e:	8f 71       	andi	r24, 0x1F	; 31
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <USB_Device_ProcessControlRequest+0xca>
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <USB_Device_ProcessControlRequest+0xc8>
    1e66:	e8 c0       	rjmp	.+464    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1e68:	0b c0       	rjmp	.+22     	; 0x1e80 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e6a:	80 91 4d 02 	lds	r24, 0x024D
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <USB_Device_ProcessControlRequest+0xd4>
    1e72:	e2 c0       	rjmp	.+452    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e74:	93 30       	cpi	r25, 0x03	; 3
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <USB_Device_ProcessControlRequest+0xda>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	80 93 48 02 	sts	0x0248, r24
    1e7e:	2f c0       	rjmp	.+94     	; 0x1ede <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e80:	80 91 4d 02 	lds	r24, 0x024D
    1e84:	81 11       	cpse	r24, r1
    1e86:	2b c0       	rjmp	.+86     	; 0x1ede <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e88:	80 91 4f 02 	lds	r24, 0x024F
    1e8c:	90 91 50 02 	lds	r25, 0x0250
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <USB_Device_ProcessControlRequest+0xfa>
    1e98:	cf c0       	rjmp	.+414    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e9a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e9e:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1ea2:	20 ff       	sbrs	r18, 0
    1ea4:	1c c0       	rjmp	.+56     	; 0x1ede <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ea6:	20 91 4c 02 	lds	r18, 0x024C
    1eaa:	23 30       	cpi	r18, 0x03	; 3
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1eae:	80 91 eb 00 	lds	r24, 0x00EB
    1eb2:	80 62       	ori	r24, 0x20	; 32
    1eb4:	12 c0       	rjmp	.+36     	; 0x1eda <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1eb6:	90 91 eb 00 	lds	r25, 0x00EB
    1eba:	90 61       	ori	r25, 0x10	; 16
    1ebc:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ec0:	21 e0       	ldi	r18, 0x01	; 1
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <USB_Device_ProcessControlRequest+0x128>
    1ec6:	22 0f       	add	r18, r18
    1ec8:	8a 95       	dec	r24
    1eca:	ea f7       	brpl	.-6      	; 0x1ec6 <USB_Device_ProcessControlRequest+0x126>
    1ecc:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1ed0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ed4:	80 91 eb 00 	lds	r24, 0x00EB
    1ed8:	88 60       	ori	r24, 0x08	; 8
    1eda:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ede:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8
    1ee6:	87 7f       	andi	r24, 0xF7	; 247
    1ee8:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1eec:	cf dd       	rcall	.-1122   	; 0x1a8c <Endpoint_ClearStatusStage>
    1eee:	a4 c0       	rjmp	.+328    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1ef0:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ef2:	a2 c0       	rjmp	.+324    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1ef4:	80 91 4d 02 	lds	r24, 0x024D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ef8:	90 91 4e 02 	lds	r25, 0x024E
    1efc:	8f 77       	andi	r24, 0x7F	; 127
    1efe:	99 27       	eor	r25, r25
    1f00:	18 2f       	mov	r17, r24
    1f02:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f06:	90 78       	andi	r25, 0x80	; 128
    1f08:	98 2b       	or	r25, r24
    1f0a:	90 93 e3 00 	sts	0x00E3, r25
    1f0e:	80 91 e8 00 	lds	r24, 0x00E8
    1f12:	87 7f       	andi	r24, 0xF7	; 247
    1f14:	80 93 e8 00 	sts	0x00E8, r24
    1f18:	b9 dd       	rcall	.-1166   	; 0x1a8c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f1a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f1e:	80 ff       	sbrs	r24, 0
    1f20:	fc cf       	rjmp	.-8      	; 0x1f1a <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1f22:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f26:	80 68       	ori	r24, 0x80	; 128
    1f28:	80 93 e3 00 	sts	0x00E3, r24
    1f2c:	11 23       	and	r17, r17
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <USB_Device_ProcessControlRequest+0x196>
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	80 93 4a 02 	sts	0x024A, r24
    1f3a:	7e c0       	rjmp	.+252    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1f3c:	80 58       	subi	r24, 0x80	; 128
    1f3e:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <USB_Device_ProcessControlRequest+0x1a4>
    1f42:	7a c0       	rjmp	.+244    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1f44:	80 91 4d 02 	lds	r24, 0x024D
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f48:	90 91 4e 02 	lds	r25, 0x024E
    1f4c:	8c 3d       	cpi	r24, 0xDC	; 220
    1f4e:	23 e0       	ldi	r18, 0x03	; 3
    1f50:	92 07       	cpc	r25, r18
    1f52:	71 f5       	brne	.+92     	; 0x1fb0 <USB_Device_ProcessControlRequest+0x210>
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f58:	8a e2       	ldi	r24, 0x2A	; 42
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f5c:	4f b7       	in	r20, 0x3f	; 63
    1f5e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f60:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f62:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f68:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f6a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	50 93 57 00 	sts	0x0057, r21
    1f72:	e4 91       	lpm	r30, Z+
    1f74:	20 ff       	sbrs	r18, 0
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1f78:	e2 95       	swap	r30
    1f7a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1f7c:	3f 5f       	subi	r19, 0xFF	; 255
    1f7e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f80:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	ea 30       	cpi	r30, 0x0A	; 10
    1f86:	10 f0       	brcs	.+4      	; 0x1f8c <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f88:	c7 96       	adiw	r24, 0x37	; 55
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <USB_Device_ProcessControlRequest+0x1ee>
    1f8c:	c0 96       	adiw	r24, 0x30	; 48
    1f8e:	8d 93       	st	X+, r24
    1f90:	9d 93       	st	X+, r25
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f96:	49 f7       	brne	.-46     	; 0x1f6a <USB_Device_ProcessControlRequest+0x1ca>
    1f98:	4f bf       	out	0x3f, r20	; 63
    1f9a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	80 93 e8 00 	sts	0x00E8, r24
    1fa4:	6a e2       	ldi	r22, 0x2A	; 42
    1fa6:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	f9 db       	rcall	.-2062   	; 0x17a0 <Endpoint_Write_Control_Stream_LE>
    1fae:	12 c0       	rjmp	.+36     	; 0x1fd4 <USB_Device_ProcessControlRequest+0x234>
    1fb0:	ae 01       	movw	r20, r28
    1fb2:	45 5d       	subi	r20, 0xD5	; 213
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fb6:	60 91 4f 02 	lds	r22, 0x024F
    1fba:	0e 94 c9 03 	call	0x792	; 0x792 <CALLBACK_USB_GetDescriptor>
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	d9 f1       	breq	.+118    	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1fc2:	20 91 e8 00 	lds	r18, 0x00E8
    1fc6:	27 7f       	andi	r18, 0xF7	; 247
    1fc8:	20 93 e8 00 	sts	0x00E8, r18
    1fcc:	bc 01       	movw	r22, r24
    1fce:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fd2:	86 dc       	rcall	.-1780   	; 0x18e0 <Endpoint_Write_Control_PStream_LE>
    1fd4:	80 91 e8 00 	lds	r24, 0x00E8
    1fd8:	8b 77       	andi	r24, 0x7B	; 123
    1fda:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fde:	2c c0       	rjmp	.+88     	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1fe0:	80 38       	cpi	r24, 0x80	; 128
    1fe2:	51 f5       	brne	.+84     	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    1fe4:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1fe8:	87 7f       	andi	r24, 0xF7	; 247
    1fea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fee:	80 91 46 02 	lds	r24, 0x0246
    1ff2:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1ff6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ffa:	8e 77       	andi	r24, 0x7E	; 126
    1ffc:	75 cf       	rjmp	.-278    	; 0x1ee8 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ffe:	81 11       	cpse	r24, r1
    2000:	1b c0       	rjmp	.+54     	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
    2002:	90 91 4d 02 	lds	r25, 0x024D
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2006:	92 30       	cpi	r25, 0x02	; 2
    2008:	b8 f4       	brcc	.+46     	; 0x2038 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    200a:	80 91 e8 00 	lds	r24, 0x00E8
    200e:	87 7f       	andi	r24, 0xF7	; 247
    2010:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2014:	90 93 46 02 	sts	0x0246, r25
    2018:	39 dd       	rcall	.-1422   	; 0x1a8c <Endpoint_ClearStatusStage>
    201a:	80 91 46 02 	lds	r24, 0x0246
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    201e:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    2020:	04 c0       	rjmp	.+8      	; 0x202a <USB_Device_ProcessControlRequest+0x28a>
    2022:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    2026:	87 ff       	sbrs	r24, 7
    2028:	02 c0       	rjmp	.+4      	; 0x202e <USB_Device_ProcessControlRequest+0x28e>
    202a:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <USB_Device_ProcessControlRequest+0x290>
    202e:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2030:	80 93 4a 02 	sts	0x024A, r24
    2034:	0e 94 66 03 	call	0x6cc	; 0x6cc <EVENT_USB_Device_ConfigurationChanged>
    2038:	80 91 e8 00 	lds	r24, 0x00E8
    203c:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    203e:	0a c0       	rjmp	.+20     	; 0x2054 <USB_Device_ProcessControlRequest+0x2b4>
    2040:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2044:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2046:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    204a:	80 91 eb 00 	lds	r24, 0x00EB
    204e:	80 62       	ori	r24, 0x20	; 32
    2050:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2054:	ac 96       	adiw	r28, 0x2c	; 44
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	08 95       	ret

00002068 <USB_Event_Stub>:
    2068:	08 95       	ret

0000206a <USB_USBTask>:
    206a:	cf 93       	push	r28
    206c:	80 91 4a 02 	lds	r24, 0x024A
    2070:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2072:	a9 f0       	breq	.+42     	; 0x209e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2074:	80 91 e9 00 	lds	r24, 0x00E9
    2078:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    207a:	90 91 ec 00 	lds	r25, 0x00EC
    207e:	90 ff       	sbrs	r25, 0
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <USB_USBTask+0x1c>
    2082:	90 e8       	ldi	r25, 0x80	; 128
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <USB_USBTask+0x1e>
    2086:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2088:	c9 2f       	mov	r28, r25
    208a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    208c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2090:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2094:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2096:	84 de       	rcall	.-760    	; 0x1da0 <USB_Device_ProcessControlRequest>
    2098:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    209a:	c0 93 e9 00 	sts	0x00E9, r28
    209e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    20a0:	08 95       	ret

000020a2 <CDC_Device_ConfigureEndpoints>:
    20a2:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    20a4:	df 93       	push	r29
    20a6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    20a8:	40 96       	adiw	r24, 0x10	; 16
    20aa:	fc 01       	movw	r30, r24
    20ac:	8b e0       	ldi	r24, 0x0B	; 11
    20ae:	df 01       	movw	r26, r30
    20b0:	1d 92       	st	X+, r1
    20b2:	8a 95       	dec	r24
    20b4:	e9 f7       	brne	.-6      	; 0x20b0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    20ba:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	ce 01       	movw	r24, r28
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	a4 dc       	rcall	.-1720   	; 0x1a10 <Endpoint_ConfigureEndpointTable>
    20c8:	88 23       	and	r24, r24
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <CDC_Device_ConfigureEndpoints+0x42>
    20cc:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    20ce:	ce 01       	movw	r24, r28
    20d0:	06 96       	adiw	r24, 0x06	; 6
    20d2:	9e dc       	rcall	.-1732   	; 0x1a10 <Endpoint_ConfigureEndpointTable>
    20d4:	88 23       	and	r24, r24
    20d6:	31 f0       	breq	.+12     	; 0x20e4 <CDC_Device_ConfigureEndpoints+0x42>
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    20dc:	0b 96       	adiw	r24, 0x0b	; 11
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
	  return false;

	return true;
}
    20e2:	96 cc       	rjmp	.-1748   	; 0x1a10 <Endpoint_ConfigureEndpointTable>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
	  return false;

	return true;
}
    20ea:	08 95       	ret

000020ec <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    20ec:	cf 93       	push	r28
    20ee:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20f0:	20 91 4a 02 	lds	r18, 0x024A
    20f4:	24 30       	cpi	r18, 0x04	; 4
    20f6:	f1 f4       	brne	.+60     	; 0x2134 <CDC_Device_SendByte+0x48>
    20f8:	fc 01       	movw	r30, r24
    20fa:	44 89       	ldd	r20, Z+20	; 0x14
    20fc:	55 89       	ldd	r21, Z+21	; 0x15
    20fe:	66 89       	ldd	r22, Z+22	; 0x16
    2100:	77 89       	ldd	r23, Z+23	; 0x17
    2102:	45 2b       	or	r20, r21
    2104:	46 2b       	or	r20, r22
    2106:	47 2b       	or	r20, r23
    2108:	a9 f0       	breq	.+42     	; 0x2134 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    210a:	81 81       	ldd	r24, Z+1	; 0x01
    210c:	8f 70       	andi	r24, 0x0F	; 15
    210e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2112:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    2116:	85 ff       	sbrs	r24, 5
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    211a:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	0a c0       	rjmp	.+20     	; 0x2136 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2122:	80 91 e8 00 	lds	r24, 0x00E8
    2126:	8e 77       	andi	r24, 0x7E	; 126
    2128:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    212c:	d0 dc       	rcall	.-1632   	; 0x1ace <Endpoint_WaitUntilReady>
    212e:	88 23       	and	r24, r24
    2130:	a1 f3       	breq	.-24     	; 0x211a <CDC_Device_SendByte+0x2e>
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <CDC_Device_SendByte+0x4a>
    2134:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2136:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2138:	08 95       	ret

0000213a <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    213a:	20 91 4a 02 	lds	r18, 0x024A
    213e:	24 30       	cpi	r18, 0x04	; 4
    2140:	29 f5       	brne	.+74     	; 0x218c <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2142:	fc 01       	movw	r30, r24
    2144:	44 89       	ldd	r20, Z+20	; 0x14
    2146:	55 89       	ldd	r21, Z+21	; 0x15
    2148:	66 89       	ldd	r22, Z+22	; 0x16
    214a:	77 89       	ldd	r23, Z+23	; 0x17
    214c:	45 2b       	or	r20, r21
    214e:	46 2b       	or	r20, r22
    2150:	47 2b       	or	r20, r23
    2152:	e1 f0       	breq	.+56     	; 0x218c <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2154:	81 81       	ldd	r24, Z+1	; 0x01
    2156:	8f 70       	andi	r24, 0x0F	; 15
    2158:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    215c:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    2160:	81 11       	cpse	r24, r1
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2168:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    216c:	80 91 e8 00 	lds	r24, 0x00E8
    2170:	8e 77       	andi	r24, 0x7E	; 126
    2172:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2176:	95 fd       	sbrc	r25, 5
    2178:	f5 cf       	rjmp	.-22     	; 0x2164 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    217a:	a9 dc       	rcall	.-1710   	; 0x1ace <Endpoint_WaitUntilReady>
    217c:	81 11       	cpse	r24, r1
    217e:	07 c0       	rjmp	.+14     	; 0x218e <CDC_Device_Flush+0x54>
    2180:	90 91 e8 00 	lds	r25, 0x00E8
    2184:	9e 77       	andi	r25, 0x7E	; 126
    2186:	90 93 e8 00 	sts	0x00E8, r25
    218a:	08 95       	ret
    218c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    218e:	08 95       	ret

00002190 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    2190:	20 91 4a 02 	lds	r18, 0x024A
    2194:	24 30       	cpi	r18, 0x04	; 4
    2196:	89 f4       	brne	.+34     	; 0x21ba <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2198:	fc 01       	movw	r30, r24
    219a:	44 89       	ldd	r20, Z+20	; 0x14
    219c:	55 89       	ldd	r21, Z+21	; 0x15
    219e:	66 89       	ldd	r22, Z+22	; 0x16
    21a0:	77 89       	ldd	r23, Z+23	; 0x17
    21a2:	45 2b       	or	r20, r21
    21a4:	46 2b       	or	r20, r22
    21a6:	47 2b       	or	r20, r23
    21a8:	41 f0       	breq	.+16     	; 0x21ba <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21aa:	21 81       	ldd	r18, Z+1	; 0x01
    21ac:	2f 70       	andi	r18, 0x0F	; 15
    21ae:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21b2:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    21b6:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    21b8:	c0 cf       	rjmp	.-128    	; 0x213a <CDC_Device_Flush>
    21ba:	08 95       	ret

000021bc <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21bc:	20 91 4a 02 	lds	r18, 0x024A
    21c0:	24 30       	cpi	r18, 0x04	; 4
    21c2:	19 f0       	breq	.+6      	; 0x21ca <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    21c4:	2f ef       	ldi	r18, 0xFF	; 255
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	24 c0       	rjmp	.+72     	; 0x2212 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    21ca:	fc 01       	movw	r30, r24
    21cc:	44 89       	ldd	r20, Z+20	; 0x14
    21ce:	55 89       	ldd	r21, Z+21	; 0x15
    21d0:	66 89       	ldd	r22, Z+22	; 0x16
    21d2:	77 89       	ldd	r23, Z+23	; 0x17
    21d4:	45 2b       	or	r20, r21
    21d6:	46 2b       	or	r20, r22
    21d8:	47 2b       	or	r20, r23
    21da:	a1 f3       	breq	.-24     	; 0x21c4 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21dc:	86 81       	ldd	r24, Z+6	; 0x06
    21de:	8f 70       	andi	r24, 0x0F	; 15
    21e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21e4:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    21e8:	82 ff       	sbrs	r24, 2
    21ea:	ec cf       	rjmp	.-40     	; 0x21c4 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21ec:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    21f0:	88 23       	and	r24, r24
    21f2:	21 f0       	breq	.+8      	; 0x21fc <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    21f4:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    21fc:	2f ef       	ldi	r18, 0xFF	; 255
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2200:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2204:	81 11       	cpse	r24, r1
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2208:	80 91 e8 00 	lds	r24, 0x00E8
    220c:	8b 77       	andi	r24, 0x7B	; 123
    220e:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    2212:	c9 01       	movw	r24, r18
    2214:	08 95       	ret

00002216 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2216:	08 95       	ret

00002218 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    221e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2222:	83 ff       	sbrs	r24, 3
    2224:	a7 c0       	rjmp	.+334    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2226:	88 81       	ld	r24, Y
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	20 91 4f 02 	lds	r18, 0x024F
    222e:	30 91 50 02 	lds	r19, 0x0250
    2232:	28 17       	cp	r18, r24
    2234:	39 07       	cpc	r19, r25
    2236:	09 f0       	breq	.+2      	; 0x223a <CDC_Device_ProcessControlRequest+0x22>
    2238:	9d c0       	rjmp	.+314    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    223a:	80 91 4c 02 	lds	r24, 0x024C
    223e:	81 32       	cpi	r24, 0x21	; 33
    2240:	61 f0       	breq	.+24     	; 0x225a <CDC_Device_ProcessControlRequest+0x42>
    2242:	20 f4       	brcc	.+8      	; 0x224c <CDC_Device_ProcessControlRequest+0x34>
    2244:	80 32       	cpi	r24, 0x20	; 32
    2246:	09 f0       	breq	.+2      	; 0x224a <CDC_Device_ProcessControlRequest+0x32>
    2248:	95 c0       	rjmp	.+298    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    224a:	3d c0       	rjmp	.+122    	; 0x22c6 <CDC_Device_ProcessControlRequest+0xae>
    224c:	82 32       	cpi	r24, 0x22	; 34
    224e:	09 f4       	brne	.+2      	; 0x2252 <CDC_Device_ProcessControlRequest+0x3a>
    2250:	6d c0       	rjmp	.+218    	; 0x232c <CDC_Device_ProcessControlRequest+0x114>
    2252:	83 32       	cpi	r24, 0x23	; 35
    2254:	09 f0       	breq	.+2      	; 0x2258 <CDC_Device_ProcessControlRequest+0x40>
    2256:	8e c0       	rjmp	.+284    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    2258:	7d c0       	rjmp	.+250    	; 0x2354 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    225a:	80 91 4b 02 	lds	r24, 0x024B
    225e:	81 3a       	cpi	r24, 0xA1	; 161
    2260:	09 f0       	breq	.+2      	; 0x2264 <CDC_Device_ProcessControlRequest+0x4c>
    2262:	88 c0       	rjmp	.+272    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2264:	80 91 e8 00 	lds	r24, 0x00E8
    2268:	87 7f       	andi	r24, 0xF7	; 247
    226a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    226e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2272:	80 ff       	sbrs	r24, 0
    2274:	fc cf       	rjmp	.-8      	; 0x226e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2276:	4c 89       	ldd	r20, Y+20	; 0x14
    2278:	5d 89       	ldd	r21, Y+21	; 0x15
    227a:	6e 89       	ldd	r22, Y+22	; 0x16
    227c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    227e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2282:	bb 27       	eor	r27, r27
    2284:	a7 2f       	mov	r26, r23
    2286:	96 2f       	mov	r25, r22
    2288:	85 2f       	mov	r24, r21
    228a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    228e:	cb 01       	movw	r24, r22
    2290:	aa 27       	eor	r26, r26
    2292:	bb 27       	eor	r27, r27
    2294:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2298:	47 2f       	mov	r20, r23
    229a:	55 27       	eor	r21, r21
    229c:	66 27       	eor	r22, r22
    229e:	77 27       	eor	r23, r23
    22a0:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    22a4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22a6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    22aa:	89 8d       	ldd	r24, Y+25	; 0x19
    22ac:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    22b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22b6:	80 91 e8 00 	lds	r24, 0x00E8
    22ba:	8e 77       	andi	r24, 0x7E	; 126
    22bc:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    22c4:	e3 cb       	rjmp	.-2106   	; 0x1a8c <Endpoint_ClearStatusStage>
    22c6:	80 91 4b 02 	lds	r24, 0x024B
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22ca:	81 32       	cpi	r24, 0x21	; 33
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <CDC_Device_ProcessControlRequest+0xb8>
    22ce:	52 c0       	rjmp	.+164    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    22d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22d4:	87 7f       	andi	r24, 0xF7	; 247
    22d6:	80 93 e8 00 	sts	0x00E8, r24
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <CDC_Device_ProcessControlRequest+0xce>
    22dc:	80 91 4a 02 	lds	r24, 0x024A
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    22e0:	88 23       	and	r24, r24
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <CDC_Device_ProcessControlRequest+0xce>
    22e4:	47 c0       	rjmp	.+142    	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    22e6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22ea:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    22ec:	f7 cf       	rjmp	.-18     	; 0x22dc <CDC_Device_ProcessControlRequest+0xc4>
    22ee:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    22f2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    22f6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    22fa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    22fe:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2300:	2d 8b       	std	Y+21, r18	; 0x15
    2302:	9e 8b       	std	Y+22, r25	; 0x16
    2304:	8f 8b       	std	Y+23, r24	; 0x17
    2306:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    230a:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    230c:	80 91 f1 00 	lds	r24, 0x00F1
    2310:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2312:	80 91 f1 00 	lds	r24, 0x00F1
    2316:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2318:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    231c:	8b 77       	andi	r24, 0x7B	; 123
    231e:	80 93 e8 00 	sts	0x00E8, r24
    2322:	b4 db       	rcall	.-2200   	; 0x1a8c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2324:	ce 01       	movw	r24, r28
    2326:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2328:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    232a:	65 c9       	rjmp	.-3382   	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged>
    232c:	80 91 4b 02 	lds	r24, 0x024B
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2330:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2332:	01 f5       	brne	.+64     	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    2334:	80 91 e8 00 	lds	r24, 0x00E8
    2338:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    233a:	80 93 e8 00 	sts	0x00E8, r24
    233e:	a6 db       	rcall	.-2228   	; 0x1a8c <Endpoint_ClearStatusStage>
    2340:	80 91 4d 02 	lds	r24, 0x024D
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2344:	90 91 4e 02 	lds	r25, 0x024E

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2348:	99 8b       	std	Y+17, r25	; 0x11
    234a:	88 8b       	std	Y+16, r24	; 0x10
    234c:	ce 01       	movw	r24, r28
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	24 c9       	rjmp	.-3512   	; 0x159c <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2354:	80 91 4b 02 	lds	r24, 0x024B
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2358:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    235a:	61 f4       	brne	.+24     	; 0x2374 <CDC_Device_ProcessControlRequest+0x15c>
    235c:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2360:	87 7f       	andi	r24, 0xF7	; 247
    2362:	80 93 e8 00 	sts	0x00E8, r24
    2366:	92 db       	rcall	.-2268   	; 0x1a8c <Endpoint_ClearStatusStage>
    2368:	60 91 4d 02 	lds	r22, 0x024D
    236c:	ce 01       	movw	r24, r28
    236e:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2370:	cf 91       	pop	r28
    2372:	51 cf       	rjmp	.-350    	; 0x2216 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    237a:	6f 92       	push	r6
    237c:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    237e:	8f 92       	push	r8
    2380:	9f 92       	push	r9
			}

			break;
	}
}
    2382:	af 92       	push	r10
    2384:	bf 92       	push	r11
    2386:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	00 d0       	rcall	.+0      	; 0x2398 <HID_Device_ProcessControlRequest+0x1e>
    2398:	1f 92       	push	r1
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    23a0:	ad b6       	in	r10, 0x3d	; 61
    23a2:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    23a4:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    23a8:	83 ff       	sbrs	r24, 3
    23aa:	07 c1       	rjmp	.+526    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    23ac:	f7 01       	movw	r30, r14
    23ae:	80 81       	ld	r24, Z
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	20 91 4f 02 	lds	r18, 0x024F
    23b6:	30 91 50 02 	lds	r19, 0x0250
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	09 f0       	breq	.+2      	; 0x23c2 <HID_Device_ProcessControlRequest+0x48>
    23c0:	fc c0       	rjmp	.+504    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    23c2:	80 91 4c 02 	lds	r24, 0x024C
    23c6:	83 30       	cpi	r24, 0x03	; 3
    23c8:	09 f4       	brne	.+2      	; 0x23cc <HID_Device_ProcessControlRequest+0x52>
    23ca:	9e c0       	rjmp	.+316    	; 0x2508 <HID_Device_ProcessControlRequest+0x18e>
    23cc:	30 f4       	brcc	.+12     	; 0x23da <HID_Device_ProcessControlRequest+0x60>
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	71 f0       	breq	.+28     	; 0x23ee <HID_Device_ProcessControlRequest+0x74>
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <HID_Device_ProcessControlRequest+0x5e>
    23d6:	f1 c0       	rjmp	.+482    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    23d8:	d4 c0       	rjmp	.+424    	; 0x2582 <HID_Device_ProcessControlRequest+0x208>
    23da:	8a 30       	cpi	r24, 0x0A	; 10
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <HID_Device_ProcessControlRequest+0x66>
    23de:	b9 c0       	rjmp	.+370    	; 0x2552 <HID_Device_ProcessControlRequest+0x1d8>
    23e0:	8b 30       	cpi	r24, 0x0B	; 11
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <HID_Device_ProcessControlRequest+0x6c>
    23e4:	a2 c0       	rjmp	.+324    	; 0x252a <HID_Device_ProcessControlRequest+0x1b0>
    23e6:	89 30       	cpi	r24, 0x09	; 9
    23e8:	09 f0       	breq	.+2      	; 0x23ec <HID_Device_ProcessControlRequest+0x72>
    23ea:	e7 c0       	rjmp	.+462    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    23ec:	4c c0       	rjmp	.+152    	; 0x2486 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    23ee:	80 91 4b 02 	lds	r24, 0x024B
    23f2:	81 3a       	cpi	r24, 0xA1	; 161
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <HID_Device_ProcessControlRequest+0x7e>
    23f6:	e1 c0       	rjmp	.+450    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    23f8:	8d b6       	in	r8, 0x3d	; 61
    23fa:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    23fc:	1a 82       	std	Y+2, r1	; 0x02
    23fe:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2400:	80 91 4d 02 	lds	r24, 0x024D
    2404:	10 91 4e 02 	lds	r17, 0x024E
    2408:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    240a:	f7 01       	movw	r30, r14
    240c:	40 85       	ldd	r20, Z+8	; 0x08
    240e:	8d b7       	in	r24, 0x3d	; 61
    2410:	9e b7       	in	r25, 0x3e	; 62
    2412:	84 1b       	sub	r24, r20
    2414:	91 09       	sbc	r25, r1
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	9e bf       	out	0x3e, r25	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	8d bf       	out	0x3d, r24	; 61
    2420:	cd b6       	in	r12, 0x3d	; 61
    2422:	de b6       	in	r13, 0x3e	; 62
    2424:	ef ef       	ldi	r30, 0xFF	; 255
    2426:	ce 1a       	sub	r12, r30
    2428:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    242a:	36 01       	movw	r6, r12
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	c6 01       	movw	r24, r12
    2434:	ea d1       	rcall	.+980    	; 0x280a <memset>
    2436:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2438:	41 50       	subi	r20, 0x01	; 1
    243a:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    243c:	0f 5f       	subi	r16, 0xFF	; 255
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	96 01       	movw	r18, r12
    2442:	be 01       	movw	r22, r28
    2444:	6d 5f       	subi	r22, 0xFD	; 253
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	c7 01       	movw	r24, r14
    244a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <CALLBACK_HID_Device_CreateHIDReport>
    244e:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2450:	26 81       	ldd	r18, Z+6	; 0x06
    2452:	37 81       	ldd	r19, Z+7	; 0x07
    2454:	21 15       	cp	r18, r1
    2456:	31 05       	cpc	r19, r1
    2458:	29 f0       	breq	.+10     	; 0x2464 <HID_Device_ProcessControlRequest+0xea>
    245a:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	b6 01       	movw	r22, r12
    2460:	c9 01       	movw	r24, r18
    2462:	ca d1       	rcall	.+916    	; 0x27f8 <memcpy>
    2464:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2468:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    246c:	87 7f       	andi	r24, 0xF7	; 247
    246e:	80 93 e8 00 	sts	0x00E8, r24
    2472:	69 81       	ldd	r22, Y+1	; 0x01
    2474:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2476:	c3 01       	movw	r24, r6
    2478:	93 d9       	rcall	.-3290   	; 0x17a0 <Endpoint_Write_Control_Stream_LE>
    247a:	80 91 e8 00 	lds	r24, 0x00E8
    247e:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2480:	80 93 e8 00 	sts	0x00E8, r24
    2484:	39 c0       	rjmp	.+114    	; 0x24f8 <HID_Device_ProcessControlRequest+0x17e>
    2486:	80 91 4b 02 	lds	r24, 0x024B
    248a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    248c:	09 f0       	breq	.+2      	; 0x2490 <HID_Device_ProcessControlRequest+0x116>
    248e:	95 c0       	rjmp	.+298    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2490:	8d b6       	in	r8, 0x3d	; 61
    2492:	9e b6       	in	r9, 0x3e	; 62
    2494:	00 91 51 02 	lds	r16, 0x0251
    2498:	10 91 52 02 	lds	r17, 0x0252
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    249c:	70 90 4d 02 	lds	r7, 0x024D
    24a0:	60 90 4e 02 	lds	r6, 0x024E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    24a4:	8d b7       	in	r24, 0x3d	; 61
    24a6:	9e b7       	in	r25, 0x3e	; 62
    24a8:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    24aa:	91 0b       	sbc	r25, r17
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	9e bf       	out	0x3e, r25	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	8d bf       	out	0x3d, r24	; 61
    24b6:	cd b6       	in	r12, 0x3d	; 61
    24b8:	de b6       	in	r13, 0x3e	; 62
    24ba:	ef ef       	ldi	r30, 0xFF	; 255
    24bc:	ce 1a       	sub	r12, r30
    24be:	de 0a       	sbc	r13, r30
    24c0:	80 91 e8 00 	lds	r24, 0x00E8
    24c4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24c6:	80 93 e8 00 	sts	0x00E8, r24
    24ca:	b8 01       	movw	r22, r16
    24cc:	c6 01       	movw	r24, r12
    24ce:	c8 d9       	rcall	.-3184   	; 0x1860 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    24d0:	80 91 e8 00 	lds	r24, 0x00E8
    24d4:	8e 77       	andi	r24, 0x7E	; 126
    24d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24da:	21 e0       	ldi	r18, 0x01	; 1
    24dc:	71 10       	cpse	r7, r1
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <HID_Device_ProcessControlRequest+0x168>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	02 1b       	sub	r16, r18
    24e6:	13 0b       	sbc	r17, r19
    24e8:	2c 0d       	add	r18, r12
    24ea:	3d 1d       	adc	r19, r13
    24ec:	46 2d       	mov	r20, r6
    24ee:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    24f0:	67 2d       	mov	r22, r7
    24f2:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    24f4:	0e 94 8d 04 	call	0x91a	; 0x91a <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    24f8:	88 2d       	mov	r24, r8
    24fa:	99 2d       	mov	r25, r9
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	9e bf       	out	0x3e, r25	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	8d bf       	out	0x3d, r24	; 61
    2506:	59 c0       	rjmp	.+178    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2508:	80 91 4b 02 	lds	r24, 0x024B
    250c:	81 3a       	cpi	r24, 0xA1	; 161
    250e:	09 f0       	breq	.+2      	; 0x2512 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2510:	54 c0       	rjmp	.+168    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2512:	80 91 e8 00 	lds	r24, 0x00E8
    2516:	87 7f       	andi	r24, 0xF7	; 247
    2518:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    251c:	80 91 e8 00 	lds	r24, 0x00E8
    2520:	80 ff       	sbrs	r24, 0
    2522:	fc cf       	rjmp	.-8      	; 0x251c <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2524:	f7 01       	movw	r30, r14
    2526:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2528:	40 c0       	rjmp	.+128    	; 0x25aa <HID_Device_ProcessControlRequest+0x230>
    252a:	80 91 4b 02 	lds	r24, 0x024B
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    252e:	81 32       	cpi	r24, 0x21	; 33
    2530:	09 f0       	breq	.+2      	; 0x2534 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2532:	43 c0       	rjmp	.+134    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2534:	80 91 e8 00 	lds	r24, 0x00E8
    2538:	87 7f       	andi	r24, 0xF7	; 247
    253a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    253e:	a6 da       	rcall	.-2740   	; 0x1a8c <Endpoint_ClearStatusStage>
    2540:	90 91 4d 02 	lds	r25, 0x024D
    2544:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2546:	91 11       	cpse	r25, r1
    2548:	01 c0       	rjmp	.+2      	; 0x254c <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	f7 01       	movw	r30, r14
    254e:	81 87       	std	Z+9, r24	; 0x09
    2550:	34 c0       	rjmp	.+104    	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2552:	80 91 4b 02 	lds	r24, 0x024B
    2556:	81 32       	cpi	r24, 0x21	; 33
    2558:	81 f5       	brne	.+96     	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    255a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	80 93 e8 00 	sts	0x00E8, r24
    2564:	93 da       	rcall	.-2778   	; 0x1a8c <Endpoint_ClearStatusStage>
    2566:	80 91 4d 02 	lds	r24, 0x024D
    256a:	90 91 4e 02 	lds	r25, 0x024E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    256e:	88 27       	eor	r24, r24
    2570:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2572:	96 95       	lsr	r25
    2574:	87 95       	ror	r24
    2576:	3a 95       	dec	r19
    2578:	e1 f7       	brne	.-8      	; 0x2572 <HID_Device_ProcessControlRequest+0x1f8>
    257a:	f7 01       	movw	r30, r14
    257c:	95 87       	std	Z+13, r25	; 0x0d
    257e:	84 87       	std	Z+12, r24	; 0x0c
    2580:	1c c0       	rjmp	.+56     	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    2582:	80 91 4b 02 	lds	r24, 0x024B
    2586:	81 3a       	cpi	r24, 0xA1	; 161
    2588:	c1 f4       	brne	.+48     	; 0x25ba <HID_Device_ProcessControlRequest+0x240>
    258a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    258e:	87 7f       	andi	r24, 0xF7	; 247
    2590:	80 93 e8 00 	sts	0x00E8, r24
    2594:	80 91 e8 00 	lds	r24, 0x00E8
    2598:	80 ff       	sbrs	r24, 0
    259a:	fc cf       	rjmp	.-8      	; 0x2594 <HID_Device_ProcessControlRequest+0x21a>
    259c:	f7 01       	movw	r30, r14
    259e:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    25a0:	95 85       	ldd	r25, Z+13	; 0x0d
    25a2:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    25a4:	87 95       	ror	r24
    25a6:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    25a8:	87 95       	ror	r24
    25aa:	80 93 f1 00 	sts	0x00F1, r24
    25ae:	80 91 e8 00 	lds	r24, 0x00E8
    25b2:	8e 77       	andi	r24, 0x7E	; 126
    25b4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    25b8:	69 da       	rcall	.-2862   	; 0x1a8c <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	be be       	out	0x3e, r11	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
			}

			break;
	}
}
    25c8:	0f 90       	pop	r0
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	08 95       	ret

000025e8 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    25e8:	9c 01       	movw	r18, r24
    25ea:	27 5f       	subi	r18, 0xF7	; 247
    25ec:	3f 4f       	sbci	r19, 0xFF	; 255
    25ee:	f9 01       	movw	r30, r18
    25f0:	27 e0       	ldi	r18, 0x07	; 7
    25f2:	df 01       	movw	r26, r30
    25f4:	1d 92       	st	X+, r1
    25f6:	2a 95       	dec	r18
    25f8:	e9 f7       	brne	.-6      	; 0x25f4 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	fc 01       	movw	r30, r24
    25fe:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    2600:	24 ef       	ldi	r18, 0xF4	; 244
    2602:	31 e0       	ldi	r19, 0x01	; 1
    2604:	35 87       	std	Z+13, r19	; 0x0d
    2606:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2608:	23 e0       	ldi	r18, 0x03	; 3
    260a:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	ff c9       	rjmp	.-3074   	; 0x1a10 <Endpoint_ConfigureEndpointTable>

00002612 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2612:	4f 92       	push	r4
    2614:	5f 92       	push	r5
    2616:	6f 92       	push	r6
    2618:	7f 92       	push	r7
    261a:	8f 92       	push	r8
    261c:	9f 92       	push	r9
    261e:	af 92       	push	r10
    2620:	bf 92       	push	r11
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	00 d0       	rcall	.+0      	; 0x2634 <HID_Device_USBTask+0x22>
    2634:	1f 92       	push	r1
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    263c:	ad b6       	in	r10, 0x3d	; 61
    263e:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2640:	80 91 4a 02 	lds	r24, 0x024A
    2644:	84 30       	cpi	r24, 0x04	; 4
    2646:	09 f0       	breq	.+2      	; 0x264a <HID_Device_USBTask+0x38>
    2648:	8f c0       	rjmp	.+286    	; 0x2768 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    264a:	80 91 e4 00 	lds	r24, 0x00E4
    264e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2652:	f7 01       	movw	r30, r14
    2654:	22 85       	ldd	r18, Z+10	; 0x0a
    2656:	33 85       	ldd	r19, Z+11	; 0x0b
    2658:	28 17       	cp	r18, r24
    265a:	39 07       	cpc	r19, r25
    265c:	09 f4       	brne	.+2      	; 0x2660 <HID_Device_USBTask+0x4e>
    265e:	84 c0       	rjmp	.+264    	; 0x2768 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2660:	81 81       	ldd	r24, Z+1	; 0x01
    2662:	8f 70       	andi	r24, 0x0F	; 15
    2664:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2668:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    266c:	85 ff       	sbrs	r24, 5
    266e:	7c c0       	rjmp	.+248    	; 0x2768 <HID_Device_USBTask+0x156>
    2670:	6d b6       	in	r6, 0x3d	; 61
    2672:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2674:	40 85       	ldd	r20, Z+8	; 0x08
    2676:	8d b7       	in	r24, 0x3d	; 61
    2678:	9e b7       	in	r25, 0x3e	; 62
    267a:	84 1b       	sub	r24, r20
    267c:	91 09       	sbc	r25, r1
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	9e bf       	out	0x3e, r25	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	8d bf       	out	0x3d, r24	; 61
    2688:	cd b6       	in	r12, 0x3d	; 61
    268a:	de b6       	in	r13, 0x3e	; 62
    268c:	ef ef       	ldi	r30, 0xFF	; 255
    268e:	ce 1a       	sub	r12, r30
    2690:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2692:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2694:	1a 82       	std	Y+2, r1	; 0x02
    2696:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2698:	46 01       	movw	r8, r12
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	c6 01       	movw	r24, r12
    26a2:	b3 d0       	rcall	.+358    	; 0x280a <memset>
    26a4:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    26a6:	0f 5f       	subi	r16, 0xFF	; 255
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	96 01       	movw	r18, r12
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	be 01       	movw	r22, r28
    26b0:	6d 5f       	subi	r22, 0xFD	; 253
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	c7 01       	movw	r24, r14
    26b6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <CALLBACK_HID_Device_CreateHIDReport>
    26ba:	58 2e       	mov	r5, r24
    26bc:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    26be:	84 85       	ldd	r24, Z+12	; 0x0c
    26c0:	95 85       	ldd	r25, Z+13	; 0x0d
    26c2:	89 2b       	or	r24, r25
    26c4:	31 f0       	breq	.+12     	; 0x26d2 <HID_Device_USBTask+0xc0>
    26c6:	01 e0       	ldi	r16, 0x01	; 1
    26c8:	10 e0       	ldi	r17, 0x00	; 0
    26ca:	86 85       	ldd	r24, Z+14	; 0x0e
    26cc:	97 85       	ldd	r25, Z+15	; 0x0f
    26ce:	89 2b       	or	r24, r25
    26d0:	11 f0       	breq	.+4      	; 0x26d6 <HID_Device_USBTask+0xc4>
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	10 e0       	ldi	r17, 0x00	; 0
    26d6:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    26d8:	c6 80       	ldd	r12, Z+6	; 0x06
    26da:	d7 80       	ldd	r13, Z+7	; 0x07
    26dc:	c1 14       	cp	r12, r1
    26de:	d1 04       	cpc	r13, r1
    26e0:	89 f0       	breq	.+34     	; 0x2704 <HID_Device_USBTask+0xf2>
    26e2:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    26e4:	5a 81       	ldd	r21, Y+2	; 0x02
    26e6:	b6 01       	movw	r22, r12
    26e8:	c4 01       	movw	r24, r8
    26ea:	79 d0       	rcall	.+242    	; 0x27de <memcmp>
    26ec:	44 24       	eor	r4, r4
    26ee:	43 94       	inc	r4
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <HID_Device_USBTask+0xe4>
    26f4:	41 2c       	mov	r4, r1
    26f6:	f7 01       	movw	r30, r14
    26f8:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	b4 01       	movw	r22, r8
    26fe:	c6 01       	movw	r24, r12
    2700:	7b d0       	rcall	.+246    	; 0x27f8 <memcpy>
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <HID_Device_USBTask+0xf4>
    2704:	41 2c       	mov	r4, r1
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    270a:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    270c:	f9 f0       	breq	.+62     	; 0x274c <HID_Device_USBTask+0x13a>
    270e:	51 10       	cpse	r5, r1
    2710:	04 c0       	rjmp	.+8      	; 0x271a <HID_Device_USBTask+0x108>
    2712:	41 10       	cpse	r4, r1
    2714:	02 c0       	rjmp	.+4      	; 0x271a <HID_Device_USBTask+0x108>
    2716:	00 ff       	sbrs	r16, 0
    2718:	19 c0       	rjmp	.+50     	; 0x274c <HID_Device_USBTask+0x13a>
    271a:	f7 01       	movw	r30, r14
    271c:	84 85       	ldd	r24, Z+12	; 0x0c
    271e:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2720:	97 87       	std	Z+15, r25	; 0x0f
    2722:	86 87       	std	Z+14, r24	; 0x0e
    2724:	81 81       	ldd	r24, Z+1	; 0x01
    2726:	8f 70       	andi	r24, 0x0F	; 15
    2728:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	81 11       	cpse	r24, r1
    2730:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2734:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2736:	7a 81       	ldd	r23, Y+2	; 0x02
    2738:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	c4 01       	movw	r24, r8
    273e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_Write_Stream_LE>
    2742:	80 91 e8 00 	lds	r24, 0x00E8
    2746:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2748:	80 93 e8 00 	sts	0x00E8, r24
    274c:	80 91 e4 00 	lds	r24, 0x00E4
    2750:	90 91 e5 00 	lds	r25, 0x00E5
    2754:	f7 01       	movw	r30, r14
    2756:	93 87       	std	Z+11, r25	; 0x0b
    2758:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    275a:	86 2d       	mov	r24, r6
    275c:	97 2d       	mov	r25, r7
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	9e bf       	out	0x3e, r25	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	8d bf       	out	0x3d, r24	; 61
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	be be       	out	0x3e, r11	; 62
	}
}
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	ad be       	out	0x3d, r10	; 61
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
    2788:	bf 90       	pop	r11
    278a:	af 90       	pop	r10
    278c:	9f 90       	pop	r9
    278e:	8f 90       	pop	r8
    2790:	7f 90       	pop	r7
    2792:	6f 90       	pop	r6
    2794:	5f 90       	pop	r5
    2796:	4f 90       	pop	r4
    2798:	08 95       	ret

0000279a <__udivmodsi4>:
    279a:	a1 e2       	ldi	r26, 0x21	; 33
    279c:	1a 2e       	mov	r1, r26
    279e:	aa 1b       	sub	r26, r26
    27a0:	bb 1b       	sub	r27, r27
    27a2:	fd 01       	movw	r30, r26
    27a4:	0d c0       	rjmp	.+26     	; 0x27c0 <__udivmodsi4_ep>

000027a6 <__udivmodsi4_loop>:
    27a6:	aa 1f       	adc	r26, r26
    27a8:	bb 1f       	adc	r27, r27
    27aa:	ee 1f       	adc	r30, r30
    27ac:	ff 1f       	adc	r31, r31
    27ae:	a2 17       	cp	r26, r18
    27b0:	b3 07       	cpc	r27, r19
    27b2:	e4 07       	cpc	r30, r20
    27b4:	f5 07       	cpc	r31, r21
    27b6:	20 f0       	brcs	.+8      	; 0x27c0 <__udivmodsi4_ep>
    27b8:	a2 1b       	sub	r26, r18
    27ba:	b3 0b       	sbc	r27, r19
    27bc:	e4 0b       	sbc	r30, r20
    27be:	f5 0b       	sbc	r31, r21

000027c0 <__udivmodsi4_ep>:
    27c0:	66 1f       	adc	r22, r22
    27c2:	77 1f       	adc	r23, r23
    27c4:	88 1f       	adc	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	1a 94       	dec	r1
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <__udivmodsi4_loop>
    27cc:	60 95       	com	r22
    27ce:	70 95       	com	r23
    27d0:	80 95       	com	r24
    27d2:	90 95       	com	r25
    27d4:	9b 01       	movw	r18, r22
    27d6:	ac 01       	movw	r20, r24
    27d8:	bd 01       	movw	r22, r26
    27da:	cf 01       	movw	r24, r30
    27dc:	08 95       	ret

000027de <memcmp>:
    27de:	fb 01       	movw	r30, r22
    27e0:	dc 01       	movw	r26, r24
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <memcmp+0xe>
    27e4:	8d 91       	ld	r24, X+
    27e6:	01 90       	ld	r0, Z+
    27e8:	80 19       	sub	r24, r0
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <memcmp+0x16>
    27ec:	41 50       	subi	r20, 0x01	; 1
    27ee:	50 40       	sbci	r21, 0x00	; 0
    27f0:	c8 f7       	brcc	.-14     	; 0x27e4 <memcmp+0x6>
    27f2:	88 1b       	sub	r24, r24
    27f4:	99 0b       	sbc	r25, r25
    27f6:	08 95       	ret

000027f8 <memcpy>:
    27f8:	fb 01       	movw	r30, r22
    27fa:	dc 01       	movw	r26, r24
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <memcpy+0xa>
    27fe:	01 90       	ld	r0, Z+
    2800:	0d 92       	st	X+, r0
    2802:	41 50       	subi	r20, 0x01	; 1
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	d8 f7       	brcc	.-10     	; 0x27fe <memcpy+0x6>
    2808:	08 95       	ret

0000280a <memset>:
    280a:	dc 01       	movw	r26, r24
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <memset+0x6>
    280e:	6d 93       	st	X+, r22
    2810:	41 50       	subi	r20, 0x01	; 1
    2812:	50 40       	sbci	r21, 0x00	; 0
    2814:	e0 f7       	brcc	.-8      	; 0x280e <memset+0x4>
    2816:	08 95       	ret

00002818 <_exit>:
    2818:	f8 94       	cli

0000281a <__stop_program>:
    281a:	ff cf       	rjmp	.-2      	; 0x281a <__stop_program>
