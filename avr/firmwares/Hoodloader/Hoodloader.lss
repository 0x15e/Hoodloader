
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000027a8  0000283c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800136  00800136  00002872  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003f2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000888  00000000  00000000  00003f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e2c8  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ac1  00000000  00000000  00012a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005943  00000000  00000000  0001655e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001538  00000000  00000000  0001bea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000049d5  00000000  00000000  0001d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008813  00000000  00000000  00021db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a88  00000000  00000000  0002a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
	ram.isp.pmode = false;
       0:	73 c1       	rjmp	.+742    	; 0x2e8 <__ctors_end>
       2:	00 00       	nop
	ram.isp._addr = 0; // just to be sure
       4:	8d c1       	rjmp	.+794    	; 0x320 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c1       	rjmp	.+790    	; 0x320 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c1       	rjmp	.+786    	; 0x320 <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	87 c1       	rjmp	.+782    	; 0x320 <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
      14:	85 c1       	rjmp	.+778    	; 0x320 <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	83 c1       	rjmp	.+774    	; 0x320 <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	81 c1       	rjmp	.+770    	; 0x320 <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	7f c1       	rjmp	.+766    	; 0x320 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c1       	rjmp	.+762    	; 0x320 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	7b c1       	rjmp	.+758    	; 0x320 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_12>
      34:	75 c1       	rjmp	.+746    	; 0x320 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c1       	rjmp	.+742    	; 0x320 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	71 c1       	rjmp	.+738    	; 0x320 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	6f c1       	rjmp	.+734    	; 0x320 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	6d c1       	rjmp	.+730    	; 0x320 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	6b c1       	rjmp	.+726    	; 0x320 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c1       	rjmp	.+722    	; 0x320 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	67 c1       	rjmp	.+718    	; 0x320 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	65 c1       	rjmp	.+714    	; 0x320 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	63 c1       	rjmp	.+710    	; 0x320 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	4f c3       	rjmp	.+1694   	; 0x6fc <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	5f c1       	rjmp	.+702    	; 0x320 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	5d c1       	rjmp	.+698    	; 0x320 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c1       	rjmp	.+694    	; 0x320 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	59 c1       	rjmp	.+690    	; 0x320 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	57 c1       	rjmp	.+686    	; 0x320 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 b8 01 07 05 81 03 10 00 01        !....".........

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 0f 09 01 81 02 95 0f     .u...&..........
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff 03 19 00 2a ff 03 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 32 09 33 09 34 09 35 15 00     ...0.1.2.3.4.5..
     21f:	27 ff ff 00 00 75 10 95 06 81 02 c0 05 01 09 39     '....u.........9
     22f:	09 39 15 01 25 08 95 02 75 04 81 02 c0 05 01 09     .9..%...u.......
     23f:	04 a1 01 85 07 05 09 19 01 29 20 15 00 25 01 75     .........) ..%.u
     24f:	01 95 20 81 02 05 01 a1 00 09 30 09 31 09 32 09     .. .......0.1.2.
     25f:	33 09 34 09 35 15 00 27 ff ff 00 00 75 10 95 06     3.4.5..'....u...
     26f:	81 02 c0 09 39 09 39 15 01 25 08 95 02 75 04 81     ....9.9..%...u..
     27f:	02 c0 05 01 09 04 a1 01 85 08 a1 00 05 09 19 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	29 02 15 00 25 01 75 01 95 02 81 02 05 01 09 30     )...%.u........0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	09 31 15 00 26 ff 03 75 0a 95 02 81 02 75 02 95     .1..&..u.....u..

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	01 81 03 c0 c0 05 01 09 04 a1 01 85 09 a1 00 05     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 05     ...)...%.u......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	01 09 30 09 31 15 00 26 ff 03 75 0a 95 02 81 02     ..0.1..&..u.....
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	75 02 95 01 81 03 c0 c0 00                          u........

000002e8 <__ctors_end>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e8:	11 24       	eor	r1, r1
     2ea:	1f be       	out	0x3f, r1	; 63
     2ec:	cf ef       	ldi	r28, 0xFF	; 255
     2ee:	d2 e0       	ldi	r29, 0x02	; 2
				break;
     2f0:	de bf       	out	0x3e, r29	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	cd bf       	out	0x3d, r28	; 61

000002f4 <__do_copy_data>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	e8 ea       	ldi	r30, 0xA8	; 168
     2fc:	f7 e2       	ldi	r31, 0x27	; 39
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
				break;
     300:	05 90       	lpm	r0, Z+

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	0d 92       	st	X+, r0
     304:	a6 33       	cpi	r26, 0x36	; 54
				break;
     306:	b1 07       	cpc	r27, r17

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	d9 f7       	brne	.-10     	; 0x300 <__stack+0x1>

0000030a <__do_clear_bss>:
     30a:	11 e0       	ldi	r17, 0x01	; 1
     30c:	a6 e3       	ldi	r26, 0x36	; 54
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	01 c0       	rjmp	.+2      	; 0x314 <.do_clear_bss_start>

00000312 <.do_clear_bss_loop>:
     312:	1d 92       	st	X+, r1

00000314 <.do_clear_bss_start>:
     314:	ae 3e       	cpi	r26, 0xEE	; 238
				break;
     316:	b1 07       	cpc	r27, r17

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	e1 f7       	brne	.-8      	; 0x312 <.do_clear_bss_loop>
     31a:	71 d0       	rcall	.+226    	; 0x3fe <main>
				break;
     31c:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <_exit>

00000320 <__bad_interrupt>:

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     320:	6f ce       	rjmp	.-802    	; 0x0 <__vectors>

00000322 <LRingBuffer_Remove.constprop.2>:
     322:	e6 e3       	ldi	r30, 0x36	; 54
				break;
     324:	f1 e0       	ldi	r31, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	5f b7       	in	r21, 0x3f	; 63
     328:	f8 94       	cli
     32a:	20 81       	ld	r18, Z

				if (ParserData->UsingReportIDs)
     32c:	31 81       	ldd	r19, Z+1	; 0x01
     32e:	21 15       	cp	r18, r1
     330:	31 05       	cpc	r19, r1
     332:	19 f0       	breq	.+6      	; 0x33a <LRingBuffer_Remove.constprop.2+0x18>
     334:	44 81       	ldd	r20, Z+4	; 0x04
     336:	41 11       	cpse	r20, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	04 c0       	rjmp	.+8      	; 0x342 <LRingBuffer_Remove.constprop.2+0x20>
     33a:	5f bf       	out	0x3f, r21	; 63
     33c:	2f ef       	ldi	r18, 0xFF	; 255
     33e:	3f ef       	ldi	r19, 0xFF	; 255
     340:	11 c0       	rjmp	.+34     	; 0x364 <LRingBuffer_Remove.constprop.2+0x42>
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	84 1b       	sub	r24, r20
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	91 09       	sbc	r25, r1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	97 ff       	sbrs	r25, 7
     34c:	03 c0       	rjmp	.+6      	; 0x354 <LRingBuffer_Remove.constprop.2+0x32>
     34e:	63 81       	ldd	r22, Z+3	; 0x03
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	86 0f       	add	r24, r22
     352:	91 1d       	adc	r25, r1
     354:	d9 01       	movw	r26, r18
     356:	a8 0f       	add	r26, r24
     358:	b9 1f       	adc	r27, r25
     35a:	2c 91       	ld	r18, X
     35c:	41 50       	subi	r20, 0x01	; 1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	44 83       	std	Z+4, r20	; 0x04
     360:	5f bf       	out	0x3f, r21	; 63
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	c9 01       	movw	r24, r18
     366:	08 95       	ret

00000368 <LRingBuffer_Append.constprop.4>:
     368:	e6 e3       	ldi	r30, 0x36	; 54
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	4f b7       	in	r20, 0x3f	; 63
     36e:	f8 94       	cli
     370:	20 81       	ld	r18, Z
     372:	31 81       	ldd	r19, Z+1	; 0x01
     374:	21 15       	cp	r18, r1
     376:	31 05       	cpc	r19, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	09 f4       	brne	.+2      	; 0x37c <LRingBuffer_Append.constprop.4+0x14>
     37a:	1d c0       	rjmp	.+58     	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     37c:	82 81       	ldd	r24, Z+2	; 0x02
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	54 81       	ldd	r21, Z+4	; 0x04
     382:	85 1b       	sub	r24, r21
     384:	91 09       	sbc	r25, r1
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	97 ff       	sbrs	r25, 7
     38a:	03 c0       	rjmp	.+6      	; 0x392 <LRingBuffer_Append.constprop.4+0x2a>
     38c:	53 81       	ldd	r21, Z+3	; 0x03
     38e:	85 0f       	add	r24, r21
     390:	91 1d       	adc	r25, r1
     392:	d9 01       	movw	r26, r18
     394:	a8 0f       	add	r26, r24
     396:	b9 1f       	adc	r27, r25
     398:	6c 93       	st	X, r22
     39a:	84 81       	ldd	r24, Z+4	; 0x04
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	89 13       	cpse	r24, r25
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <LRingBuffer_Append.constprop.4+0x4a>
     3a2:	92 81       	ldd	r25, Z+2	; 0x02
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	91 11       	cpse	r25, r1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <LRingBuffer_Append.constprop.4+0x42>
     3a8:	82 83       	std	Z+2, r24	; 0x02
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	81 50       	subi	r24, 0x01	; 1
     3ae:	82 83       	std	Z+2, r24	; 0x02
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <LRingBuffer_Append.constprop.4+0x4e>
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	4f bf       	out	0x3f, r20	; 63
     3b8:	08 95       	ret

000003ba <SetupHardware>:
     3ba:	84 b7       	in	r24, 0x34	; 52
     3bc:	87 7f       	andi	r24, 0xF7	; 247

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	84 bf       	out	0x34, r24	; 52
     3c0:	88 e1       	ldi	r24, 0x18	; 24
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	80 93 60 00 	sts	0x0060, r24
     3ca:	10 92 60 00 	sts	0x0060, r1
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	53 9a       	sbi	0x0a, 3	; 10
     3d2:	5a 9a       	sbi	0x0b, 2	; 11
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <EVENT_CDC_Device_LineEncodingChanged>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3dc:	10 92 c2 01 	sts	0x01C2, r1
     3e0:	8a b1       	in	r24, 0x0a	; 10
     3e2:	80 63       	ori	r24, 0x30	; 48
     3e4:	8a b9       	out	0x0a, r24	; 10
     3e6:	8b b1       	in	r24, 0x0b	; 11
     3e8:	80 63       	ori	r24, 0x30	; 48
     3ea:	8b b9       	out	0x0b, r24	; 11
     3ec:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <USB_Init>
     3f0:	84 e0       	ldi	r24, 0x04	; 4
     3f2:	85 bd       	out	0x25, r24	; 37
     3f4:	5f 9a       	sbi	0x0b, 7	; 11
     3f6:	57 9a       	sbi	0x0a, 7	; 10
     3f8:	25 98       	cbi	0x04, 5	; 4
				break;
     3fa:	2d 9a       	sbi	0x05, 5	; 5
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	08 95       	ret

000003fe <main>:
     3fe:	e6 e3       	ldi	r30, 0x36	; 54
     400:	f1 e0       	ldi	r31, 0x01	; 1
     402:	2f b7       	in	r18, 0x3f	; 63
     404:	f8 94       	cli
     406:	8b e3       	ldi	r24, 0x3B	; 59
     408:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	91 83       	std	Z+1, r25	; 0x01
     40c:	80 83       	st	Z, r24
     40e:	12 82       	std	Z+2, r1	; 0x02
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	83 83       	std	Z+3, r24	; 0x03
     414:	14 82       	std	Z+4, r1	; 0x04
     416:	2f bf       	out	0x3f, r18	; 63
     418:	10 92 e0 01 	sts	0x01E0, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	85 ed       	ldi	r24, 0xD5	; 213
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	93 d7       	rcall	.+3878   	; 0x1348 <NHPreset>
     422:	80 91 c3 01 	lds	r24, 0x01C3
     426:	80 7f       	andi	r24, 0xF0	; 240

					while (CurrCollectionPath->Parent != NULL)
     428:	80 93 c3 01 	sts	0x01C3, r24
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42c:	10 92 d3 01 	sts	0x01D3, r1
     430:	10 92 d4 01 	sts	0x01D4, r1
     434:	44 d4       	rcall	.+2184   	; 0xcbe <end_pmode>
     436:	c1 df       	rcall	.-126    	; 0x3ba <SetupHardware>
     438:	78 94       	sei
     43a:	83 b1       	in	r24, 0x03	; 3
     43c:	80 72       	andi	r24, 0x20	; 32
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	83 b9       	out	0x03, r24	; 3
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	81 11       	cpse	r24, r1
     442:	01 c0       	rjmp	.+2      	; 0x446 <main+0x48>
     444:	b6 d2       	rcall	.+1388   	; 0x9b2 <clearHIDReports>
     446:	80 e1       	ldi	r24, 0x10	; 16
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 a4 10 	call	0x2148	; 0x2148 <CDC_Device_ReceiveByte>
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	97 fd       	sbrc	r25, 7
     450:	1b c0       	rjmp	.+54     	; 0x488 <main+0x8a>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	40 91 24 01 	lds	r20, 0x0124
     456:	50 91 25 01 	lds	r21, 0x0125
     45a:	60 91 26 01 	lds	r22, 0x0126
     45e:	70 91 27 01 	lds	r23, 0x0127

				if (UsageListSize)
     462:	41 30       	cpi	r20, 0x01	; 1
     464:	51 05       	cpc	r21, r1
     466:	61 05       	cpc	r22, r1
     468:	71 05       	cpc	r23, r1
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	11 f4       	brne	.+4      	; 0x470 <main+0x72>
     46c:	ad d6       	rcall	.+3418   	; 0x11c8 <avrisp>
     46e:	0c c0       	rjmp	.+24     	; 0x488 <main+0x8a>
     470:	5c 98       	cbi	0x0b, 4	; 11
     472:	90 91 c2 01 	lds	r25, 0x01C2
     476:	9c 60       	ori	r25, 0x0C	; 12
     478:	90 93 c2 01 	sts	0x01C2, r25
     47c:	90 91 c8 00 	lds	r25, 0x00C8

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	95 ff       	sbrs	r25, 5
     482:	fc cf       	rjmp	.-8      	; 0x47c <main+0x7e>
					  UsageList[i - 1] = UsageList[i];
     484:	80 93 ce 00 	sts	0x00CE, r24
     488:	80 91 bb 01 	lds	r24, 0x01BB

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	87 fd       	sbrc	r24, 7
     48e:	1b c1       	rjmp	.+566    	; 0x6c6 <main+0x2c8>
     490:	2f b7       	in	r18, 0x3f	; 63
     492:	f8 94       	cli
     494:	80 91 36 01 	lds	r24, 0x0136
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	90 91 37 01 	lds	r25, 0x0137
     49c:	89 2b       	or	r24, r25
     49e:	19 f0       	breq	.+6      	; 0x4a6 <main+0xa8>
     4a0:	80 91 3a 01 	lds	r24, 0x013A
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <main+0xaa>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	2f bf       	out	0x3f, r18	; 63
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <main+0xb8>
     4b0:	a8 99       	sbic	0x15, 0	; 21
     4b2:	88 c0       	rjmp	.+272    	; 0x5c4 <main+0x1c6>
     4b4:	08 c1       	rjmp	.+528    	; 0x6c6 <main+0x2c8>
     4b6:	5d 98       	cbi	0x0b, 5	; 11
     4b8:	20 91 c2 01 	lds	r18, 0x01C2
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4bc:	23 60       	ori	r18, 0x03	; 3
     4be:	20 93 c2 01 	sts	0x01C2, r18
     4c2:	20 91 11 01 	lds	r18, 0x0111
     4c6:	2f 70       	andi	r18, 0x0F	; 15
     4c8:	20 93 e9 00 	sts	0x00E9, r18
     4cc:	20 91 e8 00 	lds	r18, 0x00E8
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	20 ff       	sbrs	r18, 0
     4d2:	ee cf       	rjmp	.-36     	; 0x4b0 <main+0xb2>
     4d4:	80 34       	cpi	r24, 0x40	; 64
     4d6:	91 05       	cpc	r25, r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	10 f0       	brcs	.+4      	; 0x4de <main+0xe0>
     4da:	8f e3       	ldi	r24, 0x3F	; 63
     4dc:	90 e0       	ldi	r25, 0x00	; 0
				break;
     4de:	18 2f       	mov	r17, r24
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	c0 e0       	ldi	r28, 0x00	; 0
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	6c c0       	rjmp	.+216    	; 0x5be <main+0x1c0>
     4e6:	80 91 24 01 	lds	r24, 0x0124
     4ea:	90 91 25 01 	lds	r25, 0x0125
     4ee:	a0 91 26 01 	lds	r26, 0x0126
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	b0 91 27 01 	lds	r27, 0x0127
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	20 91 e0 01 	lds	r18, 0x01E0
     4fa:	22 23       	and	r18, r18
     4fc:	29 f0       	breq	.+10     	; 0x508 <main+0x10a>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	80 91 20 01 	lds	r24, 0x0120
     502:	80 ff       	sbrs	r24, 0
     504:	11 c0       	rjmp	.+34     	; 0x528 <main+0x12a>

					if (UsageListSize)
     506:	1c c0       	rjmp	.+56     	; 0x540 <main+0x142>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	91 05       	cpc	r25, r1
     50c:	a1 05       	cpc	r26, r1
     50e:	b1 05       	cpc	r27, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	28 f0       	brcs	.+10     	; 0x51c <main+0x11e>
     512:	81 15       	cp	r24, r1
     514:	92 4c       	sbci	r25, 0xC2	; 194
     516:	a1 40       	sbci	r26, 0x01	; 1
     518:	b1 05       	cpc	r27, r1
     51a:	89 f7       	brne	.-30     	; 0x4fe <main+0x100>
     51c:	93 b1       	in	r25, 0x03	; 3
     51e:	90 72       	andi	r25, 0x20	; 32
     520:	93 b9       	out	0x03, r25	; 3
     522:	99 23       	and	r25, r25
     524:	61 f3       	breq	.-40     	; 0x4fe <main+0x100>

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	41 c0       	rjmp	.+130    	; 0x5aa <main+0x1ac>
     528:	80 91 e0 01 	lds	r24, 0x01E0
						  UsageList[i - 1] = UsageList[i];
     52c:	88 23       	and	r24, r24
     52e:	41 f0       	breq	.+16     	; 0x540 <main+0x142>
     530:	86 e3       	ldi	r24, 0x36	; 54

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	f6 de       	rcall	.-532    	; 0x322 <LRingBuffer_Remove.constprop.2>
     536:	80 91 e0 01 	lds	r24, 0x01E0
     53a:	81 11       	cpse	r24, r1
     53c:	2d c0       	rjmp	.+90     	; 0x598 <main+0x19a>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	3e c0       	rjmp	.+124    	; 0x5bc <main+0x1be>
     540:	7f b7       	in	r23, 0x3f	; 63
     542:	f8 94       	cli
     544:	20 91 36 01 	lds	r18, 0x0136
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	30 91 37 01 	lds	r19, 0x0137
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	41 f0       	breq	.+16     	; 0x562 <main+0x164>
     552:	40 91 3a 01 	lds	r20, 0x013A
     556:	44 23       	and	r20, r20
     558:	21 f0       	breq	.+8      	; 0x562 <main+0x164>
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	14 16       	cp	r1, r20
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	15 06       	cpc	r1, r21
     560:	24 f0       	brlt	.+8      	; 0x56a <main+0x16c>
     562:	7f bf       	out	0x3f, r23	; 63
     564:	6f ef       	ldi	r22, 0xFF	; 255
     566:	7f ef       	ldi	r23, 0xFF	; 255
     568:	10 c0       	rjmp	.+32     	; 0x58a <main+0x18c>
     56a:	80 91 38 01 	lds	r24, 0x0138
     56e:	90 e0       	ldi	r25, 0x00	; 0
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	84 1b       	sub	r24, r20
     572:	95 0b       	sbc	r25, r21
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	97 ff       	sbrs	r25, 7
     576:	04 c0       	rjmp	.+8      	; 0x580 <main+0x182>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	40 91 39 01 	lds	r20, 0x0139
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	84 0f       	add	r24, r20
     57e:	91 1d       	adc	r25, r1
     580:	f9 01       	movw	r30, r18
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	60 81       	ld	r22, Z
     588:	7f bf       	out	0x3f, r23	; 63
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 3c 10 	call	0x2078	; 0x2078 <CDC_Device_SendByte>
     592:	88 23       	and	r24, r24
     594:	69 f2       	breq	.-102    	; 0x530 <main+0x132>
     596:	8c cf       	rjmp	.-232    	; 0x4b0 <main+0xb2>
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	80 93 e0 01 	sts	0x01E0, r24
     59e:	80 91 c2 01 	lds	r24, 0x01C2

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	80 63       	ori	r24, 0x30	; 48
     5a4:	80 93 c2 01 	sts	0x01C2, r24
     5a8:	09 c0       	rjmp	.+18     	; 0x5bc <main+0x1be>
     5aa:	80 91 c2 01 	lds	r24, 0x01C2
     5ae:	80 63       	ori	r24, 0x30	; 48
     5b0:	80 93 c2 01 	sts	0x01C2, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b4:	86 e3       	ldi	r24, 0x36	; 54
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	b4 de       	rcall	.-664    	; 0x322 <LRingBuffer_Remove.constprop.2>
     5ba:	a4 d2       	rcall	.+1352   	; 0xb04 <checkNHPProtocol>
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	1c 13       	cpse	r17, r28
     5c0:	92 cf       	rjmp	.-220    	; 0x4e6 <main+0xe8>
     5c2:	76 cf       	rjmp	.-276    	; 0x4b0 <main+0xb2>
     5c4:	a8 9a       	sbi	0x15, 0	; 21
     5c6:	90 91 c2 01 	lds	r25, 0x01C2
     5ca:	89 2f       	mov	r24, r25
     5cc:	80 73       	andi	r24, 0x30	; 48
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x1d4>
     5d0:	58 c0       	rjmp	.+176    	; 0x682 <main+0x284>
     5d2:	89 2f       	mov	r24, r25
     5d4:	82 95       	swap	r24
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	8d 5f       	subi	r24, 0xFD	; 253
     5da:	83 70       	andi	r24, 0x03	; 3
     5dc:	28 2f       	mov	r18, r24
     5de:	22 95       	swap	r18
     5e0:	20 7f       	andi	r18, 0xF0	; 240
     5e2:	9f 7c       	andi	r25, 0xCF	; 207
     5e4:	92 2b       	or	r25, r18
     5e6:	90 93 c2 01 	sts	0x01C2, r25
     5ea:	81 11       	cpse	r24, r1
     5ec:	4a c0       	rjmp	.+148    	; 0x682 <main+0x284>
     5ee:	e0 91 d5 01 	lds	r30, 0x01D5

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	e6 ff       	sbrs	r30, 6
     5f4:	15 c0       	rjmp	.+42     	; 0x620 <main+0x222>
     5f6:	e6 95       	lsr	r30
     5f8:	e6 95       	lsr	r30
					  return HID_PARSE_InsufficientReportItems;
     5fa:	e6 95       	lsr	r30
     5fc:	e7 70       	andi	r30, 0x07	; 7

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e6 52       	subi	r30, 0x26	; 38
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	60 81       	ld	r22, Z
     606:	86 e3       	ldi	r24, 0x36	; 54
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	ae de       	rcall	.-676    	; 0x368 <LRingBuffer_Append.constprop.4>
     60c:	80 91 d5 01 	lds	r24, 0x01D5
     610:	86 fb       	bst	r24, 6
     612:	88 27       	eor	r24, r24
     614:	80 f9       	bld	r24, 0
     616:	90 91 e0 01 	lds	r25, 0x01E0
     61a:	89 0f       	add	r24, r25
     61c:	80 93 e0 01 	sts	0x01E0, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     620:	00 91 d5 01 	lds	r16, 0x01D5
     624:	07 fd       	sbrc	r16, 7
     626:	29 c0       	rjmp	.+82     	; 0x67a <main+0x27c>
     628:	06 95       	lsr	r16
     62a:	06 95       	lsr	r16
     62c:	06 95       	lsr	r16
     62e:	07 70       	andi	r16, 0x07	; 7
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d0 e0       	ldi	r29, 0x00	; 0
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	86 e3       	ldi	r24, 0x36	; 54
     638:	e8 2e       	mov	r14, r24
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	f8 2e       	mov	r15, r24
     63e:	e0 0e       	add	r14, r16
     640:	f1 1e       	adc	r15, r17
     642:	09 c0       	rjmp	.+18     	; 0x656 <main+0x258>
     644:	f7 01       	movw	r30, r14
     646:	ec 0f       	add	r30, r28
     648:	fd 1f       	adc	r31, r29
     64a:	ec 55       	subi	r30, 0x5C	; 92
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	60 81       	ld	r22, Z
     650:	86 e3       	ldi	r24, 0x36	; 54
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	89 de       	rcall	.-750    	; 0x368 <LRingBuffer_Append.constprop.4>
     656:	21 97       	sbiw	r28, 0x01	; 1
     658:	ce 01       	movw	r24, r28
     65a:	80 95       	com	r24
     65c:	90 95       	com	r25
     65e:	80 17       	cp	r24, r16
     660:	91 07       	cpc	r25, r17
     662:	84 f3       	brlt	.-32     	; 0x644 <main+0x246>
     664:	80 91 d5 01 	lds	r24, 0x01D5
     668:	86 95       	lsr	r24
     66a:	86 95       	lsr	r24
     66c:	86 95       	lsr	r24
     66e:	87 70       	andi	r24, 0x07	; 7
     670:	90 91 e0 01 	lds	r25, 0x01E0
     674:	89 0f       	add	r24, r25
     676:	80 93 e0 01 	sts	0x01E0, r24
     67a:	85 ed       	ldi	r24, 0xD5	; 213
     67c:	91 e0       	ldi	r25, 0x01	; 1
					  ParserData->TotalReportItems++;
     67e:	64 d6       	rcall	.+3272   	; 0x1348 <NHPreset>
     680:	0e d2       	rcall	.+1052   	; 0xa9e <checkNHPControlAddressError>
     682:	90 91 c2 01 	lds	r25, 0x01C2
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	89 2f       	mov	r24, r25
     688:	83 70       	andi	r24, 0x03	; 3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	49 f0       	breq	.+18     	; 0x69e <main+0x2a0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	81 50       	subi	r24, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	83 70       	andi	r24, 0x03	; 3
     690:	9c 7f       	andi	r25, 0xFC	; 252
     692:	98 2b       	or	r25, r24
     694:	90 93 c2 01 	sts	0x01C2, r25
     698:	81 11       	cpse	r24, r1
     69a:	01 c0       	rjmp	.+2      	; 0x69e <main+0x2a0>
     69c:	5d 9a       	sbi	0x0b, 5	; 11
     69e:	90 91 c2 01 	lds	r25, 0x01C2
     6a2:	89 2f       	mov	r24, r25
     6a4:	8c 70       	andi	r24, 0x0C	; 12
     6a6:	79 f0       	breq	.+30     	; 0x6c6 <main+0x2c8>
     6a8:	89 2f       	mov	r24, r25
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	86 95       	lsr	r24
     6ac:	86 95       	lsr	r24
     6ae:	8d 5f       	subi	r24, 0xFD	; 253
     6b0:	83 70       	andi	r24, 0x03	; 3
     6b2:	28 2f       	mov	r18, r24
     6b4:	22 0f       	add	r18, r18
     6b6:	22 0f       	add	r18, r18
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	93 7f       	andi	r25, 0xF3	; 243
     6ba:	92 2b       	or	r25, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	90 93 c2 01 	sts	0x01C2, r25
     6c0:	81 11       	cpse	r24, r1
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <main+0x2c8>
     6c4:	5c 9a       	sbi	0x0b, 4	; 11
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 cf 12 	call	0x259e	; 0x259e <HID_Device_USBTask>
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	91 e0       	ldi	r25, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	0e 94 8e 10 	call	0x211c	; 0x211c <CDC_Device_USBTask>
     6d6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <USB_USBTask>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6da:	af ce       	rjmp	.-674    	; 0x43a <main+0x3c>

000006dc <EVENT_USB_Device_Connect>:
     6dc:	08 95       	ret

000006de <EVENT_USB_Device_Disconnect>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	08 95       	ret

000006e0 <EVENT_USB_Device_ConfigurationChanged>:
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 ba 12 	call	0x2574	; 0x2574 <HID_Device_ConfigureEndpoints>
     6e8:	80 e1       	ldi	r24, 0x10	; 16
     6ea:	91 e0       	ldi	r25, 0x01	; 1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	0e 94 17 10 	call	0x202e	; 0x202e <CDC_Device_ConfigureEndpoints>
     6f0:	e2 ee       	ldi	r30, 0xE2	; 226
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	80 81       	ld	r24, Z
     6f6:	84 60       	ori	r24, 0x04	; 4

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	80 83       	st	Z, r24
     6fa:	08 95       	ret

000006fc <__vector_23>:
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	11 24       	eor	r1, r1
     706:	2f 93       	push	r18

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	3f 93       	push	r19
     70a:	4f 93       	push	r20
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	5f 93       	push	r21
     70e:	8f 93       	push	r24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
     71a:	40 91 ce 00 	lds	r20, 0x00CE

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71e:	80 91 bb 01 	lds	r24, 0x01BB
     722:	87 fd       	sbrc	r24, 7
     724:	21 c0       	rjmp	.+66     	; 0x768 <__vector_23+0x6c>
     726:	80 91 e5 01 	lds	r24, 0x01E5
     72a:	84 30       	cpi	r24, 0x04	; 4
     72c:	e9 f4       	brne	.+58     	; 0x768 <__vector_23+0x6c>
     72e:	e6 e3       	ldi	r30, 0x36	; 54
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	2f b7       	in	r18, 0x3f	; 63
     734:	f8 94       	cli
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	a1 f0       	breq	.+40     	; 0x766 <__vector_23+0x6a>
     73e:	54 81       	ldd	r21, Z+4	; 0x04
     740:	33 81       	ldd	r19, Z+3	; 0x03
     742:	53 13       	cpse	r21, r19
     744:	01 c0       	rjmp	.+2      	; 0x748 <__vector_23+0x4c>
     746:	0f c0       	rjmp	.+30     	; 0x766 <__vector_23+0x6a>
     748:	32 81       	ldd	r19, Z+2	; 0x02
     74a:	dc 01       	movw	r26, r24
     74c:	a3 0f       	add	r26, r19
     74e:	b1 1d       	adc	r27, r1
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data to the current index and return to its beginning if it reaches the bound
		Buffer->Base[Buffer->Index++] = Data;
     750:	4c 93       	st	X, r20
     752:	83 2f       	mov	r24, r19
     754:	8f 5f       	subi	r24, 0xFF	; 255
     756:	82 83       	std	Z+2, r24	; 0x02
		if (Buffer->Index == Buffer->Size)
     758:	93 81       	ldd	r25, Z+3	; 0x03
     75a:	89 13       	cpse	r24, r25
     75c:	01 c0       	rjmp	.+2      	; 0x760 <__vector_23+0x64>
			Buffer->Index = 0;
     75e:	12 82       	std	Z+2, r1	; 0x02

		Buffer->Count++;
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     766:	2f bf       	out	0x3f, r18	; 63
	uint8_t ReceivedByte = UDR1;

	// save new byte to the buffer (automatically discards if its disabled or full)
	if ((!ram.isp.pmode) && (USB_DeviceState == DEVICE_STATE_Configured))
		LRingBuffer_Insert(&ram.RingBuffer, ReceivedByte);
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     786:	80 e1       	ldi	r24, 0x10	; 16
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface); //<--new
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0c 94 83 11 	jmp	0x2306	; 0x2306 <HID_Device_ProcessControlRequest>

00000796 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     796:	80 91 0e 01 	lds	r24, 0x010E
     79a:	90 91 0f 01 	lds	r25, 0x010F
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	29 f0       	breq	.+10     	; 0x7ac <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	90 93 0f 01 	sts	0x010F, r25
     7a8:	80 93 0e 01 	sts	0x010E, r24
     7ac:	08 95       	ret

000007ae <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7ae:	29 2f       	mov	r18, r25
     7b0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     7b2:	23 30       	cpi	r18, 0x03	; 3
     7b4:	31 05       	cpc	r19, r1
     7b6:	b1 f0       	breq	.+44     	; 0x7e4 <CALLBACK_USB_GetDescriptor+0x36>
     7b8:	4c f4       	brge	.+18     	; 0x7cc <CALLBACK_USB_GetDescriptor+0x1e>
     7ba:	21 30       	cpi	r18, 0x01	; 1
     7bc:	31 05       	cpc	r19, r1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <CALLBACK_USB_GetDescriptor+0x14>
     7c0:	39 c0       	rjmp	.+114    	; 0x834 <CALLBACK_USB_GetDescriptor+0x86>
     7c2:	22 30       	cpi	r18, 0x02	; 2
     7c4:	31 05       	cpc	r19, r1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <CALLBACK_USB_GetDescriptor+0x1c>
     7c8:	3a c0       	rjmp	.+116    	; 0x83e <CALLBACK_USB_GetDescriptor+0x90>
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <CALLBACK_USB_GetDescriptor+0x2c>
     7cc:	21 32       	cpi	r18, 0x21	; 33
     7ce:	31 05       	cpc	r19, r1
     7d0:	39 f1       	breq	.+78     	; 0x820 <CALLBACK_USB_GetDescriptor+0x72>
     7d2:	22 32       	cpi	r18, 0x22	; 34
     7d4:	31 05       	cpc	r19, r1
     7d6:	49 f1       	breq	.+82     	; 0x82a <CALLBACK_USB_GetDescriptor+0x7c>
     7d8:	32 c0       	rjmp	.+100    	; 0x83e <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7da:	ef e5       	ldi	r30, 0x5F	; 95
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7de:	8e eb       	ldi	r24, 0xBE	; 190
     7e0:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7e2:	31 c0       	rjmp	.+98     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7e4:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	61 f0       	breq	.+24     	; 0x804 <CALLBACK_USB_GetDescriptor+0x56>
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	91 05       	cpc	r25, r1
     7f0:	81 f0       	breq	.+32     	; 0x812 <CALLBACK_USB_GetDescriptor+0x64>
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f5       	brne	.+72     	; 0x83e <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7f6:	ea eb       	ldi	r30, 0xBA	; 186
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e4 91       	lpm	r30, Z+
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     7fe:	8a eb       	ldi	r24, 0xBA	; 186
     800:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     802:	21 c0       	rjmp	.+66     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     804:	e6 ea       	ldi	r30, 0xA6	; 166
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	e4 91       	lpm	r30, Z+
     80a:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     80c:	86 ea       	ldi	r24, 0xA6	; 166
     80e:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     810:	1a c0       	rjmp	.+52     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     812:	e4 e7       	ldi	r30, 0x74	; 116
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	e4 91       	lpm	r30, Z+
     818:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     81a:	84 e7       	ldi	r24, 0x74	; 116
     81c:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     81e:	13 c0       	rjmp	.+38     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     820:	e9 e0       	ldi	r30, 0x09	; 9
     822:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     824:	8d e0       	ldi	r24, 0x0D	; 13
     826:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     828:	0e c0       	rjmp	.+28     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     82a:	e8 eb       	ldi	r30, 0xB8	; 184
     82c:	f1 e0       	ldi	r31, 0x01	; 1
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     82e:	8f e2       	ldi	r24, 0x2F	; 47
     830:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     832:	09 c0       	rjmp	.+18     	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     834:	e2 e1       	ldi	r30, 0x12	; 18
     836:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     838:	8d e1       	ldi	r24, 0x1D	; 29
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	04 c0       	rjmp	.+8      	; 0x846 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     83e:	e0 e0       	ldi	r30, 0x00	; 0
     840:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     846:	da 01       	movw	r26, r20
     848:	8d 93       	st	X+, r24
     84a:	9c 93       	st	X, r25
	return Size;
}
     84c:	cf 01       	movw	r24, r30
     84e:	08 95       	ret

00000850 <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     860:	64 0f       	add	r22, r20
     862:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     864:	c6 e3       	ldi	r28, 0x36	; 54
     866:	d1 e0       	ldi	r29, 0x01	; 1
     868:	2c c0       	rjmp	.+88     	; 0x8c2 <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     86a:	fb 01       	movw	r30, r22
     86c:	e2 1b       	sub	r30, r18
     86e:	f3 0b       	sbc	r31, r19
     870:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     872:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     874:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     876:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     878:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     87a:	a0 81       	ld	r26, Z
     87c:	b1 81       	ldd	r27, Z+1	; 0x01
     87e:	10 97       	sbiw	r26, 0x00	; 0
     880:	09 f4       	brne	.+2      	; 0x884 <LRingBuffer_Append_Buffer.constprop.0+0x34>
     882:	1c c0       	rjmp	.+56     	; 0x8bc <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     884:	82 81       	ldd	r24, Z+2	; 0x02
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	f4 80       	ldd	r15, Z+4	; 0x04
     88a:	8f 19       	sub	r24, r15
     88c:	91 09       	sbc	r25, r1
     88e:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     890:	97 ff       	sbrs	r25, 7
     892:	03 c0       	rjmp	.+6      	; 0x89a <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     894:	f3 80       	ldd	r15, Z+3	; 0x03
     896:	8f 0d       	add	r24, r15
     898:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     89a:	a8 0f       	add	r26, r24
     89c:	b9 1f       	adc	r27, r25
     89e:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     8a0:	84 81       	ldd	r24, Z+4	; 0x04
     8a2:	93 81       	ldd	r25, Z+3	; 0x03
     8a4:	89 13       	cpse	r24, r25
     8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     8a8:	92 81       	ldd	r25, Z+2	; 0x02
     8aa:	91 11       	cpse	r25, r1
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     8ae:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     8b0:	82 81       	ldd	r24, Z+2	; 0x02
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	82 83       	std	Z+2, r24	; 0x02
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8bc:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	24 17       	cp	r18, r20
     8c4:	35 07       	cpc	r19, r21
     8c6:	8c f2       	brlt	.-94     	; 0x86a <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	08 95       	ret

000008d4 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     8d4:	08 95       	ret

000008d6 <flushHID>:
	}
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.writeHID){
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <flushHID+0xa>
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 cf 12 	call	0x259e	; 0x259e <HID_Device_USBTask>
	}
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.writeHID){
     8e0:	80 91 d4 01 	lds	r24, 0x01D4
     8e4:	87 fd       	sbrc	r24, 7
     8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <flushHID+0x2>
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
	}
}
     8e8:	08 95       	ret

000008ea <getHIDReportLength>:

	// save new empty flag
	ram.HID.writtenReport &= ~(1 << (ID - 1));
}

uint8_t getHIDReportLength(uint8_t ID){
     8ea:	81 50       	subi	r24, 0x01	; 1
     8ec:	89 30       	cpi	r24, 0x09	; 9
     8ee:	30 f4       	brcc	.+12     	; 0x8fc <getHIDReportLength+0x12>
     8f0:	e8 2f       	mov	r30, r24
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	e5 5d       	subi	r30, 0xD5	; 213
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	80 81       	ld	r24, Z
     8fa:	08 95       	ret
     8fc:	80 e0       	ldi	r24, 0x00	; 0
		return sizeof(HID_JoystickReport_Data_t);
		break;
	}
	// error, ID not presented
	return 0;
}
     8fe:	08 95       	ret

00000900 <clearHIDReport>:
	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
}

void clearHIDReport(uint8_t ID){
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	1f 92       	push	r1
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	18 2f       	mov	r17, r24
	// return if already cleared
	if (!(ram.HID.writtenReport & (1 << (ID - 1)))) return;
     912:	e8 2e       	mov	r14, r24
     914:	f1 2c       	mov	r15, r1
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	e2 1a       	sub	r14, r18
     91a:	f1 08       	sbc	r15, r1
     91c:	20 91 d3 01 	lds	r18, 0x01D3
     920:	80 91 d4 01 	lds	r24, 0x01D4
     924:	38 2f       	mov	r19, r24
     926:	3f 77       	andi	r19, 0x7F	; 127
     928:	0e 2c       	mov	r0, r14
     92a:	02 c0       	rjmp	.+4      	; 0x930 <clearHIDReport+0x30>
     92c:	35 95       	asr	r19
     92e:	27 95       	ror	r18
     930:	0a 94       	dec	r0
     932:	e2 f7       	brpl	.-8      	; 0x92c <clearHIDReport+0x2c>
     934:	20 ff       	sbrs	r18, 0
     936:	36 c0       	rjmp	.+108    	; 0x9a4 <clearHIDReport+0xa4>

	// get length and check if report ID is valid
	uint8_t length = getHIDReportLength(ID);
     938:	81 2f       	mov	r24, r17
     93a:	d7 df       	rcall	.-82     	; 0x8ea <getHIDReportLength>
     93c:	88 23       	and	r24, r24
	if (!length) return;
     93e:	91 f1       	breq	.+100    	; 0x9a4 <clearHIDReport+0xa4>
     940:	89 83       	std	Y+1, r24	; 0x01

	// flush any pending report first
	flushHID();
     942:	c9 df       	rcall	.-110    	; 0x8d6 <flushHID>
     944:	1f 70       	andi	r17, 0x0F	; 15
     946:	90 91 c3 01 	lds	r25, 0x01C3

	// save new values and prepare for sending
	ram.HID.ID = ID;
     94a:	90 7f       	andi	r25, 0xF0	; 240
     94c:	91 2b       	or	r25, r17
     94e:	90 93 c3 01 	sts	0x01C3, r25
     952:	24 ec       	ldi	r18, 0xC4	; 196
     954:	31 e0       	ldi	r19, 0x01	; 1
	memset(&ram.HID.buffer, 0x00, length);
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	48 2f       	mov	r20, r24
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	c9 01       	movw	r24, r18
     962:	0e 94 cb 13 	call	0x2796	; 0x2796 <memset>
     966:	80 91 d4 01 	lds	r24, 0x01D4
	ram.HID.writeHID = true;
     96a:	80 68       	ori	r24, 0x80	; 128
     96c:	80 93 d4 01 	sts	0x01D4, r24
     970:	b2 df       	rcall	.-156    	; 0x8d6 <flushHID>
     972:	81 e0       	ldi	r24, 0x01	; 1

	// flush HID, needed to clear flag below
	flushHID();
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <clearHIDReport+0x7c>

	// save new empty flag
	ram.HID.writtenReport &= ~(1 << (ID - 1));
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	ea 94       	dec	r14
     97e:	e2 f7       	brpl	.-8      	; 0x978 <clearHIDReport+0x78>
     980:	80 95       	com	r24
     982:	90 95       	com	r25
     984:	20 91 d3 01 	lds	r18, 0x01D3
     988:	40 91 d4 01 	lds	r20, 0x01D4
     98c:	34 2f       	mov	r19, r20
     98e:	3f 77       	andi	r19, 0x7F	; 127
     990:	82 23       	and	r24, r18
     992:	93 23       	and	r25, r19
     994:	80 93 d3 01 	sts	0x01D3, r24
     998:	9f 77       	andi	r25, 0x7F	; 127
     99a:	84 2f       	mov	r24, r20
     99c:	80 78       	andi	r24, 0x80	; 128
     99e:	89 2b       	or	r24, r25
     9a0:	80 93 d4 01 	sts	0x01D4, r24
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
}
     9aa:	1f 91       	pop	r17
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <clearHIDReports>:
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
	}
}

void clearHIDReports(void){
     9b2:	cf 93       	push	r28
	// dont do anything if no report is written
	if (!ram.HID.writtenReport) return;
     9b4:	80 91 d3 01 	lds	r24, 0x01D3
     9b8:	20 91 d4 01 	lds	r18, 0x01D4
     9bc:	92 2f       	mov	r25, r18
     9be:	9f 77       	andi	r25, 0x7F	; 127
     9c0:	89 2b       	or	r24, r25
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <clearHIDReports+0x1e>
     9c4:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
     9c6:	8c 2f       	mov	r24, r28
     9c8:	9b df       	rcall	.-202    	; 0x900 <clearHIDReport>
     9ca:	cf 5f       	subi	r28, 0xFF	; 255
     9cc:	ca 30       	cpi	r28, 0x0A	; 10
void clearHIDReports(void){
	// dont do anything if no report is written
	if (!ram.HID.writtenReport) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     9ce:	d9 f7       	brne	.-10     	; 0x9c6 <clearHIDReports+0x14>
     9d0:	cf 91       	pop	r28
		clearHIDReport(i);
}
     9d2:	08 95       	ret

000009d4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <CALLBACK_HID_Device_CreateHIDReport+0x12>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	7b 01       	movw	r14, r22
     9ec:	93 2f       	mov	r25, r19
     9ee:	68 01       	movw	r12, r16
	// only send report if there is actually a new report
	if (ram.HID.writeHID){
     9f0:	70 91 d4 01 	lds	r23, 0x01D4
     9f4:	67 2f       	mov	r22, r23
     9f6:	60 78       	andi	r22, 0x80	; 128
     9f8:	09 f4       	brne	.+2      	; 0x9fc <CALLBACK_HID_Device_CreateHIDReport+0x28>
     9fa:	40 c0       	rjmp	.+128    	; 0xa7c <CALLBACK_HID_Device_CreateHIDReport+0xa8>
		// set a specific flag that a report was written, ignore rawHID
		if (ram.HID.ID != HID_REPORTID_RawKeyboardReport)
     9fc:	e0 91 c3 01 	lds	r30, 0x01C3
     a00:	ef 70       	andi	r30, 0x0F	; 15
     a02:	e3 30       	cpi	r30, 0x03	; 3
     a04:	b1 f0       	breq	.+44     	; 0xa32 <CALLBACK_HID_Device_CreateHIDReport+0x5e>
			ram.HID.writtenReport |= (1 << (ram.HID.ID - 1));
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <CALLBACK_HID_Device_CreateHIDReport+0x40>
     a10:	44 0f       	add	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	ea 95       	dec	r30
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     a18:	e0 91 d3 01 	lds	r30, 0x01D3
     a1c:	f7 2f       	mov	r31, r23
     a1e:	ff 77       	andi	r31, 0x7F	; 127
     a20:	4e 2b       	or	r20, r30
     a22:	5f 2b       	or	r21, r31
     a24:	40 93 d3 01 	sts	0x01D3, r20
     a28:	45 2f       	mov	r20, r21
     a2a:	4f 77       	andi	r20, 0x7F	; 127
     a2c:	46 2b       	or	r20, r22
     a2e:	40 93 d4 01 	sts	0x01D4, r20

		//write report
		uint8_t length = getHIDReportLength(ram.HID.ID);
     a32:	80 91 c3 01 	lds	r24, 0x01C3
     a36:	8f 70       	andi	r24, 0x0F	; 15
     a38:	29 83       	std	Y+1, r18	; 0x01
     a3a:	9a 83       	std	Y+2, r25	; 0x02
     a3c:	56 df       	rcall	.-340    	; 0x8ea <getHIDReportLength>
     a3e:	18 2f       	mov	r17, r24
     a40:	e4 ec       	ldi	r30, 0xC4	; 196
		memcpy(ReportData, ram.HID.buffer, length);
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	48 2f       	mov	r20, r24
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	bf 01       	movw	r22, r30
     a4a:	29 81       	ldd	r18, Y+1	; 0x01
     a4c:	82 2f       	mov	r24, r18
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	0e 94 c2 13 	call	0x2784	; 0x2784 <memcpy>
     a54:	90 91 c3 01 	lds	r25, 0x01C3
		*ReportID = ram.HID.ID;
     a58:	9f 70       	andi	r25, 0x0F	; 15
     a5a:	f7 01       	movw	r30, r14
     a5c:	90 83       	st	Z, r25
     a5e:	f6 01       	movw	r30, r12
		*ReportSize = length;
     a60:	10 83       	st	Z, r17
     a62:	11 82       	std	Z+1, r1	; 0x01
     a64:	80 91 d4 01 	lds	r24, 0x01D4

		// reset the flush flag and pending ID
		ram.HID.writeHID = false;
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	80 93 d4 01 	sts	0x01D4, r24
     a6e:	80 91 c3 01 	lds	r24, 0x01C3
		ram.HID.ID = 0;
     a72:	80 7f       	andi	r24, 0xF0	; 240
     a74:	80 93 c3 01 	sts	0x01C3, r24
     a78:	81 e0       	ldi	r24, 0x01	; 1

		// always return true, because we cannot compare with >1 report due to ram limit
		// this will forcewrite the report every time
		return true;
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <CALLBACK_HID_Device_CreateHIDReport+0xb4>
     a7c:	f7 01       	movw	r30, r14
	}
	else{
		//TODO improve ? (!(AVR_NO_HID_PIN &= AVR_NO_HID_MASK))
		*ReportID = 0;
     a7e:	10 82       	st	Z, r1
     a80:	f8 01       	movw	r30, r16
		*ReportSize = 0;
     a82:	11 82       	std	Z+1, r1	; 0x01
     a84:	10 82       	st	Z, r1
     a86:	80 e0       	ldi	r24, 0x00	; 0
		return false;
     a88:	0f 90       	pop	r0
	}
}
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <checkNHPControlAddressError+0x8>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <checkNHPControlAddressError+0xa>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <checkNHPControlAddressError+0xc>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
	// make sure there is no pending report, because we overwrite the buffer now
	flushHID();
     aae:	13 df       	rcall	.-474    	; 0x8d6 <flushHID>
     ab0:	80 91 c3 01 	lds	r24, 0x01C3

	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and discard all bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     ab4:	68 2f       	mov	r22, r24
     ab6:	6f 70       	andi	r22, 0x0F	; 15
     ab8:	b1 f0       	breq	.+44     	; 0xae6 <checkNHPControlAddressError+0x48>
     aba:	80 7f       	andi	r24, 0xF0	; 240
     abc:	a1 f4       	brne	.+40     	; 0xae6 <checkNHPControlAddressError+0x48>
     abe:	70 e0       	ldi	r23, 0x00	; 0
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     ac0:	71 60       	ori	r23, 0x01	; 1
     ac2:	ae 01       	movw	r20, r28
     ac4:	4f 5f       	subi	r20, 0xFF	; 255
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	14 d5       	rcall	.+2600   	; 0x14f4 <NHPwriteChecksum>
     acc:	18 2f       	mov	r17, r24
     ace:	48 2f       	mov	r20, r24
     ad0:	be 01       	movw	r22, r28

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.RingBuffer, buff, length);
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	86 e3       	ldi	r24, 0x36	; 54
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	ba de       	rcall	.-652    	; 0x850 <LRingBuffer_Append_Buffer.constprop.0>
     adc:	90 91 e0 01 	lds	r25, 0x01E0
     ae0:	91 0f       	add	r25, r17
		ram.skipNHP += length;
     ae2:	90 93 e0 01 	sts	0x01E0, r25
     ae6:	80 91 c3 01 	lds	r24, 0x01C3
     aea:	80 7f       	andi	r24, 0xF0	; 240
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     aec:	80 93 c3 01 	sts	0x01C3, r24
     af0:	26 96       	adiw	r28, 0x06	; 6
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
}
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	08 95       	ret

00000b04 <checkNHPProtocol>:
	// error, ID not presented
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     b04:	cf 93       	push	r28
	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     b06:	65 ed       	ldi	r22, 0xD5	; 213
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	d1 d4       	rcall	.+2466   	; 0x14ae <NHPreadChecksum>
     b0c:	88 23       	and	r24, r24

	if (address == 0)
     b0e:	09 f4       	brne	.+2      	; 0xb12 <checkNHPProtocol+0xe>
     b10:	8f c0       	rjmp	.+286    	; 0xc30 <checkNHPProtocol+0x12c>
     b12:	87 fd       	sbrc	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     b14:	75 c0       	rjmp	.+234    	; 0xc00 <checkNHPProtocol+0xfc>
     b16:	81 30       	cpi	r24, 0x01	; 1
		checkNHPControlAddressError();
		return;
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     b18:	e9 f4       	brne	.+58     	; 0xb54 <checkNHPProtocol+0x50>
     b1a:	90 91 d7 01 	lds	r25, 0x01D7
     b1e:	91 30       	cpi	r25, 0x01	; 1
     b20:	c9 f4       	brne	.+50     	; 0xb54 <checkNHPProtocol+0x50>
     b22:	d9 de       	rcall	.-590    	; 0x8d6 <flushHID>
		// make sure there is no pending report, because we overwrite the buffer now
		flushHID();
     b24:	c0 91 d6 01 	lds	r28, 0x01D6

		// get the new report ID and reset the received length
		uint8_t ID = ram.NHP.mWorkData & 0xFF;
     b28:	90 91 c3 01 	lds	r25, 0x01C3
		ram.HID.recvlength = 0;
     b2c:	9f 70       	andi	r25, 0x0F	; 15
     b2e:	90 93 c3 01 	sts	0x01C3, r25
     b32:	b5 df       	rcall	.-150    	; 0xa9e <checkNHPControlAddressError>
     b34:	8c 2f       	mov	r24, r28

		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     b36:	8f 70       	andi	r24, 0x0F	; 15
     b38:	90 91 c3 01 	lds	r25, 0x01C3

		// save new ID
		ram.HID.ID = ID;
     b3c:	90 7f       	andi	r25, 0xF0	; 240
     b3e:	98 2b       	or	r25, r24
     b40:	90 93 c3 01 	sts	0x01C3, r25
     b44:	9f 70       	andi	r25, 0x0F	; 15
     b46:	09 f4       	brne	.+2      	; 0xb4a <checkNHPProtocol+0x46>
     b48:	71 c0       	rjmp	.+226    	; 0xc2c <checkNHPProtocol+0x128>
		if (!ram.HID.ID || ram.HID.ID >= HID_REPORTID_LastNotAReport)
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0a 97       	sbiw	r24, 0x0a	; 10
     b4e:	0c f4       	brge	.+2      	; 0xb52 <checkNHPProtocol+0x4e>
     b50:	6f c0       	rjmp	.+222    	; 0xc30 <checkNHPProtocol+0x12c>
     b52:	6c c0       	rjmp	.+216    	; 0xc2c <checkNHPProtocol+0x128>
     b54:	20 91 c3 01 	lds	r18, 0x01C3
     b58:	92 2f       	mov	r25, r18
			// this needs to be appended after the normal protocol!
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     b5a:	9f 70       	andi	r25, 0x0F	; 15
     b5c:	09 f4       	brne	.+2      	; 0xb60 <checkNHPProtocol+0x5c>
     b5e:	50 c0       	rjmp	.+160    	; 0xc00 <checkNHPProtocol+0xfc>
     b60:	99 27       	eor	r25, r25
     b62:	87 fd       	sbrc	r24, 7
     b64:	90 95       	com	r25
     b66:	22 95       	swap	r18
     b68:	2f 70       	andi	r18, 0x0F	; 15
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	2e 5f       	subi	r18, 0xFE	; 254
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	35 95       	asr	r19
     b72:	27 95       	ror	r18
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	82 17       	cp	r24, r18
     b7a:	93 07       	cpc	r25, r19
     b7c:	09 f0       	breq	.+2      	; 0xb80 <checkNHPProtocol+0x7c>
     b7e:	40 c0       	rjmp	.+128    	; 0xc00 <checkNHPProtocol+0xfc>
     b80:	aa de       	rcall	.-684    	; 0x8d6 <flushHID>
     b82:	c0 91 c3 01 	lds	r28, 0x01C3
		// make sure there is no pending report, because we overwrite the buffer now
		flushHID();
     b86:	8c 2f       	mov	r24, r28
     b88:	8f 70       	andi	r24, 0x0F	; 15

		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.
		uint8_t length = getHIDReportLength(ram.HID.ID);
     b8a:	af de       	rcall	.-674    	; 0x8ea <getHIDReportLength>
     b8c:	2c 2f       	mov	r18, r28
     b8e:	22 95       	swap	r18
     b90:	2f 70       	andi	r18, 0x0F	; 15
     b92:	90 91 d6 01 	lds	r25, 0x01D6

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     b96:	30 91 d7 01 	lds	r19, 0x01D7
     b9a:	e2 2f       	mov	r30, r18
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ec 53       	subi	r30, 0x3C	; 60
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	90 83       	st	Z, r25
     ba4:	e2 2f       	mov	r30, r18
     ba6:	ef 5f       	subi	r30, 0xFF	; 255
     ba8:	ef 70       	andi	r30, 0x0F	; 15
     baa:	4e 2f       	mov	r20, r30
     bac:	42 95       	swap	r20
     bae:	40 7f       	andi	r20, 0xF0	; 240
     bb0:	90 91 c3 01 	lds	r25, 0x01C3
     bb4:	9f 70       	andi	r25, 0x0F	; 15
     bb6:	94 2b       	or	r25, r20
     bb8:	90 93 c3 01 	sts	0x01C3, r25
     bbc:	8e 17       	cp	r24, r30
     bbe:	69 f0       	breq	.+26     	; 0xbda <checkNHPProtocol+0xd6>
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ec 53       	subi	r30, 0x3C	; 60
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (length != ram.HID.recvlength)
     bc6:	30 83       	st	Z, r19
     bc8:	2e 5f       	subi	r18, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     bca:	22 95       	swap	r18
     bcc:	20 7f       	andi	r18, 0xF0	; 240
     bce:	90 91 c3 01 	lds	r25, 0x01C3
     bd2:	9f 70       	andi	r25, 0x0F	; 15
     bd4:	92 2b       	or	r25, r18
     bd6:	90 93 c3 01 	sts	0x01C3, r25
     bda:	20 91 c3 01 	lds	r18, 0x01C3
     bde:	22 95       	swap	r18
     be0:	2f 70       	andi	r18, 0x0F	; 15
     be2:	30 e0       	ldi	r19, 0x00	; 0

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.recvlength == length){
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	28 17       	cp	r18, r24
     be8:	39 07       	cpc	r19, r25
     bea:	11 f5       	brne	.+68     	; 0xc30 <checkNHPProtocol+0x12c>
     bec:	80 91 d4 01 	lds	r24, 0x01D4
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	80 93 d4 01 	sts	0x01D4, r24
			ram.HID.writeHID = true;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	cf 91       	pop	r28
     bfc:	0c 94 cf 12 	jmp	0x259e	; 0x259e <HID_Device_USBTask>
			HID_Device_USBTask(&Device_HID_Interface);
     c00:	40 91 d5 01 	lds	r20, 0x01D5
		// check if previous reading was a valid Control Address and write it down
		// if not discard the bytes because we assume it is corrupted data
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}
     c04:	46 95       	lsr	r20

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.recvlength == length){
			ram.HID.writeHID = true;
			HID_Device_USBTask(&Device_HID_Interface);
     c06:	46 95       	lsr	r20
     c08:	46 95       	lsr	r20
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     c0a:	47 70       	andi	r20, 0x07	; 7
     c0c:	6a ed       	ldi	r22, 0xDA	; 218
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	86 e3       	ldi	r24, 0x36	; 54
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	1d de       	rcall	.-966    	; 0x850 <LRingBuffer_Append_Buffer.constprop.0>
     c16:	80 91 d5 01 	lds	r24, 0x01D5
     c1a:	86 95       	lsr	r24
     c1c:	86 95       	lsr	r24
     c1e:	86 95       	lsr	r24
     c20:	87 70       	andi	r24, 0x07	; 7
		ram.skipNHP += ram.NHP.readlength;
     c22:	90 91 e0 01 	lds	r25, 0x01E0
     c26:	89 0f       	add	r24, r25
     c28:	80 93 e0 01 	sts	0x01E0, r24
     c2c:	cf 91       	pop	r28
     c2e:	37 cf       	rjmp	.-402    	; 0xa9e <checkNHPControlAddressError>
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <sendCDCbyte>:
//================================================================================

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     c34:	68 2f       	mov	r22, r24
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 3c 10 	call	0x2078	; 0x2078 <CDC_Device_SendByte>
     c3e:	88 23       	and	r24, r24
     c40:	d9 f0       	breq	.+54     	; 0xc78 <sendCDCbyte+0x44>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     c42:	80 e1       	ldi	r24, 0x10	; 16
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 8e 10 	call	0x211c	; 0x211c <CDC_Device_USBTask>
		USB_USBTask();
     c4a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <USB_USBTask>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     c4e:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c50:	2f ef       	ldi	r18, 0xFF	; 255
     c52:	81 ee       	ldi	r24, 0xE1	; 225
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	21 50       	subi	r18, 0x01	; 1
     c58:	80 40       	sbci	r24, 0x00	; 0
     c5a:	90 40       	sbci	r25, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <sendCDCbyte+0x22>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <sendCDCbyte+0x2c>
     c60:	00 00       	nop
     c62:	5c 98       	cbi	0x0b, 4	; 11
     c64:	2f ef       	ldi	r18, 0xFF	; 255
     c66:	81 ee       	ldi	r24, 0xE1	; 225
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <sendCDCbyte+0x36>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <sendCDCbyte+0x40>
     c74:	00 00       	nop
     c76:	eb cf       	rjmp	.-42     	; 0xc4e <sendCDCbyte+0x1a>
     c78:	08 95       	ret

00000c7a <getch>:

uint8_t getch() {
	int ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     c7a:	80 e1       	ldi	r24, 0x10	; 16
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 a4 10 	call	0x2148	; 0x2148 <CDC_Device_ReceiveByte>
}

uint8_t getch() {
	int ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     c82:	97 fd       	sbrc	r25, 7
     c84:	fa cf       	rjmp	.-12     	; 0xc7a <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     c86:	08 95       	ret

00000c88 <fill>:

void fill(int n) {
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	7c 01       	movw	r14, r24
     c96:	0b e3       	ldi	r16, 0x3B	; 59
     c98:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <fill+0x22>
		ram.RingBuffer_Data[x] = getch();
     ca0:	ec df       	rcall	.-40     	; 0xc7a <getch>
     ca2:	f8 01       	movw	r30, r16
     ca4:	81 93       	st	Z+, r24
     ca6:	8f 01       	movw	r16, r30
     ca8:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     caa:	ce 15       	cp	r28, r14
     cac:	df 05       	cpc	r29, r15
     cae:	c4 f3       	brlt	.-16     	; 0xca0 <fill+0x18>
     cb0:	df 91       	pop	r29
		ram.RingBuffer_Data[x] = getch();
}
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <end_pmode>:
	ram.skipNHP = 0;
	NHPreset(&ram.NHP);
	return;
}

void end_pmode(void) {
     cbe:	23 98       	cbi	0x04, 3	; 4
	// SPI Input to save the pins
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     cc0:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     cc2:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     cc4:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     cc6:	20 98       	cbi	0x04, 0	; 4

	// reset isp values
	ram.isp.error = 0;
	ram.isp._addr = 0;
     cc8:	10 92 bd 01 	sts	0x01BD, r1
     ccc:	10 92 bc 01 	sts	0x01BC, r1
	ram.isp.param.pagesize = 0;
     cd0:	10 92 bf 01 	sts	0x01BF, r1
     cd4:	10 92 be 01 	sts	0x01BE, r1
	ram.isp.param.eepromsize = 0;
     cd8:	10 92 c1 01 	sts	0x01C1, r1
     cdc:	10 92 c0 01 	sts	0x01C0, r1
	ram.isp.pmode = false;
     ce0:	10 92 bb 01 	sts	0x01BB, r1
     ce4:	08 95       	ret

00000ce6 <breply>:

//================================================================================
// General Programmer functions
//================================================================================

void breply(uint8_t b) {
     ce6:	cf 93       	push	r28
     ce8:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {
     cea:	c7 df       	rcall	.-114    	; 0xc7a <getch>
     cec:	80 32       	cpi	r24, 0x20	; 32
     cee:	39 f4       	brne	.+14     	; 0xcfe <breply+0x18>
     cf0:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     cf2:	a0 df       	rcall	.-192    	; 0xc34 <sendCDCbyte>
     cf4:	8c 2f       	mov	r24, r28
     cf6:	9e df       	rcall	.-196    	; 0xc34 <sendCDCbyte>
		sendCDCbyte(b);
     cf8:	80 e1       	ldi	r24, 0x10	; 16
     cfa:	cf 91       	pop	r28
     cfc:	9b cf       	rjmp	.-202    	; 0xc34 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     cfe:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     d00:	99 df       	rcall	.-206    	; 0xc34 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     d02:	80 91 bb 01 	lds	r24, 0x01BB
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     d06:	98 2f       	mov	r25, r24
     d08:	9f 5f       	subi	r25, 0xFF	; 255
     d0a:	9f 77       	andi	r25, 0x7F	; 127
		ram.isp.error++;
     d0c:	80 78       	andi	r24, 0x80	; 128
     d0e:	89 2b       	or	r24, r25
     d10:	80 93 bb 01 	sts	0x01BB, r24
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <replyOK>:
	}
}

void replyOK(void) {
     d18:	b0 df       	rcall	.-160    	; 0xc7a <getch>
     d1a:	80 32       	cpi	r24, 0x20	; 32
     d1c:	21 f4       	brne	.+8      	; 0xd26 <replyOK+0xe>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     d1e:	84 e1       	ldi	r24, 0x14	; 20

void replyOK(void) {
	if (CRC_EOP == getch()) {
		sendCDCbyte(STK_INSYNC);
     d20:	89 df       	rcall	.-238    	; 0xc34 <sendCDCbyte>
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	87 cf       	rjmp	.-242    	; 0xc34 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     d26:	85 e1       	ldi	r24, 0x15	; 21
     d28:	85 df       	rcall	.-246    	; 0xc34 <sendCDCbyte>
     d2a:	80 91 bb 01 	lds	r24, 0x01BB
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     d2e:	98 2f       	mov	r25, r24
     d30:	9f 5f       	subi	r25, 0xFF	; 255
		ram.isp.error++;
     d32:	9f 77       	andi	r25, 0x7F	; 127
     d34:	80 78       	andi	r24, 0x80	; 128
     d36:	89 2b       	or	r24, r25
     d38:	80 93 bb 01 	sts	0x01BB, r24
     d3c:	08 95       	ret

00000d3e <get_parameters>:
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void get_parameters(uint8_t c) {
     d3e:	81 38       	cpi	r24, 0x81	; 129
     d40:	59 f0       	breq	.+22     	; 0xd58 <get_parameters+0x1a>
     d42:	18 f4       	brcc	.+6      	; 0xd4a <get_parameters+0xc>
     d44:	80 38       	cpi	r24, 0x80	; 128
     d46:	71 f4       	brne	.+28     	; 0xd64 <get_parameters+0x26>
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <get_parameters+0x16>
     d4a:	82 38       	cpi	r24, 0x82	; 130
     d4c:	39 f0       	breq	.+14     	; 0xd5c <get_parameters+0x1e>
     d4e:	83 39       	cpi	r24, 0x93	; 147
     d50:	49 f4       	brne	.+18     	; 0xd64 <get_parameters+0x26>
     d52:	06 c0       	rjmp	.+12     	; 0xd60 <get_parameters+0x22>
	switch (c) {
	case 0x80:
		breply(HWVER);
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     d5c:	82 e1       	ldi	r24, 0x12	; 18
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     d60:	83 e5       	ldi	r24, 0x53	; 83
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <get_parameters+0x28>
		break;
	default:
		breply(0);
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	bf cf       	rjmp	.-130    	; 0xce6 <breply>

00000d68 <set_parameters>:
	}
}

void set_parameters(void) {
     d68:	84 e1       	ldi	r24, 0x14	; 20
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	8d df       	rcall	.-230    	; 0xc88 <fill>
     d6e:	90 91 47 01 	lds	r25, 0x0147
	//param.flashpoll = buff[8];
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.RingBuffer_Data[12]);
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	20 91 48 01 	lds	r18, 0x0148
     d78:	82 0f       	add	r24, r18
     d7a:	91 1d       	adc	r25, r1
     d7c:	90 93 bf 01 	sts	0x01BF, r25
     d80:	80 93 be 01 	sts	0x01BE, r24
     d84:	90 91 49 01 	lds	r25, 0x0149
	ram.isp.param.eepromsize = beget16(&ram.RingBuffer_Data[14]);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	20 91 4a 01 	lds	r18, 0x014A
     d8e:	82 0f       	add	r24, r18
     d90:	91 1d       	adc	r25, r1
     d92:	90 93 c1 01 	sts	0x01C1, r25
     d96:	80 93 c0 01 	sts	0x01C0, r24
     d9a:	08 95       	ret

00000d9c <spi_init>:

//================================================================================
// SPI
//================================================================================

void spi_init(void) {
     d9c:	83 e5       	ldi	r24, 0x53	; 83
     d9e:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     da0:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     da2:	8e b5       	in	r24, 0x2e	; 46
     da4:	08 95       	ret

00000da6 <spi_wait>:
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     da6:	0d b4       	in	r0, 0x2d	; 45
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <spi_wait>
}
     dac:	08 95       	ret

00000dae <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     dae:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     db0:	fa df       	rcall	.-12     	; 0xda6 <spi_wait>
     db2:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     db4:	08 95       	ret

00000db6 <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	00 d0       	rcall	.+0      	; 0xdbc <spi_transaction+0x6>
     dbc:	1f 92       	push	r1
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	// here was an unused error correction? <--
	spi_send(a);
     dc2:	2b 83       	std	Y+3, r18	; 0x03
     dc4:	4a 83       	std	Y+2, r20	; 0x02
     dc6:	69 83       	std	Y+1, r22	; 0x01
     dc8:	f2 df       	rcall	.-28     	; 0xdae <spi_send>
     dca:	69 81       	ldd	r22, Y+1	; 0x01
	spi_send(b);
     dcc:	86 2f       	mov	r24, r22
     dce:	ef df       	rcall	.-34     	; 0xdae <spi_send>
     dd0:	4a 81       	ldd	r20, Y+2	; 0x02
     dd2:	84 2f       	mov	r24, r20
	spi_send(c);
     dd4:	ec df       	rcall	.-40     	; 0xdae <spi_send>
     dd6:	2b 81       	ldd	r18, Y+3	; 0x03
     dd8:	82 2f       	mov	r24, r18
     dda:	0f 90       	pop	r0
	return spi_send(d);
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	e4 cf       	rjmp	.-56     	; 0xdae <spi_send>

00000de6 <read_signature>:
	fill(4);
	ch = spi_transaction(ram.RingBuffer_Data[0], ram.RingBuffer_Data[1], ram.RingBuffer_Data[2], ram.RingBuffer_Data[3]);
	breply(ch);
}

void read_signature(void) {
     de6:	49 df       	rcall	.-366    	; 0xc7a <getch>
     de8:	80 32       	cpi	r24, 0x20	; 32
uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	// here was an unused error correction? <--
	spi_send(a);
	spi_send(b);
	spi_send(c);
	return spi_send(d);
     dea:	59 f0       	breq	.+22     	; 0xe02 <read_signature+0x1c>
     dec:	80 91 bb 01 	lds	r24, 0x01BB
	breply(ch);
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     df0:	98 2f       	mov	r25, r24
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	9f 77       	andi	r25, 0x7F	; 127
     df6:	80 78       	andi	r24, 0x80	; 128
     df8:	89 2b       	or	r24, r25
     dfa:	80 93 bb 01 	sts	0x01BB, r24
     dfe:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     e00:	15 c0       	rjmp	.+42     	; 0xe2c <read_signature+0x46>
     e02:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e04:	17 df       	rcall	.-466    	; 0xc34 <sendCDCbyte>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	80 e3       	ldi	r24, 0x30	; 48
     e0e:	d3 df       	rcall	.-90     	; 0xdb6 <spi_transaction>
     e10:	11 df       	rcall	.-478    	; 0xc34 <sendCDCbyte>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     e1a:	cd df       	rcall	.-102    	; 0xdb6 <spi_transaction>
     e1c:	0b df       	rcall	.-490    	; 0xc34 <sendCDCbyte>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     e26:	c7 df       	rcall	.-114    	; 0xdb6 <spi_transaction>
     e28:	05 df       	rcall	.-502    	; 0xc34 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     e2a:	80 e1       	ldi	r24, 0x10	; 16
     e2c:	03 cf       	rjmp	.-506    	; 0xc34 <sendCDCbyte>

00000e2e <universal>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void universal(void) {
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	2a df       	rcall	.-428    	; 0xc88 <fill>
     e34:	20 91 3e 01 	lds	r18, 0x013E
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     e38:	40 91 3d 01 	lds	r20, 0x013D
	sendCDCbyte(STK_OK);
     e3c:	60 91 3c 01 	lds	r22, 0x013C
     e40:	80 91 3b 01 	lds	r24, 0x013B
     e44:	b8 df       	rcall	.-144    	; 0xdb6 <spi_transaction>
     e46:	4f cf       	rjmp	.-354    	; 0xce6 <breply>

00000e48 <start_pmode>:

//================================================================================
// Start/End Pmode
//================================================================================

void start_pmode(void) {
     e48:	20 9a       	sbi	0x04, 0	; 4
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.RingBuffer_Data[0], ram.RingBuffer_Data[1], ram.RingBuffer_Data[2], ram.RingBuffer_Data[3]);
	breply(ch);
     e4a:	28 9a       	sbi	0x05, 0	; 5
void start_pmode(void) {
	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);

	spi_init();
     e4c:	a7 df       	rcall	.-178    	; 0xd9c <spi_init>
     e4e:	24 9a       	sbi	0x04, 4	; 4

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     e50:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     e52:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     e54:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	80 e7       	ldi	r24, 0x70	; 112
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	80 40       	sbci	r24, 0x00	; 0
     e60:	90 40       	sbci	r25, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <start_pmode+0x14>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <start_pmode+0x1e>
     e66:	00 00       	nop
     e68:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     e6a:	2f ef       	ldi	r18, 0xFF	; 255
     e6c:	80 e7       	ldi	r24, 0x70	; 112
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	80 40       	sbci	r24, 0x00	; 0
     e74:	90 40       	sbci	r25, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <start_pmode+0x28>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <start_pmode+0x32>
     e7a:	00 00       	nop
     e7c:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     e7e:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     e80:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	63 e5       	ldi	r22, 0x53	; 83
     e86:	8c ea       	ldi	r24, 0xAC	; 172
     e88:	96 df       	rcall	.-212    	; 0xdb6 <spi_transaction>
     e8a:	eb eb       	ldi	r30, 0xBB	; 187
     e8c:	f1 e0       	ldi	r31, 0x01	; 1

	// set pmode flag, do NOT reset other ISP values here!
	ram.isp.pmode = true;
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	80 83       	st	Z, r24
     e94:	8e dd       	rcall	.-1252   	; 0x9b2 <clearHIDReports>
     e96:	e6 e3       	ldi	r30, 0x36	; 54
	
	// clear all pending HID reports
	clearHIDReports();
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	8f b7       	in	r24, 0x3f	; 63
	}

	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_ResetBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     e9c:	f8 94       	cli
     e9e:	12 82       	std	Z+2, r1	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ea0:	14 82       	std	Z+4, r1	; 0x04
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ea2:	8f bf       	out	0x3f, r24	; 63

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// TODO index doesnt really matter
		Buffer->Index = 0;
     ea4:	10 92 e0 01 	sts	0x01E0, r1
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ea8:	85 ed       	ldi	r24, 0xD5	; 213

	// do not write Serial stuff into buffer, we need this ram now
	LRingBuffer_ResetBuffer(&ram.RingBuffer);
	ram.skipNHP = 0;
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	4d c2       	rjmp	.+1178   	; 0x1348 <NHPreset>

00000eae <accessData>:
	NHPreset(&ram.NHP);
     eae:	96 2f       	mov	r25, r22
     eb0:	67 2f       	mov	r22, r23
     eb2:	24 2f       	mov	r18, r20
	return spi_send(d);
}

uint8_t accessData(uint8_t type, int addr, uint8_t data){
	// spi: type, address MSB, address LSB, data
	return spi_transaction(type, (addr >> 8) & 0xFF, addr & 0xFF, data);
     eb4:	49 2f       	mov	r20, r25
     eb6:	7f cf       	rjmp	.-258    	; 0xdb6 <spi_transaction>

00000eb8 <read_page>:

//================================================================================
// Read page
//================================================================================

void read_page(void) {
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
	// get length, memtype and check if signal is still okay
	int length = 256 * getch();
     ec4:	da de       	rcall	.-588    	; 0xc7a <getch>
     ec6:	18 2f       	mov	r17, r24
     ec8:	d8 de       	rcall	.-592    	; 0xc7a <getch>
	length += getch();
     eca:	d8 2f       	mov	r29, r24
     ecc:	d6 de       	rcall	.-596    	; 0xc7a <getch>
     ece:	c8 2f       	mov	r28, r24
	char memtype = getch();
     ed0:	d4 de       	rcall	.-600    	; 0xc7a <getch>
     ed2:	80 32       	cpi	r24, 0x20	; 32
     ed4:	59 f0       	breq	.+22     	; 0xeec <read_page+0x34>

	if (CRC_EOP != getch()) {
     ed6:	80 91 bb 01 	lds	r24, 0x01BB
     eda:	98 2f       	mov	r25, r24
     edc:	9f 5f       	subi	r25, 0xFF	; 255
		ram.isp.error++;
     ede:	9f 77       	andi	r25, 0x7F	; 127
     ee0:	80 78       	andi	r24, 0x80	; 128
     ee2:	89 2b       	or	r24, r25
     ee4:	80 93 bb 01 	sts	0x01BB, r24
     ee8:	85 e1       	ldi	r24, 0x15	; 21
     eea:	44 c0       	rjmp	.+136    	; 0xf74 <read_page+0xbc>
     eec:	31 2f       	mov	r19, r17
     eee:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     ef0:	79 01       	movw	r14, r18
     ef2:	ed 0e       	add	r14, r29
// Read page
//================================================================================

void read_page(void) {
	// get length, memtype and check if signal is still okay
	int length = 256 * getch();
     ef4:	f1 1c       	adc	r15, r1
     ef6:	84 e1       	ldi	r24, 0x14	; 20
	length += getch();
     ef8:	9d de       	rcall	.-710    	; 0xc34 <sendCDCbyte>
     efa:	c6 34       	cpi	r28, 0x46	; 70
     efc:	19 f5       	brne	.+70     	; 0xf44 <read_page+0x8c>
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}

	sendCDCbyte(STK_INSYNC);
     efe:	1b c0       	rjmp	.+54     	; 0xf36 <read_page+0x7e>
     f00:	60 91 bc 01 	lds	r22, 0x01BC
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
     f04:	70 91 bd 01 	lds	r23, 0x01BD
     f08:	40 e0       	ldi	r20, 0x00	; 0
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
			// flash_read
			uint8_t low = accessData(0x20 + LOW * 8, ram.isp._addr, 0x00);
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	d0 df       	rcall	.-96     	; 0xeae <accessData>
     f0e:	92 de       	rcall	.-732    	; 0xc34 <sendCDCbyte>
     f10:	60 91 bc 01 	lds	r22, 0x01BC
     f14:	70 91 bd 01 	lds	r23, 0x01BD
     f18:	40 e0       	ldi	r20, 0x00	; 0
			sendCDCbyte(low);
     f1a:	88 e2       	ldi	r24, 0x28	; 40
     f1c:	c8 df       	rcall	.-112    	; 0xeae <accessData>

			// flash_read
			uint8_t high = accessData(0x20 + HIGH * 8, ram.isp._addr, 0x00);
     f1e:	8a de       	rcall	.-748    	; 0xc34 <sendCDCbyte>
     f20:	80 91 bc 01 	lds	r24, 0x01BC
     f24:	90 91 bd 01 	lds	r25, 0x01BD
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	90 93 bd 01 	sts	0x01BD, r25
			sendCDCbyte(high);
     f2e:	80 93 bc 01 	sts	0x01BC, r24

			ram.isp._addr++;
     f32:	22 96       	adiw	r28, 0x02	; 2
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <read_page+0x82>
     f36:	c0 e0       	ldi	r28, 0x00	; 0
     f38:	d0 e0       	ldi	r29, 0x00	; 0
     f3a:	ce 15       	cp	r28, r14
     f3c:	df 05       	cpc	r29, r15
     f3e:	04 f3       	brlt	.-64     	; 0xf00 <read_page+0x48>
     f40:	80 e1       	ldi	r24, 0x10	; 16
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <read_page+0xbc>
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
     f44:	c5 34       	cpi	r28, 0x45	; 69
     f46:	a9 f4       	brne	.+42     	; 0xf72 <read_page+0xba>

	sendCDCbyte(STK_INSYNC);
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
     f48:	00 91 bc 01 	lds	r16, 0x01BC
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
     f4c:	10 91 bd 01 	lds	r17, 0x01BD
     f50:	00 0f       	add	r16, r16
			uint8_t high = accessData(0x20 + HIGH * 8, ram.isp._addr, 0x00);
			sendCDCbyte(high);

			ram.isp._addr++;
		}
		result = STK_OK;
     f52:	11 1f       	adc	r17, r17
     f54:	c0 e0       	ldi	r28, 0x00	; 0
	}

	if (memtype == 'E'){
     f56:	d0 e0       	ldi	r29, 0x00	; 0
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <read_page+0xb2>
		// eeprom_read_page
		// here again we have a word address
		int start = ram.isp._addr * 2;
     f5a:	be 01       	movw	r22, r28
     f5c:	60 0f       	add	r22, r16
     f5e:	71 1f       	adc	r23, r17
     f60:	4f ef       	ldi	r20, 0xFF	; 255
     f62:	80 ea       	ldi	r24, 0xA0	; 160
     f64:	a4 df       	rcall	.-184    	; 0xeae <accessData>
		for (int x = 0; x < length; x++) {
     f66:	66 de       	rcall	.-820    	; 0xc34 <sendCDCbyte>
     f68:	21 96       	adiw	r28, 0x01	; 1
     f6a:	ce 15       	cp	r28, r14

//================================================================================
// Read page
//================================================================================

void read_page(void) {
     f6c:	df 05       	cpc	r29, r15
     f6e:	ac f3       	brlt	.-22     	; 0xf5a <read_page+0xa2>
     f70:	e7 cf       	rjmp	.-50     	; 0xf40 <read_page+0x88>
		// here again we have a word address
		int start = ram.isp._addr * 2;
		for (int x = 0; x < length; x++) {
			int addr = start + x;
			// TODO itegrate intern address ? <--
			uint8_t ee = accessData(0xA0, addr, 0xFF);
     f72:	81 e1       	ldi	r24, 0x11	; 17
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
			sendCDCbyte(ee);
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15

	if (memtype == 'E'){
		// eeprom_read_page
		// here again we have a word address
		int start = ram.isp._addr * 2;
		for (int x = 0; x < length; x++) {
     f7e:	ef 90       	pop	r14
     f80:	59 ce       	rjmp	.-846    	; 0xc34 <sendCDCbyte>

00000f82 <current_page>:
	write_flash_chunk(start, remaining);
	return STK_OK;

}

int current_page(void) {
     f82:	80 91 be 01 	lds	r24, 0x01BE
     f86:	90 91 bf 01 	lds	r25, 0x01BF
		result = STK_OK;
	}

	sendCDCbyte(result);
	return;
}
     f8a:	20 91 bc 01 	lds	r18, 0x01BC
     f8e:	30 91 bd 01 	lds	r19, 0x01BD
     f92:	80 32       	cpi	r24, 0x20	; 32
     f94:	91 05       	cpc	r25, r1
			sendCDCbyte(ee);
		}
		result = STK_OK;
	}

	sendCDCbyte(result);
     f96:	11 f4       	brne	.+4      	; 0xf9c <current_page+0x1a>
	return STK_OK;

}

int current_page(void) {
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     f98:	20 7f       	andi	r18, 0xF0	; 240
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     f9c:	80 34       	cpi	r24, 0x40	; 64
     f9e:	91 05       	cpc	r25, r1
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <current_page+0x24>
     fa2:	20 7e       	andi	r18, 0xE0	; 224
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     fa6:	80 38       	cpi	r24, 0x80	; 128
     fa8:	91 05       	cpc	r25, r1
     faa:	11 f4       	brne	.+4      	; 0xfb0 <current_page+0x2e>
     fac:	20 7c       	andi	r18, 0xC0	; 192
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     fb0:	81 15       	cp	r24, r1
     fb2:	91 40       	sbci	r25, 0x01	; 1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <current_page+0x36>
     fb6:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     fb8:	c9 01       	movw	r24, r18
     fba:	08 95       	ret

00000fbc <commit>:
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     fbc:	5d 9a       	sbi	0x0b, 5	; 11

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	accessData(0x4C, addr, 0x00);
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	bc 01       	movw	r22, r24
     fc2:	8c e4       	ldi	r24, 0x4C	; 76
     fc4:	74 df       	rcall	.-280    	; 0xeae <accessData>
     fc6:	2f ef       	ldi	r18, 0xFF	; 255
     fc8:	86 e7       	ldi	r24, 0x76	; 118
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	21 50       	subi	r18, 0x01	; 1
     fce:	80 40       	sbci	r24, 0x00	; 0
     fd0:	90 40       	sbci	r25, 0x00	; 0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <commit+0x10>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <commit+0x1a>
     fd6:	00 00       	nop
     fd8:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     fda:	08 95       	ret

00000fdc <write_flash_chunk>:
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}

uint8_t write_flash_chunk(int start, int length) {
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
     fee:	cb 01       	movw	r24, r22
     ff0:	4b de       	rcall	.-874    	; 0xc88 <fill>
     ff2:	c7 df       	rcall	.-114    	; 0xf82 <current_page>
	int x = 0;
	int page = current_page();
     ff4:	8c 01       	movw	r16, r24
     ff6:	c0 e0       	ldi	r28, 0x00	; 0
     ff8:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
     ffa:	29 c0       	rjmp	.+82     	; 0x104e <write_flash_chunk+0x72>
     ffc:	96 e3       	ldi	r25, 0x36	; 54
	int page = current_page();
	while (x < length) {
     ffe:	c9 2e       	mov	r12, r25
	accessData(0x4C, addr, 0x00);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}

uint8_t write_flash_chunk(int start, int length) {
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	d9 2e       	mov	r13, r25
    1004:	cc 0e       	add	r12, r28
    1006:	dd 1e       	adc	r13, r29
    1008:	60 91 bc 01 	lds	r22, 0x01BC
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
		// flash
		accessData(0x40 + 8 * LOW, ram.isp._addr, ram.RingBuffer_Data[x++]);
    100c:	70 91 bd 01 	lds	r23, 0x01BD
    1010:	f6 01       	movw	r30, r12
    1012:	45 81       	ldd	r20, Z+5	; 0x05
    1014:	80 e4       	ldi	r24, 0x40	; 64
    1016:	4b df       	rcall	.-362    	; 0xeae <accessData>
    1018:	22 96       	adiw	r28, 0x02	; 2
    101a:	60 91 bc 01 	lds	r22, 0x01BC

		// flash
		accessData(0x40 + 8 * HIGH, ram.isp._addr, ram.RingBuffer_Data[x++]);
    101e:	70 91 bd 01 	lds	r23, 0x01BD
    1022:	f6 01       	movw	r30, r12
    1024:	46 81       	ldd	r20, Z+6	; 0x06
    1026:	88 e4       	ldi	r24, 0x48	; 72
    1028:	42 df       	rcall	.-380    	; 0xeae <accessData>
    102a:	20 91 bc 01 	lds	r18, 0x01BC
    102e:	30 91 bd 01 	lds	r19, 0x01BD

		ram.isp._addr++;
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	30 93 bd 01 	sts	0x01BD, r19
    103a:	20 93 bc 01 	sts	0x01BC, r18
    103e:	a1 df       	rcall	.-190    	; 0xf82 <current_page>
    1040:	08 17       	cp	r16, r24
    1042:	19 07       	cpc	r17, r25
    1044:	21 f0       	breq	.+8      	; 0x104e <write_flash_chunk+0x72>

		// TODO check if its okay with this commit + chunk comibation <--
		// could be a possible good fix if i understood this right
		// check if current page finished, commit and start a new page
		if (page != current_page()) {
    1046:	c8 01       	movw	r24, r16
    1048:	b9 df       	rcall	.-142    	; 0xfbc <commit>
    104a:	9b df       	rcall	.-202    	; 0xf82 <current_page>
    104c:	8c 01       	movw	r16, r24
    104e:	ce 15       	cp	r28, r14
			// TODO merge commit here
			commit(page);
    1050:	df 05       	cpc	r29, r15
    1052:	a4 f2       	brlt	.-88     	; 0xffc <write_flash_chunk+0x20>
    1054:	80 e1       	ldi	r24, 0x10	; 16
			page = current_page();
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
		}
	}
	//commit(page);

	return STK_OK;
}
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	08 95       	ret

00001068 <write_flash>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1070:	c0 91 bc 01 	lds	r28, 0x01BC
    1074:	d0 91 bd 01 	lds	r29, 0x01BD
    1078:	cc 0f       	add	r28, r28
    107a:	dd 1f       	adc	r29, r29
	int remaining = length;
    107c:	8c 01       	movw	r16, r24

	while (remaining > sizeof(ram.RingBuffer_Data)) {
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <write_flash+0x28>
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
    1080:	60 e8       	ldi	r22, 0x80	; 128
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	ce 01       	movw	r24, r28
    1086:	aa df       	rcall	.-172    	; 0xfdc <write_flash_chunk>
    1088:	c0 58       	subi	r28, 0x80	; 128
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    108a:	df 4f       	sbci	r29, 0xFF	; 255
    108c:	00 58       	subi	r16, 0x80	; 128
    108e:	11 09       	sbc	r17, r1
    1090:	01 38       	cpi	r16, 0x81	; 129
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
	int remaining = length;

	while (remaining > sizeof(ram.RingBuffer_Data)) {
    1092:	11 05       	cpc	r17, r1
    1094:	a8 f7       	brcc	.-22     	; 0x1080 <write_flash+0x18>
    1096:	b8 01       	movw	r22, r16
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
		start += sizeof(ram.RingBuffer_Data);
		remaining -= sizeof(ram.RingBuffer_Data);
	}
	write_flash_chunk(start, remaining);
    1098:	ce 01       	movw	r24, r28
    109a:	a0 df       	rcall	.-192    	; 0xfdc <write_flash_chunk>
    109c:	80 e1       	ldi	r24, 0x10	; 16
    109e:	df 91       	pop	r29
	return STK_OK;

}
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <write_eeprom_chunk>:
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}

// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	6c 01       	movw	r12, r24
    10ba:	8b 01       	movw	r16, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
    10bc:	cb 01       	movw	r24, r22
    10be:	e4 dd       	rcall	.-1080   	; 0xc88 <fill>
    10c0:	5d 9a       	sbi	0x0b, 5	; 11
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    10c2:	3b e3       	ldi	r19, 0x3B	; 59
    10c4:	e3 2e       	mov	r14, r19
    10c6:	31 e0       	ldi	r19, 0x01	; 1
    10c8:	f3 2e       	mov	r15, r19
    10ca:	c0 e0       	ldi	r28, 0x00	; 0
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
    10ce:	12 c0       	rjmp	.+36     	; 0x10f4 <write_eeprom_chunk+0x4c>
    10d0:	f7 01       	movw	r30, r14
		//TODO check here if we can use intern address
		int addr = start + x;
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
    10d2:	41 91       	ld	r20, Z+
    10d4:	7f 01       	movw	r14, r30
    10d6:	be 01       	movw	r22, r28
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}

// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    10d8:	6c 0d       	add	r22, r12
    10da:	7d 1d       	adc	r23, r13
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		//TODO check here if we can use intern address
		int addr = start + x;
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
    10de:	e7 de       	rcall	.-562    	; 0xeae <accessData>
    10e0:	ff e7       	ldi	r31, 0x7F	; 127
    10e2:	22 e3       	ldi	r18, 0x32	; 50
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	f1 50       	subi	r31, 0x01	; 1
    10e8:	20 40       	sbci	r18, 0x00	; 0
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <write_eeprom_chunk+0x3e>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <write_eeprom_chunk+0x48>
    10f0:	00 00       	nop
    10f2:	21 96       	adiw	r28, 0x01	; 1
    10f4:	c0 17       	cp	r28, r16
uint8_t write_eeprom_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    10f6:	d1 07       	cpc	r29, r17
    10f8:	5c f3       	brlt	.-42     	; 0x10d0 <write_eeprom_chunk+0x28>
    10fa:	5d 98       	cbi	0x0b, 5	; 11
    10fc:	80 e1       	ldi	r24, 0x10	; 16
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
    10fe:	df 91       	pop	r29
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	08 95       	ret

00001110 <write_eeprom>:
	//commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1118:	c0 91 bc 01 	lds	r28, 0x01BC
    111c:	d0 91 bd 01 	lds	r29, 0x01BD
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
    1120:	20 91 c0 01 	lds	r18, 0x01C0
    1124:	30 91 c1 01 	lds	r19, 0x01C1
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	24 f0       	brlt	.+8      	; 0x1136 <write_eeprom+0x26>
	return STK_OK;
}

uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    112e:	cc 0f       	add	r28, r28
    1130:	dd 1f       	adc	r29, r29
    1132:	8c 01       	movw	r16, r24
    1134:	13 c0       	rjmp	.+38     	; 0x115c <write_eeprom+0x4c>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
    1136:	80 91 bb 01 	lds	r24, 0x01BB
    113a:	98 2f       	mov	r25, r24
    113c:	9f 5f       	subi	r25, 0xFF	; 255
    113e:	9f 77       	andi	r25, 0x7F	; 127
    1140:	80 78       	andi	r24, 0x80	; 128
    1142:	89 2b       	or	r24, r25
    1144:	80 93 bb 01 	sts	0x01BB, r24
		return STK_FAILED;
    1148:	81 e1       	ldi	r24, 0x11	; 17
    114a:	0f c0       	rjmp	.+30     	; 0x116a <write_eeprom+0x5a>
	}
	while (remaining > sizeof(ram.RingBuffer_Data)) {
		write_eeprom_chunk(start, sizeof(ram.RingBuffer_Data));
    114c:	60 e8       	ldi	r22, 0x80	; 128
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	ce 01       	movw	r24, r28
    1152:	aa df       	rcall	.-172    	; 0x10a8 <write_eeprom_chunk>
    1154:	c0 58       	subi	r28, 0x80	; 128
	//commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    1156:	df 4f       	sbci	r29, 0xFF	; 255
    1158:	00 58       	subi	r16, 0x80	; 128
    115a:	11 09       	sbc	r17, r1
    115c:	01 38       	cpi	r16, 0x81	; 129
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > sizeof(ram.RingBuffer_Data)) {
    115e:	11 05       	cpc	r17, r1
    1160:	a8 f7       	brcc	.-22     	; 0x114c <write_eeprom+0x3c>
    1162:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, sizeof(ram.RingBuffer_Data));
		start += sizeof(ram.RingBuffer_Data);
		remaining -= sizeof(ram.RingBuffer_Data);
	}
	write_eeprom_chunk(start, remaining);
    1164:	ce 01       	movw	r24, r28
    1166:	a0 df       	rcall	.-192    	; 0x10a8 <write_eeprom_chunk>
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	df 91       	pop	r29
	return STK_OK;
    116c:	cf 91       	pop	r28
}
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <program_page>:

//================================================================================
// Programm page
//================================================================================

void program_page(void) {
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    1178:	80 dd       	rcall	.-1280   	; 0xc7a <getch>
    117a:	d8 2f       	mov	r29, r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	c8 2f       	mov	r28, r24
    1180:	7c dd       	rcall	.-1288   	; 0xc7a <getch>
	length += getch();
    1182:	c8 0f       	add	r28, r24
    1184:	d1 1d       	adc	r29, r1
    1186:	79 dd       	rcall	.-1294   	; 0xc7a <getch>
    1188:	86 34       	cpi	r24, 0x46	; 70

	char memtype = getch();
    118a:	19 f4       	brne	.+6      	; 0x1192 <program_page+0x1e>
    118c:	ce 01       	movw	r24, r28
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    118e:	6c df       	rcall	.-296    	; 0x1068 <write_flash>
    1190:	04 c0       	rjmp	.+8      	; 0x119a <program_page+0x26>
		uint8_t result = write_flash(length);
    1192:	85 34       	cpi	r24, 0x45	; 69
    1194:	a9 f4       	brne	.+42     	; 0x11c0 <program_page+0x4c>
    1196:	ce 01       	movw	r24, r28
    1198:	bb df       	rcall	.-138    	; 0x1110 <write_eeprom>
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}

	if (memtype == 'E') {
    119a:	c8 2f       	mov	r28, r24
    119c:	6e dd       	rcall	.-1316   	; 0xc7a <getch>
		result = (char)write_eeprom(length);
    119e:	80 32       	cpi	r24, 0x20	; 32
    11a0:	21 f4       	brne	.+8      	; 0x11aa <program_page+0x36>
    11a2:	84 e1       	ldi	r24, 0x14	; 20
    11a4:	47 dd       	rcall	.-1394   	; 0xc34 <sendCDCbyte>
		if (CRC_EOP == getch()) {
    11a6:	8c 2f       	mov	r24, r28
    11a8:	0c c0       	rjmp	.+24     	; 0x11c2 <program_page+0x4e>
    11aa:	80 91 bb 01 	lds	r24, 0x01BB
			sendCDCbyte(STK_INSYNC);
    11ae:	98 2f       	mov	r25, r24
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	9f 77       	andi	r25, 0x7F	; 127
			sendCDCbyte(result);
    11b4:	80 78       	andi	r24, 0x80	; 128
    11b6:	89 2b       	or	r24, r25
		}
		else {
			ram.isp.error++;
    11b8:	80 93 bb 01 	sts	0x01BB, r24
    11bc:	85 e1       	ldi	r24, 0x15	; 21
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <program_page+0x4e>
    11c0:	81 e1       	ldi	r24, 0x11	; 17
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	36 cd       	rjmp	.-1428   	; 0xc34 <sendCDCbyte>

000011c8 <avrisp>:
	ram.isp.error = 0;
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}

void avrisp(int ReceivedByte){
    11c8:	cf 93       	push	r28
			sendCDCbyte(STK_INSYNC);
			sendCDCbyte(result);
		}
		else {
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
    11ca:	df 93       	push	r29
	ram.isp._addr = 0; // just to be sure
}

void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11cc:	20 91 bb 01 	lds	r18, 0x01BB
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
    11d0:	27 ff       	sbrs	r18, 7
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <avrisp+0x10>
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11d4:	5d 98       	cbi	0x0b, 5	; 11
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <avrisp+0x12>
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    11d8:	5d 9a       	sbi	0x0b, 5	; 11
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    11da:	2f 77       	andi	r18, 0x7F	; 127
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <avrisp+0x1a>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
    11de:	5c 98       	cbi	0x0b, 4	; 11
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <avrisp+0x1c>
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    11e2:	5c 9a       	sbi	0x0b, 4	; 11
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    11e4:	97 fd       	sbrc	r25, 7
    11e6:	ad c0       	rjmp	.+346    	; 0x1342 <avrisp+0x17a>
		switch (ReceivedByte) {
    11e8:	81 35       	cpi	r24, 0x51	; 81
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <avrisp+0x28>
    11ee:	83 c0       	rjmp	.+262    	; 0x12f6 <avrisp+0x12e>
    11f0:	e4 f4       	brge	.+56     	; 0x122a <avrisp+0x62>
    11f2:	81 34       	cpi	r24, 0x41	; 65
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <avrisp+0x32>
    11f8:	53 c0       	rjmp	.+166    	; 0x12a0 <avrisp+0xd8>
    11fa:	54 f4       	brge	.+20     	; 0x1210 <avrisp+0x48>
    11fc:	80 33       	cpi	r24, 0x30	; 48
    11fe:	91 05       	cpc	r25, r1
    1200:	99 f1       	breq	.+102    	; 0x1268 <avrisp+0xa0>
    1202:	81 33       	cpi	r24, 0x31	; 49
    1204:	91 05       	cpc	r25, r1
    1206:	b1 f1       	breq	.+108    	; 0x1274 <avrisp+0xac>
    1208:	80 97       	sbiw	r24, 0x20	; 32
    120a:	09 f0       	breq	.+2      	; 0x120e <avrisp+0x46>
    120c:	88 c0       	rjmp	.+272    	; 0x131e <avrisp+0x156>
    120e:	7d c0       	rjmp	.+250    	; 0x130a <avrisp+0x142>
    1210:	85 34       	cpi	r24, 0x45	; 69
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <avrisp+0x50>
    1216:	4c c0       	rjmp	.+152    	; 0x12b0 <avrisp+0xe8>
    1218:	80 35       	cpi	r24, 0x50	; 80
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <avrisp+0x58>
    121e:	4c c0       	rjmp	.+152    	; 0x12b8 <avrisp+0xf0>
    1220:	82 34       	cpi	r24, 0x42	; 66
    1222:	91 05       	cpc	r25, r1
    1224:	09 f0       	breq	.+2      	; 0x1228 <avrisp+0x60>
    1226:	7b c0       	rjmp	.+246    	; 0x131e <avrisp+0x156>
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <avrisp+0xe0>
    122a:	81 36       	cpi	r24, 0x61	; 97
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <avrisp+0x6a>
    1230:	57 c0       	rjmp	.+174    	; 0x12e0 <avrisp+0x118>
    1232:	6c f4       	brge	.+26     	; 0x124e <avrisp+0x86>
    1234:	86 35       	cpi	r24, 0x56	; 86
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <avrisp+0x74>
    123a:	5a c0       	rjmp	.+180    	; 0x12f0 <avrisp+0x128>
    123c:	80 36       	cpi	r24, 0x60	; 96
    123e:	91 05       	cpc	r25, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <avrisp+0x7c>
    1242:	4d c0       	rjmp	.+154    	; 0x12de <avrisp+0x116>
    1244:	85 35       	cpi	r24, 0x55	; 85
    1246:	91 05       	cpc	r25, r1
    1248:	09 f0       	breq	.+2      	; 0x124c <avrisp+0x84>
    124a:	69 c0       	rjmp	.+210    	; 0x131e <avrisp+0x156>
    124c:	37 c0       	rjmp	.+110    	; 0x12bc <avrisp+0xf4>
    124e:	84 37       	cpi	r24, 0x74	; 116
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <avrisp+0x8e>
    1254:	4a c0       	rjmp	.+148    	; 0x12ea <avrisp+0x122>
    1256:	85 37       	cpi	r24, 0x75	; 117
    1258:	91 05       	cpc	r25, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <avrisp+0x96>
    125c:	53 c0       	rjmp	.+166    	; 0x1304 <avrisp+0x13c>
    125e:	84 36       	cpi	r24, 0x64	; 100
    1260:	91 05       	cpc	r25, r1
    1262:	09 f0       	breq	.+2      	; 0x1266 <avrisp+0x9e>
    1264:	5c c0       	rjmp	.+184    	; 0x131e <avrisp+0x156>
    1266:	3e c0       	rjmp	.+124    	; 0x12e4 <avrisp+0x11c>
		case STK_GET_SYNC:
			ram.isp.error = 0;
    1268:	80 91 bb 01 	lds	r24, 0x01BB
    126c:	80 78       	andi	r24, 0x80	; 128
    126e:	80 93 bb 01 	sts	0x01BB, r24
    1272:	1b c0       	rjmp	.+54     	; 0x12aa <avrisp+0xe2>
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    1274:	02 dd       	rcall	.-1532   	; 0xc7a <getch>
    1276:	80 32       	cpi	r24, 0x20	; 32
    1278:	09 f0       	breq	.+2      	; 0x127c <avrisp+0xb4>
    127a:	63 c0       	rjmp	.+198    	; 0x1342 <avrisp+0x17a>
    127c:	84 e1       	ldi	r24, 0x14	; 20
				sendCDCbyte(STK_INSYNC);
    127e:	da dc       	rcall	.-1612   	; 0xc34 <sendCDCbyte>
    1280:	81 e4       	ldi	r24, 0x41	; 65
    1282:	d8 dc       	rcall	.-1616   	; 0xc34 <sendCDCbyte>
				sendCDCbyte('A');
    1284:	86 e5       	ldi	r24, 0x56	; 86
    1286:	d6 dc       	rcall	.-1620   	; 0xc34 <sendCDCbyte>
    1288:	82 e5       	ldi	r24, 0x52	; 82
				sendCDCbyte('V');
    128a:	d4 dc       	rcall	.-1624   	; 0xc34 <sendCDCbyte>
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	d2 dc       	rcall	.-1628   	; 0xc34 <sendCDCbyte>
				sendCDCbyte('R');
    1290:	89 e4       	ldi	r24, 0x49	; 73
    1292:	d0 dc       	rcall	.-1632   	; 0xc34 <sendCDCbyte>
    1294:	83 e5       	ldi	r24, 0x53	; 83
				sendCDCbyte(' ');
    1296:	ce dc       	rcall	.-1636   	; 0xc34 <sendCDCbyte>
    1298:	80 e5       	ldi	r24, 0x50	; 80
    129a:	cc dc       	rcall	.-1640   	; 0xc34 <sendCDCbyte>
				sendCDCbyte('I');
    129c:	80 e1       	ldi	r24, 0x10	; 16
    129e:	4e c0       	rjmp	.+156    	; 0x133c <avrisp+0x174>
    12a0:	ec dc       	rcall	.-1576   	; 0xc7a <getch>
				sendCDCbyte('S');
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	4b cd       	rjmp	.-1386   	; 0xd3e <get_parameters>
				sendCDCbyte('P');
    12a8:	5f dd       	rcall	.-1346   	; 0xd68 <set_parameters>
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
				sendCDCbyte(STK_OK);
    12ae:	34 cd       	rjmp	.-1432   	; 0xd18 <replyOK>
    12b0:	85 e0       	ldi	r24, 0x05	; 5
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	e9 dc       	rcall	.-1582   	; 0xc88 <fill>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12b6:	f9 cf       	rjmp	.-14     	; 0x12aa <avrisp+0xe2>
    12b8:	c7 dd       	rcall	.-1138   	; 0xe48 <start_pmode>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12ba:	f7 cf       	rjmp	.-18     	; 0x12aa <avrisp+0xe2>
    12bc:	de dc       	rcall	.-1604   	; 0xc7a <getch>
			break;
		case STK_SET_PARM:
			set_parameters();
    12be:	c8 2f       	mov	r28, r24
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12c2:	d0 93 bd 01 	sts	0x01BD, r29
		case STK_GET_PARM:
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			set_parameters();
			replyOK();
    12c6:	c0 93 bc 01 	sts	0x01BC, r28
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    12ca:	d7 dc       	rcall	.-1618   	; 0xc7a <getch>
    12cc:	38 2f       	mov	r19, r24
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	2c 0f       	add	r18, r28
    12d2:	3d 1f       	adc	r19, r29
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    12d4:	30 93 bd 01 	sts	0x01BD, r19
    12d8:	20 93 bc 01 	sts	0x01BC, r18
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    12dc:	e6 cf       	rjmp	.-52     	; 0x12aa <avrisp+0xe2>
    12de:	cd dc       	rcall	.-1638   	; 0xc7a <getch>
    12e0:	cc dc       	rcall	.-1640   	; 0xc7a <getch>
    12e2:	e3 cf       	rjmp	.-58     	; 0x12aa <avrisp+0xe2>
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	45 cf       	rjmp	.-374    	; 0x1174 <program_page>
			ram.isp._addr += 256 * getch();
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	e4 cd       	rjmp	.-1080   	; 0xeb8 <read_page>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	9c cd       	rjmp	.-1224   	; 0xe2e <universal>
    12f6:	80 91 bb 01 	lds	r24, 0x01BB
    12fa:	80 78       	andi	r24, 0x80	; 128
    12fc:	80 93 bb 01 	sts	0x01BB, r24
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    1300:	de dc       	rcall	.-1604   	; 0xcbe <end_pmode>
    1302:	d3 cf       	rjmp	.-90     	; 0x12aa <avrisp+0xe2>
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	6e cd       	rjmp	.-1316   	; 0xde6 <read_signature>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    130a:	80 91 bb 01 	lds	r24, 0x01BB
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    130e:	98 2f       	mov	r25, r24
    1310:	9f 5f       	subi	r25, 0xFF	; 255
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1312:	9f 77       	andi	r25, 0x7F	; 127
    1314:	80 78       	andi	r24, 0x80	; 128
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    1316:	89 2b       	or	r24, r25
    1318:	80 93 bb 01 	sts	0x01BB, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    131c:	0e c0       	rjmp	.+28     	; 0x133a <avrisp+0x172>
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    131e:	80 91 bb 01 	lds	r24, 0x01BB
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    1322:	98 2f       	mov	r25, r24
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	9f 77       	andi	r25, 0x7F	; 127
    1328:	80 78       	andi	r24, 0x80	; 128
    132a:	89 2b       	or	r24, r25
			end_pmode();
    132c:	80 93 bb 01 	sts	0x01BB, r24
    1330:	a4 dc       	rcall	.-1720   	; 0xc7a <getch>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1332:	80 32       	cpi	r24, 0x20	; 32
    1334:	11 f4       	brne	.+4      	; 0x133a <avrisp+0x172>
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    1336:	82 e1       	ldi	r24, 0x12	; 18
    1338:	01 c0       	rjmp	.+2      	; 0x133c <avrisp+0x174>
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    133a:	85 e1       	ldi	r24, 0x15	; 21
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	79 cc       	rjmp	.-1806   	; 0xc34 <sendCDCbyte>
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    1348:	fc 01       	movw	r30, r24
    134a:	20 81       	ld	r18, Z
	protocol->leadError = false;
    134c:	20 68       	ori	r18, 0x80	; 128
    134e:	2f 7b       	andi	r18, 0xBF	; 191
    1350:	20 83       	st	Z, r18
    1352:	08 95       	ret

00001354 <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    135a:	90 81       	ld	r25, Z
    135c:	96 ff       	sbrs	r25, 6
    135e:	0f c0       	rjmp	.+30     	; 0x137e <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1360:	29 2f       	mov	r18, r25
    1362:	26 95       	lsr	r18
    1364:	26 95       	lsr	r18
    1366:	26 95       	lsr	r18
    1368:	27 70       	andi	r18, 0x07	; 7
    136a:	db 01       	movw	r26, r22
    136c:	a2 0f       	add	r26, r18
    136e:	b1 1d       	adc	r27, r1
    1370:	15 96       	adiw	r26, 0x05	; 5
    1372:	2c 91       	ld	r18, X
    1374:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    1376:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    1378:	98 60       	ori	r25, 0x08	; 8
    137a:	9f 7b       	andi	r25, 0xBF	; 191
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    137e:	97 ff       	sbrs	r25, 7
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    1382:	90 7c       	andi	r25, 0xC0	; 192
    1384:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    1386:	90 81       	ld	r25, Z
    1388:	96 95       	lsr	r25
    138a:	96 95       	lsr	r25
    138c:	96 95       	lsr	r25
    138e:	97 70       	andi	r25, 0x07	; 7
    1390:	df 01       	movw	r26, r30
    1392:	a9 0f       	add	r26, r25
    1394:	b1 1d       	adc	r27, r1
    1396:	15 96       	adiw	r26, 0x05	; 5
    1398:	8c 93       	st	X, r24
    139a:	29 2f       	mov	r18, r25
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	27 70       	andi	r18, 0x07	; 7
    13a0:	22 0f       	add	r18, r18
    13a2:	22 0f       	add	r18, r18
    13a4:	22 0f       	add	r18, r18
    13a6:	40 81       	ld	r20, Z
    13a8:	47 7c       	andi	r20, 0xC7	; 199
    13aa:	42 2b       	or	r20, r18
    13ac:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    13ae:	28 2f       	mov	r18, r24
    13b0:	20 7c       	andi	r18, 0xC0	; 192
    13b2:	34 2f       	mov	r19, r20
    13b4:	37 70       	andi	r19, 0x07	; 7
    13b6:	20 38       	cpi	r18, 0x80	; 128
    13b8:	09 f4       	brne	.+2      	; 0x13bc <NHPread+0x68>
    13ba:	63 c0       	rjmp	.+198    	; 0x1482 <NHPread+0x12e>
    13bc:	20 3c       	cpi	r18, 0xC0	; 192
    13be:	09 f0       	breq	.+2      	; 0x13c2 <NHPread+0x6e>
    13c0:	45 c0       	rjmp	.+138    	; 0x144c <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    13c2:	28 2f       	mov	r18, r24
    13c4:	28 73       	andi	r18, 0x38	; 56
    13c6:	26 95       	lsr	r18
    13c8:	26 95       	lsr	r18
    13ca:	26 95       	lsr	r18

		if (protocol->mBlocks){
    13cc:	33 23       	and	r19, r19
    13ce:	49 f0       	breq	.+18     	; 0x13e2 <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    13d0:	99 0f       	add	r25, r25
    13d2:	99 0f       	add	r25, r25
    13d4:	99 0f       	add	r25, r25
    13d6:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    13d8:	49 2b       	or	r20, r25
    13da:	40 64       	ori	r20, 0x40	; 64
    13dc:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    13de:	9e ef       	ldi	r25, 0xFE	; 254
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    13e2:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	98 f4       	brcc	.+38     	; 0x140e <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    13e8:	90 81       	ld	r25, Z
    13ea:	96 fb       	bst	r25, 6
    13ec:	22 27       	eor	r18, r18
    13ee:	20 f9       	bld	r18, 0
    13f0:	89 2f       	mov	r24, r25
    13f2:	86 95       	lsr	r24
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	82 0f       	add	r24, r18
    13fa:	87 70       	andi	r24, 0x07	; 7
    13fc:	88 0f       	add	r24, r24
    13fe:	88 0f       	add	r24, r24
    1400:	88 0f       	add	r24, r24
    1402:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    1404:	98 2b       	or	r25, r24
    1406:	9f 7b       	andi	r25, 0xBF	; 191
    1408:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    140a:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    140c:	3f c0       	rjmp	.+126    	; 0x148c <NHPread+0x138>
		}

		else if (blocks == 7){
    140e:	27 30       	cpi	r18, 0x07	; 7
    1410:	59 f4       	brne	.+22     	; 0x1428 <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    1412:	08 2f       	mov	r16, r24
    1414:	0f 70       	andi	r16, 0x0F	; 15
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	01 83       	std	Z+1, r16	; 0x01
    141e:	12 83       	std	Z+2, r17	; 0x02
    1420:	23 83       	std	Z+3, r18	; 0x03
    1422:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    1424:	25 e0       	ldi	r18, 0x05	; 5
    1426:	0a c0       	rjmp	.+20     	; 0x143c <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    1428:	48 2f       	mov	r20, r24
    142a:	47 70       	andi	r20, 0x07	; 7
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	41 83       	std	Z+1, r20	; 0x01
    1434:	52 83       	std	Z+2, r21	; 0x02
    1436:	63 83       	std	Z+3, r22	; 0x03
    1438:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    143a:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    143c:	27 70       	andi	r18, 0x07	; 7
    143e:	80 81       	ld	r24, Z
    1440:	88 7f       	andi	r24, 0xF8	; 248
    1442:	82 2b       	or	r24, r18
    1444:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    1446:	99 23       	and	r25, r25
    1448:	29 f1       	breq	.+74     	; 0x1494 <NHPread+0x140>
    144a:	20 c0       	rjmp	.+64     	; 0x148c <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    144c:	03 2f       	mov	r16, r19
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	02 30       	cpi	r16, 0x02	; 2
    1452:	11 05       	cpc	r17, r1
    1454:	24 f1       	brlt	.+72     	; 0x149e <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    1456:	39 5f       	subi	r19, 0xF9	; 249
    1458:	37 70       	andi	r19, 0x07	; 7
    145a:	48 7f       	andi	r20, 0xF8	; 248
    145c:	43 2b       	or	r20, r19
    145e:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1460:	41 81       	ldd	r20, Z+1	; 0x01
    1462:	52 81       	ldd	r21, Z+2	; 0x02
    1464:	63 81       	ldd	r22, Z+3	; 0x03
    1466:	74 81       	ldd	r23, Z+4	; 0x04
    1468:	97 e0       	ldi	r25, 0x07	; 7
    146a:	44 0f       	add	r20, r20
    146c:	55 1f       	adc	r21, r21
    146e:	66 1f       	adc	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	9a 95       	dec	r25
    1474:	d1 f7       	brne	.-12     	; 0x146a <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    1476:	48 2b       	or	r20, r24
    1478:	41 83       	std	Z+1, r20	; 0x01
    147a:	52 83       	std	Z+2, r21	; 0x02
    147c:	63 83       	std	Z+3, r22	; 0x03
    147e:	74 83       	std	Z+4, r23	; 0x04
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    1482:	31 30       	cpi	r19, 0x01	; 1
    1484:	71 f4       	brne	.+28     	; 0x14a2 <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    1486:	98 2f       	mov	r25, r24
    1488:	9f 73       	andi	r25, 0x3F	; 63
    148a:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    148c:	80 81       	ld	r24, Z
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    1494:	80 81       	ld	r24, Z
    1496:	8f 77       	andi	r24, 0x7F	; 127
    1498:	80 83       	st	Z, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    149e:	9d ef       	ldi	r25, 0xFD	; 253
    14a0:	f5 cf       	rjmp	.-22     	; 0x148c <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    14a2:	9c ef       	ldi	r25, 0xFC	; 252
    14a4:	f3 cf       	rjmp	.-26     	; 0x148c <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    14a6:	89 2f       	mov	r24, r25
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    14b8:	4d df       	rcall	.-358    	; 0x1354 <NHPread>
    14ba:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    14bc:	b4 f4       	brge	.+44     	; 0x14ea <NHPreadChecksum+0x3c>
    14be:	09 81       	ldd	r16, Y+1	; 0x01
    14c0:	1a 81       	ldd	r17, Y+2	; 0x02
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	a9 01       	movw	r20, r18
    14c8:	66 27       	eor	r22, r22
    14ca:	77 27       	eor	r23, r23
    14cc:	22 27       	eor	r18, r18
    14ce:	33 27       	eor	r19, r19
    14d0:	40 27       	eor	r20, r16
    14d2:	51 27       	eor	r21, r17
    14d4:	62 27       	eor	r22, r18
    14d6:	73 27       	eor	r23, r19
    14d8:	4f 3f       	cpi	r20, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	61 05       	cpc	r22, r1
    14de:	71 05       	cpc	r23, r1
    14e0:	21 f0       	breq	.+8      	; 0x14ea <NHPreadChecksum+0x3c>
    14e2:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	88 83       	st	Y, r24
    14e8:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    14ea:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    14f4:	fa 01       	movw	r30, r20
    14f6:	2c e1       	ldi	r18, 0x1C	; 28
    14f8:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    14fa:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    14fc:	ab 01       	movw	r20, r22
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <NHPwriteChecksum+0x12>
    1502:	56 95       	lsr	r21
    1504:	47 95       	ror	r20
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    150a:	48 30       	cpi	r20, 0x08	; 8
    150c:	28 f0       	brcs	.+10     	; 0x1518 <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    150e:	97 30       	cpi	r25, 0x07	; 7
    1510:	59 f4       	brne	.+22     	; 0x1528 <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    1512:	40 83       	st	Z, r20
				blocks--;
    1514:	96 e0       	ldi	r25, 0x06	; 6
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    1518:	40 83       	st	Z, r20
			blocks--;
    151a:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    151c:	41 11       	cpse	r20, r1
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <NHPwriteChecksum+0x34>
    1520:	27 50       	subi	r18, 0x07	; 7
    1522:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    1524:	92 30       	cpi	r25, 0x02	; 2
    1526:	51 f7       	brne	.-44     	; 0x14fc <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    1528:	49 2f       	mov	r20, r25
    152a:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    152e:	df 01       	movw	r26, r30
    1530:	a4 0f       	add	r26, r20
    1532:	b1 1d       	adc	r27, r1
    1534:	9b 01       	movw	r18, r22
    1536:	2f 77       	andi	r18, 0x7F	; 127
    1538:	33 27       	eor	r19, r19
    153a:	2c 93       	st	X, r18
		data >>= 7;
    153c:	66 0f       	add	r22, r22
    153e:	67 2f       	mov	r22, r23
    1540:	66 1f       	adc	r22, r22
    1542:	77 0b       	sbc	r23, r23
    1544:	71 95       	neg	r23
		datablocks--;
    1546:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    1548:	41 11       	cpse	r20, r1
    154a:	f1 cf       	rjmp	.-30     	; 0x152e <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    154c:	49 2f       	mov	r20, r25
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	9a 01       	movw	r18, r20
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	6a 95       	dec	r22
    155a:	e1 f7       	brne	.-8      	; 0x1554 <NHPwriteChecksum+0x60>
    155c:	20 6c       	ori	r18, 0xC0	; 192
    155e:	3f 6f       	ori	r19, 0xFF	; 255
    1560:	30 81       	ld	r19, Z
    1562:	32 2b       	or	r19, r18
    1564:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    1566:	e4 0f       	add	r30, r20
    1568:	f5 1f       	adc	r31, r21
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	81 50       	subi	r24, 0x01	; 1
    156e:	8f 73       	andi	r24, 0x3F	; 63
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    1574:	89 2f       	mov	r24, r25
    1576:	08 95       	ret

00001578 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
	// end pmode if needed and setup Serial + HID again (on errors)
	//TODO pmode break to get out of this loop
	if (ram.isp.pmode)
    1586:	80 91 bb 01 	lds	r24, 0x01BB
    158a:	87 fd       	sbrc	r24, 7
		end_pmode();
    158c:	98 db       	rcall	.-2256   	; 0xcbe <end_pmode>
    158e:	11 da       	rcall	.-3038   	; 0x9b2 <clearHIDReports>

	// clear HID reports if chip gets restarted
	clearHIDReports();
    1590:	cc 88       	ldd	r12, Y+20	; 0x14
    1592:	dd 88       	ldd	r13, Y+21	; 0x15

	uint32_t BaudRateBPS = CDCInterfaceInfo->State.LineEncoding.BaudRateBPS;
    1594:	ee 88       	ldd	r14, Y+22	; 0x16
    1596:	ff 88       	ldd	r15, Y+23	; 0x17
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	c8 16       	cp	r12, r24
	uint8_t CharFormat;
	uint8_t DataBits;
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
    159c:	d1 04       	cpc	r13, r1
    159e:	e1 04       	cpc	r14, r1
    15a0:	f1 04       	cpc	r15, r1
    15a2:	78 f4       	brcc	.+30     	; 0x15c2 <EVENT_CDC_Device_LineEncodingChanged+0x4a>
    15a4:	10 92 c2 01 	sts	0x01C2, r1
		CharFormat = CDC_LINEENCODING_OneStopBit;
		DataBits = 8;
		ParityType = CDC_PARITY_None;

		// reset LEDs
		ram.PulseMSRemaining.whole = 0;
    15a8:	8b b1       	in	r24, 0x0b	; 11
    15aa:	80 63       	ori	r24, 0x30	; 48
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    15ac:	8b b9       	out	0x0b, r24	; 11
    15ae:	e0 e0       	ldi	r30, 0x00	; 0
    15b0:	88 e0       	ldi	r24, 0x08	; 8
	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
		DataBits = 8;
		ParityType = CDC_PARITY_None;
    15b2:	90 e0       	ldi	r25, 0x00	; 0

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
		DataBits = 8;
    15b4:	c1 2c       	mov	r12, r1
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
    15b6:	32 ec       	ldi	r19, 0xC2	; 194
	uint8_t DataBits;
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
    15b8:	d3 2e       	mov	r13, r19
    15ba:	ee 24       	eor	r14, r14
    15bc:	e3 94       	inc	r14
    15be:	f1 2c       	mov	r15, r1
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <EVENT_CDC_Device_LineEncodingChanged+0x50>
    15c2:	98 8d       	ldd	r25, Y+24	; 0x18
    15c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
		ram.PulseMSRemaining.whole = 0;
		LEDs_SetAllLEDs(LEDS_NO_LEDS);
	}
	else{
		// use the Baud rate config from the USB interface
		CharFormat = CDCInterfaceInfo->State.LineEncoding.CharFormat;
    15c6:	e9 8d       	ldd	r30, Y+25	; 0x19
		DataBits = CDCInterfaceInfo->State.LineEncoding.DataBits;
    15c8:	e1 50       	subi	r30, 0x01	; 1
		ParityType = CDCInterfaceInfo->State.LineEncoding.ParityType;
    15ca:	e2 30       	cpi	r30, 0x02	; 2
    15cc:	28 f4       	brcc	.+10     	; 0x15d8 <EVENT_CDC_Device_LineEncodingChanged+0x60>
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	ec 5c       	subi	r30, 0xCC	; 204
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	c0 81       	ld	r28, Z
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <EVENT_CDC_Device_LineEncodingChanged+0x62>
    15d8:	c0 e0       	ldi	r28, 0x00	; 0
    15da:	92 30       	cpi	r25, 0x02	; 2
	uint8_t DataBits;
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <EVENT_CDC_Device_LineEncodingChanged+0x68>
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CharFormat == CDC_LINEENCODING_TwoStopBits)
    15de:	c8 60       	ori	r28, 0x08	; 8
    15e0:	87 30       	cpi	r24, 0x07	; 7
		ConfigMask |= (1 << USBS1);
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <EVENT_CDC_Device_LineEncodingChanged+0x78>

	switch (DataBits)
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <EVENT_CDC_Device_LineEncodingChanged+0x7c>
    15e8:	86 30       	cpi	r24, 0x06	; 6
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
    15ec:	c2 60       	ori	r28, 0x02	; 2
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    15f0:	c4 60       	ori	r28, 0x04	; 4
		break;
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    15f4:	c6 60       	ori	r28, 0x06	; 6
		break;
    15f6:	5b 9a       	sbi	0x0b, 3	; 11
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    15f8:	10 92 c9 00 	sts	0x00C9, r1
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
	UCSR1B = 0;
    15fc:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
    1600:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
    1604:	c1 14       	cp	r12, r1
    1606:	81 ee       	ldi	r24, 0xE1	; 225

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (BaudRateBPS == 57600)
    1608:	d8 06       	cpc	r13, r24
    160a:	e1 04       	cpc	r14, r1
    160c:	f1 04       	cpc	r15, r1
    160e:	89 f0       	breq	.+34     	; 0x1632 <EVENT_CDC_Device_LineEncodingChanged+0xba>
    1610:	c7 01       	movw	r24, r14
    1612:	b6 01       	movw	r22, r12
		? SERIAL_UBBRVAL(BaudRateBPS)
		: SERIAL_2X_UBBRVAL(BaudRateBPS);
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	60 58       	subi	r22, 0x80	; 128
    161e:	7b 47       	sbci	r23, 0x7B	; 123
    1620:	81 4e       	sbci	r24, 0xE1	; 225
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	a7 01       	movw	r20, r14
    1626:	96 01       	movw	r18, r12
    1628:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodsi4>
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	31 09       	sbc	r19, r1
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (BaudRateBPS == 57600)
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <EVENT_CDC_Device_LineEncodingChanged+0xbe>
    1632:	20 e1       	ldi	r18, 0x10	; 16
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	30 93 cd 00 	sts	0x00CD, r19
    163a:	20 93 cc 00 	sts	0x00CC, r18
    163e:	c0 93 ca 00 	sts	0x00CA, r28
		? SERIAL_UBBRVAL(BaudRateBPS)
		: SERIAL_2X_UBBRVAL(BaudRateBPS);

	UCSR1C = ConfigMask;
    1642:	c1 14       	cp	r12, r1
    1644:	81 ee       	ldi	r24, 0xE1	; 225
	UCSR1A = (BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1646:	d8 06       	cpc	r13, r24
    1648:	e1 04       	cpc	r14, r1
    164a:	f1 04       	cpc	r15, r1
    164c:	11 f4       	brne	.+4      	; 0x1652 <EVENT_CDC_Device_LineEncodingChanged+0xda>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <EVENT_CDC_Device_LineEncodingChanged+0xdc>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	80 93 c8 00 	sts	0x00C8, r24
    1658:	88 e9       	ldi	r24, 0x98	; 152
    165a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    165e:	5b 98       	cbi	0x0b, 3	; 11
    1660:	df 91       	pop	r29
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    1662:	cf 91       	pop	r28
}
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	08 95       	ret

0000166e <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
	// clear all pending HID reports
	clearHIDReports();
    1674:	9e d9       	rcall	.-3268   	; 0x9b2 <clearHIDReports>
    1676:	88 89       	ldd	r24, Y+16	; 0x10

	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    1678:	80 ff       	sbrs	r24, 0

	if (CurrentDTRState)
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <EVENT_CDC_Device_ControLineStateChanged+0x12>
    167c:	5f 98       	cbi	0x0b, 7	; 11
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    167e:	06 c0       	rjmp	.+12     	; 0x168c <EVENT_CDC_Device_ControLineStateChanged+0x1e>
    1680:	5f 9a       	sbi	0x0b, 7	; 11
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    1682:	10 92 c2 01 	sts	0x01C2, r1

		// reset LEDs
		ram.PulseMSRemaining.whole = 0;
    1686:	8b b1       	in	r24, 0x0b	; 11
    1688:	80 63       	ori	r24, 0x30	; 48
    168a:	8b b9       	out	0x0b, r24	; 11
    168c:	df 91       	pop	r29
		LEDs_SetAllLEDs(LEDS_NO_LEDS);
	}
}
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	7c 01       	movw	r14, r24
    16a6:	8b 01       	movw	r16, r22
    16a8:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16aa:	d7 d1       	rcall	.+942    	; 0x1a5a <Endpoint_WaitUntilReady>
    16ac:	b8 2e       	mov	r11, r24
    16ae:	81 11       	cpse	r24, r1
    16b0:	32 c0       	rjmp	.+100    	; 0x1716 <Endpoint_Write_Stream_LE+0x84>
    16b2:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16b4:	31 f0       	breq	.+12     	; 0x16c2 <Endpoint_Write_Stream_LE+0x30>
    16b6:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    16b8:	39 81       	ldd	r19, Y+1	; 0x01
    16ba:	02 1b       	sub	r16, r18
    16bc:	13 0b       	sbc	r17, r19
    16be:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16c0:	f3 1e       	adc	r15, r19
    16c2:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16c4:	d1 2c       	mov	r13, r1
    16c6:	22 c0       	rjmp	.+68     	; 0x170c <Endpoint_Write_Stream_LE+0x7a>
    16c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16cc:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <Endpoint_Write_Stream_LE+0x66>
    16d0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16d4:	8e 77       	andi	r24, 0x7E	; 126
    16d6:	80 93 e8 00 	sts	0x00E8, r24
    16da:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <Endpoint_Write_Stream_LE+0x5e>
    16de:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    16e0:	99 81       	ldd	r25, Y+1	; 0x01
    16e2:	8c 0d       	add	r24, r12
    16e4:	9d 1d       	adc	r25, r13
    16e6:	99 83       	std	Y+1, r25	; 0x01
    16e8:	88 83       	st	Y, r24
    16ea:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    16ec:	b2 2e       	mov	r11, r18
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <Endpoint_Write_Stream_LE+0x84>
    16f0:	b4 d1       	rcall	.+872    	; 0x1a5a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16f2:	88 23       	and	r24, r24
    16f4:	59 f0       	breq	.+22     	; 0x170c <Endpoint_Write_Stream_LE+0x7a>
    16f6:	0e c0       	rjmp	.+28     	; 0x1714 <Endpoint_Write_Stream_LE+0x82>
    16f8:	f7 01       	movw	r30, r14
    16fa:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16fc:	7f 01       	movw	r14, r30
    16fe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1702:	01 50       	subi	r16, 0x01	; 1
    1704:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1706:	ff ef       	ldi	r31, 0xFF	; 255
    1708:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    170a:	df 0a       	sbc	r13, r31
    170c:	01 15       	cp	r16, r1
    170e:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1710:	d9 f6       	brne	.-74     	; 0x16c8 <Endpoint_Write_Stream_LE+0x36>
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <Endpoint_Write_Stream_LE+0x84>
    1714:	b8 2e       	mov	r11, r24
    1716:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1718:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	08 95       	ret

0000172c <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    172c:	20 91 ec 01 	lds	r18, 0x01EC
    1730:	30 91 ed 01 	lds	r19, 0x01ED
    1734:	26 17       	cp	r18, r22
    1736:	37 07       	cpc	r19, r23
    1738:	48 f0       	brcs	.+18     	; 0x174c <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    173a:	61 15       	cp	r22, r1
    173c:	71 05       	cpc	r23, r1
    173e:	39 f4       	brne	.+14     	; 0x174e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1740:	20 91 e8 00 	lds	r18, 0x00E8
    1744:	2e 77       	andi	r18, 0x7E	; 126
    1746:	20 93 e8 00 	sts	0x00E8, r18
    174a:	01 c0       	rjmp	.+2      	; 0x174e <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    174c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    174e:	9c 01       	movw	r18, r24
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	34 c0       	rjmp	.+104    	; 0x17bc <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1754:	90 91 e5 01 	lds	r25, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1758:	99 23       	and	r25, r25
    175a:	09 f4       	brne	.+2      	; 0x175e <Endpoint_Write_Control_Stream_LE+0x32>
    175c:	43 c0       	rjmp	.+134    	; 0x17e4 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    175e:	95 30       	cpi	r25, 0x05	; 5
    1760:	09 f4       	brne	.+2      	; 0x1764 <Endpoint_Write_Control_Stream_LE+0x38>
    1762:	42 c0       	rjmp	.+132    	; 0x17e8 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1764:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1768:	93 fd       	sbrc	r25, 3
    176a:	3a c0       	rjmp	.+116    	; 0x17e0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    176c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1770:	92 fd       	sbrc	r25, 2
    1772:	30 c0       	rjmp	.+96     	; 0x17d4 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1774:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1778:	90 ff       	sbrs	r25, 0
    177a:	20 c0       	rjmp	.+64     	; 0x17bc <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    177c:	80 91 f2 00 	lds	r24, 0x00F2
    1780:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1782:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1784:	82 1b       	sub	r24, r18
    1786:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    178a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    178c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    1794:	9f 01       	movw	r18, r30
    1796:	28 0f       	add	r18, r24
    1798:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    179a:	61 15       	cp	r22, r1
    179c:	71 05       	cpc	r23, r1
    179e:	19 f0       	breq	.+6      	; 0x17a6 <Endpoint_Write_Control_Stream_LE+0x7a>
    17a0:	28 30       	cpi	r18, 0x08	; 8
    17a2:	31 05       	cpc	r19, r1
    17a4:	90 f3       	brcs	.-28     	; 0x178a <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	28 30       	cpi	r18, 0x08	; 8
    17aa:	31 05       	cpc	r19, r1
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <Endpoint_Write_Control_Stream_LE+0x84>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17b0:	90 91 e8 00 	lds	r25, 0x00E8
    17b4:	9e 77       	andi	r25, 0x7E	; 126
    17b6:	90 93 e8 00 	sts	0x00E8, r25
    17ba:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	49 f6       	brne	.-110    	; 0x1754 <Endpoint_Write_Control_Stream_LE+0x28>
    17c2:	81 11       	cpse	r24, r1
    17c4:	c7 cf       	rjmp	.-114    	; 0x1754 <Endpoint_Write_Control_Stream_LE+0x28>
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17c8:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17cc:	88 23       	and	r24, r24
    17ce:	51 f0       	breq	.+20     	; 0x17e4 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17d0:	85 30       	cpi	r24, 0x05	; 5
    17d2:	51 f0       	breq	.+20     	; 0x17e8 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    17d8:	82 ff       	sbrs	r24, 2
    17da:	f6 cf       	rjmp	.-20     	; 0x17c8 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17e8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17ea:	08 95       	ret

000017ec <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	29 f4       	brne	.+10     	; 0x17fc <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17f2:	20 91 e8 00 	lds	r18, 0x00E8
    17f6:	2b 77       	andi	r18, 0x7B	; 123
    17f8:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    17fc:	9c 01       	movw	r18, r24
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1800:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1804:	88 23       	and	r24, r24
    1806:	81 f1       	breq	.+96     	; 0x1868 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1808:	85 30       	cpi	r24, 0x05	; 5
    180a:	41 f1       	breq	.+80     	; 0x185c <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    180c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1810:	83 fd       	sbrc	r24, 3
    1812:	26 c0       	rjmp	.+76     	; 0x1860 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1814:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1818:	82 ff       	sbrs	r24, 2
    181a:	f2 cf       	rjmp	.-28     	; 0x1800 <Endpoint_Read_Control_Stream_LE+0x14>
    181c:	f9 01       	movw	r30, r18
    181e:	07 c0       	rjmp	.+14     	; 0x182e <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1820:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1824:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1826:	9f 01       	movw	r18, r30
				Length--;
    1828:	61 50       	subi	r22, 0x01	; 1
    182a:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    182c:	29 f0       	breq	.+10     	; 0x1838 <Endpoint_Read_Control_Stream_LE+0x4c>
    182e:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1830:	80 91 f2 00 	lds	r24, 0x00F2
    1834:	81 11       	cpse	r24, r1
    1836:	f4 cf       	rjmp	.-24     	; 0x1820 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1838:	80 91 e8 00 	lds	r24, 0x00E8
    183c:	8b 77       	andi	r24, 0x7B	; 123
    183e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	e1 f6       	brne	.-72     	; 0x1800 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1848:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    184c:	80 fd       	sbrc	r24, 0
    184e:	0a c0       	rjmp	.+20     	; 0x1864 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1850:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1854:	88 23       	and	r24, r24
    1856:	41 f0       	breq	.+16     	; 0x1868 <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1858:	85 30       	cpi	r24, 0x05	; 5
    185a:	b1 f7       	brne	.-20     	; 0x1848 <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1868:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    186a:	08 95       	ret

0000186c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    186c:	20 91 ec 01 	lds	r18, 0x01EC
    1870:	30 91 ed 01 	lds	r19, 0x01ED
    1874:	26 17       	cp	r18, r22
    1876:	37 07       	cpc	r19, r23
    1878:	48 f0       	brcs	.+18     	; 0x188c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    187a:	61 15       	cp	r22, r1
    187c:	71 05       	cpc	r23, r1
    187e:	39 f4       	brne	.+14     	; 0x188e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1880:	20 91 e8 00 	lds	r18, 0x00E8
    1884:	2e 77       	andi	r18, 0x7E	; 126
    1886:	20 93 e8 00 	sts	0x00E8, r18
    188a:	01 c0       	rjmp	.+2      	; 0x188e <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    188c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    188e:	9c 01       	movw	r18, r24
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	35 c0       	rjmp	.+106    	; 0x18fe <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1894:	90 91 e5 01 	lds	r25, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1898:	99 23       	and	r25, r25
    189a:	09 f4       	brne	.+2      	; 0x189e <Endpoint_Write_Control_PStream_LE+0x32>
    189c:	44 c0       	rjmp	.+136    	; 0x1926 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    189e:	95 30       	cpi	r25, 0x05	; 5
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Endpoint_Write_Control_PStream_LE+0x38>
    18a2:	43 c0       	rjmp	.+134    	; 0x192a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18a4:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18a8:	93 fd       	sbrc	r25, 3
    18aa:	3b c0       	rjmp	.+118    	; 0x1922 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ac:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18b0:	92 fd       	sbrc	r25, 2
    18b2:	31 c0       	rjmp	.+98     	; 0x1916 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18b4:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18b8:	90 ff       	sbrs	r25, 0
    18ba:	21 c0       	rjmp	.+66     	; 0x18fe <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    18bc:	80 91 f2 00 	lds	r24, 0x00F2
    18c0:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18c2:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    18c4:	82 1b       	sub	r24, r18
    18c6:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18ca:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18cc:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    18d0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    18d2:	61 50       	subi	r22, 0x01	; 1
    18d4:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    18d6:	9c 01       	movw	r18, r24
    18d8:	2e 0f       	add	r18, r30
    18da:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18dc:	61 15       	cp	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	19 f0       	breq	.+6      	; 0x18e8 <Endpoint_Write_Control_PStream_LE+0x7c>
    18e2:	28 30       	cpi	r18, 0x08	; 8
    18e4:	31 05       	cpc	r19, r1
    18e6:	88 f3       	brcs	.-30     	; 0x18ca <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	28 30       	cpi	r18, 0x08	; 8
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <Endpoint_Write_Control_PStream_LE+0x86>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18f2:	90 91 e8 00 	lds	r25, 0x00E8
    18f6:	9e 77       	andi	r25, 0x7E	; 126
    18f8:	90 93 e8 00 	sts	0x00E8, r25
    18fc:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18fe:	61 15       	cp	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	41 f6       	brne	.-112    	; 0x1894 <Endpoint_Write_Control_PStream_LE+0x28>
    1904:	81 11       	cpse	r24, r1
    1906:	c6 cf       	rjmp	.-116    	; 0x1894 <Endpoint_Write_Control_PStream_LE+0x28>
    1908:	06 c0       	rjmp	.+12     	; 0x1916 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    190a:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    190e:	88 23       	and	r24, r24
    1910:	51 f0       	breq	.+20     	; 0x1926 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1912:	85 30       	cpi	r24, 0x05	; 5
    1914:	51 f0       	breq	.+20     	; 0x192a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1916:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    191a:	82 ff       	sbrs	r24, 2
    191c:	f6 cf       	rjmp	.-20     	; 0x190a <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    192a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    192c:	08 95       	ret

0000192e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    192e:	98 2f       	mov	r25, r24
    1930:	2c c0       	rjmp	.+88     	; 0x198a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1932:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1936:	98 17       	cp	r25, r24
    1938:	39 f0       	breq	.+14     	; 0x1948 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    193a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    193e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1942:	50 91 f0 00 	lds	r21, 0x00F0
    1946:	03 c0       	rjmp	.+6      	; 0x194e <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1948:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    194a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    194c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    194e:	21 fd       	sbrc	r18, 1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1952:	9f 5f       	subi	r25, 0xFF	; 255
    1954:	1a c0       	rjmp	.+52     	; 0x198a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1956:	30 91 eb 00 	lds	r19, 0x00EB
    195a:	3e 7f       	andi	r19, 0xFE	; 254
    195c:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1960:	30 91 ed 00 	lds	r19, 0x00ED
    1964:	3d 7f       	andi	r19, 0xFD	; 253
    1966:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    196a:	30 91 eb 00 	lds	r19, 0x00EB
    196e:	31 60       	ori	r19, 0x01	; 1
    1970:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1974:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1978:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    197c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1980:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1984:	27 fd       	sbrc	r18, 7
    1986:	e5 cf       	rjmp	.-54     	; 0x1952 <Endpoint_ConfigureEndpoint_Prv+0x24>
    1988:	07 c0       	rjmp	.+14     	; 0x1998 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    198a:	95 30       	cpi	r25, 0x05	; 5
    198c:	90 f2       	brcs	.-92     	; 0x1932 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    198e:	8f 70       	andi	r24, 0x0F	; 15
    1990:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1998:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    199a:	08 95       	ret

0000199c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	06 2f       	mov	r16, r22
    19a6:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    19a8:	10 e0       	ldi	r17, 0x00	; 0
    19aa:	2e c0       	rjmp	.+92     	; 0x1a08 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    19ac:	98 81       	ld	r25, Y
    19ae:	91 11       	cpse	r25, r1
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    19b2:	1f 5f       	subi	r17, 0xFF	; 255
    19b4:	25 96       	adiw	r28, 0x05	; 5
    19b6:	28 c0       	rjmp	.+80     	; 0x1a08 <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	e9 81       	ldd	r30, Y+1	; 0x01
    19bc:	fa 81       	ldd	r31, Y+2	; 0x02
    19be:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    19c0:	89 2f       	mov	r24, r25
    19c2:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    19c4:	85 30       	cpi	r24, 0x05	; 5
    19c6:	10 f0       	brcs	.+4      	; 0x19cc <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	21 c0       	rjmp	.+66     	; 0x1a0e <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <Endpoint_ConfigureEndpointTable+0x38>
    19d0:	56 e0       	ldi	r21, 0x06	; 6
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <Endpoint_ConfigureEndpointTable+0x3a>
    19d4:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    19d6:	28 e0       	ldi	r18, 0x08	; 8
    19d8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    19de:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    19e4:	2e 17       	cp	r18, r30
    19e6:	3f 07       	cpc	r19, r31
    19e8:	d0 f3       	brcs	.-12     	; 0x19de <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    19ea:	42 95       	swap	r20
    19ec:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19ee:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    19f0:	99 1f       	adc	r25, r25
    19f2:	99 27       	eor	r25, r25
    19f4:	99 1f       	adc	r25, r25
    19f6:	62 95       	swap	r22
    19f8:	66 0f       	add	r22, r22
    19fa:	66 0f       	add	r22, r22
    19fc:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19fe:	69 2b       	or	r22, r25
    1a00:	96 df       	rcall	.-212    	; 0x192e <Endpoint_ConfigureEndpoint_Prv>
    1a02:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a04:	d6 cf       	rjmp	.-84     	; 0x19b2 <Endpoint_ConfigureEndpointTable+0x16>
    1a06:	e0 cf       	rjmp	.-64     	; 0x19c8 <Endpoint_ConfigureEndpointTable+0x2c>
    1a08:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a0a:	d0 cf       	rjmp	.-96     	; 0x19ac <Endpoint_ConfigureEndpointTable+0x10>
    1a0c:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1a0e:	df 91       	pop	r29
}
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1a18:	80 91 e6 01 	lds	r24, 0x01E6
    1a1c:	87 fd       	sbrc	r24, 7
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a20:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a24:	80 ff       	sbrs	r24, 0
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <Endpoint_ClearStatusStage+0x2c>
    1a28:	12 c0       	rjmp	.+36     	; 0x1a4e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a2a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a2e:	82 fd       	sbrc	r24, 2
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a32:	80 91 e5 01 	lds	r24, 0x01E5
    1a36:	81 11       	cpse	r24, r1
    1a38:	f8 cf       	rjmp	.-16     	; 0x1a2a <Endpoint_ClearStatusStage+0x12>
    1a3a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8
    1a40:	8b 77       	andi	r24, 0x7B	; 123
    1a42:	08 c0       	rjmp	.+16     	; 0x1a54 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a44:	80 91 e5 01 	lds	r24, 0x01E5
    1a48:	81 11       	cpse	r24, r1
    1a4a:	ea cf       	rjmp	.-44     	; 0x1a20 <Endpoint_ClearStatusStage+0x8>
    1a4c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8
    1a52:	8e 77       	andi	r24, 0x7E	; 126
    1a54:	80 93 e8 00 	sts	0x00E8, r24
    1a58:	08 95       	ret

00001a5a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a5a:	80 91 e4 00 	lds	r24, 0x00E4
    1a5e:	90 91 e5 00 	lds	r25, 0x00E5
    1a62:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a64:	20 91 ec 00 	lds	r18, 0x00EC
    1a68:	20 fd       	sbrc	r18, 0
    1a6a:	1f c0       	rjmp	.+62     	; 0x1aaa <Endpoint_WaitUntilReady+0x50>
    1a6c:	23 c0       	rjmp	.+70     	; 0x1ab4 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a6e:	20 91 e5 01 	lds	r18, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a72:	22 23       	and	r18, r18
    1a74:	91 f0       	breq	.+36     	; 0x1a9a <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a76:	25 30       	cpi	r18, 0x05	; 5
    1a78:	91 f0       	breq	.+36     	; 0x1a9e <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a7a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a7e:	25 fd       	sbrc	r18, 5
    1a80:	10 c0       	rjmp	.+32     	; 0x1aa2 <Endpoint_WaitUntilReady+0x48>
    1a82:	20 91 e4 00 	lds	r18, 0x00E4
    1a86:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	51 f3       	breq	.-44     	; 0x1a64 <Endpoint_WaitUntilReady+0xa>
    1a90:	41 50       	subi	r20, 0x01	; 1
    1a92:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1a94:	39 f7       	brne	.-50     	; 0x1a64 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aaa:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1aae:	20 ff       	sbrs	r18, 0
    1ab0:	de cf       	rjmp	.-68     	; 0x1a6e <Endpoint_WaitUntilReady+0x14>
    1ab2:	f9 cf       	rjmp	.-14     	; 0x1aa6 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ab4:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ab8:	22 ff       	sbrs	r18, 2
    1aba:	d9 cf       	rjmp	.-78     	; 0x1a6e <Endpoint_WaitUntilReady+0x14>
    1abc:	f4 cf       	rjmp	.-24     	; 0x1aa6 <Endpoint_WaitUntilReady+0x4c>

00001abe <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1abe:	41 d0       	rcall	.+130    	; 0x1b42 <USB_INT_DisableAllInterrupts>
    1ac0:	43 d0       	rcall	.+134    	; 0x1b48 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ac2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ac6:	8f 77       	andi	r24, 0x7F	; 127
    1ac8:	80 93 d8 00 	sts	0x00D8, r24
    1acc:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1ad0:	80 68       	ori	r24, 0x80	; 128
    1ad2:	80 93 d8 00 	sts	0x00D8, r24
    1ad6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ada:	8f 7d       	andi	r24, 0xDF	; 223
    1adc:	80 93 d8 00 	sts	0x00D8, r24
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
    1ae2:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ae4:	86 e0       	ldi	r24, 0x06	; 6
    1ae6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ae8:	09 b4       	in	r0, 0x29	; 41
    1aea:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <USB_ResetInterface+0x2a>
    1aee:	10 92 e5 01 	sts	0x01E5, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1af2:	10 92 e1 01 	sts	0x01E1, r1
	USB_Device_ConfigurationNumber  = 0;
    1af6:	10 92 e3 01 	sts	0x01E3, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1afa:	10 92 e2 01 	sts	0x01E2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1afe:	42 e0       	ldi	r20, 0x02	; 2
    1b00:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	14 df       	rcall	.-472    	; 0x192e <Endpoint_ConfigureEndpoint_Prv>
    1b06:	80 91 e1 00 	lds	r24, 0x00E1
    1b0a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b0c:	80 93 e1 00 	sts	0x00E1, r24
    1b10:	80 91 e2 00 	lds	r24, 0x00E2
    1b14:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b16:	80 93 e2 00 	sts	0x00E2, r24
    1b1a:	80 91 e2 00 	lds	r24, 0x00E2
    1b1e:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b20:	80 93 e2 00 	sts	0x00E2, r24
    1b24:	80 91 e0 00 	lds	r24, 0x00E0
    1b28:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b2a:	80 93 e0 00 	sts	0x00E0, r24
    1b2e:	08 95       	ret

00001b30 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1b30:	e3 e6       	ldi	r30, 0x63	; 99
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8e 7f       	andi	r24, 0xFE	; 254
    1b38:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 e4 01 	sts	0x01E4, r24

	USB_ResetInterface();
    1b40:	be cf       	rjmp	.-132    	; 0x1abe <USB_ResetInterface>

00001b42 <USB_INT_DisableAllInterrupts>:
    1b42:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b46:	08 95       	ret

00001b48 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b48:	10 92 e1 00 	sts	0x00E1, r1
    1b4c:	08 95       	ret

00001b4e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b70:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b74:	82 ff       	sbrs	r24, 2
    1b76:	0b c0       	rjmp	.+22     	; 0x1b8e <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b78:	80 91 e2 00 	lds	r24, 0x00E2
    1b7c:	82 ff       	sbrs	r24, 2
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1b80:	80 91 e1 00 	lds	r24, 0x00E1
    1b84:	8b 7f       	andi	r24, 0xFB	; 251
    1b86:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1b8a:	0e 94 cb 03 	call	0x796	; 0x796 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1b8e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b92:	80 ff       	sbrs	r24, 0
    1b94:	18 c0       	rjmp	.+48     	; 0x1bc6 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1b96:	80 91 e2 00 	lds	r24, 0x00E2
    1b9a:	80 ff       	sbrs	r24, 0
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b9e:	80 91 e2 00 	lds	r24, 0x00E2
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ba8:	80 91 e2 00 	lds	r24, 0x00E2
    1bac:	80 61       	ori	r24, 0x10	; 16
    1bae:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1bb2:	80 91 d8 00 	lds	r24, 0x00D8
    1bb6:	80 62       	ori	r24, 0x20	; 32
    1bb8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bbc:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1bbe:	10 92 e5 01 	sts	0x01E5, r1
		EVENT_USB_Device_Disconnect();
    1bc2:	0e 94 6f 03 	call	0x6de	; 0x6de <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1bc6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1bca:	84 ff       	sbrs	r24, 4
    1bcc:	30 c0       	rjmp	.+96     	; 0x1c2e <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1bce:	80 91 e2 00 	lds	r24, 0x00E2
    1bd2:	84 ff       	sbrs	r24, 4
    1bd4:	2c c0       	rjmp	.+88     	; 0x1c2e <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bd6:	84 e0       	ldi	r24, 0x04	; 4
    1bd8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1bde:	09 b4       	in	r0, 0x29	; 41
    1be0:	00 fe       	sbrs	r0, 0
    1be2:	fd cf       	rjmp	.-6      	; 0x1bde <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1be4:	80 91 d8 00 	lds	r24, 0x00D8
    1be8:	8f 7d       	andi	r24, 0xDF	; 223
    1bea:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1bee:	80 91 e1 00 	lds	r24, 0x00E1
    1bf2:	8f 7e       	andi	r24, 0xEF	; 239
    1bf4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1bf8:	80 91 e2 00 	lds	r24, 0x00E2
    1bfc:	8f 7e       	andi	r24, 0xEF	; 239
    1bfe:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c02:	80 91 e2 00 	lds	r24, 0x00E2
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c0c:	80 91 e1 01 	lds	r24, 0x01E1
    1c10:	88 23       	and	r24, r24
    1c12:	11 f0       	breq	.+4      	; 0x1c18 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c18:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c1c:	87 ff       	sbrs	r24, 7
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <__vector_11+0xd6>
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <__vector_11+0xd8>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	80 93 e5 01 	sts	0x01E5, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1c2a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c2e:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c32:	83 ff       	sbrs	r24, 3
    1c34:	27 c0       	rjmp	.+78     	; 0x1c84 <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c36:	80 91 e2 00 	lds	r24, 0x00E2
    1c3a:	83 ff       	sbrs	r24, 3
    1c3c:	23 c0       	rjmp	.+70     	; 0x1c84 <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c3e:	80 91 e1 00 	lds	r24, 0x00E1
    1c42:	87 7f       	andi	r24, 0xF7	; 247
    1c44:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	80 93 e5 01 	sts	0x01E5, r24
		USB_Device_ConfigurationNumber = 0;
    1c4e:	10 92 e1 01 	sts	0x01E1, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c52:	80 91 e1 00 	lds	r24, 0x00E1
    1c56:	8e 7f       	andi	r24, 0xFE	; 254
    1c58:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c5c:	80 91 e2 00 	lds	r24, 0x00E2
    1c60:	8e 7f       	andi	r24, 0xFE	; 254
    1c62:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c66:	80 91 e2 00 	lds	r24, 0x00E2
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c70:	42 e0       	ldi	r20, 0x02	; 2
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	5b de       	rcall	.-842    	; 0x192e <Endpoint_ConfigureEndpoint_Prv>
    1c78:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	80 93 f0 00 	sts	0x00F0, r24
    1c82:	b8 d1       	rcall	.+880    	; 0x1ff4 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	cf 93       	push	r28
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cca:	80 91 e9 00 	lds	r24, 0x00E9
    1cce:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cd0:	90 91 ec 00 	lds	r25, 0x00EC
    1cd4:	90 ff       	sbrs	r25, 0
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <__vector_12+0x36>
    1cd8:	90 e8       	ldi	r25, 0x80	; 128
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <__vector_12+0x38>
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cde:	c9 2f       	mov	r28, r25
    1ce0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ce2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ce6:	80 91 f0 00 	lds	r24, 0x00F0
    1cea:	87 7f       	andi	r24, 0xF7	; 247
    1cec:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1cf0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1cf2:	1c d0       	rcall	.+56     	; 0x1d2c <USB_Device_ProcessControlRequest>
    1cf4:	10 92 e9 00 	sts	0x00E9, r1
    1cf8:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cfc:	88 60       	ori	r24, 0x08	; 8
    1cfe:	80 93 f0 00 	sts	0x00F0, r24
    1d02:	cf 70       	andi	r28, 0x0F	; 15
    1d04:	c0 93 e9 00 	sts	0x00E9, r28
    1d08:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d0a:	ef 91       	pop	r30
    1d0c:	cf 91       	pop	r28
    1d0e:	bf 91       	pop	r27
    1d10:	af 91       	pop	r26
    1d12:	9f 91       	pop	r25
    1d14:	8f 91       	pop	r24
    1d16:	7f 91       	pop	r23
    1d18:	6f 91       	pop	r22
    1d1a:	5f 91       	pop	r21
    1d1c:	4f 91       	pop	r20
    1d1e:	3f 91       	pop	r19
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <USB_Device_ProcessControlRequest>:
    1d2c:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	ac 97       	sbiw	r28, 0x2c	; 44
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1d42:	e6 ee       	ldi	r30, 0xE6	; 230
    1d44:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d46:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d4a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	ee 3e       	cpi	r30, 0xEE	; 238
    1d50:	f2 07       	cpc	r31, r18
    1d52:	c9 f7       	brne	.-14     	; 0x1d46 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d54:	0e 94 c3 03 	call	0x786	; 0x786 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d58:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d5c:	83 ff       	sbrs	r24, 3
    1d5e:	32 c1       	rjmp	.+612    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d60:	80 91 e6 01 	lds	r24, 0x01E6

		switch (USB_ControlRequest.bRequest)
    1d64:	90 91 e7 01 	lds	r25, 0x01E7
    1d68:	95 30       	cpi	r25, 0x05	; 5
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <USB_Device_ProcessControlRequest+0x42>
    1d6c:	87 c0       	rjmp	.+270    	; 0x1e7c <USB_Device_ProcessControlRequest+0x150>
    1d6e:	38 f4       	brcc	.+14     	; 0x1d7e <USB_Device_ProcessControlRequest+0x52>
    1d70:	91 30       	cpi	r25, 0x01	; 1
    1d72:	b1 f1       	breq	.+108    	; 0x1de0 <USB_Device_ProcessControlRequest+0xb4>
    1d74:	70 f0       	brcs	.+28     	; 0x1d92 <USB_Device_ProcessControlRequest+0x66>
    1d76:	93 30       	cpi	r25, 0x03	; 3
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <USB_Device_ProcessControlRequest+0x50>
    1d7a:	24 c1       	rjmp	.+584    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1d7c:	31 c0       	rjmp	.+98     	; 0x1de0 <USB_Device_ProcessControlRequest+0xb4>
    1d7e:	98 30       	cpi	r25, 0x08	; 8
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <USB_Device_ProcessControlRequest+0x58>
    1d82:	f4 c0       	rjmp	.+488    	; 0x1f6c <USB_Device_ProcessControlRequest+0x240>
    1d84:	99 30       	cpi	r25, 0x09	; 9
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <USB_Device_ProcessControlRequest+0x5e>
    1d88:	00 c1       	rjmp	.+512    	; 0x1f8a <USB_Device_ProcessControlRequest+0x25e>
    1d8a:	96 30       	cpi	r25, 0x06	; 6
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <USB_Device_ProcessControlRequest+0x64>
    1d8e:	1a c1       	rjmp	.+564    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1d90:	9b c0       	rjmp	.+310    	; 0x1ec8 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d92:	80 38       	cpi	r24, 0x80	; 128
    1d94:	21 f0       	breq	.+8      	; 0x1d9e <USB_Device_ProcessControlRequest+0x72>
    1d96:	82 38       	cpi	r24, 0x82	; 130
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <USB_Device_ProcessControlRequest+0x70>
    1d9a:	14 c1       	rjmp	.+552    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d9e:	80 91 e2 01 	lds	r24, 0x01E2
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1da2:	90 91 e3 01 	lds	r25, 0x01E3
    1da6:	99 23       	and	r25, r25
    1da8:	89 f0       	breq	.+34     	; 0x1dcc <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1daa:	82 60       	ori	r24, 0x02	; 2
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1dae:	80 91 ea 01 	lds	r24, 0x01EA
    1db2:	90 91 eb 01 	lds	r25, 0x01EB
    1db6:	8f 70       	andi	r24, 0x0F	; 15
    1db8:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dba:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dbe:	80 91 eb 00 	lds	r24, 0x00EB
    1dc2:	85 fb       	bst	r24, 5
    1dc4:	88 27       	eor	r24, r24
    1dc6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dcc:	90 91 e8 00 	lds	r25, 0x00E8
    1dd0:	97 7f       	andi	r25, 0xF7	; 247
    1dd2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1dd6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1dda:	10 92 f1 00 	sts	0x00F1, r1
    1dde:	d1 c0       	rjmp	.+418    	; 0x1f82 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1de0:	88 23       	and	r24, r24
    1de2:	19 f0       	breq	.+6      	; 0x1dea <USB_Device_ProcessControlRequest+0xbe>
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	09 f0       	breq	.+2      	; 0x1dea <USB_Device_ProcessControlRequest+0xbe>
    1de8:	ed c0       	rjmp	.+474    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1dea:	8f 71       	andi	r24, 0x1F	; 31
    1dec:	21 f0       	breq	.+8      	; 0x1df6 <USB_Device_ProcessControlRequest+0xca>
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <USB_Device_ProcessControlRequest+0xc8>
    1df2:	e8 c0       	rjmp	.+464    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1df4:	0b c0       	rjmp	.+22     	; 0x1e0c <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1df6:	80 91 e8 01 	lds	r24, 0x01E8
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <USB_Device_ProcessControlRequest+0xd4>
    1dfe:	e2 c0       	rjmp	.+452    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e00:	93 30       	cpi	r25, 0x03	; 3
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <USB_Device_ProcessControlRequest+0xda>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	80 93 e3 01 	sts	0x01E3, r24
    1e0a:	2f c0       	rjmp	.+94     	; 0x1e6a <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e0c:	80 91 e8 01 	lds	r24, 0x01E8
    1e10:	81 11       	cpse	r24, r1
    1e12:	2b c0       	rjmp	.+86     	; 0x1e6a <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e14:	80 91 ea 01 	lds	r24, 0x01EA
    1e18:	90 91 eb 01 	lds	r25, 0x01EB
    1e1c:	8f 70       	andi	r24, 0x0F	; 15
    1e1e:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <USB_Device_ProcessControlRequest+0xfa>
    1e24:	cf c0       	rjmp	.+414    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e26:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e2a:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e2e:	20 ff       	sbrs	r18, 0
    1e30:	1c c0       	rjmp	.+56     	; 0x1e6a <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e32:	20 91 e7 01 	lds	r18, 0x01E7
    1e36:	23 30       	cpi	r18, 0x03	; 3
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e3a:	80 91 eb 00 	lds	r24, 0x00EB
    1e3e:	80 62       	ori	r24, 0x20	; 32
    1e40:	12 c0       	rjmp	.+36     	; 0x1e66 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e42:	90 91 eb 00 	lds	r25, 0x00EB
    1e46:	90 61       	ori	r25, 0x10	; 16
    1e48:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e4c:	21 e0       	ldi	r18, 0x01	; 1
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <USB_Device_ProcessControlRequest+0x128>
    1e52:	22 0f       	add	r18, r18
    1e54:	8a 95       	dec	r24
    1e56:	ea f7       	brpl	.-6      	; 0x1e52 <USB_Device_ProcessControlRequest+0x126>
    1e58:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1e5c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e60:	80 91 eb 00 	lds	r24, 0x00EB
    1e64:	88 60       	ori	r24, 0x08	; 8
    1e66:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e6e:	80 91 e8 00 	lds	r24, 0x00E8
    1e72:	87 7f       	andi	r24, 0xF7	; 247
    1e74:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e78:	cf dd       	rcall	.-1122   	; 0x1a18 <Endpoint_ClearStatusStage>
    1e7a:	a4 c0       	rjmp	.+328    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1e7c:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e7e:	a2 c0       	rjmp	.+324    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1e80:	80 91 e8 01 	lds	r24, 0x01E8
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e84:	90 91 e9 01 	lds	r25, 0x01E9
    1e88:	8f 77       	andi	r24, 0x7F	; 127
    1e8a:	99 27       	eor	r25, r25
    1e8c:	18 2f       	mov	r17, r24
    1e8e:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e92:	90 78       	andi	r25, 0x80	; 128
    1e94:	98 2b       	or	r25, r24
    1e96:	90 93 e3 00 	sts	0x00E3, r25
    1e9a:	80 91 e8 00 	lds	r24, 0x00E8
    1e9e:	87 7f       	andi	r24, 0xF7	; 247
    1ea0:	80 93 e8 00 	sts	0x00E8, r24
    1ea4:	b9 dd       	rcall	.-1166   	; 0x1a18 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ea6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1eaa:	80 ff       	sbrs	r24, 0
    1eac:	fc cf       	rjmp	.-8      	; 0x1ea6 <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1eae:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1eb2:	80 68       	ori	r24, 0x80	; 128
    1eb4:	80 93 e3 00 	sts	0x00E3, r24
    1eb8:	11 23       	and	r17, r17
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <USB_Device_ProcessControlRequest+0x196>
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	80 93 e5 01 	sts	0x01E5, r24
    1ec6:	7e c0       	rjmp	.+252    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1ec8:	80 58       	subi	r24, 0x80	; 128
    1eca:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <USB_Device_ProcessControlRequest+0x1a4>
    1ece:	7a c0       	rjmp	.+244    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1ed0:	80 91 e8 01 	lds	r24, 0x01E8
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ed4:	90 91 e9 01 	lds	r25, 0x01E9
    1ed8:	8c 3d       	cpi	r24, 0xDC	; 220
    1eda:	23 e0       	ldi	r18, 0x03	; 3
    1edc:	92 07       	cpc	r25, r18
    1ede:	71 f5       	brne	.+92     	; 0x1f3c <USB_Device_ProcessControlRequest+0x210>
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1ee4:	8a e2       	ldi	r24, 0x2A	; 42
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ee8:	4f b7       	in	r20, 0x3f	; 63
    1eea:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1eec:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1eee:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ef4:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ef6:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	50 93 57 00 	sts	0x0057, r21
    1efe:	e4 91       	lpm	r30, Z+
    1f00:	20 ff       	sbrs	r18, 0
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1f04:	e2 95       	swap	r30
    1f06:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1f08:	3f 5f       	subi	r19, 0xFF	; 255
    1f0a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f0c:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	ea 30       	cpi	r30, 0x0A	; 10
    1f12:	10 f0       	brcs	.+4      	; 0x1f18 <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f14:	c7 96       	adiw	r24, 0x37	; 55
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <USB_Device_ProcessControlRequest+0x1ee>
    1f18:	c0 96       	adiw	r24, 0x30	; 48
    1f1a:	8d 93       	st	X+, r24
    1f1c:	9d 93       	st	X+, r25
    1f1e:	2f 5f       	subi	r18, 0xFF	; 255
    1f20:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f22:	49 f7       	brne	.-46     	; 0x1ef6 <USB_Device_ProcessControlRequest+0x1ca>
    1f24:	4f bf       	out	0x3f, r20	; 63
    1f26:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f2a:	87 7f       	andi	r24, 0xF7	; 247
    1f2c:	80 93 e8 00 	sts	0x00E8, r24
    1f30:	6a e2       	ldi	r22, 0x2A	; 42
    1f32:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f34:	ce 01       	movw	r24, r28
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	f9 db       	rcall	.-2062   	; 0x172c <Endpoint_Write_Control_Stream_LE>
    1f3a:	12 c0       	rjmp	.+36     	; 0x1f60 <USB_Device_ProcessControlRequest+0x234>
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	45 5d       	subi	r20, 0xD5	; 213
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f42:	60 91 ea 01 	lds	r22, 0x01EA
    1f46:	0e 94 d7 03 	call	0x7ae	; 0x7ae <CALLBACK_USB_GetDescriptor>
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	d9 f1       	breq	.+118    	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1f4e:	20 91 e8 00 	lds	r18, 0x00E8
    1f52:	27 7f       	andi	r18, 0xF7	; 247
    1f54:	20 93 e8 00 	sts	0x00E8, r18
    1f58:	bc 01       	movw	r22, r24
    1f5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5c:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f5e:	86 dc       	rcall	.-1780   	; 0x186c <Endpoint_Write_Control_PStream_LE>
    1f60:	80 91 e8 00 	lds	r24, 0x00E8
    1f64:	8b 77       	andi	r24, 0x7B	; 123
    1f66:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f6a:	2c c0       	rjmp	.+88     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1f6c:	80 38       	cpi	r24, 0x80	; 128
    1f6e:	51 f5       	brne	.+84     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1f70:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f74:	87 7f       	andi	r24, 0xF7	; 247
    1f76:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f7a:	80 91 e1 01 	lds	r24, 0x01E1
    1f7e:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f82:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f86:	8e 77       	andi	r24, 0x7E	; 126
    1f88:	75 cf       	rjmp	.-278    	; 0x1e74 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	1b c0       	rjmp	.+54     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
    1f8e:	90 91 e8 01 	lds	r25, 0x01E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f92:	92 30       	cpi	r25, 0x02	; 2
    1f94:	b8 f4       	brcc	.+46     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f96:	80 91 e8 00 	lds	r24, 0x00E8
    1f9a:	87 7f       	andi	r24, 0xF7	; 247
    1f9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fa0:	90 93 e1 01 	sts	0x01E1, r25
    1fa4:	39 dd       	rcall	.-1422   	; 0x1a18 <Endpoint_ClearStatusStage>
    1fa6:	80 91 e1 01 	lds	r24, 0x01E1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1faa:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <USB_Device_ProcessControlRequest+0x28a>
    1fae:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1fb2:	87 ff       	sbrs	r24, 7
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <USB_Device_ProcessControlRequest+0x28e>
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0x290>
    1fba:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fbc:	80 93 e5 01 	sts	0x01E5, r24
    1fc0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <EVENT_USB_Device_ConfigurationChanged>
    1fc4:	80 91 e8 00 	lds	r24, 0x00E8
    1fc8:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x2b4>
    1fcc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fd0:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1fd2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd6:	80 91 eb 00 	lds	r24, 0x00EB
    1fda:	80 62       	ori	r24, 0x20	; 32
    1fdc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fe0:	ac 96       	adiw	r28, 0x2c	; 44
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	08 95       	ret

00001ff4 <USB_Event_Stub>:
    1ff4:	08 95       	ret

00001ff6 <USB_USBTask>:
    1ff6:	cf 93       	push	r28
    1ff8:	80 91 e5 01 	lds	r24, 0x01E5
    1ffc:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ffe:	a9 f0       	breq	.+42     	; 0x202a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2000:	80 91 e9 00 	lds	r24, 0x00E9
    2004:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2006:	90 91 ec 00 	lds	r25, 0x00EC
    200a:	90 ff       	sbrs	r25, 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <USB_USBTask+0x1c>
    200e:	90 e8       	ldi	r25, 0x80	; 128
    2010:	01 c0       	rjmp	.+2      	; 0x2014 <USB_USBTask+0x1e>
    2012:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2014:	c9 2f       	mov	r28, r25
    2016:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2018:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    201c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2020:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2022:	84 de       	rcall	.-760    	; 0x1d2c <USB_Device_ProcessControlRequest>
    2024:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2026:	c0 93 e9 00 	sts	0x00E9, r28
    202a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    202c:	08 95       	ret

0000202e <CDC_Device_ConfigureEndpoints>:
    202e:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2030:	df 93       	push	r29
    2032:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2034:	40 96       	adiw	r24, 0x10	; 16
    2036:	fc 01       	movw	r30, r24
    2038:	8b e0       	ldi	r24, 0x0B	; 11
    203a:	df 01       	movw	r26, r30
    203c:	1d 92       	st	X+, r1
    203e:	8a 95       	dec	r24
    2040:	e9 f7       	brne	.-6      	; 0x203c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2046:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	ce 01       	movw	r24, r28
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	a4 dc       	rcall	.-1720   	; 0x199c <Endpoint_ConfigureEndpointTable>
    2054:	88 23       	and	r24, r24
    2056:	61 f0       	breq	.+24     	; 0x2070 <CDC_Device_ConfigureEndpoints+0x42>
    2058:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    205a:	ce 01       	movw	r24, r28
    205c:	06 96       	adiw	r24, 0x06	; 6
    205e:	9e dc       	rcall	.-1732   	; 0x199c <Endpoint_ConfigureEndpointTable>
    2060:	88 23       	and	r24, r24
    2062:	31 f0       	breq	.+12     	; 0x2070 <CDC_Device_ConfigureEndpoints+0x42>
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2068:	0b 96       	adiw	r24, 0x0b	; 11
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
	  return false;

	return true;
}
    206e:	96 cc       	rjmp	.-1748   	; 0x199c <Endpoint_ConfigureEndpointTable>
    2070:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
	  return false;

	return true;
}
    2076:	08 95       	ret

00002078 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    2078:	cf 93       	push	r28
    207a:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    207c:	20 91 e5 01 	lds	r18, 0x01E5
    2080:	24 30       	cpi	r18, 0x04	; 4
    2082:	f1 f4       	brne	.+60     	; 0x20c0 <CDC_Device_SendByte+0x48>
    2084:	fc 01       	movw	r30, r24
    2086:	44 89       	ldd	r20, Z+20	; 0x14
    2088:	55 89       	ldd	r21, Z+21	; 0x15
    208a:	66 89       	ldd	r22, Z+22	; 0x16
    208c:	77 89       	ldd	r23, Z+23	; 0x17
    208e:	45 2b       	or	r20, r21
    2090:	46 2b       	or	r20, r22
    2092:	47 2b       	or	r20, r23
    2094:	a9 f0       	breq	.+42     	; 0x20c0 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2096:	81 81       	ldd	r24, Z+1	; 0x01
    2098:	8f 70       	andi	r24, 0x0F	; 15
    209a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    209e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    20a2:	85 ff       	sbrs	r24, 5
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20a6:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20ae:	80 91 e8 00 	lds	r24, 0x00E8
    20b2:	8e 77       	andi	r24, 0x7E	; 126
    20b4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    20b8:	d0 dc       	rcall	.-1632   	; 0x1a5a <Endpoint_WaitUntilReady>
    20ba:	88 23       	and	r24, r24
    20bc:	a1 f3       	breq	.-24     	; 0x20a6 <CDC_Device_SendByte+0x2e>
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <CDC_Device_SendByte+0x4a>
    20c0:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    20c2:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    20c4:	08 95       	ret

000020c6 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    20c6:	20 91 e5 01 	lds	r18, 0x01E5
    20ca:	24 30       	cpi	r18, 0x04	; 4
    20cc:	29 f5       	brne	.+74     	; 0x2118 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20ce:	fc 01       	movw	r30, r24
    20d0:	44 89       	ldd	r20, Z+20	; 0x14
    20d2:	55 89       	ldd	r21, Z+21	; 0x15
    20d4:	66 89       	ldd	r22, Z+22	; 0x16
    20d6:	77 89       	ldd	r23, Z+23	; 0x17
    20d8:	45 2b       	or	r20, r21
    20da:	46 2b       	or	r20, r22
    20dc:	47 2b       	or	r20, r23
    20de:	e1 f0       	breq	.+56     	; 0x2118 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20e0:	81 81       	ldd	r24, Z+1	; 0x01
    20e2:	8f 70       	andi	r24, 0x0F	; 15
    20e4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20e8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    20ec:	81 11       	cpse	r24, r1
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20f4:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20f8:	80 91 e8 00 	lds	r24, 0x00E8
    20fc:	8e 77       	andi	r24, 0x7E	; 126
    20fe:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2102:	95 fd       	sbrc	r25, 5
    2104:	f5 cf       	rjmp	.-22     	; 0x20f0 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2106:	a9 dc       	rcall	.-1710   	; 0x1a5a <Endpoint_WaitUntilReady>
    2108:	81 11       	cpse	r24, r1
    210a:	07 c0       	rjmp	.+14     	; 0x211a <CDC_Device_Flush+0x54>
    210c:	90 91 e8 00 	lds	r25, 0x00E8
    2110:	9e 77       	andi	r25, 0x7E	; 126
    2112:	90 93 e8 00 	sts	0x00E8, r25
    2116:	08 95       	ret
    2118:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    211a:	08 95       	ret

0000211c <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    211c:	20 91 e5 01 	lds	r18, 0x01E5
    2120:	24 30       	cpi	r18, 0x04	; 4
    2122:	89 f4       	brne	.+34     	; 0x2146 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2124:	fc 01       	movw	r30, r24
    2126:	44 89       	ldd	r20, Z+20	; 0x14
    2128:	55 89       	ldd	r21, Z+21	; 0x15
    212a:	66 89       	ldd	r22, Z+22	; 0x16
    212c:	77 89       	ldd	r23, Z+23	; 0x17
    212e:	45 2b       	or	r20, r21
    2130:	46 2b       	or	r20, r22
    2132:	47 2b       	or	r20, r23
    2134:	41 f0       	breq	.+16     	; 0x2146 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2136:	21 81       	ldd	r18, Z+1	; 0x01
    2138:	2f 70       	andi	r18, 0x0F	; 15
    213a:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    213e:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    2142:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    2144:	c0 cf       	rjmp	.-128    	; 0x20c6 <CDC_Device_Flush>
    2146:	08 95       	ret

00002148 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2148:	20 91 e5 01 	lds	r18, 0x01E5
    214c:	24 30       	cpi	r18, 0x04	; 4
    214e:	19 f0       	breq	.+6      	; 0x2156 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    2150:	2f ef       	ldi	r18, 0xFF	; 255
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	24 c0       	rjmp	.+72     	; 0x219e <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2156:	fc 01       	movw	r30, r24
    2158:	44 89       	ldd	r20, Z+20	; 0x14
    215a:	55 89       	ldd	r21, Z+21	; 0x15
    215c:	66 89       	ldd	r22, Z+22	; 0x16
    215e:	77 89       	ldd	r23, Z+23	; 0x17
    2160:	45 2b       	or	r20, r21
    2162:	46 2b       	or	r20, r22
    2164:	47 2b       	or	r20, r23
    2166:	a1 f3       	breq	.-24     	; 0x2150 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2168:	86 81       	ldd	r24, Z+6	; 0x06
    216a:	8f 70       	andi	r24, 0x0F	; 15
    216c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2170:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2174:	82 ff       	sbrs	r24, 2
    2176:	ec cf       	rjmp	.-40     	; 0x2150 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2178:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    217c:	88 23       	and	r24, r24
    217e:	21 f0       	breq	.+8      	; 0x2188 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2180:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    2188:	2f ef       	ldi	r18, 0xFF	; 255
    218a:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    218c:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2190:	81 11       	cpse	r24, r1
    2192:	05 c0       	rjmp	.+10     	; 0x219e <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2194:	80 91 e8 00 	lds	r24, 0x00E8
    2198:	8b 77       	andi	r24, 0x7B	; 123
    219a:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    219e:	c9 01       	movw	r24, r18
    21a0:	08 95       	ret

000021a2 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    21a2:	08 95       	ret

000021a4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21aa:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    21ae:	83 ff       	sbrs	r24, 3
    21b0:	a7 c0       	rjmp	.+334    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    21b2:	88 81       	ld	r24, Y
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	20 91 ea 01 	lds	r18, 0x01EA
    21ba:	30 91 eb 01 	lds	r19, 0x01EB
    21be:	28 17       	cp	r18, r24
    21c0:	39 07       	cpc	r19, r25
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <CDC_Device_ProcessControlRequest+0x22>
    21c4:	9d c0       	rjmp	.+314    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    21c6:	80 91 e7 01 	lds	r24, 0x01E7
    21ca:	81 32       	cpi	r24, 0x21	; 33
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <CDC_Device_ProcessControlRequest+0x42>
    21ce:	20 f4       	brcc	.+8      	; 0x21d8 <CDC_Device_ProcessControlRequest+0x34>
    21d0:	80 32       	cpi	r24, 0x20	; 32
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <CDC_Device_ProcessControlRequest+0x32>
    21d4:	95 c0       	rjmp	.+298    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    21d6:	3d c0       	rjmp	.+122    	; 0x2252 <CDC_Device_ProcessControlRequest+0xae>
    21d8:	82 32       	cpi	r24, 0x22	; 34
    21da:	09 f4       	brne	.+2      	; 0x21de <CDC_Device_ProcessControlRequest+0x3a>
    21dc:	6d c0       	rjmp	.+218    	; 0x22b8 <CDC_Device_ProcessControlRequest+0x114>
    21de:	83 32       	cpi	r24, 0x23	; 35
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <CDC_Device_ProcessControlRequest+0x40>
    21e2:	8e c0       	rjmp	.+284    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    21e4:	7d c0       	rjmp	.+250    	; 0x22e0 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21e6:	80 91 e6 01 	lds	r24, 0x01E6
    21ea:	81 3a       	cpi	r24, 0xA1	; 161
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <CDC_Device_ProcessControlRequest+0x4c>
    21ee:	88 c0       	rjmp	.+272    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21f0:	80 91 e8 00 	lds	r24, 0x00E8
    21f4:	87 7f       	andi	r24, 0xF7	; 247
    21f6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21fa:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    21fe:	80 ff       	sbrs	r24, 0
    2200:	fc cf       	rjmp	.-8      	; 0x21fa <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2202:	4c 89       	ldd	r20, Y+20	; 0x14
    2204:	5d 89       	ldd	r21, Y+21	; 0x15
    2206:	6e 89       	ldd	r22, Y+22	; 0x16
    2208:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    220a:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    220e:	bb 27       	eor	r27, r27
    2210:	a7 2f       	mov	r26, r23
    2212:	96 2f       	mov	r25, r22
    2214:	85 2f       	mov	r24, r21
    2216:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    221a:	cb 01       	movw	r24, r22
    221c:	aa 27       	eor	r26, r26
    221e:	bb 27       	eor	r27, r27
    2220:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2224:	47 2f       	mov	r20, r23
    2226:	55 27       	eor	r21, r21
    2228:	66 27       	eor	r22, r22
    222a:	77 27       	eor	r23, r23
    222c:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2230:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2232:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    2236:	89 8d       	ldd	r24, Y+25	; 0x19
    2238:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    223c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    223e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2242:	80 91 e8 00 	lds	r24, 0x00E8
    2246:	8e 77       	andi	r24, 0x7E	; 126
    2248:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2250:	e3 cb       	rjmp	.-2106   	; 0x1a18 <Endpoint_ClearStatusStage>
    2252:	80 91 e6 01 	lds	r24, 0x01E6
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2256:	81 32       	cpi	r24, 0x21	; 33
    2258:	09 f0       	breq	.+2      	; 0x225c <CDC_Device_ProcessControlRequest+0xb8>
    225a:	52 c0       	rjmp	.+164    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    225c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2260:	87 7f       	andi	r24, 0xF7	; 247
    2262:	80 93 e8 00 	sts	0x00E8, r24
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <CDC_Device_ProcessControlRequest+0xce>
    2268:	80 91 e5 01 	lds	r24, 0x01E5
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    226c:	88 23       	and	r24, r24
    226e:	09 f4       	brne	.+2      	; 0x2272 <CDC_Device_ProcessControlRequest+0xce>
    2270:	47 c0       	rjmp	.+142    	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    2272:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2276:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2278:	f7 cf       	rjmp	.-18     	; 0x2268 <CDC_Device_ProcessControlRequest+0xc4>
    227a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    227e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    2282:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    2286:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    228a:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    228c:	2d 8b       	std	Y+21, r18	; 0x15
    228e:	9e 8b       	std	Y+22, r25	; 0x16
    2290:	8f 8b       	std	Y+23, r24	; 0x17
    2292:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2296:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2298:	80 91 f1 00 	lds	r24, 0x00F1
    229c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    229e:	80 91 f1 00 	lds	r24, 0x00F1
    22a2:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    22a4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22a8:	8b 77       	andi	r24, 0x7B	; 123
    22aa:	80 93 e8 00 	sts	0x00E8, r24
    22ae:	b4 db       	rcall	.-2200   	; 0x1a18 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    22b0:	ce 01       	movw	r24, r28
    22b2:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22b4:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22b6:	60 c9       	rjmp	.-3392   	; 0x1578 <EVENT_CDC_Device_LineEncodingChanged>
    22b8:	80 91 e6 01 	lds	r24, 0x01E6
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22bc:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22be:	01 f5       	brne	.+64     	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    22c0:	80 91 e8 00 	lds	r24, 0x00E8
    22c4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22c6:	80 93 e8 00 	sts	0x00E8, r24
    22ca:	a6 db       	rcall	.-2228   	; 0x1a18 <Endpoint_ClearStatusStage>
    22cc:	80 91 e8 01 	lds	r24, 0x01E8
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22d0:	90 91 e9 01 	lds	r25, 0x01E9

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    22d4:	99 8b       	std	Y+17, r25	; 0x11
    22d6:	88 8b       	std	Y+16, r24	; 0x10
    22d8:	ce 01       	movw	r24, r28
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	c7 c9       	rjmp	.-3186   	; 0x166e <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22e0:	80 91 e6 01 	lds	r24, 0x01E6
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22e4:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    22e6:	61 f4       	brne	.+24     	; 0x2300 <CDC_Device_ProcessControlRequest+0x15c>
    22e8:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22ec:	87 7f       	andi	r24, 0xF7	; 247
    22ee:	80 93 e8 00 	sts	0x00E8, r24
    22f2:	92 db       	rcall	.-2268   	; 0x1a18 <Endpoint_ClearStatusStage>
    22f4:	60 91 e8 01 	lds	r22, 0x01E8
    22f8:	ce 01       	movw	r24, r28
    22fa:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22fc:	cf 91       	pop	r28
    22fe:	51 cf       	rjmp	.-350    	; 0x21a2 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    2306:	6f 92       	push	r6
    2308:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    230a:	8f 92       	push	r8
    230c:	9f 92       	push	r9
			}

			break;
	}
}
    230e:	af 92       	push	r10
    2310:	bf 92       	push	r11
    2312:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2314:	df 92       	push	r13
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	00 d0       	rcall	.+0      	; 0x2324 <HID_Device_ProcessControlRequest+0x1e>
    2324:	1f 92       	push	r1
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    232c:	ad b6       	in	r10, 0x3d	; 61
    232e:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2330:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2334:	83 ff       	sbrs	r24, 3
    2336:	07 c1       	rjmp	.+526    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    2338:	f7 01       	movw	r30, r14
    233a:	80 81       	ld	r24, Z
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	20 91 ea 01 	lds	r18, 0x01EA
    2342:	30 91 eb 01 	lds	r19, 0x01EB
    2346:	28 17       	cp	r18, r24
    2348:	39 07       	cpc	r19, r25
    234a:	09 f0       	breq	.+2      	; 0x234e <HID_Device_ProcessControlRequest+0x48>
    234c:	fc c0       	rjmp	.+504    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    234e:	80 91 e7 01 	lds	r24, 0x01E7
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	09 f4       	brne	.+2      	; 0x2358 <HID_Device_ProcessControlRequest+0x52>
    2356:	9e c0       	rjmp	.+316    	; 0x2494 <HID_Device_ProcessControlRequest+0x18e>
    2358:	30 f4       	brcc	.+12     	; 0x2366 <HID_Device_ProcessControlRequest+0x60>
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	71 f0       	breq	.+28     	; 0x237a <HID_Device_ProcessControlRequest+0x74>
    235e:	82 30       	cpi	r24, 0x02	; 2
    2360:	09 f0       	breq	.+2      	; 0x2364 <HID_Device_ProcessControlRequest+0x5e>
    2362:	f1 c0       	rjmp	.+482    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    2364:	d4 c0       	rjmp	.+424    	; 0x250e <HID_Device_ProcessControlRequest+0x208>
    2366:	8a 30       	cpi	r24, 0x0A	; 10
    2368:	09 f4       	brne	.+2      	; 0x236c <HID_Device_ProcessControlRequest+0x66>
    236a:	b9 c0       	rjmp	.+370    	; 0x24de <HID_Device_ProcessControlRequest+0x1d8>
    236c:	8b 30       	cpi	r24, 0x0B	; 11
    236e:	09 f4       	brne	.+2      	; 0x2372 <HID_Device_ProcessControlRequest+0x6c>
    2370:	a2 c0       	rjmp	.+324    	; 0x24b6 <HID_Device_ProcessControlRequest+0x1b0>
    2372:	89 30       	cpi	r24, 0x09	; 9
    2374:	09 f0       	breq	.+2      	; 0x2378 <HID_Device_ProcessControlRequest+0x72>
    2376:	e7 c0       	rjmp	.+462    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    2378:	4c c0       	rjmp	.+152    	; 0x2412 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    237a:	80 91 e6 01 	lds	r24, 0x01E6
    237e:	81 3a       	cpi	r24, 0xA1	; 161
    2380:	09 f0       	breq	.+2      	; 0x2384 <HID_Device_ProcessControlRequest+0x7e>
    2382:	e1 c0       	rjmp	.+450    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    2384:	8d b6       	in	r8, 0x3d	; 61
    2386:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2388:	1a 82       	std	Y+2, r1	; 0x02
    238a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    238c:	80 91 e8 01 	lds	r24, 0x01E8
    2390:	10 91 e9 01 	lds	r17, 0x01E9
    2394:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2396:	f7 01       	movw	r30, r14
    2398:	40 85       	ldd	r20, Z+8	; 0x08
    239a:	8d b7       	in	r24, 0x3d	; 61
    239c:	9e b7       	in	r25, 0x3e	; 62
    239e:	84 1b       	sub	r24, r20
    23a0:	91 09       	sbc	r25, r1
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	9e bf       	out	0x3e, r25	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	8d bf       	out	0x3d, r24	; 61
    23ac:	cd b6       	in	r12, 0x3d	; 61
    23ae:	de b6       	in	r13, 0x3e	; 62
    23b0:	ef ef       	ldi	r30, 0xFF	; 255
    23b2:	ce 1a       	sub	r12, r30
    23b4:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    23b6:	36 01       	movw	r6, r12
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	c6 01       	movw	r24, r12
    23c0:	ea d1       	rcall	.+980    	; 0x2796 <memset>
    23c2:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    23c4:	41 50       	subi	r20, 0x01	; 1
    23c6:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    23c8:	0f 5f       	subi	r16, 0xFF	; 255
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	96 01       	movw	r18, r12
    23ce:	be 01       	movw	r22, r28
    23d0:	6d 5f       	subi	r22, 0xFD	; 253
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	c7 01       	movw	r24, r14
    23d6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <CALLBACK_HID_Device_CreateHIDReport>
    23da:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    23dc:	26 81       	ldd	r18, Z+6	; 0x06
    23de:	37 81       	ldd	r19, Z+7	; 0x07
    23e0:	21 15       	cp	r18, r1
    23e2:	31 05       	cpc	r19, r1
    23e4:	29 f0       	breq	.+10     	; 0x23f0 <HID_Device_ProcessControlRequest+0xea>
    23e6:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	b6 01       	movw	r22, r12
    23ec:	c9 01       	movw	r24, r18
    23ee:	ca d1       	rcall	.+916    	; 0x2784 <memcpy>
    23f0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23f8:	87 7f       	andi	r24, 0xF7	; 247
    23fa:	80 93 e8 00 	sts	0x00E8, r24
    23fe:	69 81       	ldd	r22, Y+1	; 0x01
    2400:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2402:	c3 01       	movw	r24, r6
    2404:	93 d9       	rcall	.-3290   	; 0x172c <Endpoint_Write_Control_Stream_LE>
    2406:	80 91 e8 00 	lds	r24, 0x00E8
    240a:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    240c:	80 93 e8 00 	sts	0x00E8, r24
    2410:	39 c0       	rjmp	.+114    	; 0x2484 <HID_Device_ProcessControlRequest+0x17e>
    2412:	80 91 e6 01 	lds	r24, 0x01E6
    2416:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2418:	09 f0       	breq	.+2      	; 0x241c <HID_Device_ProcessControlRequest+0x116>
    241a:	95 c0       	rjmp	.+298    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    241c:	8d b6       	in	r8, 0x3d	; 61
    241e:	9e b6       	in	r9, 0x3e	; 62
    2420:	00 91 ec 01 	lds	r16, 0x01EC
    2424:	10 91 ed 01 	lds	r17, 0x01ED
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    2428:	70 90 e8 01 	lds	r7, 0x01E8
    242c:	60 90 e9 01 	lds	r6, 0x01E9
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2430:	8d b7       	in	r24, 0x3d	; 61
    2432:	9e b7       	in	r25, 0x3e	; 62
    2434:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2436:	91 0b       	sbc	r25, r17
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	9e bf       	out	0x3e, r25	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	8d bf       	out	0x3d, r24	; 61
    2442:	cd b6       	in	r12, 0x3d	; 61
    2444:	de b6       	in	r13, 0x3e	; 62
    2446:	ef ef       	ldi	r30, 0xFF	; 255
    2448:	ce 1a       	sub	r12, r30
    244a:	de 0a       	sbc	r13, r30
    244c:	80 91 e8 00 	lds	r24, 0x00E8
    2450:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2452:	80 93 e8 00 	sts	0x00E8, r24
    2456:	b8 01       	movw	r22, r16
    2458:	c6 01       	movw	r24, r12
    245a:	c8 d9       	rcall	.-3184   	; 0x17ec <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    245c:	80 91 e8 00 	lds	r24, 0x00E8
    2460:	8e 77       	andi	r24, 0x7E	; 126
    2462:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2466:	21 e0       	ldi	r18, 0x01	; 1
    2468:	71 10       	cpse	r7, r1
    246a:	01 c0       	rjmp	.+2      	; 0x246e <HID_Device_ProcessControlRequest+0x168>
    246c:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	02 1b       	sub	r16, r18
    2472:	13 0b       	sbc	r17, r19
    2474:	2c 0d       	add	r18, r12
    2476:	3d 1d       	adc	r19, r13
    2478:	46 2d       	mov	r20, r6
    247a:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    247c:	67 2d       	mov	r22, r7
    247e:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2480:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2484:	88 2d       	mov	r24, r8
    2486:	99 2d       	mov	r25, r9
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	9e bf       	out	0x3e, r25	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	8d bf       	out	0x3d, r24	; 61
    2492:	59 c0       	rjmp	.+178    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    2494:	80 91 e6 01 	lds	r24, 0x01E6
    2498:	81 3a       	cpi	r24, 0xA1	; 161
    249a:	09 f0       	breq	.+2      	; 0x249e <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    249c:	54 c0       	rjmp	.+168    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    249e:	80 91 e8 00 	lds	r24, 0x00E8
    24a2:	87 7f       	andi	r24, 0xF7	; 247
    24a4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24a8:	80 91 e8 00 	lds	r24, 0x00E8
    24ac:	80 ff       	sbrs	r24, 0
    24ae:	fc cf       	rjmp	.-8      	; 0x24a8 <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24b0:	f7 01       	movw	r30, r14
    24b2:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24b4:	40 c0       	rjmp	.+128    	; 0x2536 <HID_Device_ProcessControlRequest+0x230>
    24b6:	80 91 e6 01 	lds	r24, 0x01E6
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    24ba:	81 32       	cpi	r24, 0x21	; 33
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24be:	43 c0       	rjmp	.+134    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    24c0:	80 91 e8 00 	lds	r24, 0x00E8
    24c4:	87 7f       	andi	r24, 0xF7	; 247
    24c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ca:	a6 da       	rcall	.-2740   	; 0x1a18 <Endpoint_ClearStatusStage>
    24cc:	90 91 e8 01 	lds	r25, 0x01E8
    24d0:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24d2:	91 11       	cpse	r25, r1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	f7 01       	movw	r30, r14
    24da:	81 87       	std	Z+9, r24	; 0x09
    24dc:	34 c0       	rjmp	.+104    	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    24de:	80 91 e6 01 	lds	r24, 0x01E6
    24e2:	81 32       	cpi	r24, 0x21	; 33
    24e4:	81 f5       	brne	.+96     	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    24e6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24ea:	87 7f       	andi	r24, 0xF7	; 247
    24ec:	80 93 e8 00 	sts	0x00E8, r24
    24f0:	93 da       	rcall	.-2778   	; 0x1a18 <Endpoint_ClearStatusStage>
    24f2:	80 91 e8 01 	lds	r24, 0x01E8
    24f6:	90 91 e9 01 	lds	r25, 0x01E9
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24fa:	88 27       	eor	r24, r24
    24fc:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    24fe:	96 95       	lsr	r25
    2500:	87 95       	ror	r24
    2502:	3a 95       	dec	r19
    2504:	e1 f7       	brne	.-8      	; 0x24fe <HID_Device_ProcessControlRequest+0x1f8>
    2506:	f7 01       	movw	r30, r14
    2508:	95 87       	std	Z+13, r25	; 0x0d
    250a:	84 87       	std	Z+12, r24	; 0x0c
    250c:	1c c0       	rjmp	.+56     	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    250e:	80 91 e6 01 	lds	r24, 0x01E6
    2512:	81 3a       	cpi	r24, 0xA1	; 161
    2514:	c1 f4       	brne	.+48     	; 0x2546 <HID_Device_ProcessControlRequest+0x240>
    2516:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    251a:	87 7f       	andi	r24, 0xF7	; 247
    251c:	80 93 e8 00 	sts	0x00E8, r24
    2520:	80 91 e8 00 	lds	r24, 0x00E8
    2524:	80 ff       	sbrs	r24, 0
    2526:	fc cf       	rjmp	.-8      	; 0x2520 <HID_Device_ProcessControlRequest+0x21a>
    2528:	f7 01       	movw	r30, r14
    252a:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    252c:	95 85       	ldd	r25, Z+13	; 0x0d
    252e:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2530:	87 95       	ror	r24
    2532:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2534:	87 95       	ror	r24
    2536:	80 93 f1 00 	sts	0x00F1, r24
    253a:	80 91 e8 00 	lds	r24, 0x00E8
    253e:	8e 77       	andi	r24, 0x7E	; 126
    2540:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2544:	69 da       	rcall	.-2862   	; 0x1a18 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	be be       	out	0x3e, r11	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
			}

			break;
	}
}
    2554:	0f 90       	pop	r0
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	9f 90       	pop	r9
    256c:	8f 90       	pop	r8
    256e:	7f 90       	pop	r7
    2570:	6f 90       	pop	r6
    2572:	08 95       	ret

00002574 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2574:	9c 01       	movw	r18, r24
    2576:	27 5f       	subi	r18, 0xF7	; 247
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	f9 01       	movw	r30, r18
    257c:	27 e0       	ldi	r18, 0x07	; 7
    257e:	df 01       	movw	r26, r30
    2580:	1d 92       	st	X+, r1
    2582:	2a 95       	dec	r18
    2584:	e9 f7       	brne	.-6      	; 0x2580 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	fc 01       	movw	r30, r24
    258a:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    258c:	24 ef       	ldi	r18, 0xF4	; 244
    258e:	31 e0       	ldi	r19, 0x01	; 1
    2590:	35 87       	std	Z+13, r19	; 0x0d
    2592:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2594:	23 e0       	ldi	r18, 0x03	; 3
    2596:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2598:	61 e0       	ldi	r22, 0x01	; 1
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	ff c9       	rjmp	.-3074   	; 0x199c <Endpoint_ConfigureEndpointTable>

0000259e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    259e:	4f 92       	push	r4
    25a0:	5f 92       	push	r5
    25a2:	6f 92       	push	r6
    25a4:	7f 92       	push	r7
    25a6:	8f 92       	push	r8
    25a8:	9f 92       	push	r9
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <HID_Device_USBTask+0x22>
    25c0:	1f 92       	push	r1
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    25c8:	ad b6       	in	r10, 0x3d	; 61
    25ca:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    25cc:	80 91 e5 01 	lds	r24, 0x01E5
    25d0:	84 30       	cpi	r24, 0x04	; 4
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <HID_Device_USBTask+0x38>
    25d4:	8f c0       	rjmp	.+286    	; 0x26f4 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    25d6:	80 91 e4 00 	lds	r24, 0x00E4
    25da:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    25de:	f7 01       	movw	r30, r14
    25e0:	22 85       	ldd	r18, Z+10	; 0x0a
    25e2:	33 85       	ldd	r19, Z+11	; 0x0b
    25e4:	28 17       	cp	r18, r24
    25e6:	39 07       	cpc	r19, r25
    25e8:	09 f4       	brne	.+2      	; 0x25ec <HID_Device_USBTask+0x4e>
    25ea:	84 c0       	rjmp	.+264    	; 0x26f4 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25ec:	81 81       	ldd	r24, Z+1	; 0x01
    25ee:	8f 70       	andi	r24, 0x0F	; 15
    25f0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    25f4:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    25f8:	85 ff       	sbrs	r24, 5
    25fa:	7c c0       	rjmp	.+248    	; 0x26f4 <HID_Device_USBTask+0x156>
    25fc:	6d b6       	in	r6, 0x3d	; 61
    25fe:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2600:	40 85       	ldd	r20, Z+8	; 0x08
    2602:	8d b7       	in	r24, 0x3d	; 61
    2604:	9e b7       	in	r25, 0x3e	; 62
    2606:	84 1b       	sub	r24, r20
    2608:	91 09       	sbc	r25, r1
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	9e bf       	out	0x3e, r25	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	8d bf       	out	0x3d, r24	; 61
    2614:	cd b6       	in	r12, 0x3d	; 61
    2616:	de b6       	in	r13, 0x3e	; 62
    2618:	ef ef       	ldi	r30, 0xFF	; 255
    261a:	ce 1a       	sub	r12, r30
    261c:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    261e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2620:	1a 82       	std	Y+2, r1	; 0x02
    2622:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2624:	46 01       	movw	r8, r12
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	c6 01       	movw	r24, r12
    262e:	b3 d0       	rcall	.+358    	; 0x2796 <memset>
    2630:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2632:	0f 5f       	subi	r16, 0xFF	; 255
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	96 01       	movw	r18, r12
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	be 01       	movw	r22, r28
    263c:	6d 5f       	subi	r22, 0xFD	; 253
    263e:	7f 4f       	sbci	r23, 0xFF	; 255
    2640:	c7 01       	movw	r24, r14
    2642:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <CALLBACK_HID_Device_CreateHIDReport>
    2646:	58 2e       	mov	r5, r24
    2648:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    264a:	84 85       	ldd	r24, Z+12	; 0x0c
    264c:	95 85       	ldd	r25, Z+13	; 0x0d
    264e:	89 2b       	or	r24, r25
    2650:	31 f0       	breq	.+12     	; 0x265e <HID_Device_USBTask+0xc0>
    2652:	01 e0       	ldi	r16, 0x01	; 1
    2654:	10 e0       	ldi	r17, 0x00	; 0
    2656:	86 85       	ldd	r24, Z+14	; 0x0e
    2658:	97 85       	ldd	r25, Z+15	; 0x0f
    265a:	89 2b       	or	r24, r25
    265c:	11 f0       	breq	.+4      	; 0x2662 <HID_Device_USBTask+0xc4>
    265e:	00 e0       	ldi	r16, 0x00	; 0
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2664:	c6 80       	ldd	r12, Z+6	; 0x06
    2666:	d7 80       	ldd	r13, Z+7	; 0x07
    2668:	c1 14       	cp	r12, r1
    266a:	d1 04       	cpc	r13, r1
    266c:	89 f0       	breq	.+34     	; 0x2690 <HID_Device_USBTask+0xf2>
    266e:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2670:	5a 81       	ldd	r21, Y+2	; 0x02
    2672:	b6 01       	movw	r22, r12
    2674:	c4 01       	movw	r24, r8
    2676:	79 d0       	rcall	.+242    	; 0x276a <memcmp>
    2678:	44 24       	eor	r4, r4
    267a:	43 94       	inc	r4
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	09 f4       	brne	.+2      	; 0x2682 <HID_Device_USBTask+0xe4>
    2680:	41 2c       	mov	r4, r1
    2682:	f7 01       	movw	r30, r14
    2684:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	b4 01       	movw	r22, r8
    268a:	c6 01       	movw	r24, r12
    268c:	7b d0       	rcall	.+246    	; 0x2784 <memcpy>
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <HID_Device_USBTask+0xf4>
    2690:	41 2c       	mov	r4, r1
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2696:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2698:	f9 f0       	breq	.+62     	; 0x26d8 <HID_Device_USBTask+0x13a>
    269a:	51 10       	cpse	r5, r1
    269c:	04 c0       	rjmp	.+8      	; 0x26a6 <HID_Device_USBTask+0x108>
    269e:	41 10       	cpse	r4, r1
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <HID_Device_USBTask+0x108>
    26a2:	00 ff       	sbrs	r16, 0
    26a4:	19 c0       	rjmp	.+50     	; 0x26d8 <HID_Device_USBTask+0x13a>
    26a6:	f7 01       	movw	r30, r14
    26a8:	84 85       	ldd	r24, Z+12	; 0x0c
    26aa:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    26ac:	97 87       	std	Z+15, r25	; 0x0f
    26ae:	86 87       	std	Z+14, r24	; 0x0e
    26b0:	81 81       	ldd	r24, Z+1	; 0x01
    26b2:	8f 70       	andi	r24, 0x0F	; 15
    26b4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	81 11       	cpse	r24, r1
    26bc:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    26c0:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    26c2:	7a 81       	ldd	r23, Y+2	; 0x02
    26c4:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	c4 01       	movw	r24, r8
    26ca:	0e 94 49 0b 	call	0x1692	; 0x1692 <Endpoint_Write_Stream_LE>
    26ce:	80 91 e8 00 	lds	r24, 0x00E8
    26d2:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    26d4:	80 93 e8 00 	sts	0x00E8, r24
    26d8:	80 91 e4 00 	lds	r24, 0x00E4
    26dc:	90 91 e5 00 	lds	r25, 0x00E5
    26e0:	f7 01       	movw	r30, r14
    26e2:	93 87       	std	Z+11, r25	; 0x0b
    26e4:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    26e6:	86 2d       	mov	r24, r6
    26e8:	97 2d       	mov	r25, r7
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	9e bf       	out	0x3e, r25	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	8d bf       	out	0x3d, r24	; 61
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	be be       	out	0x3e, r11	; 62
	}
}
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	ad be       	out	0x3d, r10	; 61
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	df 90       	pop	r13
    2712:	cf 90       	pop	r12
    2714:	bf 90       	pop	r11
    2716:	af 90       	pop	r10
    2718:	9f 90       	pop	r9
    271a:	8f 90       	pop	r8
    271c:	7f 90       	pop	r7
    271e:	6f 90       	pop	r6
    2720:	5f 90       	pop	r5
    2722:	4f 90       	pop	r4
    2724:	08 95       	ret

00002726 <__udivmodsi4>:
    2726:	a1 e2       	ldi	r26, 0x21	; 33
    2728:	1a 2e       	mov	r1, r26
    272a:	aa 1b       	sub	r26, r26
    272c:	bb 1b       	sub	r27, r27
    272e:	fd 01       	movw	r30, r26
    2730:	0d c0       	rjmp	.+26     	; 0x274c <__udivmodsi4_ep>

00002732 <__udivmodsi4_loop>:
    2732:	aa 1f       	adc	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	ee 1f       	adc	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	a2 17       	cp	r26, r18
    273c:	b3 07       	cpc	r27, r19
    273e:	e4 07       	cpc	r30, r20
    2740:	f5 07       	cpc	r31, r21
    2742:	20 f0       	brcs	.+8      	; 0x274c <__udivmodsi4_ep>
    2744:	a2 1b       	sub	r26, r18
    2746:	b3 0b       	sbc	r27, r19
    2748:	e4 0b       	sbc	r30, r20
    274a:	f5 0b       	sbc	r31, r21

0000274c <__udivmodsi4_ep>:
    274c:	66 1f       	adc	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	1a 94       	dec	r1
    2756:	69 f7       	brne	.-38     	; 0x2732 <__udivmodsi4_loop>
    2758:	60 95       	com	r22
    275a:	70 95       	com	r23
    275c:	80 95       	com	r24
    275e:	90 95       	com	r25
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	bd 01       	movw	r22, r26
    2766:	cf 01       	movw	r24, r30
    2768:	08 95       	ret

0000276a <memcmp>:
    276a:	fb 01       	movw	r30, r22
    276c:	dc 01       	movw	r26, r24
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <memcmp+0xe>
    2770:	8d 91       	ld	r24, X+
    2772:	01 90       	ld	r0, Z+
    2774:	80 19       	sub	r24, r0
    2776:	21 f4       	brne	.+8      	; 0x2780 <memcmp+0x16>
    2778:	41 50       	subi	r20, 0x01	; 1
    277a:	50 40       	sbci	r21, 0x00	; 0
    277c:	c8 f7       	brcc	.-14     	; 0x2770 <memcmp+0x6>
    277e:	88 1b       	sub	r24, r24
    2780:	99 0b       	sbc	r25, r25
    2782:	08 95       	ret

00002784 <memcpy>:
    2784:	fb 01       	movw	r30, r22
    2786:	dc 01       	movw	r26, r24
    2788:	02 c0       	rjmp	.+4      	; 0x278e <memcpy+0xa>
    278a:	01 90       	ld	r0, Z+
    278c:	0d 92       	st	X+, r0
    278e:	41 50       	subi	r20, 0x01	; 1
    2790:	50 40       	sbci	r21, 0x00	; 0
    2792:	d8 f7       	brcc	.-10     	; 0x278a <memcpy+0x6>
    2794:	08 95       	ret

00002796 <memset>:
    2796:	dc 01       	movw	r26, r24
    2798:	01 c0       	rjmp	.+2      	; 0x279c <memset+0x6>
    279a:	6d 93       	st	X+, r22
    279c:	41 50       	subi	r20, 0x01	; 1
    279e:	50 40       	sbci	r21, 0x00	; 0
    27a0:	e0 f7       	brcc	.-8      	; 0x279a <memset+0x4>
    27a2:	08 95       	ret

000027a4 <_exit>:
    27a4:	f8 94       	cli

000027a6 <__stop_program>:
    27a6:	ff cf       	rjmp	.-2      	; 0x27a6 <__stop_program>
