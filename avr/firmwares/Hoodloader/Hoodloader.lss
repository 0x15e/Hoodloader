
Hoodloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000027ca  0000285e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  0080013e  0080013e  0000289c  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003f53  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000888  00000000  00000000  00003f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e2de  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003aa0  00000000  00000000  00012adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005929  00000000  00000000  0001657b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001538  00000000  00000000  0001bea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a0f  00000000  00000000  0001d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000087c9  00000000  00000000  00021deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a40  00000000  00000000  0002a5b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
	ram.isp.pmode = false;
       0:	99 c1       	rjmp	.+818    	; 0x334 <__ctors_end>
       2:	00 00       	nop
	ram.isp._addr = 0; // just to be sure
       4:	b3 c1       	rjmp	.+870    	; 0x36c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c1       	rjmp	.+866    	; 0x36c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c1       	rjmp	.+862    	; 0x36c <__bad_interrupt>
	uint8_t CurrByte;

	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
       e:	00 00       	nop
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;

				return UDR1;
      10:	ad c1       	rjmp	.+858    	; 0x36c <__bad_interrupt>
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
		stdout = Stream;
      12:	00 00       	nop
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
      14:	ab c1       	rjmp	.+854    	; 0x36c <__bad_interrupt>
	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
      16:	00 00       	nop
int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
	  return _FDEV_EOF;
      18:	a9 c1       	rjmp	.+850    	; 0x36c <__bad_interrupt>

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
      1a:	00 00       	nop
{
	(void)Stream;

	while (!(Serial_IsCharReceived()));
	return Serial_ReceiveByte();
}
      1c:	a7 c1       	rjmp	.+846    	; 0x36c <__bad_interrupt>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	a5 c1       	rjmp	.+842    	; 0x36c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c1       	rjmp	.+838    	; 0x36c <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	a1 c1       	rjmp	.+834    	; 0x36c <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_11>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_12>
      34:	9b c1       	rjmp	.+822    	; 0x36c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c1       	rjmp	.+818    	; 0x36c <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	97 c1       	rjmp	.+814    	; 0x36c <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	95 c1       	rjmp	.+810    	; 0x36c <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	93 c1       	rjmp	.+806    	; 0x36c <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	91 c1       	rjmp	.+802    	; 0x36c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c1       	rjmp	.+798    	; 0x36c <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	8d c1       	rjmp	.+794    	; 0x36c <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	8b c1       	rjmp	.+790    	; 0x36c <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	89 c1       	rjmp	.+786    	; 0x36c <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	57 c3       	rjmp	.+1710   	; 0x70c <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	85 c1       	rjmp	.+778    	; 0x36c <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	83 c1       	rjmp	.+774    	; 0x36c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c1       	rjmp	.+770    	; 0x36c <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	7f c1       	rjmp	.+766    	; 0x36c <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	7d c1       	rjmp	.+762    	; 0x36c <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	30 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     0.A.r.d.u.i.n.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	20 00 48 00 6f 00 6f 00 64 00 6c 00 6f 00 61 00      .H.o.o.d.l.o.a.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	64 00 65 00 72 00 20 00 42 00 65 00 74 00 61 00     d.e.r. .B.e.t.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	00 00                                               ..

000000a6 <ManufacturerString>:
      a6:	12 03 4e 00 69 00 63 00 6f 00 48 00 6f 00 6f 00     ..N.i.c.o.H.o.o.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b6:	64 00 00 00                                         d...

000000ba <LanguageString>:
      ba:	04 03 09 04                                         ....

000000be <ConfigurationDescriptor>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      be:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      ce:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      de:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
      ee:	04 01 00 02 0a 00 00 00 07 05 04 02 40 00 01 07     ............@...
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      fe:	05 83 02 40 00 01 09 04 02 00 01 03 00 00 00 09     ...@............
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     10e:	21 11 01 00 01 22 04 02 07 05 81 03 10 00 01        !....".........

0000011d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11d:	12 01 10 01 ef 02 01 08 eb 03 68 6e 80 01 01 02     ..........hn....
     12d:	dc 01                                               ..

0000012f <HIDReport>:
     12f:	05 01 09 02 a1 01 09 01 a1 00 85 01 05 09 19 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13f:	29 05 15 00 25 01 95 05 75 01 81 02 95 01 75 03     )...%...u.....u.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14f:	81 03 05 01 09 30 09 31 09 38 15 81 25 7f 75 08     .....0.1.8..%.u.
     15f:	95 03 81 06 c0 c0 05 01 09 06 a1 01 85 02 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     16f:	19 e0 29 e7 15 00 25 01 75 01 95 08 81 02 95 01     ..)...%.u.......
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17f:	75 08 81 03 95 06 75 08 15 00 25 65 05 07 19 00     u.....u...%e....
     18f:	29 65 81 00 05 08 19 01 29 05 95 05 75 01 91 02     )e......)...u...
     19f:	95 01 75 03 91 03 c0 06 c0 ff 0a 00 0c a1 01 85     ..u.............
				ReportSize     -= 2;
     1af:	03 75 08 15 00 26 ff 00 95 0f 09 01 81 02 95 0f     .u...&..........
     1bf:	09 02 91 02 c0 05 0c 09 01 a1 01 85 04 15 00 26     ...............&
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1cf:	ff 03 19 00 2a ff 03 95 04 75 10 81 00 c0 05 01     ....*....u......
				ReportSize     -= 1;
     1df:	09 80 a1 01 85 05 15 00 26 ff 00 19 00 29 ff 95     ........&....)..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ef:	01 75 08 81 00 c0 05 01 09 04 a1 01 85 06 05 09     .u..............
     1ff:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     20f:	a1 00 09 30 09 31 09 33 09 34 16 00 80 26 ff 7f     ...0.1.3.4...&..
     21f:	75 10 95 04 81 02 09 32 09 35 15 80 25 7f 75 08     u......2.5..%.u.
     22f:	95 02 81 02 c0 05 01 09 39 09 39 15 01 25 08 95     ........9.9..%..
     23f:	02 75 04 81 02 c0 05 01 09 04 a1 01 85 07 05 09     .u..............
     24f:	19 01 29 20 15 00 25 01 75 01 95 20 81 02 05 01     ..) ..%.u.. ....
     25f:	a1 00 09 30 09 31 09 33 09 34 16 00 80 26 ff 7f     ...0.1.3.4...&..
     26f:	75 10 95 04 81 02 09 32 09 35 15 80 25 7f 75 08     u......2.5..%.u.
     27f:	95 02 81 02 c0 09 39 09 39 15 01 25 08 95 02 75     ......9.9..%...u
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28f:	04 81 02 c0 05 01 09 04 a1 01 85 08 05 09 19 01     ................
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     29f:	29 20 15 00 25 01 75 01 95 20 81 02 05 01 a1 00     ) ..%.u.. ......

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2af:	09 30 09 31 09 33 09 34 16 00 80 26 ff 7f 75 10     .0.1.3.4...&..u.

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2bf:	95 04 81 02 09 32 09 35 15 80 25 7f 75 08 95 02     .....2.5..%.u...
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2cf:	81 02 c0 05 01 09 39 09 39 15 01 25 08 95 02 75     ......9.9..%...u
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2df:	04 81 02 c0 05 01 09 04 a1 01 85 09 05 09 19 01     ................
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2ef:	29 20 15 00 25 01 75 01 95 20 81 02 05 01 a1 00     ) ..%.u.. ......
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ff:	09 30 09 31 09 33 09 34 16 00 80 26 ff 7f 75 10     .0.1.3.4...&..u.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     30f:	95 04 81 02 09 32 09 35 15 80 25 7f 75 08 95 02     .....2.5..%.u...
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31f:	81 02 c0 05 01 09 39 09 39 15 01 25 08 95 02 75     ......9.9..%...u
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     32f:	04 81 02 c0 00                                      .....

00000334 <__ctors_end>:
     334:	11 24       	eor	r1, r1
     336:	1f be       	out	0x3f, r1	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	cf ef       	ldi	r28, 0xFF	; 255
     33a:	d2 e0       	ldi	r29, 0x02	; 2
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	cd bf       	out	0x3d, r28	; 61

00000340 <__do_copy_data>:
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b1 e0       	ldi	r27, 0x01	; 1
     346:	ea ec       	ldi	r30, 0xCA	; 202
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	f7 e2       	ldi	r31, 0x27	; 39

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	02 c0       	rjmp	.+4      	; 0x350 <__do_copy_data+0x10>
     34c:	05 90       	lpm	r0, Z+
     34e:	0d 92       	st	X+, r0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	ae 33       	cpi	r26, 0x3E	; 62
     352:	b1 07       	cpc	r27, r17
     354:	d9 f7       	brne	.-10     	; 0x34c <__do_copy_data+0xc>

00000356 <__do_clear_bss>:
     356:	11 e0       	ldi	r17, 0x01	; 1
     358:	ae e3       	ldi	r26, 0x3E	; 62
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	01 c0       	rjmp	.+2      	; 0x360 <.do_clear_bss_start>

0000035e <.do_clear_bss_loop>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	1d 92       	st	X+, r1

00000360 <.do_clear_bss_start>:
     360:	a6 3f       	cpi	r26, 0xF6	; 246
     362:	b1 07       	cpc	r27, r17
     364:	e1 f7       	brne	.-8      	; 0x35e <.do_clear_bss_loop>
     366:	73 d0       	rcall	.+230    	; 0x44e <main>
     368:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <_exit>

0000036c <__bad_interrupt>:
     36c:	49 ce       	rjmp	.-878    	; 0x0 <__vectors>

0000036e <LRingBuffer_Remove.constprop.2>:
     36e:	ee e3       	ldi	r30, 0x3E	; 62
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	5f b7       	in	r21, 0x3f	; 63
     374:	f8 94       	cli
     376:	20 81       	ld	r18, Z

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	31 81       	ldd	r19, Z+1	; 0x01
     37a:	21 15       	cp	r18, r1
     37c:	31 05       	cpc	r19, r1
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	19 f0       	breq	.+6      	; 0x386 <LRingBuffer_Remove.constprop.2+0x18>
     380:	44 81       	ldd	r20, Z+4	; 0x04
     382:	41 11       	cpse	r20, r1
     384:	04 c0       	rjmp	.+8      	; 0x38e <LRingBuffer_Remove.constprop.2+0x20>
     386:	5f bf       	out	0x3f, r21	; 63
     388:	2f ef       	ldi	r18, 0xFF	; 255
     38a:	3f ef       	ldi	r19, 0xFF	; 255
     38c:	11 c0       	rjmp	.+34     	; 0x3b0 <LRingBuffer_Remove.constprop.2+0x42>
     38e:	82 81       	ldd	r24, Z+2	; 0x02
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	84 1b       	sub	r24, r20
     394:	91 09       	sbc	r25, r1
     396:	97 ff       	sbrs	r25, 7
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <LRingBuffer_Remove.constprop.2+0x32>
     39a:	63 81       	ldd	r22, Z+3	; 0x03
     39c:	86 0f       	add	r24, r22
     39e:	91 1d       	adc	r25, r1
     3a0:	d9 01       	movw	r26, r18
     3a2:	a8 0f       	add	r26, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	b9 1f       	adc	r27, r25
     3a6:	2c 91       	ld	r18, X
     3a8:	41 50       	subi	r20, 0x01	; 1
     3aa:	44 83       	std	Z+4, r20	; 0x04
     3ac:	5f bf       	out	0x3f, r21	; 63
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	c9 01       	movw	r24, r18
     3b2:	08 95       	ret

000003b4 <LRingBuffer_Append.constprop.4>:
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	ee e3       	ldi	r30, 0x3E	; 62
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	4f b7       	in	r20, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	20 81       	ld	r18, Z

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	31 81       	ldd	r19, Z+1	; 0x01
     3c0:	21 15       	cp	r18, r1
     3c2:	31 05       	cpc	r19, r1
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <LRingBuffer_Append.constprop.4+0x14>
     3c6:	1d c0       	rjmp	.+58     	; 0x402 <LRingBuffer_Append.constprop.4+0x4e>
     3c8:	82 81       	ldd	r24, Z+2	; 0x02
     3ca:	90 e0       	ldi	r25, 0x00	; 0
				break;
     3cc:	54 81       	ldd	r21, Z+4	; 0x04

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	85 1b       	sub	r24, r21
     3d0:	91 09       	sbc	r25, r1
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	97 ff       	sbrs	r25, 7
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <LRingBuffer_Append.constprop.4+0x2a>
     3d8:	53 81       	ldd	r21, Z+3	; 0x03
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	85 0f       	add	r24, r21
     3dc:	91 1d       	adc	r25, r1
     3de:	d9 01       	movw	r26, r18
     3e0:	a8 0f       	add	r26, r24
     3e2:	b9 1f       	adc	r27, r25
     3e4:	6c 93       	st	X, r22
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	93 81       	ldd	r25, Z+3	; 0x03
     3ea:	89 13       	cpse	r24, r25
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <LRingBuffer_Append.constprop.4+0x4a>
     3ee:	92 81       	ldd	r25, Z+2	; 0x02
     3f0:	91 11       	cpse	r25, r1
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <LRingBuffer_Append.constprop.4+0x42>
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	81 50       	subi	r24, 0x01	; 1
				break;
     3fa:	82 83       	std	Z+2, r24	; 0x02
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <LRingBuffer_Append.constprop.4+0x4e>
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	84 83       	std	Z+4, r24	; 0x04
     402:	4f bf       	out	0x3f, r20	; 63
     404:	08 95       	ret

00000406 <SetupHardware>:
     406:	84 b7       	in	r24, 0x34	; 52
     408:	87 7f       	andi	r24, 0xF7	; 247

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	84 bf       	out	0x34, r24	; 52
     40c:	88 e1       	ldi	r24, 0x18	; 24
     40e:	0f b6       	in	r0, 0x3f	; 63
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	f8 94       	cli
     412:	80 93 60 00 	sts	0x0060, r24
     416:	10 92 60 00 	sts	0x0060, r1
     41a:	0f be       	out	0x3f, r0	; 63
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	53 9a       	sbi	0x0a, 3	; 10
     41e:	5a 9a       	sbi	0x0b, 2	; 11
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <EVENT_CDC_Device_LineEncodingChanged>

					while (CurrCollectionPath->Parent != NULL)
     428:	10 92 ca 01 	sts	0x01CA, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42c:	8a b1       	in	r24, 0x0a	; 10
     42e:	80 63       	ori	r24, 0x30	; 48
     430:	8a b9       	out	0x0a, r24	; 10
     432:	8b b1       	in	r24, 0x0b	; 11
     434:	80 63       	ori	r24, 0x30	; 48
     436:	8b b9       	out	0x0b, r24	; 11
     438:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <USB_Init>
     43c:	84 e0       	ldi	r24, 0x04	; 4
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	85 bd       	out	0x25, r24	; 37
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	5f 9a       	sbi	0x0b, 7	; 11
     442:	57 9a       	sbi	0x0a, 7	; 10
     444:	25 98       	cbi	0x04, 5	; 4
     446:	2d 9a       	sbi	0x05, 5	; 5
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	26 98       	cbi	0x04, 6	; 4
     44a:	2e 9a       	sbi	0x05, 6	; 5
     44c:	08 95       	ret

0000044e <main>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	80 91 cb 01 	lds	r24, 0x01CB
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	80 7f       	andi	r24, 0xF0	; 240
     454:	80 93 cb 01 	sts	0x01CB, r24
     458:	10 92 db 01 	sts	0x01DB, r1
     45c:	10 92 dc 01 	sts	0x01DC, r1

				if (UsageListSize)
     460:	2d d4       	rcall	.+2138   	; 0xcbc <end_pmode>
     462:	d1 df       	rcall	.-94     	; 0x406 <SetupHardware>
     464:	78 94       	sei
     466:	10 e2       	ldi	r17, 0x20	; 32
     468:	13 b9       	out	0x03, r17	; 3
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	80 e1       	ldi	r24, 0x10	; 16
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 b5 10 	call	0x216a	; 0x216a <CDC_Device_ReceiveByte>
     472:	97 fd       	sbrc	r25, 7
     474:	1b c0       	rjmp	.+54     	; 0x4ac <main+0x5e>
     476:	40 91 24 01 	lds	r20, 0x0124
     47a:	50 91 25 01 	lds	r21, 0x0125
     47e:	60 91 26 01 	lds	r22, 0x0126

					for (uint8_t i = 1; i < UsageListSize; i++)
     482:	70 91 27 01 	lds	r23, 0x0127
					  UsageList[i - 1] = UsageList[i];
     486:	41 30       	cpi	r20, 0x01	; 1
     488:	51 05       	cpc	r21, r1
     48a:	61 05       	cpc	r22, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	71 05       	cpc	r23, r1
     48e:	11 f4       	brne	.+4      	; 0x494 <main+0x46>
     490:	af d6       	rcall	.+3422   	; 0x11f0 <avrisp>
     492:	0c c0       	rjmp	.+24     	; 0x4ac <main+0x5e>
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	90 91 ca 01 	lds	r25, 0x01CA
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     49a:	9c 60       	ori	r25, 0x0C	; 12
     49c:	90 93 ca 01 	sts	0x01CA, r25
     4a0:	90 91 c8 00 	lds	r25, 0x00C8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a4:	95 ff       	sbrs	r25, 5
     4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <main+0x52>
     4a8:	80 93 ce 00 	sts	0x00CE, r24
     4ac:	2f b7       	in	r18, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	80 91 3e 01 	lds	r24, 0x013E
     4b4:	90 91 3f 01 	lds	r25, 0x013F
     4b8:	89 2b       	or	r24, r25
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	19 f0       	breq	.+6      	; 0x4c2 <main+0x74>
     4bc:	80 91 42 01 	lds	r24, 0x0142
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <main+0x76>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	2f bf       	out	0x3f, r18	; 63
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <main+0x84>
     4cc:	a8 99       	sbic	0x15, 0	; 21
     4ce:	81 c0       	rjmp	.+258    	; 0x5d2 <main+0x184>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	02 c1       	rjmp	.+516    	; 0x6d6 <main+0x288>
     4d2:	5d 98       	cbi	0x0b, 5	; 11
     4d4:	20 91 ca 01 	lds	r18, 0x01CA
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	23 60       	ori	r18, 0x03	; 3
     4da:	20 93 ca 01 	sts	0x01CA, r18
				break;
     4de:	20 91 11 01 	lds	r18, 0x0111
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e2:	2f 70       	andi	r18, 0x0F	; 15
     4e4:	20 93 e9 00 	sts	0x00E9, r18
     4e8:	20 91 e8 00 	lds	r18, 0x00E8
     4ec:	20 ff       	sbrs	r18, 0
     4ee:	ee cf       	rjmp	.-36     	; 0x4cc <main+0x7e>
     4f0:	80 34       	cpi	r24, 0x40	; 64
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	91 05       	cpc	r25, r1
     4f4:	10 f0       	brcs	.+4      	; 0x4fa <main+0xac>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	8f e3       	ldi	r24, 0x3F	; 63
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	f8 2e       	mov	r15, r24
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	65 c0       	rjmp	.+202    	; 0x5cc <main+0x17e>
     502:	80 91 24 01 	lds	r24, 0x0124

					if (UsageListSize)
     506:	90 91 25 01 	lds	r25, 0x0125
     50a:	a0 91 26 01 	lds	r26, 0x0126
     50e:	b0 91 27 01 	lds	r27, 0x0127
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     512:	20 91 e8 01 	lds	r18, 0x01E8
     516:	21 11       	cpse	r18, r1
     518:	0c c0       	rjmp	.+24     	; 0x532 <main+0xe4>
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	91 05       	cpc	r25, r1
     51e:	a1 05       	cpc	r26, r1
     520:	b1 05       	cpc	r27, r1
     522:	28 f0       	brcs	.+10     	; 0x52e <main+0xe0>
     524:	81 15       	cp	r24, r1

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	92 4c       	sbci	r25, 0xC2	; 194
     528:	a1 40       	sbci	r26, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
     52a:	b1 05       	cpc	r27, r1
     52c:	11 f4       	brne	.+4      	; 0x532 <main+0xe4>
     52e:	1d 99       	sbic	0x03, 5	; 3
     530:	43 c0       	rjmp	.+134    	; 0x5b8 <main+0x16a>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	80 91 20 01 	lds	r24, 0x0120
     536:	80 fd       	sbrc	r24, 0
     538:	0a c0       	rjmp	.+20     	; 0x54e <main+0x100>
     53a:	22 23       	and	r18, r18
     53c:	41 f0       	breq	.+16     	; 0x54e <main+0x100>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	8e e3       	ldi	r24, 0x3E	; 62
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	15 df       	rcall	.-470    	; 0x36e <LRingBuffer_Remove.constprop.2>
     544:	80 91 e8 01 	lds	r24, 0x01E8
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	81 11       	cpse	r24, r1
     54a:	2d c0       	rjmp	.+90     	; 0x5a6 <main+0x158>
     54c:	3e c0       	rjmp	.+124    	; 0x5ca <main+0x17c>
     54e:	7f b7       	in	r23, 0x3f	; 63
     550:	f8 94       	cli
     552:	20 91 3e 01 	lds	r18, 0x013E
     556:	30 91 3f 01 	lds	r19, 0x013F
     55a:	21 15       	cp	r18, r1
     55c:	31 05       	cpc	r19, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	41 f0       	breq	.+16     	; 0x570 <main+0x122>
     560:	40 91 42 01 	lds	r20, 0x0142
     564:	44 23       	and	r20, r20
     566:	21 f0       	breq	.+8      	; 0x570 <main+0x122>
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	14 16       	cp	r1, r20
     56c:	15 06       	cpc	r1, r21
     56e:	24 f0       	brlt	.+8      	; 0x578 <main+0x12a>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	7f bf       	out	0x3f, r23	; 63
     572:	6f ef       	ldi	r22, 0xFF	; 255
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	7f ef       	ldi	r23, 0xFF	; 255
     576:	10 c0       	rjmp	.+32     	; 0x598 <main+0x14a>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	80 91 40 01 	lds	r24, 0x0140
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	84 1b       	sub	r24, r20
     580:	95 0b       	sbc	r25, r21
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	97 ff       	sbrs	r25, 7
     584:	04 c0       	rjmp	.+8      	; 0x58e <main+0x140>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	40 91 41 01 	lds	r20, 0x0141
     58a:	84 0f       	add	r24, r20
     58c:	91 1d       	adc	r25, r1
     58e:	f9 01       	movw	r30, r18
     590:	e8 0f       	add	r30, r24
     592:	f9 1f       	adc	r31, r25
     594:	60 81       	ld	r22, Z
     596:	7f bf       	out	0x3f, r23	; 63
     598:	80 e1       	ldi	r24, 0x10	; 16
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 4d 10 	call	0x209a	; 0x209a <CDC_Device_SendByte>
     5a0:	88 23       	and	r24, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	69 f2       	breq	.-102    	; 0x53e <main+0xf0>
     5a4:	93 cf       	rjmp	.-218    	; 0x4cc <main+0x7e>
     5a6:	81 50       	subi	r24, 0x01	; 1
     5a8:	80 93 e8 01 	sts	0x01E8, r24
     5ac:	80 91 ca 01 	lds	r24, 0x01CA
     5b0:	80 63       	ori	r24, 0x30	; 48

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	80 93 ca 01 	sts	0x01CA, r24
     5b6:	09 c0       	rjmp	.+18     	; 0x5ca <main+0x17c>
     5b8:	80 91 ca 01 	lds	r24, 0x01CA
     5bc:	80 63       	ori	r24, 0x30	; 48
     5be:	80 93 ca 01 	sts	0x01CA, r24
     5c2:	8e e3       	ldi	r24, 0x3E	; 62
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	d3 de       	rcall	.-602    	; 0x36e <LRingBuffer_Remove.constprop.2>
     5c8:	a1 d2       	rcall	.+1346   	; 0xb0c <checkNHPProtocol>
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	fc 12       	cpse	r15, r28
     5ce:	99 cf       	rjmp	.-206    	; 0x502 <main+0xb4>
     5d0:	7d cf       	rjmp	.-262    	; 0x4cc <main+0x7e>
     5d2:	a8 9a       	sbi	0x15, 0	; 21
     5d4:	90 91 ca 01 	lds	r25, 0x01CA
     5d8:	89 2f       	mov	r24, r25
     5da:	80 73       	andi	r24, 0x30	; 48
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x192>
     5de:	59 c0       	rjmp	.+178    	; 0x692 <main+0x244>
     5e0:	89 2f       	mov	r24, r25
     5e2:	82 95       	swap	r24
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	8d 5f       	subi	r24, 0xFD	; 253
     5e8:	83 70       	andi	r24, 0x03	; 3
     5ea:	28 2f       	mov	r18, r24
     5ec:	22 95       	swap	r18
     5ee:	20 7f       	andi	r18, 0xF0	; 240
     5f0:	9f 7c       	andi	r25, 0xCF	; 207

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	92 2b       	or	r25, r18
     5f4:	90 93 ca 01 	sts	0x01CA, r25
     5f8:	81 11       	cpse	r24, r1
					  return HID_PARSE_InsufficientReportItems;
     5fa:	4b c0       	rjmp	.+150    	; 0x692 <main+0x244>
     5fc:	e0 91 dd 01 	lds	r30, 0x01DD

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     600:	e6 ff       	sbrs	r30, 6
     602:	15 c0       	rjmp	.+42     	; 0x62e <main+0x1e0>
     604:	e6 95       	lsr	r30
     606:	e6 95       	lsr	r30
     608:	e6 95       	lsr	r30
     60a:	e7 70       	andi	r30, 0x07	; 7
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ee 51       	subi	r30, 0x1E	; 30
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	60 81       	ld	r22, Z
     614:	8e e3       	ldi	r24, 0x3E	; 62
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	cd de       	rcall	.-614    	; 0x3b4 <LRingBuffer_Append.constprop.4>
     61a:	80 91 dd 01 	lds	r24, 0x01DD
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	86 fb       	bst	r24, 6
     620:	88 27       	eor	r24, r24
     622:	80 f9       	bld	r24, 0
     624:	90 91 e8 01 	lds	r25, 0x01E8
     628:	89 0f       	add	r24, r25
     62a:	80 93 e8 01 	sts	0x01E8, r24
     62e:	80 91 dd 01 	lds	r24, 0x01DD
     632:	87 fd       	sbrc	r24, 7
     634:	2a c0       	rjmp	.+84     	; 0x68a <main+0x23c>
     636:	86 95       	lsr	r24
     638:	86 95       	lsr	r24
     63a:	86 95       	lsr	r24
     63c:	87 70       	andi	r24, 0x07	; 7
     63e:	c0 e0       	ldi	r28, 0x00	; 0
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	e8 2e       	mov	r14, r24
     644:	f1 2c       	mov	r15, r1
     646:	8e e3       	ldi	r24, 0x3E	; 62
     648:	c8 2e       	mov	r12, r24
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	d8 2e       	mov	r13, r24
     64e:	ce 0c       	add	r12, r14
     650:	df 1c       	adc	r13, r15
     652:	09 c0       	rjmp	.+18     	; 0x666 <main+0x218>
     654:	f6 01       	movw	r30, r12
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	ec 55       	subi	r30, 0x5C	; 92
     65c:	ff 4f       	sbci	r31, 0xFF	; 255
     65e:	60 81       	ld	r22, Z
     660:	8e e3       	ldi	r24, 0x3E	; 62
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	a7 de       	rcall	.-690    	; 0x3b4 <LRingBuffer_Append.constprop.4>
     666:	21 97       	sbiw	r28, 0x01	; 1
     668:	ce 01       	movw	r24, r28
     66a:	80 95       	com	r24
     66c:	90 95       	com	r25
     66e:	8e 15       	cp	r24, r14
     670:	9f 05       	cpc	r25, r15
     672:	84 f3       	brlt	.-32     	; 0x654 <main+0x206>
     674:	80 91 dd 01 	lds	r24, 0x01DD
     678:	86 95       	lsr	r24
     67a:	86 95       	lsr	r24
     67c:	86 95       	lsr	r24
					  ParserData->TotalReportItems++;
     67e:	87 70       	andi	r24, 0x07	; 7
     680:	90 91 e8 01 	lds	r25, 0x01E8
     684:	89 0f       	add	r24, r25
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	80 93 e8 01 	sts	0x01E8, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	8d ed       	ldi	r24, 0xDD	; 221
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	91 e0       	ldi	r25, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	70 d6       	rcall	.+3296   	; 0x1370 <NHPreset>
     690:	0a d2       	rcall	.+1044   	; 0xaa6 <checkNHPControlAddressError>
     692:	90 91 ca 01 	lds	r25, 0x01CA
     696:	89 2f       	mov	r24, r25
     698:	83 70       	andi	r24, 0x03	; 3
     69a:	49 f0       	breq	.+18     	; 0x6ae <main+0x260>
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	83 70       	andi	r24, 0x03	; 3
     6a0:	9c 7f       	andi	r25, 0xFC	; 252
     6a2:	98 2b       	or	r25, r24
     6a4:	90 93 ca 01 	sts	0x01CA, r25
     6a8:	81 11       	cpse	r24, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <main+0x260>
     6ac:	5d 9a       	sbi	0x0b, 5	; 11
     6ae:	90 91 ca 01 	lds	r25, 0x01CA
     6b2:	89 2f       	mov	r24, r25
     6b4:	8c 70       	andi	r24, 0x0C	; 12
     6b6:	79 f0       	breq	.+30     	; 0x6d6 <main+0x288>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	89 2f       	mov	r24, r25
     6ba:	86 95       	lsr	r24

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	86 95       	lsr	r24
     6be:	8d 5f       	subi	r24, 0xFD	; 253
     6c0:	83 70       	andi	r24, 0x03	; 3
     6c2:	28 2f       	mov	r18, r24
     6c4:	22 0f       	add	r18, r18
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	22 0f       	add	r18, r18
     6c8:	93 7f       	andi	r25, 0xF3	; 243
     6ca:	92 2b       	or	r25, r18
     6cc:	90 93 ca 01 	sts	0x01CA, r25
     6d0:	81 11       	cpse	r24, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <main+0x288>
     6d4:	5c 9a       	sbi	0x0b, 4	; 11
     6d6:	80 e0       	ldi	r24, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <HID_Device_USBTask>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 9f 10 	call	0x213e	; 0x213e <CDC_Device_USBTask>
     6e6:	0e 94 0c 10 	call	0x2018	; 0x2018 <USB_USBTask>
     6ea:	be ce       	rjmp	.-644    	; 0x468 <main+0x1a>

000006ec <EVENT_USB_Device_Connect>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	08 95       	ret

000006ee <EVENT_USB_Device_Disconnect>:
     6ee:	08 95       	ret

000006f0 <EVENT_USB_Device_ConfigurationChanged>:
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	91 e0       	ldi	r25, 0x01	; 1
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	0e 94 cb 12 	call	0x2596	; 0x2596 <HID_Device_ConfigureEndpoints>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	80 e1       	ldi	r24, 0x10	; 16
     6fa:	91 e0       	ldi	r25, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	0e 94 28 10 	call	0x2050	; 0x2050 <CDC_Device_ConfigureEndpoints>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	e2 ee       	ldi	r30, 0xE2	; 226
     702:	f0 e0       	ldi	r31, 0x00	; 0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	80 81       	ld	r24, Z
     706:	84 60       	ori	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	80 83       	st	Z, r24
     70a:	08 95       	ret

0000070c <__vector_23>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	5f 93       	push	r21
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
     72a:	40 91 ce 00 	lds	r20, 0x00CE
     72e:	80 91 ed 01 	lds	r24, 0x01ED
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	e9 f4       	brne	.+58     	; 0x770 <__vector_23+0x64>
     736:	ee e3       	ldi	r30, 0x3E	; 62
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	2f b7       	in	r18, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	a1 f0       	breq	.+40     	; 0x76e <__vector_23+0x62>
     746:	54 81       	ldd	r21, Z+4	; 0x04
     748:	33 81       	ldd	r19, Z+3	; 0x03
     74a:	53 13       	cpse	r21, r19
     74c:	01 c0       	rjmp	.+2      	; 0x750 <__vector_23+0x44>
     74e:	0f c0       	rjmp	.+30     	; 0x76e <__vector_23+0x62>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data to the current index and return to its beginning if it reaches the bound
		Buffer->Base[Buffer->Index++] = Data;
     750:	32 81       	ldd	r19, Z+2	; 0x02
     752:	dc 01       	movw	r26, r24
     754:	a3 0f       	add	r26, r19
     756:	b1 1d       	adc	r27, r1
     758:	4c 93       	st	X, r20
     75a:	83 2f       	mov	r24, r19
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	82 83       	std	Z+2, r24	; 0x02
		if (Buffer->Index == Buffer->Size)
     760:	93 81       	ldd	r25, Z+3	; 0x03
     762:	89 13       	cpse	r24, r25
     764:	01 c0       	rjmp	.+2      	; 0x768 <__vector_23+0x5c>
			Buffer->Index = 0;
     766:	12 82       	std	Z+2, r1	; 0x02

		Buffer->Count++;
     768:	84 81       	ldd	r24, Z+4	; 0x04
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     76e:	2f bf       	out	0x3f, r18	; 63
	uint8_t ReceivedByte = UDR1;

	// save new byte to the buffer (automatically discards if its disabled or full)
	if (USB_DeviceState == DEVICE_STATE_Configured)
		LRingBuffer_Insert(&ram.RingBuffer, ReceivedByte);
}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	5f 91       	pop	r21
     77e:	4f 91       	pop	r20
     780:	3f 91       	pop	r19
     782:	2f 91       	pop	r18
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     78e:	80 e1       	ldi	r24, 0x10	; 16
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface); //<--new
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0c 94 94 11 	jmp	0x2328	; 0x2328 <HID_Device_ProcessControlRequest>

0000079e <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     79e:	80 91 0e 01 	lds	r24, 0x010E
     7a2:	90 91 0f 01 	lds	r25, 0x010F
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	90 93 0f 01 	sts	0x010F, r25
     7b0:	80 93 0e 01 	sts	0x010E, r24
     7b4:	08 95       	ret

000007b6 <CALLBACK_USB_GetDescriptor>:
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7b6:	29 2f       	mov	r18, r25
     7b8:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
     7ba:	23 30       	cpi	r18, 0x03	; 3
     7bc:	31 05       	cpc	r19, r1
     7be:	b1 f0       	breq	.+44     	; 0x7ec <CALLBACK_USB_GetDescriptor+0x36>
     7c0:	4c f4       	brge	.+18     	; 0x7d4 <CALLBACK_USB_GetDescriptor+0x1e>
     7c2:	21 30       	cpi	r18, 0x01	; 1
     7c4:	31 05       	cpc	r19, r1
     7c6:	09 f4       	brne	.+2      	; 0x7ca <CALLBACK_USB_GetDescriptor+0x14>
     7c8:	39 c0       	rjmp	.+114    	; 0x83c <CALLBACK_USB_GetDescriptor+0x86>
     7ca:	22 30       	cpi	r18, 0x02	; 2
     7cc:	31 05       	cpc	r19, r1
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <CALLBACK_USB_GetDescriptor+0x1c>
     7d0:	3a c0       	rjmp	.+116    	; 0x846 <CALLBACK_USB_GetDescriptor+0x90>
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <CALLBACK_USB_GetDescriptor+0x2c>
     7d4:	21 32       	cpi	r18, 0x21	; 33
     7d6:	31 05       	cpc	r19, r1
     7d8:	39 f1       	breq	.+78     	; 0x828 <CALLBACK_USB_GetDescriptor+0x72>
     7da:	22 32       	cpi	r18, 0x22	; 34
     7dc:	31 05       	cpc	r19, r1
     7de:	49 f1       	breq	.+82     	; 0x832 <CALLBACK_USB_GetDescriptor+0x7c>
     7e0:	32 c0       	rjmp	.+100    	; 0x846 <CALLBACK_USB_GetDescriptor+0x90>
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
     7e2:	ef e5       	ldi	r30, 0x5F	; 95
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
		break;
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
     7e6:	8e eb       	ldi	r24, 0xBE	; 190
     7e8:	90 e0       	ldi	r25, 0x00	; 0
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
     7ea:	31 c0       	rjmp	.+98     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
		break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     7ec:	99 27       	eor	r25, r25
	case DTYPE_Configuration:
		Address = &ConfigurationDescriptor;
		Size = sizeof(USB_Descriptor_Configuration_t);
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	91 05       	cpc	r25, r1
     7f2:	61 f0       	breq	.+24     	; 0x80c <CALLBACK_USB_GetDescriptor+0x56>
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	91 05       	cpc	r25, r1
     7f8:	81 f0       	breq	.+32     	; 0x81a <CALLBACK_USB_GetDescriptor+0x64>
     7fa:	89 2b       	or	r24, r25
     7fc:	21 f5       	brne	.+72     	; 0x846 <CALLBACK_USB_GetDescriptor+0x90>
		{
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
     7fe:	ea eb       	ldi	r30, 0xBA	; 186
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	e4 91       	lpm	r30, Z+
     804:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	case DTYPE_String:
		switch (DescriptorNumber)
		{
		case STRING_ID_Language:
			Address = &LanguageString;
     806:	8a eb       	ldi	r24, 0xBA	; 186
     808:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
     80a:	21 c0       	rjmp	.+66     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
     80c:	e6 ea       	ldi	r30, 0xA6	; 166
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	e4 91       	lpm	r30, Z+
     812:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Language:
			Address = &LanguageString;
			Size = pgm_read_byte(&LanguageString.Header.Size);
			break;
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
     814:	86 ea       	ldi	r24, 0xA6	; 166
     816:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
     818:	1a c0       	rjmp	.+52     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
		case STRING_ID_Product:
			Address = &ProductString;
			Size = pgm_read_byte(&ProductString.Header.Size);
     81a:	e4 e7       	ldi	r30, 0x74	; 116
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e4 91       	lpm	r30, Z+
     820:	f0 e0       	ldi	r31, 0x00	; 0
		case STRING_ID_Manufacturer:
			Address = &ManufacturerString;
			Size = pgm_read_byte(&ManufacturerString.Header.Size);
			break;
		case STRING_ID_Product:
			Address = &ProductString;
     822:	84 e7       	ldi	r24, 0x74	; 116
     824:	90 e0       	ldi	r25, 0x00	; 0
			Size = pgm_read_byte(&ProductString.Header.Size);
			break;
     826:	13 c0       	rjmp	.+38     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
     828:	e9 e0       	ldi	r30, 0x09	; 9
     82a:	f0 e0       	ldi	r31, 0x00	; 0

		break;

		//new <--
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
     82c:	8d e0       	ldi	r24, 0x0D	; 13
     82e:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
     830:	0e c0       	rjmp	.+28     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
	case HID_DTYPE_Report:
		Address = &HIDReport;
		Size = sizeof(HIDReport);
     832:	e4 e0       	ldi	r30, 0x04	; 4
     834:	f2 e0       	ldi	r31, 0x02	; 2
	case HID_DTYPE_HID:
		Address = &ConfigurationDescriptor.HID_HIDData;
		Size = sizeof(USB_HID_Descriptor_HID_t);
		break;
	case HID_DTYPE_Report:
		Address = &HIDReport;
     836:	8f e2       	ldi	r24, 0x2F	; 47
     838:	91 e0       	ldi	r25, 0x01	; 1
		Size = sizeof(HIDReport);
		break;
     83a:	09 c0       	rjmp	.+18     	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
		Size = sizeof(USB_Descriptor_Device_t);
     83c:	e2 e1       	ldi	r30, 0x12	; 18
     83e:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
	case DTYPE_Device:
		Address = &DeviceDescriptor;
     840:	8d e1       	ldi	r24, 0x1D	; 29
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	04 c0       	rjmp	.+8      	; 0x84e <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size = NO_DESCRIPTOR;
     846:	e0 e0       	ldi	r30, 0x00	; 0
     848:	f0 e0       	ldi	r31, 0x00	; 0
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
		Address = &HIDReport;
		Size = sizeof(HIDReport);
		break;
	}

	*DescriptorAddress = Address;
     84e:	da 01       	movw	r26, r20
     850:	8d 93       	st	X+, r24
     852:	9c 93       	st	X, r25
	return Size;
}
     854:	cf 01       	movw	r24, r30
     856:	08 95       	ret

00000858 <LRingBuffer_Append_Buffer.constprop.0>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     868:	64 0f       	add	r22, r20
     86a:	75 1f       	adc	r23, r21
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     86c:	ce e3       	ldi	r28, 0x3E	; 62
     86e:	d1 e0       	ldi	r29, 0x01	; 1
     870:	2c c0       	rjmp	.+88     	; 0x8ca <LRingBuffer_Append_Buffer.constprop.0+0x72>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
     872:	fb 01       	movw	r30, r22
     874:	e2 1b       	sub	r30, r18
     876:	f3 0b       	sbc	r31, r19
     878:	31 97       	sbiw	r30, 0x01	; 1
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
     87a:	00 81       	ld	r16, Z
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     87c:	fe 01       	movw	r30, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     87e:	1f b7       	in	r17, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     880:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
     882:	a0 81       	ld	r26, Z
     884:	b1 81       	ldd	r27, Z+1	; 0x01
     886:	10 97       	sbiw	r26, 0x00	; 0
     888:	09 f4       	brne	.+2      	; 0x88c <LRingBuffer_Append_Buffer.constprop.0+0x34>
     88a:	1c c0       	rjmp	.+56     	; 0x8c4 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	f4 80       	ldd	r15, Z+4	; 0x04
     892:	8f 19       	sub	r24, r15
     894:	91 09       	sbc	r25, r1
     896:	01 97       	sbiw	r24, 0x01	; 1
		if (pos < 0)
     898:	97 ff       	sbrs	r25, 7
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <LRingBuffer_Append_Buffer.constprop.0+0x4a>
			pos = Buffer->Size + pos;
     89c:	f3 80       	ldd	r15, Z+3	; 0x03
     89e:	8f 0d       	add	r24, r15
     8a0:	91 1d       	adc	r25, r1
		Buffer->Base[pos] = Data;
     8a2:	a8 0f       	add	r26, r24
     8a4:	b9 1f       	adc	r27, r25
     8a6:	0c 93       	st	X, r16

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
     8a8:	84 81       	ldd	r24, Z+4	; 0x04
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	89 13       	cpse	r24, r25
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <LRingBuffer_Append_Buffer.constprop.0+0x68>
			if (Buffer->Index == 0)
     8b0:	92 81       	ldd	r25, Z+2	; 0x02
     8b2:	91 11       	cpse	r25, r1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <LRingBuffer_Append_Buffer.constprop.0+0x60>
				Buffer->Index = Buffer->Size;
     8b6:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Index--;
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	81 50       	subi	r24, 0x01	; 1
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <LRingBuffer_Append_Buffer.constprop.0+0x6c>
		}
		// increase Counter if its not full. This will overwrite newer bytes if its already full!
		else Buffer->Count++;
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	84 83       	std	Z+4, r24	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     8c4:	1f bf       	out	0x3f, r17	; 63
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	24 17       	cp	r18, r20
     8cc:	35 07       	cpc	r19, r21
     8ce:	8c f2       	brlt	.-94     	; 0x872 <LRingBuffer_Append_Buffer.constprop.0+0x1a>
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
	}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	08 95       	ret

000008dc <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	const uint8_t ReportID,
	const uint8_t ReportType,
	const void* ReportData,
	const uint16_t ReportSize)
{
     8dc:	08 95       	ret

000008de <flushHID>:
	}
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.writeHID){
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <flushHID+0xa>
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <HID_Device_USBTask>
	}
}

void flushHID(void){
	// try to send until its done
	while (ram.HID.writeHID){
     8e8:	80 91 dc 01 	lds	r24, 0x01DC
     8ec:	87 fd       	sbrc	r24, 7
     8ee:	f8 cf       	rjmp	.-16     	; 0x8e0 <flushHID+0x2>
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
	}
}
     8f0:	08 95       	ret

000008f2 <getHIDReportLength>:

	// save new empty flag
	ram.HID.writtenReport &= ~(1 << (ID - 1));
}

uint8_t getHIDReportLength(uint8_t ID){
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	81 31       	cpi	r24, 0x11	; 17
     8f6:	30 f4       	brcc	.+12     	; 0x904 <getHIDReportLength+0x12>
     8f8:	e8 2f       	mov	r30, r24
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	e5 5d       	subi	r30, 0xD5	; 213
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	80 81       	ld	r24, Z
     902:	08 95       	ret
     904:	80 e0       	ldi	r24, 0x00	; 0
		return sizeof(HID_JoystickReport_Data_t);
		break;
	}
	// error, ID not presented
	return 0;
}
     906:	08 95       	ret

00000908 <clearHIDReport>:
	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
}

void clearHIDReport(uint8_t ID){
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	1f 92       	push	r1
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	18 2f       	mov	r17, r24
	// return if already cleared
	if (!(ram.HID.writtenReport & (1 << (ID - 1)))) return;
     91a:	e8 2e       	mov	r14, r24
     91c:	f1 2c       	mov	r15, r1
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	e2 1a       	sub	r14, r18
     922:	f1 08       	sbc	r15, r1
     924:	20 91 db 01 	lds	r18, 0x01DB
     928:	80 91 dc 01 	lds	r24, 0x01DC
     92c:	38 2f       	mov	r19, r24
     92e:	3f 77       	andi	r19, 0x7F	; 127
     930:	0e 2c       	mov	r0, r14
     932:	02 c0       	rjmp	.+4      	; 0x938 <clearHIDReport+0x30>
     934:	35 95       	asr	r19
     936:	27 95       	ror	r18
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <clearHIDReport+0x2c>
     93c:	20 ff       	sbrs	r18, 0
     93e:	36 c0       	rjmp	.+108    	; 0x9ac <clearHIDReport+0xa4>

	// get length and check if report ID is valid
	uint8_t length = getHIDReportLength(ID);
     940:	81 2f       	mov	r24, r17
     942:	d7 df       	rcall	.-82     	; 0x8f2 <getHIDReportLength>
     944:	88 23       	and	r24, r24
	if (!length) return;
     946:	91 f1       	breq	.+100    	; 0x9ac <clearHIDReport+0xa4>
     948:	89 83       	std	Y+1, r24	; 0x01

	// flush any pending report first
	flushHID();
     94a:	c9 df       	rcall	.-110    	; 0x8de <flushHID>
     94c:	1f 70       	andi	r17, 0x0F	; 15
     94e:	90 91 cb 01 	lds	r25, 0x01CB

	// save new values and prepare for sending
	ram.HID.ID = ID;
     952:	90 7f       	andi	r25, 0xF0	; 240
     954:	91 2b       	or	r25, r17
     956:	90 93 cb 01 	sts	0x01CB, r25
     95a:	2c ec       	ldi	r18, 0xCC	; 204
     95c:	31 e0       	ldi	r19, 0x01	; 1
	memset(&ram.HID.buffer, 0x00, length);
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	48 2f       	mov	r20, r24
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	c9 01       	movw	r24, r18
     96a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <memset>
     96e:	80 91 dc 01 	lds	r24, 0x01DC
	ram.HID.writeHID = true;
     972:	80 68       	ori	r24, 0x80	; 128
     974:	80 93 dc 01 	sts	0x01DC, r24
     978:	b2 df       	rcall	.-156    	; 0x8de <flushHID>
     97a:	81 e0       	ldi	r24, 0x01	; 1

	// flush HID, needed to clear flag below
	flushHID();
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <clearHIDReport+0x7c>

	// save new empty flag
	ram.HID.writtenReport &= ~(1 << (ID - 1));
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	ea 94       	dec	r14
     986:	e2 f7       	brpl	.-8      	; 0x980 <clearHIDReport+0x78>
     988:	80 95       	com	r24
     98a:	90 95       	com	r25
     98c:	20 91 db 01 	lds	r18, 0x01DB
     990:	40 91 dc 01 	lds	r20, 0x01DC
     994:	34 2f       	mov	r19, r20
     996:	3f 77       	andi	r19, 0x7F	; 127
     998:	82 23       	and	r24, r18
     99a:	93 23       	and	r25, r19
     99c:	80 93 db 01 	sts	0x01DB, r24
     9a0:	9f 77       	andi	r25, 0x7F	; 127
     9a2:	84 2f       	mov	r24, r20
     9a4:	80 78       	andi	r24, 0x80	; 128
     9a6:	89 2b       	or	r24, r25
     9a8:	80 93 dc 01 	sts	0x01DC, r24
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
}
     9b2:	1f 91       	pop	r17
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	08 95       	ret

000009ba <clearHIDReports>:
		// TODO timeout? <--
		HID_Device_USBTask(&Device_HID_Interface);
	}
}

void clearHIDReports(void){
     9ba:	cf 93       	push	r28
	// dont do anything if no report is written
	if (!ram.HID.writtenReport) return;
     9bc:	80 91 db 01 	lds	r24, 0x01DB
     9c0:	20 91 dc 01 	lds	r18, 0x01DC
     9c4:	92 2f       	mov	r25, r18
     9c6:	9f 77       	andi	r25, 0x7F	; 127
     9c8:	89 2b       	or	r24, r25
     9ca:	31 f0       	breq	.+12     	; 0x9d8 <clearHIDReports+0x1e>
     9cc:	c1 e0       	ldi	r28, 0x01	; 1

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
		clearHIDReport(i);
     9ce:	8c 2f       	mov	r24, r28
     9d0:	9b df       	rcall	.-202    	; 0x908 <clearHIDReport>
     9d2:	cf 5f       	subi	r28, 0xFF	; 255
     9d4:	c2 31       	cpi	r28, 0x12	; 18
void clearHIDReports(void){
	// dont do anything if no report is written
	if (!ram.HID.writtenReport) return;

	// check if every report is empty or not
	for (int i = 1; i < HID_REPORTID_LastNotAReport; i++)
     9d6:	d9 f7       	brne	.-10     	; 0x9ce <clearHIDReports+0x14>
     9d8:	cf 91       	pop	r28
		clearHIDReport(i);
}
     9da:	08 95       	ret

000009dc <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
	uint8_t* const ReportID,
	const uint8_t ReportType,
	void* ReportData,
	uint16_t* const ReportSize)
{
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <CALLBACK_HID_Device_CreateHIDReport+0x12>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	7b 01       	movw	r14, r22
     9f4:	93 2f       	mov	r25, r19
     9f6:	68 01       	movw	r12, r16
	// only send report if there is actually a new report
	if (ram.HID.writeHID){
     9f8:	70 91 dc 01 	lds	r23, 0x01DC
     9fc:	67 2f       	mov	r22, r23
     9fe:	60 78       	andi	r22, 0x80	; 128
     a00:	09 f4       	brne	.+2      	; 0xa04 <CALLBACK_HID_Device_CreateHIDReport+0x28>
     a02:	40 c0       	rjmp	.+128    	; 0xa84 <CALLBACK_HID_Device_CreateHIDReport+0xa8>
		// set a specific flag that a report was written, ignore rawHID
		if (ram.HID.ID != HID_REPORTID_RawKeyboardReport)
     a04:	e0 91 cb 01 	lds	r30, 0x01CB
     a08:	ef 70       	andi	r30, 0x0F	; 15
     a0a:	e3 30       	cpi	r30, 0x03	; 3
     a0c:	b1 f0       	breq	.+44     	; 0xa3a <CALLBACK_HID_Device_CreateHIDReport+0x5e>
			ram.HID.writtenReport |= (1 << (ram.HID.ID - 1));
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <CALLBACK_HID_Device_CreateHIDReport+0x40>
     a18:	44 0f       	add	r20, r20
     a1a:	55 1f       	adc	r21, r21
     a1c:	ea 95       	dec	r30
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     a20:	e0 91 db 01 	lds	r30, 0x01DB
     a24:	f7 2f       	mov	r31, r23
     a26:	ff 77       	andi	r31, 0x7F	; 127
     a28:	4e 2b       	or	r20, r30
     a2a:	5f 2b       	or	r21, r31
     a2c:	40 93 db 01 	sts	0x01DB, r20
     a30:	45 2f       	mov	r20, r21
     a32:	4f 77       	andi	r20, 0x7F	; 127
     a34:	46 2b       	or	r20, r22
     a36:	40 93 dc 01 	sts	0x01DC, r20

		//write report
		uint8_t length = getHIDReportLength(ram.HID.ID);
     a3a:	80 91 cb 01 	lds	r24, 0x01CB
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	29 83       	std	Y+1, r18	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	56 df       	rcall	.-340    	; 0x8f2 <getHIDReportLength>
     a46:	18 2f       	mov	r17, r24
     a48:	ec ec       	ldi	r30, 0xCC	; 204
		memcpy(ReportData, ram.HID.buffer, length);
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	48 2f       	mov	r20, r24
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	bf 01       	movw	r22, r30
     a52:	29 81       	ldd	r18, Y+1	; 0x01
     a54:	82 2f       	mov	r24, r18
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <memcpy>
     a5c:	90 91 cb 01 	lds	r25, 0x01CB
		*ReportID = ram.HID.ID;
     a60:	9f 70       	andi	r25, 0x0F	; 15
     a62:	f7 01       	movw	r30, r14
     a64:	90 83       	st	Z, r25
     a66:	f6 01       	movw	r30, r12
		*ReportSize = length;
     a68:	10 83       	st	Z, r17
     a6a:	11 82       	std	Z+1, r1	; 0x01
     a6c:	80 91 dc 01 	lds	r24, 0x01DC

		// reset the flush flag and pending ID
		ram.HID.writeHID = false;
     a70:	8f 77       	andi	r24, 0x7F	; 127
     a72:	80 93 dc 01 	sts	0x01DC, r24
     a76:	80 91 cb 01 	lds	r24, 0x01CB
		ram.HID.ID = 0;
     a7a:	80 7f       	andi	r24, 0xF0	; 240
     a7c:	80 93 cb 01 	sts	0x01CB, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1

		// always return true, because we cannot compare with >1 report due to ram limit
		// this will forcewrite the report every time
		return true;
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <CALLBACK_HID_Device_CreateHIDReport+0xb4>
     a84:	f7 01       	movw	r30, r14
	}
	else{
		//TODO improve ? (!(AVR_NO_HID_PIN & AVR_NO_HID_MASK))
		*ReportID = 0;
     a86:	10 82       	st	Z, r1
     a88:	f8 01       	movw	r30, r16
		*ReportSize = 0;
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	10 82       	st	Z, r1
     a8e:	80 e0       	ldi	r24, 0x00	; 0
		return false;
     a90:	0f 90       	pop	r0
	}
}
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	08 95       	ret

00000aa6 <checkNHPControlAddressError>:
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}

void checkNHPControlAddressError(void){
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <checkNHPControlAddressError+0x8>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <checkNHPControlAddressError+0xa>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <checkNHPControlAddressError+0xc>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	// make sure there is no pending report, because we overwrite the buffer now
	flushHID();
     ab6:	13 df       	rcall	.-474    	; 0x8de <flushHID>
     ab8:	80 91 cb 01 	lds	r24, 0x01CB

	// only write if a control address was just before, maybe it was a random valid address
	// but if we already received some data we handle this as corrupted data and discard all bytes
	if (ram.HID.ID && !ram.HID.recvlength){
     abc:	68 2f       	mov	r22, r24
     abe:	6f 70       	andi	r22, 0x0F	; 15
     ac0:	b1 f0       	breq	.+44     	; 0xaee <checkNHPControlAddressError+0x48>
     ac2:	80 7f       	andi	r24, 0xF0	; 240
     ac4:	a1 f4       	brne	.+40     	; 0xaee <checkNHPControlAddressError+0x48>
     ac6:	70 e0       	ldi	r23, 0x00	; 0
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);
     ac8:	71 60       	ori	r23, 0x01	; 1
     aca:	ae 01       	movw	r20, r28
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	24 d5       	rcall	.+2632   	; 0x151c <NHPwriteChecksum>
     ad4:	18 2f       	mov	r17, r24
     ad6:	48 2f       	mov	r20, r24
     ad8:	be 01       	movw	r22, r28

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.RingBuffer, buff, length);
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	8e e3       	ldi	r24, 0x3E	; 62
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	ba de       	rcall	.-652    	; 0x858 <LRingBuffer_Append_Buffer.constprop.0>
     ae4:	90 91 e8 01 	lds	r25, 0x01E8
     ae8:	91 0f       	add	r25, r17
		ram.skipNHP += length;
     aea:	90 93 e8 01 	sts	0x01E8, r25
     aee:	80 91 cb 01 	lds	r24, 0x01CB
     af2:	80 7f       	andi	r24, 0xF0	; 240
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
     af4:	80 93 cb 01 	sts	0x01CB, r24
     af8:	26 96       	adiw	r28, 0x06	; 6
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
}
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	08 95       	ret

00000b0c <checkNHPProtocol>:
	// error, ID not presented
	return 0;
}

// Checks for a valid protocol input and writes HID report
void checkNHPProtocol(uint8_t input){
     b0c:	cf 93       	push	r28
	NHP_Enum_t address = NHPreadChecksum(input, &ram.NHP);
     b0e:	6d ed       	ldi	r22, 0xDD	; 221
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	e1 d4       	rcall	.+2498   	; 0x14d6 <NHPreadChecksum>
     b14:	88 23       	and	r24, r24

	if (address == 0)
     b16:	09 f4       	brne	.+2      	; 0xb1a <checkNHPProtocol+0xe>
     b18:	8a c0       	rjmp	.+276    	; 0xc2e <checkNHPProtocol+0x122>
     b1a:	87 fd       	sbrc	r24, 7
		// reading in progress, dont disturb
		return;
	else if (address < 0){
     b1c:	70 c0       	rjmp	.+224    	; 0xbfe <checkNHPProtocol+0xf2>
     b1e:	81 30       	cpi	r24, 0x01	; 1
		checkNHPControlAddressError();
		return;
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
     b20:	c1 f4       	brne	.+48     	; 0xb52 <checkNHPProtocol+0x46>
     b22:	90 91 df 01 	lds	r25, 0x01DF
     b26:	91 30       	cpi	r25, 0x01	; 1
     b28:	a1 f4       	brne	.+40     	; 0xb52 <checkNHPProtocol+0x46>
     b2a:	d9 de       	rcall	.-590    	; 0x8de <flushHID>
		// make sure there is no pending report, because we overwrite the buffer now
		flushHID();
     b2c:	c0 91 de 01 	lds	r28, 0x01DE

		// get the new report ID and reset the received length
		uint8_t ID = ram.NHP.mWorkData & 0xFF;
     b30:	80 91 cb 01 	lds	r24, 0x01CB
		ram.HID.recvlength = 0;
     b34:	8f 70       	andi	r24, 0x0F	; 15
     b36:	80 93 cb 01 	sts	0x01CB, r24
     b3a:	b5 df       	rcall	.-150    	; 0xaa6 <checkNHPControlAddressError>
     b3c:	cf 70       	andi	r28, 0x0F	; 15

		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
     b3e:	80 91 cb 01 	lds	r24, 0x01CB

		// save new ID
		ram.HID.ID = ID;
     b42:	80 7f       	andi	r24, 0xF0	; 240
     b44:	8c 2b       	or	r24, r28
     b46:	80 93 cb 01 	sts	0x01CB, r24
     b4a:	8f 70       	andi	r24, 0x0F	; 15
     b4c:	09 f0       	breq	.+2      	; 0xb50 <checkNHPProtocol+0x44>
     b4e:	6f c0       	rjmp	.+222    	; 0xc2e <checkNHPProtocol+0x122>
		if (!ram.HID.ID || ram.HID.ID >= HID_REPORTID_LastNotAReport)
     b50:	6c c0       	rjmp	.+216    	; 0xc2a <checkNHPProtocol+0x11e>
     b52:	20 91 cb 01 	lds	r18, 0x01CB
     b56:	92 2f       	mov	r25, r18
			// this needs to be appended after the normal protocol!
			checkNHPControlAddressError();
	}

	// we already got a pending report
	else if (ram.HID.ID && (address == (((ram.HID.recvlength + 2) / 2) + 1))){
     b58:	9f 70       	andi	r25, 0x0F	; 15
     b5a:	09 f4       	brne	.+2      	; 0xb5e <checkNHPProtocol+0x52>
     b5c:	50 c0       	rjmp	.+160    	; 0xbfe <checkNHPProtocol+0xf2>
     b5e:	99 27       	eor	r25, r25
     b60:	87 fd       	sbrc	r24, 7
     b62:	90 95       	com	r25
     b64:	22 95       	swap	r18
     b66:	2f 70       	andi	r18, 0x0F	; 15
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	2e 5f       	subi	r18, 0xFE	; 254
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	35 95       	asr	r19
     b70:	27 95       	ror	r18
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	82 17       	cp	r24, r18
     b78:	93 07       	cpc	r25, r19
     b7a:	09 f0       	breq	.+2      	; 0xb7e <checkNHPProtocol+0x72>
     b7c:	40 c0       	rjmp	.+128    	; 0xbfe <checkNHPProtocol+0xf2>
     b7e:	af de       	rcall	.-674    	; 0x8de <flushHID>
     b80:	c0 91 cb 01 	lds	r28, 0x01CB
		// make sure there is no pending report, because we overwrite the buffer now
		flushHID();
     b84:	8c 2f       	mov	r24, r28
     b86:	8f 70       	andi	r24, 0x0F	; 15

		// check if the new Address is in correct order of HID reports.
		// the first 2 bytes are sent with Address 2 and so on.
		uint8_t length = getHIDReportLength(ram.HID.ID);
     b88:	b4 de       	rcall	.-664    	; 0x8f2 <getHIDReportLength>
     b8a:	2c 2f       	mov	r18, r28
     b8c:	22 95       	swap	r18
     b8e:	2f 70       	andi	r18, 0x0F	; 15
     b90:	90 91 de 01 	lds	r25, 0x01DE

		// save the first byte
		ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData & 0xFF);
     b94:	30 91 df 01 	lds	r19, 0x01DF
     b98:	e2 2f       	mov	r30, r18
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e4 53       	subi	r30, 0x34	; 52
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	90 83       	st	Z, r25
     ba2:	e2 2f       	mov	r30, r18
     ba4:	ef 5f       	subi	r30, 0xFF	; 255
     ba6:	ef 70       	andi	r30, 0x0F	; 15
     ba8:	4e 2f       	mov	r20, r30
     baa:	42 95       	swap	r20
     bac:	40 7f       	andi	r20, 0xF0	; 240
     bae:	90 91 cb 01 	lds	r25, 0x01CB
     bb2:	9f 70       	andi	r25, 0x0F	; 15
     bb4:	94 2b       	or	r25, r20
     bb6:	90 93 cb 01 	sts	0x01CB, r25
     bba:	8e 17       	cp	r24, r30
     bbc:	69 f0       	breq	.+26     	; 0xbd8 <checkNHPProtocol+0xcc>
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e4 53       	subi	r30, 0x34	; 52
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254

		// if there is another byte we need (for odd max HID reports important
		// to not write over the buff array)
		if (length != ram.HID.recvlength)
     bc4:	30 83       	st	Z, r19
     bc6:	2e 5f       	subi	r18, 0xFE	; 254
			ram.HID.buffer[ram.HID.recvlength++] = (ram.NHP.mWorkData >> 8);
     bc8:	22 95       	swap	r18
     bca:	20 7f       	andi	r18, 0xF0	; 240
     bcc:	90 91 cb 01 	lds	r25, 0x01CB
     bd0:	9f 70       	andi	r25, 0x0F	; 15
     bd2:	92 2b       	or	r25, r18
     bd4:	90 93 cb 01 	sts	0x01CB, r25
     bd8:	20 91 cb 01 	lds	r18, 0x01CB
     bdc:	22 95       	swap	r18
     bde:	2f 70       	andi	r18, 0x0F	; 15
     be0:	30 e0       	ldi	r19, 0x00	; 0

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.recvlength == length){
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	28 17       	cp	r18, r24
     be6:	39 07       	cpc	r19, r25
     be8:	11 f5       	brne	.+68     	; 0xc2e <checkNHPProtocol+0x122>
     bea:	80 91 dc 01 	lds	r24, 0x01DC
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	80 93 dc 01 	sts	0x01DC, r24
			ram.HID.writeHID = true;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	cf 91       	pop	r28
     bfa:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <HID_Device_USBTask>
			HID_Device_USBTask(&Device_HID_Interface);
     bfe:	40 91 dd 01 	lds	r20, 0x01DD
		// check if previous reading was a valid Control Address and write it down
		// if not discard the bytes because we assume it is corrupted data
		// this needs to be appended after the normal protocol!
		checkNHPControlAddressError();
	}
}
     c02:	46 95       	lsr	r20

		// we are ready try to submit the new report to the usb host
		// dont block here, we flush the report on the next reading if needed
		if (ram.HID.recvlength == length){
			ram.HID.writeHID = true;
			HID_Device_USBTask(&Device_HID_Interface);
     c04:	46 95       	lsr	r20
     c06:	46 95       	lsr	r20
	}

	// we received a corrupt data packet
	else{
		// just a normal Protocol outside our control address (or corrupted packet), write it down
		LRingBuffer_Append_Buffer(&ram.RingBuffer, ram.NHP.readbuffer, ram.NHP.readlength);
     c08:	47 70       	andi	r20, 0x07	; 7
     c0a:	62 ee       	ldi	r22, 0xE2	; 226
     c0c:	71 e0       	ldi	r23, 0x01	; 1
     c0e:	8e e3       	ldi	r24, 0x3E	; 62
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	22 de       	rcall	.-956    	; 0x858 <LRingBuffer_Append_Buffer.constprop.0>
     c14:	80 91 dd 01 	lds	r24, 0x01DD
     c18:	86 95       	lsr	r24
     c1a:	86 95       	lsr	r24
     c1c:	86 95       	lsr	r24
     c1e:	87 70       	andi	r24, 0x07	; 7
		ram.skipNHP += ram.NHP.readlength;
     c20:	90 91 e8 01 	lds	r25, 0x01E8
     c24:	89 0f       	add	r24, r25
     c26:	80 93 e8 01 	sts	0x01E8, r24
     c2a:	cf 91       	pop	r28
     c2c:	3c cf       	rjmp	.-392    	; 0xaa6 <checkNHPControlAddressError>
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <sendCDCbyte>:
//================================================================================

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
     c32:	68 2f       	mov	r22, r24
     c34:	80 e1       	ldi	r24, 0x10	; 16
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 4d 10 	call	0x209a	; 0x209a <CDC_Device_SendByte>
     c3c:	88 23       	and	r24, r24
     c3e:	d9 f0       	breq	.+54     	; 0xc76 <sendCDCbyte+0x44>
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 9f 10 	call	0x213e	; 0x213e <CDC_Device_USBTask>
		USB_USBTask();
     c48:	0e 94 0c 10 	call	0x2018	; 0x2018 <USB_USBTask>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
     c4c:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	81 ee       	ldi	r24, 0xE1	; 225
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	90 40       	sbci	r25, 0x00	; 0
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <sendCDCbyte+0x22>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <sendCDCbyte+0x2c>
     c5e:	00 00       	nop
     c60:	5c 98       	cbi	0x0b, 4	; 11
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	81 ee       	ldi	r24, 0xE1	; 225
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <sendCDCbyte+0x36>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <sendCDCbyte+0x40>
     c72:	00 00       	nop
     c74:	eb cf       	rjmp	.-42     	; 0xc4c <sendCDCbyte+0x1a>
     c76:	08 95       	ret

00000c78 <getch>:

uint8_t getch() {
	int ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     c78:	80 e1       	ldi	r24, 0x10	; 16
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 b5 10 	call	0x216a	; 0x216a <CDC_Device_ReceiveByte>
}

uint8_t getch() {
	int ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
     c80:	97 fd       	sbrc	r25, 7
     c82:	fa cf       	rjmp	.-12     	; 0xc78 <getch>
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
     c84:	08 95       	ret

00000c86 <fill>:

void fill(int n) {
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	7c 01       	movw	r14, r24
     c94:	03 e4       	ldi	r16, 0x43	; 67
     c96:	11 e0       	ldi	r17, 0x01	; 1
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     c98:	c0 e0       	ldi	r28, 0x00	; 0
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <fill+0x22>
		ram.RingBuffer_Data[x] = getch();
     c9e:	ec df       	rcall	.-40     	; 0xc78 <getch>
     ca0:	f8 01       	movw	r30, r16
     ca2:	81 93       	st	Z+, r24
     ca4:	8f 01       	movw	r16, r30
     ca6:	21 96       	adiw	r28, 0x01	; 1
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
     ca8:	ce 15       	cp	r28, r14
     caa:	df 05       	cpc	r29, r15
     cac:	c4 f3       	brlt	.-16     	; 0xc9e <fill+0x18>
     cae:	df 91       	pop	r29
		ram.RingBuffer_Data[x] = getch();
}
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	08 95       	ret

00000cbc <end_pmode>:
	LEDs_SetAllLEDs(LEDS_NO_LEDS);

	return;
}

void end_pmode(void) {
     cbc:	23 98       	cbi	0x04, 3	; 4
	// SPI Input to save the pins
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
     cbe:	22 98       	cbi	0x04, 2	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
     cc0:	21 98       	cbi	0x04, 1	; 4
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
     cc2:	24 98       	cbi	0x04, 4	; 4

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT
     cc4:	20 98       	cbi	0x04, 0	; 4

	// reset isp values
	ram.isp.error = 0;
	ram.isp._addr = 0;
     cc6:	10 92 c5 01 	sts	0x01C5, r1
     cca:	10 92 c4 01 	sts	0x01C4, r1
	ram.isp.param.pagesize = 0;
     cce:	10 92 c7 01 	sts	0x01C7, r1
     cd2:	10 92 c6 01 	sts	0x01C6, r1
	ram.isp.param.eepromsize = 0;
     cd6:	10 92 c9 01 	sts	0x01C9, r1
     cda:	10 92 c8 01 	sts	0x01C8, r1
	ram.isp.pmode = false;
     cde:	10 92 c3 01 	sts	0x01C3, r1
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_InitBuffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     ce2:	ee e3       	ldi	r30, 0x3E	; 62
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ce6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ce8:	f8 94       	cli

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = DataPtr;
     cea:	83 e4       	ldi	r24, 0x43	; 67
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
		Buffer->Index = 0;
     cf2:	12 82       	std	Z+2, r1	; 0x02
		Buffer->Size = Size;
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	83 83       	std	Z+3, r24	; 0x03
		Buffer->Count = 0;
     cf8:	14 82       	std	Z+4, r1	; 0x04
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     cfa:	2f bf       	out	0x3f, r18	; 63

	// Serial tx buffers Setup
	LRingBuffer_InitBuffer(&ram.RingBuffer, ram.RingBuffer_Data, sizeof(ram.RingBuffer_Data));

	//NHP setup
	ram.skipNHP = 0;
     cfc:	10 92 e8 01 	sts	0x01E8, r1
	NHPreset(&ram.NHP);
     d00:	8d ed       	ldi	r24, 0xDD	; 221
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	35 c3       	rjmp	.+1642   	; 0x1370 <NHPreset>

00000d06 <breply>:

//================================================================================
// General Programmer functions
//================================================================================

void breply(uint8_t b) {
     d06:	cf 93       	push	r28
     d08:	c8 2f       	mov	r28, r24
	if (CRC_EOP == getch()) {
     d0a:	b6 df       	rcall	.-148    	; 0xc78 <getch>
     d0c:	80 32       	cpi	r24, 0x20	; 32
     d0e:	39 f4       	brne	.+14     	; 0xd1e <breply+0x18>
     d10:	84 e1       	ldi	r24, 0x14	; 20
		sendCDCbyte(STK_INSYNC);
     d12:	8f df       	rcall	.-226    	; 0xc32 <sendCDCbyte>
     d14:	8c 2f       	mov	r24, r28
     d16:	8d df       	rcall	.-230    	; 0xc32 <sendCDCbyte>
		sendCDCbyte(b);
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	cf 91       	pop	r28
     d1c:	8a cf       	rjmp	.-236    	; 0xc32 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     d1e:	85 e1       	ldi	r24, 0x15	; 21
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     d20:	88 df       	rcall	.-240    	; 0xc32 <sendCDCbyte>

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
     d22:	80 91 c3 01 	lds	r24, 0x01C3
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     d26:	98 2f       	mov	r25, r24
     d28:	9f 5f       	subi	r25, 0xFF	; 255
     d2a:	9f 77       	andi	r25, 0x7F	; 127
		ram.isp.error++;
     d2c:	80 78       	andi	r24, 0x80	; 128
     d2e:	89 2b       	or	r24, r25
     d30:	80 93 c3 01 	sts	0x01C3, r24
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <replyOK>:
	}
}

void replyOK(void) {
     d38:	9f df       	rcall	.-194    	; 0xc78 <getch>
     d3a:	80 32       	cpi	r24, 0x20	; 32
     d3c:	21 f4       	brne	.+8      	; 0xd46 <replyOK+0xe>
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}
     d3e:	84 e1       	ldi	r24, 0x14	; 20

void replyOK(void) {
	if (CRC_EOP == getch()) {
		sendCDCbyte(STK_INSYNC);
     d40:	78 df       	rcall	.-272    	; 0xc32 <sendCDCbyte>
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	76 cf       	rjmp	.-276    	; 0xc32 <sendCDCbyte>
		sendCDCbyte(STK_OK);
     d46:	85 e1       	ldi	r24, 0x15	; 21
     d48:	74 df       	rcall	.-280    	; 0xc32 <sendCDCbyte>
     d4a:	80 91 c3 01 	lds	r24, 0x01C3
	}
	else {
		sendCDCbyte(STK_NOSYNC);
     d4e:	98 2f       	mov	r25, r24
     d50:	9f 5f       	subi	r25, 0xFF	; 255
		ram.isp.error++;
     d52:	9f 77       	andi	r25, 0x7F	; 127
     d54:	80 78       	andi	r24, 0x80	; 128
     d56:	89 2b       	or	r24, r25
     d58:	80 93 c3 01 	sts	0x01C3, r24
     d5c:	08 95       	ret

00000d5e <get_parameters>:
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
}

void get_parameters(uint8_t c) {
     d5e:	81 38       	cpi	r24, 0x81	; 129
     d60:	59 f0       	breq	.+22     	; 0xd78 <get_parameters+0x1a>
     d62:	18 f4       	brcc	.+6      	; 0xd6a <get_parameters+0xc>
     d64:	80 38       	cpi	r24, 0x80	; 128
     d66:	71 f4       	brne	.+28     	; 0xd84 <get_parameters+0x26>
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <get_parameters+0x16>
     d6a:	82 38       	cpi	r24, 0x82	; 130
     d6c:	39 f0       	breq	.+14     	; 0xd7c <get_parameters+0x1e>
     d6e:	83 39       	cpi	r24, 0x93	; 147
     d70:	49 f4       	brne	.+18     	; 0xd84 <get_parameters+0x26>
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <get_parameters+0x22>
	switch (c) {
	case 0x80:
		breply(HWVER);
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <get_parameters+0x28>
		break;
	case 0x81:
		breply(SWMAJ);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <get_parameters+0x28>
		break;
	case 0x82:
		breply(SWMIN);
     d7c:	82 e1       	ldi	r24, 0x12	; 18
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <get_parameters+0x28>
		break;
	case 0x93:
		breply('S'); // serial programmer
     d80:	83 e5       	ldi	r24, 0x53	; 83
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <get_parameters+0x28>
		break;
	default:
		breply(0);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	bf cf       	rjmp	.-130    	; 0xd06 <breply>

00000d88 <set_parameters>:
	}
}

void set_parameters(void) {
     d88:	84 e1       	ldi	r24, 0x14	; 20
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	7c df       	rcall	.-264    	; 0xc86 <fill>
     d8e:	90 91 4f 01 	lds	r25, 0x014F
	//param.flashpoll = buff[8];
	// ignore buff[9] (= buff[8])
	// following are 16 bits (big endian)
#define beget16(addr) (*addr * 256 + *(addr+1) )
	//param.eeprompoll = beget16(&buff[10]);
	ram.isp.param.pagesize = beget16(&ram.RingBuffer_Data[12]);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	20 91 50 01 	lds	r18, 0x0150
     d98:	82 0f       	add	r24, r18
     d9a:	91 1d       	adc	r25, r1
     d9c:	90 93 c7 01 	sts	0x01C7, r25
     da0:	80 93 c6 01 	sts	0x01C6, r24
     da4:	90 91 51 01 	lds	r25, 0x0151
	ram.isp.param.eepromsize = beget16(&ram.RingBuffer_Data[14]);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	20 91 52 01 	lds	r18, 0x0152
     dae:	82 0f       	add	r24, r18
     db0:	91 1d       	adc	r25, r1
     db2:	90 93 c9 01 	sts	0x01C9, r25
     db6:	80 93 c8 01 	sts	0x01C8, r24
     dba:	08 95       	ret

00000dbc <spi_init>:

//================================================================================
// SPI
//================================================================================

void spi_init(void) {
     dbc:	83 e5       	ldi	r24, 0x53	; 83
     dbe:	8c bd       	out	0x2c, r24	; 44
	SPCR = 0x53;
#ifdef ISP_LOW_SPEED
	SPCR = SPCR | B00000011;
#endif
	SPSR;
     dc0:	8d b5       	in	r24, 0x2d	; 45
	SPDR;
     dc2:	8e b5       	in	r24, 0x2e	; 46
     dc4:	08 95       	ret

00000dc6 <spi_wait>:
}

void spi_wait(void) {
	do {
	} while (!(SPSR & (1 << SPIF)));
     dc6:	0d b4       	in	r0, 0x2d	; 45
     dc8:	07 fe       	sbrs	r0, 7
     dca:	fd cf       	rjmp	.-6      	; 0xdc6 <spi_wait>
}
     dcc:	08 95       	ret

00000dce <spi_send>:
	cli();
	CLKPR = B10000000;
	CLKPR = B00000011;
	sei();
#endif
	SPDR = b;
     dce:	8e bd       	out	0x2e, r24	; 46
	spi_wait();
     dd0:	fa df       	rcall	.-12     	; 0xdc6 <spi_wait>
     dd2:	8e b5       	in	r24, 0x2e	; 46
	reply = SPDR;
     dd4:	08 95       	ret

00000dd6 <spi_transaction>:
	CLKPR = B10000000;
	CLKPR = B00000000;
	sei();
#endif
	return reply;
}
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <spi_transaction+0x6>
     ddc:	1f 92       	push	r1
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62

uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	// here was an unused error correction? <--
	spi_send(a);
     de2:	2b 83       	std	Y+3, r18	; 0x03
     de4:	4a 83       	std	Y+2, r20	; 0x02
     de6:	69 83       	std	Y+1, r22	; 0x01
     de8:	f2 df       	rcall	.-28     	; 0xdce <spi_send>
     dea:	69 81       	ldd	r22, Y+1	; 0x01
	spi_send(b);
     dec:	86 2f       	mov	r24, r22
     dee:	ef df       	rcall	.-34     	; 0xdce <spi_send>
     df0:	4a 81       	ldd	r20, Y+2	; 0x02
     df2:	84 2f       	mov	r24, r20
	spi_send(c);
     df4:	ec df       	rcall	.-40     	; 0xdce <spi_send>
     df6:	2b 81       	ldd	r18, Y+3	; 0x03
     df8:	82 2f       	mov	r24, r18
     dfa:	0f 90       	pop	r0
	return spi_send(d);
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	e4 cf       	rjmp	.-56     	; 0xdce <spi_send>

00000e06 <read_signature>:
	fill(4);
	ch = spi_transaction(ram.RingBuffer_Data[0], ram.RingBuffer_Data[1], ram.RingBuffer_Data[2], ram.RingBuffer_Data[3]);
	breply(ch);
}

void read_signature(void) {
     e06:	38 df       	rcall	.-400    	; 0xc78 <getch>
     e08:	80 32       	cpi	r24, 0x20	; 32
uint8_t spi_transaction(uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	// here was an unused error correction? <--
	spi_send(a);
	spi_send(b);
	spi_send(c);
	return spi_send(d);
     e0a:	59 f0       	breq	.+22     	; 0xe22 <read_signature+0x1c>
     e0c:	80 91 c3 01 	lds	r24, 0x01C3
	breply(ch);
}

void read_signature(void) {
	if (CRC_EOP != getch()) {
		ram.isp.error++;
     e10:	98 2f       	mov	r25, r24
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	9f 77       	andi	r25, 0x7F	; 127
     e16:	80 78       	andi	r24, 0x80	; 128
     e18:	89 2b       	or	r24, r25
     e1a:	80 93 c3 01 	sts	0x01C3, r24
     e1e:	85 e1       	ldi	r24, 0x15	; 21
		sendCDCbyte(STK_NOSYNC);
     e20:	15 c0       	rjmp	.+42     	; 0xe4c <read_signature+0x46>
     e22:	84 e1       	ldi	r24, 0x14	; 20
		return;
	}
	sendCDCbyte(STK_INSYNC);
     e24:	06 df       	rcall	.-500    	; 0xc32 <sendCDCbyte>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	80 e3       	ldi	r24, 0x30	; 48
     e2e:	d3 df       	rcall	.-90     	; 0xdd6 <spi_transaction>
     e30:	00 df       	rcall	.-512    	; 0xc32 <sendCDCbyte>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	41 e0       	ldi	r20, 0x01	; 1
	sendCDCbyte(high);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	80 e3       	ldi	r24, 0x30	; 48
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
     e3a:	cd df       	rcall	.-102    	; 0xdd6 <spi_transaction>
     e3c:	fa de       	rcall	.-524    	; 0xc32 <sendCDCbyte>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	42 e0       	ldi	r20, 0x02	; 2
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e3       	ldi	r24, 0x30	; 48
	sendCDCbyte(middle);
     e46:	c7 df       	rcall	.-114    	; 0xdd6 <spi_transaction>
     e48:	f4 de       	rcall	.-536    	; 0xc32 <sendCDCbyte>
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
     e4a:	80 e1       	ldi	r24, 0x10	; 16
     e4c:	f2 ce       	rjmp	.-540    	; 0xc32 <sendCDCbyte>

00000e4e <universal>:
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
	}
}

void universal(void) {
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	19 df       	rcall	.-462    	; 0xc86 <fill>
     e54:	20 91 46 01 	lds	r18, 0x0146
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
     e58:	40 91 45 01 	lds	r20, 0x0145
	sendCDCbyte(STK_OK);
     e5c:	60 91 44 01 	lds	r22, 0x0144
     e60:	80 91 43 01 	lds	r24, 0x0143
     e64:	b8 df       	rcall	.-144    	; 0xdd6 <spi_transaction>
     e66:	4f cf       	rjmp	.-354    	; 0xd06 <breply>

00000e68 <start_pmode>:

//================================================================================
// Start/End Pmode
//================================================================================

void start_pmode(void) {
     e68:	20 9a       	sbi	0x04, 0	; 4
void universal(void) {
	uint8_t ch;

	fill(4);
	ch = spi_transaction(ram.RingBuffer_Data[0], ram.RingBuffer_Data[1], ram.RingBuffer_Data[2], ram.RingBuffer_Data[3]);
	breply(ch);
     e6a:	28 9a       	sbi	0x05, 0	; 5
void start_pmode(void) {
	// set hardware SS to output so we can use SPI master mode
	AVR_SPI_DDR |= (1 << AVR_HARDWARE_SS);
	AVR_SPI_PORT |= (1 << AVR_HARDWARE_SS);

	spi_init();
     e6c:	a7 df       	rcall	.-178    	; 0xdbc <spi_init>
     e6e:	24 9a       	sbi	0x04, 4	; 4

	// following delays may not work on all targets...
	AVR_SPI_DDR |= (1 << AVR_SS); // OUTPUT
     e70:	2c 9a       	sbi	0x05, 4	; 5
	AVR_SPI_PORT |= (1 << AVR_SS); // HIGH
     e72:	21 9a       	sbi	0x04, 1	; 4

	AVR_SPI_DDR |= (1 << AVR_SCK); // OUTPUT
     e74:	29 98       	cbi	0x05, 1	; 5
	AVR_SPI_PORT &= ~(1 << AVR_SCK); // LOW
     e76:	2f ef       	ldi	r18, 0xFF	; 255
     e78:	80 e7       	ldi	r24, 0x70	; 112
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	21 50       	subi	r18, 0x01	; 1
     e7e:	80 40       	sbci	r24, 0x00	; 0
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <start_pmode+0x14>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <start_pmode+0x1e>
     e86:	00 00       	nop
     e88:	2c 98       	cbi	0x05, 4	; 5
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	80 e7       	ldi	r24, 0x70	; 112
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	80 40       	sbci	r24, 0x00	; 0
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	e1 f7       	brne	.-8      	; 0xe90 <start_pmode+0x28>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <start_pmode+0x32>
     e9a:	00 00       	nop
     e9c:	23 98       	cbi	0x04, 3	; 4

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
     e9e:	22 9a       	sbi	0x04, 2	; 4
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
     ea0:	20 e0       	ldi	r18, 0x00	; 0

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	63 e5       	ldi	r22, 0x53	; 83
     ea6:	8c ea       	ldi	r24, 0xAC	; 172
     ea8:	96 df       	rcall	.-212    	; 0xdd6 <spi_transaction>
     eaa:	e3 ec       	ldi	r30, 0xC3	; 195
     eac:	f1 e0       	ldi	r31, 0x01	; 1

	// set pmode flag, do NOT reset other ISP values here!
	ram.isp.pmode = true;
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	80 83       	st	Z, r24
     eb4:	82 dd       	rcall	.-1276   	; 0x9ba <clearHIDReports>
     eb6:	ee e3       	ldi	r30, 0x3E	; 62
	
	// clear all pending HID reports
	clearHIDReports();
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	8f b7       	in	r24, 0x3f	; 63
	}

	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_DisableBuffer(LRingBuffer_t* Buffer)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
     ebc:	f8 94       	cli
     ebe:	11 82       	std	Z+1, r1	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ec0:	10 82       	st	Z, r1
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ec2:	12 82       	std	Z+2, r1	; 0x02

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = NULL;
     ec4:	13 82       	std	Z+3, r1	; 0x03
     ec6:	14 82       	std	Z+4, r1	; 0x04
		Buffer->Index = 0;
     ec8:	8f bf       	out	0x3f, r24	; 63
		Buffer->Size = 0;
     eca:	10 92 ca 01 	sts	0x01CA, r1
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ece:	8b b1       	in	r24, 0x0b	; 11

	// do not write Serial stuff into buffer, we need this ram now
	LRingBuffer_DisableBuffer(&ram.RingBuffer);

	// reset LEDs
	ram.PulseMSRemaining.whole = 0;
     ed0:	80 63       	ori	r24, 0x30	; 48
     ed2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= LEDMask;
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     ed4:	08 95       	ret

00000ed6 <accessData>:
	spi_send(b);
	spi_send(c);
	return spi_send(d);
}

uint8_t accessData(uint8_t type, int addr, uint8_t data){
     ed6:	96 2f       	mov	r25, r22
     ed8:	67 2f       	mov	r22, r23
     eda:	24 2f       	mov	r18, r20
	// spi: type, address MSB, address LSB, data
	return spi_transaction(type, (addr >> 8) & 0xFF, addr & 0xFF, data);
     edc:	49 2f       	mov	r20, r25
     ede:	7b cf       	rjmp	.-266    	; 0xdd6 <spi_transaction>

00000ee0 <read_page>:

//================================================================================
// Read page
//================================================================================

void read_page(void) {
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
	// get length, memtype and check if signal is still okay
	int length = 256 * getch();
     eec:	c5 de       	rcall	.-630    	; 0xc78 <getch>
     eee:	18 2f       	mov	r17, r24
     ef0:	c3 de       	rcall	.-634    	; 0xc78 <getch>
	length += getch();
     ef2:	d8 2f       	mov	r29, r24
     ef4:	c1 de       	rcall	.-638    	; 0xc78 <getch>
     ef6:	c8 2f       	mov	r28, r24
	char memtype = getch();
     ef8:	bf de       	rcall	.-642    	; 0xc78 <getch>
     efa:	80 32       	cpi	r24, 0x20	; 32
     efc:	59 f0       	breq	.+22     	; 0xf14 <read_page+0x34>

	if (CRC_EOP != getch()) {
     efe:	80 91 c3 01 	lds	r24, 0x01C3
     f02:	98 2f       	mov	r25, r24
     f04:	9f 5f       	subi	r25, 0xFF	; 255
		ram.isp.error++;
     f06:	9f 77       	andi	r25, 0x7F	; 127
     f08:	80 78       	andi	r24, 0x80	; 128
     f0a:	89 2b       	or	r24, r25
     f0c:	80 93 c3 01 	sts	0x01C3, r24
     f10:	85 e1       	ldi	r24, 0x15	; 21
     f12:	44 c0       	rjmp	.+136    	; 0xf9c <read_page+0xbc>
     f14:	31 2f       	mov	r19, r17
     f16:	20 e0       	ldi	r18, 0x00	; 0
		sendCDCbyte(STK_NOSYNC);
     f18:	79 01       	movw	r14, r18
     f1a:	ed 0e       	add	r14, r29
// Read page
//================================================================================

void read_page(void) {
	// get length, memtype and check if signal is still okay
	int length = 256 * getch();
     f1c:	f1 1c       	adc	r15, r1
     f1e:	84 e1       	ldi	r24, 0x14	; 20
	length += getch();
     f20:	88 de       	rcall	.-752    	; 0xc32 <sendCDCbyte>
     f22:	c6 34       	cpi	r28, 0x46	; 70
     f24:	19 f5       	brne	.+70     	; 0xf6c <read_page+0x8c>
		ram.isp.error++;
		sendCDCbyte(STK_NOSYNC);
		return;
	}

	sendCDCbyte(STK_INSYNC);
     f26:	1b c0       	rjmp	.+54     	; 0xf5e <read_page+0x7e>
     f28:	60 91 c4 01 	lds	r22, 0x01C4
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
     f2c:	70 91 c5 01 	lds	r23, 0x01C5
     f30:	40 e0       	ldi	r20, 0x00	; 0
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
			// flash_read
			uint8_t low = accessData(0x20 + LOW * 8, ram.isp._addr, 0x00);
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	d0 df       	rcall	.-96     	; 0xed6 <accessData>
     f36:	7d de       	rcall	.-774    	; 0xc32 <sendCDCbyte>
     f38:	60 91 c4 01 	lds	r22, 0x01C4
     f3c:	70 91 c5 01 	lds	r23, 0x01C5
     f40:	40 e0       	ldi	r20, 0x00	; 0
			sendCDCbyte(low);
     f42:	88 e2       	ldi	r24, 0x28	; 40
     f44:	c8 df       	rcall	.-112    	; 0xed6 <accessData>

			// flash_read
			uint8_t high = accessData(0x20 + HIGH * 8, ram.isp._addr, 0x00);
     f46:	75 de       	rcall	.-790    	; 0xc32 <sendCDCbyte>
     f48:	80 91 c4 01 	lds	r24, 0x01C4
     f4c:	90 91 c5 01 	lds	r25, 0x01C5
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	90 93 c5 01 	sts	0x01C5, r25
			sendCDCbyte(high);
     f56:	80 93 c4 01 	sts	0x01C4, r24

			ram.isp._addr++;
     f5a:	22 96       	adiw	r28, 0x02	; 2
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <read_page+0x82>
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	ce 15       	cp	r28, r14
     f64:	df 05       	cpc	r29, r15
     f66:	04 f3       	brlt	.-64     	; 0xf28 <read_page+0x48>
     f68:	80 e1       	ldi	r24, 0x10	; 16
     f6a:	18 c0       	rjmp	.+48     	; 0xf9c <read_page+0xbc>
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
     f6c:	c5 34       	cpi	r28, 0x45	; 69
     f6e:	a9 f4       	brne	.+42     	; 0xf9a <read_page+0xba>

	sendCDCbyte(STK_INSYNC);
	char result = (char)STK_FAILED;

	// determine what memtype is requested: flash or eeprom
	if (memtype == 'F'){
     f70:	00 91 c4 01 	lds	r16, 0x01C4
		// flash_read_page
		for (int x = 0; x < length; x += 2) {
     f74:	10 91 c5 01 	lds	r17, 0x01C5
     f78:	00 0f       	add	r16, r16
			uint8_t high = accessData(0x20 + HIGH * 8, ram.isp._addr, 0x00);
			sendCDCbyte(high);

			ram.isp._addr++;
		}
		result = STK_OK;
     f7a:	11 1f       	adc	r17, r17
     f7c:	c0 e0       	ldi	r28, 0x00	; 0
	}

	if (memtype == 'E'){
     f7e:	d0 e0       	ldi	r29, 0x00	; 0
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <read_page+0xb2>
		// eeprom_read_page
		// here again we have a word address
		int start = ram.isp._addr * 2;
     f82:	be 01       	movw	r22, r28
     f84:	60 0f       	add	r22, r16
     f86:	71 1f       	adc	r23, r17
     f88:	4f ef       	ldi	r20, 0xFF	; 255
     f8a:	80 ea       	ldi	r24, 0xA0	; 160
     f8c:	a4 df       	rcall	.-184    	; 0xed6 <accessData>
		for (int x = 0; x < length; x++) {
     f8e:	51 de       	rcall	.-862    	; 0xc32 <sendCDCbyte>
     f90:	21 96       	adiw	r28, 0x01	; 1
     f92:	ce 15       	cp	r28, r14

//================================================================================
// Read page
//================================================================================

void read_page(void) {
     f94:	df 05       	cpc	r29, r15
     f96:	ac f3       	brlt	.-22     	; 0xf82 <read_page+0xa2>
     f98:	e7 cf       	rjmp	.-50     	; 0xf68 <read_page+0x88>
		// here again we have a word address
		int start = ram.isp._addr * 2;
		for (int x = 0; x < length; x++) {
			int addr = start + x;
			// TODO itegrate intern address ? <--
			uint8_t ee = accessData(0xA0, addr, 0xFF);
     f9a:	81 e1       	ldi	r24, 0x11	; 17
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
			sendCDCbyte(ee);
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15

	if (memtype == 'E'){
		// eeprom_read_page
		// here again we have a word address
		int start = ram.isp._addr * 2;
		for (int x = 0; x < length; x++) {
     fa6:	ef 90       	pop	r14
     fa8:	44 ce       	rjmp	.-888    	; 0xc32 <sendCDCbyte>

00000faa <current_page>:
	write_flash_chunk(start, remaining);
	return STK_OK;

}

int current_page(void) {
     faa:	80 91 c6 01 	lds	r24, 0x01C6
     fae:	90 91 c7 01 	lds	r25, 0x01C7
		result = STK_OK;
	}

	sendCDCbyte(result);
	return;
}
     fb2:	20 91 c4 01 	lds	r18, 0x01C4
     fb6:	30 91 c5 01 	lds	r19, 0x01C5
     fba:	80 32       	cpi	r24, 0x20	; 32
     fbc:	91 05       	cpc	r25, r1
			sendCDCbyte(ee);
		}
		result = STK_OK;
	}

	sendCDCbyte(result);
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <current_page+0x1a>
	return STK_OK;

}

int current_page(void) {
	if (ram.isp.param.pagesize == 32)  return ram.isp._addr & 0xFFFFFFF0;
     fc0:	20 7f       	andi	r18, 0xF0	; 240
     fc2:	0e c0       	rjmp	.+28     	; 0xfe0 <current_page+0x36>
	if (ram.isp.param.pagesize == 64)  return ram.isp._addr & 0xFFFFFFE0;
     fc4:	80 34       	cpi	r24, 0x40	; 64
     fc6:	91 05       	cpc	r25, r1
     fc8:	11 f4       	brne	.+4      	; 0xfce <current_page+0x24>
     fca:	20 7e       	andi	r18, 0xE0	; 224
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <current_page+0x36>
	if (ram.isp.param.pagesize == 128) return ram.isp._addr & 0xFFFFFFC0;
     fce:	80 38       	cpi	r24, 0x80	; 128
     fd0:	91 05       	cpc	r25, r1
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <current_page+0x2e>
     fd4:	20 7c       	andi	r18, 0xC0	; 192
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <current_page+0x36>
	if (ram.isp.param.pagesize == 256) return ram.isp._addr & 0xFFFFFF80;
     fd8:	81 15       	cp	r24, r1
     fda:	91 40       	sbci	r25, 0x01	; 1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <current_page+0x36>
     fde:	20 78       	andi	r18, 0x80	; 128
	return ram.isp._addr;
}
     fe0:	c9 01       	movw	r24, r18
     fe2:	08 95       	ret

00000fe4 <commit>:
		PORTD &= ~LEDMask;
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     fe4:	5d 9a       	sbi	0x0b, 5	; 11

void commit(int addr) {
	LEDs_TurnOffLEDs(LEDS_PMODE);
	accessData(0x4C, addr, 0x00);
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	bc 01       	movw	r22, r24
     fea:	8c e4       	ldi	r24, 0x4C	; 76
     fec:	74 df       	rcall	.-280    	; 0xed6 <accessData>
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	86 e7       	ldi	r24, 0x76	; 118
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	80 40       	sbci	r24, 0x00	; 0
     ff8:	90 40       	sbci	r25, 0x00	; 0
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <commit+0x10>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <commit+0x1a>
     ffe:	00 00       	nop
    1000:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
    1002:	08 95       	ret

00001004 <write_flash_chunk>:
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}

uint8_t write_flash_chunk(int start, int length) {
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	7b 01       	movw	r14, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
    1016:	cb 01       	movw	r24, r22
    1018:	36 de       	rcall	.-916    	; 0xc86 <fill>
    101a:	c7 df       	rcall	.-114    	; 0xfaa <current_page>
	int x = 0;
	int page = current_page();
    101c:	8c 01       	movw	r16, r24
    101e:	c0 e0       	ldi	r28, 0x00	; 0
    1020:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t write_flash_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
    1022:	29 c0       	rjmp	.+82     	; 0x1076 <write_flash_chunk+0x72>
    1024:	9e e3       	ldi	r25, 0x3E	; 62
	int page = current_page();
	while (x < length) {
    1026:	c9 2e       	mov	r12, r25
	accessData(0x4C, addr, 0x00);
	_delay_ms(30);
	LEDs_TurnOnLEDs(LEDS_PMODE);
}

uint8_t write_flash_chunk(int start, int length) {
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	d9 2e       	mov	r13, r25
    102c:	cc 0e       	add	r12, r28
    102e:	dd 1e       	adc	r13, r29
    1030:	60 91 c4 01 	lds	r22, 0x01C4
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
		// flash
		accessData(0x40 + 8 * LOW, ram.isp._addr, ram.RingBuffer_Data[x++]);
    1034:	70 91 c5 01 	lds	r23, 0x01C5
    1038:	f6 01       	movw	r30, r12
    103a:	45 81       	ldd	r20, Z+5	; 0x05
    103c:	80 e4       	ldi	r24, 0x40	; 64
    103e:	4b df       	rcall	.-362    	; 0xed6 <accessData>
    1040:	22 96       	adiw	r28, 0x02	; 2
    1042:	60 91 c4 01 	lds	r22, 0x01C4

		// flash
		accessData(0x40 + 8 * HIGH, ram.isp._addr, ram.RingBuffer_Data[x++]);
    1046:	70 91 c5 01 	lds	r23, 0x01C5
    104a:	f6 01       	movw	r30, r12
    104c:	46 81       	ldd	r20, Z+6	; 0x06
    104e:	88 e4       	ldi	r24, 0x48	; 72
    1050:	42 df       	rcall	.-380    	; 0xed6 <accessData>
    1052:	20 91 c4 01 	lds	r18, 0x01C4
    1056:	30 91 c5 01 	lds	r19, 0x01C5

		ram.isp._addr++;
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	30 93 c5 01 	sts	0x01C5, r19
    1062:	20 93 c4 01 	sts	0x01C4, r18
    1066:	a1 df       	rcall	.-190    	; 0xfaa <current_page>
    1068:	08 17       	cp	r16, r24
    106a:	19 07       	cpc	r17, r25
    106c:	21 f0       	breq	.+8      	; 0x1076 <write_flash_chunk+0x72>

		// TODO check if its okay with this commit + chunk comibation <--
		// could be a possible good fix if i understood this right
		// check if current page finished, commit and start a new page
		if (page != current_page()) {
    106e:	c8 01       	movw	r24, r16
    1070:	b9 df       	rcall	.-142    	; 0xfe4 <commit>
    1072:	9b df       	rcall	.-202    	; 0xfaa <current_page>
    1074:	8c 01       	movw	r16, r24
    1076:	ce 15       	cp	r28, r14
			// TODO merge commit here
			commit(page);
    1078:	df 05       	cpc	r29, r15
    107a:	a4 f2       	brlt	.-88     	; 0x1024 <write_flash_chunk+0x20>
    107c:	80 e1       	ldi	r24, 0x10	; 16
			page = current_page();
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	int x = 0;
	int page = current_page();
	while (x < length) {
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
		}
	}
	//commit(page);

	return STK_OK;
}
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	08 95       	ret

00001090 <write_flash>:
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1098:	c0 91 c4 01 	lds	r28, 0x01C4
    109c:	d0 91 c5 01 	lds	r29, 0x01C5
    10a0:	cc 0f       	add	r28, r28
    10a2:	dd 1f       	adc	r29, r29
	int remaining = length;
    10a4:	8c 01       	movw	r16, r24

	while (remaining > sizeof(ram.RingBuffer_Data)) {
    10a6:	08 c0       	rjmp	.+16     	; 0x10b8 <write_flash+0x28>
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
    10a8:	60 e8       	ldi	r22, 0x80	; 128
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	aa df       	rcall	.-172    	; 0x1004 <write_flash_chunk>
    10b0:	c0 58       	subi	r28, 0x80	; 128
	}
	sendCDCbyte(STK_FAILED);
	return;
}

uint8_t write_flash(int length) {
    10b2:	df 4f       	sbci	r29, 0xFF	; 255
    10b4:	00 58       	subi	r16, 0x80	; 128
    10b6:	11 09       	sbc	r17, r1
    10b8:	01 38       	cpi	r16, 0x81	; 129
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
	int remaining = length;

	while (remaining > sizeof(ram.RingBuffer_Data)) {
    10ba:	11 05       	cpc	r17, r1
    10bc:	a8 f7       	brcc	.-22     	; 0x10a8 <write_flash+0x18>
    10be:	b8 01       	movw	r22, r16
		write_flash_chunk(start, sizeof(ram.RingBuffer_Data));
		start += sizeof(ram.RingBuffer_Data);
		remaining -= sizeof(ram.RingBuffer_Data);
	}
	write_flash_chunk(start, remaining);
    10c0:	ce 01       	movw	r24, r28
    10c2:	a0 df       	rcall	.-192    	; 0x1004 <write_flash_chunk>
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	df 91       	pop	r29
	return STK_OK;

}
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <write_eeprom_chunk>:
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}

// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	6c 01       	movw	r12, r24
    10e2:	8b 01       	movw	r16, r22
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
    10e4:	cb 01       	movw	r24, r22
    10e6:	cf dd       	rcall	.-1122   	; 0xc86 <fill>
    10e8:	5d 9a       	sbi	0x0b, 5	; 11
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    10ea:	33 e4       	ldi	r19, 0x43	; 67
    10ec:	e3 2e       	mov	r14, r19
    10ee:	31 e0       	ldi	r19, 0x01	; 1
    10f0:	f3 2e       	mov	r15, r19
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
    10f6:	12 c0       	rjmp	.+36     	; 0x111c <write_eeprom_chunk+0x4c>
    10f8:	f7 01       	movw	r30, r14
		//TODO check here if we can use intern address
		int addr = start + x;
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
    10fa:	41 91       	ld	r20, Z+
    10fc:	7f 01       	movw	r14, r30
    10fe:	be 01       	movw	r22, r28
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}

// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
    1100:	6c 0d       	add	r22, r12
    1102:	7d 1d       	adc	r23, r13
    1104:	80 ec       	ldi	r24, 0xC0	; 192
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
		//TODO check here if we can use intern address
		int addr = start + x;
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
    1106:	e7 de       	rcall	.-562    	; 0xed6 <accessData>
    1108:	ff e7       	ldi	r31, 0x7F	; 127
    110a:	22 e3       	ldi	r18, 0x32	; 50
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	f1 50       	subi	r31, 0x01	; 1
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	80 40       	sbci	r24, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <write_eeprom_chunk+0x3e>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <write_eeprom_chunk+0x48>
    1118:	00 00       	nop
    111a:	21 96       	adiw	r28, 0x01	; 1
    111c:	c0 17       	cp	r28, r16
uint8_t write_eeprom_chunk(int start, int length) {
	// this writes byte-by-byte,
	// page writing may be faster (4 bytes at a time)
	fill(length);
	LEDs_TurnOffLEDs(LEDS_PMODE);
	for (int x = 0; x < length; x++) {
    111e:	d1 07       	cpc	r29, r17
    1120:	5c f3       	brlt	.-42     	; 0x10f8 <write_eeprom_chunk+0x28>
    1122:	5d 98       	cbi	0x0b, 5	; 11
    1124:	80 e1       	ldi	r24, 0x10	; 16
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
    1126:	df 91       	pop	r29
		accessData(0xC0, addr, ram.RingBuffer_Data[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	08 95       	ret

00001138 <write_eeprom>:
	//commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1140:	c0 91 c4 01 	lds	r28, 0x01C4
    1144:	d0 91 c5 01 	lds	r29, 0x01C5
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
    1148:	20 91 c8 01 	lds	r18, 0x01C8
    114c:	30 91 c9 01 	lds	r19, 0x01C9
    1150:	28 17       	cp	r18, r24
    1152:	39 07       	cpc	r19, r25
    1154:	24 f0       	brlt	.+8      	; 0x115e <write_eeprom+0x26>
	return STK_OK;
}

uint8_t write_eeprom(int length) {
	// here is a word address, get the byte address
	int start = ram.isp._addr * 2;
    1156:	cc 0f       	add	r28, r28
    1158:	dd 1f       	adc	r29, r29
    115a:	8c 01       	movw	r16, r24
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <write_eeprom+0x4c>
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
    115e:	80 91 c3 01 	lds	r24, 0x01C3
    1162:	98 2f       	mov	r25, r24
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	9f 77       	andi	r25, 0x7F	; 127
    1168:	80 78       	andi	r24, 0x80	; 128
    116a:	89 2b       	or	r24, r25
    116c:	80 93 c3 01 	sts	0x01C3, r24
		return STK_FAILED;
    1170:	81 e1       	ldi	r24, 0x11	; 17
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <write_eeprom+0x5a>
	}
	while (remaining > sizeof(ram.RingBuffer_Data)) {
		write_eeprom_chunk(start, sizeof(ram.RingBuffer_Data));
    1174:	60 e8       	ldi	r22, 0x80	; 128
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	ce 01       	movw	r24, r28
    117a:	aa df       	rcall	.-172    	; 0x10d0 <write_eeprom_chunk>
    117c:	c0 58       	subi	r28, 0x80	; 128
	//commit(page);

	return STK_OK;
}

uint8_t write_eeprom(int length) {
    117e:	df 4f       	sbci	r29, 0xFF	; 255
    1180:	00 58       	subi	r16, 0x80	; 128
    1182:	11 09       	sbc	r17, r1
    1184:	01 38       	cpi	r16, 0x81	; 129
	int remaining = length;
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > sizeof(ram.RingBuffer_Data)) {
    1186:	11 05       	cpc	r17, r1
    1188:	a8 f7       	brcc	.-22     	; 0x1174 <write_eeprom+0x3c>
    118a:	b8 01       	movw	r22, r16
		write_eeprom_chunk(start, sizeof(ram.RingBuffer_Data));
		start += sizeof(ram.RingBuffer_Data);
		remaining -= sizeof(ram.RingBuffer_Data);
	}
	write_eeprom_chunk(start, remaining);
    118c:	ce 01       	movw	r24, r28
    118e:	a0 df       	rcall	.-192    	; 0x10d0 <write_eeprom_chunk>
    1190:	80 e1       	ldi	r24, 0x10	; 16
    1192:	df 91       	pop	r29
	return STK_OK;
    1194:	cf 91       	pop	r28
}
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <program_page>:

//================================================================================
// Programm page
//================================================================================

void program_page(void) {
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
	char result = (char)STK_FAILED;
	int length = 256 * getch();
    11a0:	6b dd       	rcall	.-1322   	; 0xc78 <getch>
    11a2:	d8 2f       	mov	r29, r24
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	c8 2f       	mov	r28, r24
    11a8:	67 dd       	rcall	.-1330   	; 0xc78 <getch>
	length += getch();
    11aa:	c8 0f       	add	r28, r24
    11ac:	d1 1d       	adc	r29, r1
    11ae:	64 dd       	rcall	.-1336   	; 0xc78 <getch>
    11b0:	86 34       	cpi	r24, 0x46	; 70

	char memtype = getch();
    11b2:	19 f4       	brne	.+6      	; 0x11ba <program_page+0x1e>
    11b4:	ce 01       	movw	r24, r28
	// flash memory @here, (length) bytes
	if (memtype == 'F') {
    11b6:	6c df       	rcall	.-296    	; 0x1090 <write_flash>
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <program_page+0x26>
		uint8_t result = write_flash(length);
    11ba:	85 34       	cpi	r24, 0x45	; 69
    11bc:	a9 f4       	brne	.+42     	; 0x11e8 <program_page+0x4c>
    11be:	ce 01       	movw	r24, r28
    11c0:	bb df       	rcall	.-138    	; 0x1138 <write_eeprom>
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}

	if (memtype == 'E') {
    11c2:	c8 2f       	mov	r28, r24
    11c4:	59 dd       	rcall	.-1358   	; 0xc78 <getch>
		result = (char)write_eeprom(length);
    11c6:	80 32       	cpi	r24, 0x20	; 32
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <program_page+0x36>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	32 dd       	rcall	.-1436   	; 0xc32 <sendCDCbyte>
		if (CRC_EOP == getch()) {
    11ce:	8c 2f       	mov	r24, r28
    11d0:	0c c0       	rjmp	.+24     	; 0x11ea <program_page+0x4e>
    11d2:	80 91 c3 01 	lds	r24, 0x01C3
			sendCDCbyte(STK_INSYNC);
    11d6:	98 2f       	mov	r25, r24
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	9f 77       	andi	r25, 0x7F	; 127
			sendCDCbyte(result);
    11dc:	80 78       	andi	r24, 0x80	; 128
    11de:	89 2b       	or	r24, r25
		}
		else {
			ram.isp.error++;
    11e0:	80 93 c3 01 	sts	0x01C3, r24
    11e4:	85 e1       	ldi	r24, 0x15	; 21
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <program_page+0x4e>
    11e8:	81 e1       	ldi	r24, 0x11	; 17
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	21 cd       	rjmp	.-1470   	; 0xc32 <sendCDCbyte>

000011f0 <avrisp>:
	ram.isp.error = 0;
	ram.isp.pmode = false;
	ram.isp._addr = 0; // just to be sure
}

void avrisp(int ReceivedByte){
    11f0:	cf 93       	push	r28
			sendCDCbyte(STK_INSYNC);
			sendCDCbyte(result);
		}
		else {
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
    11f2:	df 93       	push	r29
	ram.isp._addr = 0; // just to be sure
}

void avrisp(int ReceivedByte){
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
    11f4:	20 91 c3 01 	lds	r18, 0x01C3
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
	return;
}
    11f8:	27 ff       	sbrs	r18, 7
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <avrisp+0x10>
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
    11fc:	5d 98       	cbi	0x0b, 5	; 11
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <avrisp+0x12>
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    1200:	5d 9a       	sbi	0x0b, 5	; 11
	// is pmode active?
	if (ram.isp.pmode) LEDs_TurnOnLEDs(LEDS_PMODE);
	else LEDs_TurnOffLEDs(LEDS_PMODE);

	// is there an error?
	if (ram.isp.error) LEDs_TurnOnLEDs(LEDS_ERR);
    1202:	2f 77       	andi	r18, 0x7F	; 127
    1204:	11 f0       	breq	.+4      	; 0x120a <avrisp+0x1a>
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
    1206:	5c 98       	cbi	0x0b, 4	; 11
    1208:	01 c0       	rjmp	.+2      	; 0x120c <avrisp+0x1c>
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    120a:	5c 9a       	sbi	0x0b, 4	; 11
	else LEDs_TurnOffLEDs(LEDS_ERR);

	// read in bytes from the CDC interface
	if (!(ReceivedByte < 0)){
    120c:	97 fd       	sbrc	r25, 7
    120e:	ad c0       	rjmp	.+346    	; 0x136a <avrisp+0x17a>
		switch (ReceivedByte) {
    1210:	81 35       	cpi	r24, 0x51	; 81
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <avrisp+0x28>
    1216:	83 c0       	rjmp	.+262    	; 0x131e <avrisp+0x12e>
    1218:	e4 f4       	brge	.+56     	; 0x1252 <avrisp+0x62>
    121a:	81 34       	cpi	r24, 0x41	; 65
    121c:	91 05       	cpc	r25, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <avrisp+0x32>
    1220:	53 c0       	rjmp	.+166    	; 0x12c8 <avrisp+0xd8>
    1222:	54 f4       	brge	.+20     	; 0x1238 <avrisp+0x48>
    1224:	80 33       	cpi	r24, 0x30	; 48
    1226:	91 05       	cpc	r25, r1
    1228:	99 f1       	breq	.+102    	; 0x1290 <avrisp+0xa0>
    122a:	81 33       	cpi	r24, 0x31	; 49
    122c:	91 05       	cpc	r25, r1
    122e:	b1 f1       	breq	.+108    	; 0x129c <avrisp+0xac>
    1230:	80 97       	sbiw	r24, 0x20	; 32
    1232:	09 f0       	breq	.+2      	; 0x1236 <avrisp+0x46>
    1234:	88 c0       	rjmp	.+272    	; 0x1346 <avrisp+0x156>
    1236:	7d c0       	rjmp	.+250    	; 0x1332 <avrisp+0x142>
    1238:	85 34       	cpi	r24, 0x45	; 69
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <avrisp+0x50>
    123e:	4c c0       	rjmp	.+152    	; 0x12d8 <avrisp+0xe8>
    1240:	80 35       	cpi	r24, 0x50	; 80
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <avrisp+0x58>
    1246:	4c c0       	rjmp	.+152    	; 0x12e0 <avrisp+0xf0>
    1248:	82 34       	cpi	r24, 0x42	; 66
    124a:	91 05       	cpc	r25, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <avrisp+0x60>
    124e:	7b c0       	rjmp	.+246    	; 0x1346 <avrisp+0x156>
    1250:	3f c0       	rjmp	.+126    	; 0x12d0 <avrisp+0xe0>
    1252:	81 36       	cpi	r24, 0x61	; 97
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <avrisp+0x6a>
    1258:	57 c0       	rjmp	.+174    	; 0x1308 <avrisp+0x118>
    125a:	6c f4       	brge	.+26     	; 0x1276 <avrisp+0x86>
    125c:	86 35       	cpi	r24, 0x56	; 86
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <avrisp+0x74>
    1262:	5a c0       	rjmp	.+180    	; 0x1318 <avrisp+0x128>
    1264:	80 36       	cpi	r24, 0x60	; 96
    1266:	91 05       	cpc	r25, r1
    1268:	09 f4       	brne	.+2      	; 0x126c <avrisp+0x7c>
    126a:	4d c0       	rjmp	.+154    	; 0x1306 <avrisp+0x116>
    126c:	85 35       	cpi	r24, 0x55	; 85
    126e:	91 05       	cpc	r25, r1
    1270:	09 f0       	breq	.+2      	; 0x1274 <avrisp+0x84>
    1272:	69 c0       	rjmp	.+210    	; 0x1346 <avrisp+0x156>
    1274:	37 c0       	rjmp	.+110    	; 0x12e4 <avrisp+0xf4>
    1276:	84 37       	cpi	r24, 0x74	; 116
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <avrisp+0x8e>
    127c:	4a c0       	rjmp	.+148    	; 0x1312 <avrisp+0x122>
    127e:	85 37       	cpi	r24, 0x75	; 117
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <avrisp+0x96>
    1284:	53 c0       	rjmp	.+166    	; 0x132c <avrisp+0x13c>
    1286:	84 36       	cpi	r24, 0x64	; 100
    1288:	91 05       	cpc	r25, r1
    128a:	09 f0       	breq	.+2      	; 0x128e <avrisp+0x9e>
    128c:	5c c0       	rjmp	.+184    	; 0x1346 <avrisp+0x156>
    128e:	3e c0       	rjmp	.+124    	; 0x130c <avrisp+0x11c>
		case STK_GET_SYNC:
			ram.isp.error = 0;
    1290:	80 91 c3 01 	lds	r24, 0x01C3
    1294:	80 78       	andi	r24, 0x80	; 128
    1296:	80 93 c3 01 	sts	0x01C3, r24
    129a:	1b c0       	rjmp	.+54     	; 0x12d2 <avrisp+0xe2>
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
    129c:	ed dc       	rcall	.-1574   	; 0xc78 <getch>
    129e:	80 32       	cpi	r24, 0x20	; 32
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <avrisp+0xb4>
    12a2:	63 c0       	rjmp	.+198    	; 0x136a <avrisp+0x17a>
    12a4:	84 e1       	ldi	r24, 0x14	; 20
				sendCDCbyte(STK_INSYNC);
    12a6:	c5 dc       	rcall	.-1654   	; 0xc32 <sendCDCbyte>
    12a8:	81 e4       	ldi	r24, 0x41	; 65
    12aa:	c3 dc       	rcall	.-1658   	; 0xc32 <sendCDCbyte>
				sendCDCbyte('A');
    12ac:	86 e5       	ldi	r24, 0x56	; 86
    12ae:	c1 dc       	rcall	.-1662   	; 0xc32 <sendCDCbyte>
    12b0:	82 e5       	ldi	r24, 0x52	; 82
				sendCDCbyte('V');
    12b2:	bf dc       	rcall	.-1666   	; 0xc32 <sendCDCbyte>
    12b4:	80 e2       	ldi	r24, 0x20	; 32
    12b6:	bd dc       	rcall	.-1670   	; 0xc32 <sendCDCbyte>
				sendCDCbyte('R');
    12b8:	89 e4       	ldi	r24, 0x49	; 73
    12ba:	bb dc       	rcall	.-1674   	; 0xc32 <sendCDCbyte>
    12bc:	83 e5       	ldi	r24, 0x53	; 83
				sendCDCbyte(' ');
    12be:	b9 dc       	rcall	.-1678   	; 0xc32 <sendCDCbyte>
    12c0:	80 e5       	ldi	r24, 0x50	; 80
    12c2:	b7 dc       	rcall	.-1682   	; 0xc32 <sendCDCbyte>
				sendCDCbyte('I');
    12c4:	80 e1       	ldi	r24, 0x10	; 16
    12c6:	4e c0       	rjmp	.+156    	; 0x1364 <avrisp+0x174>
    12c8:	d7 dc       	rcall	.-1618   	; 0xc78 <getch>
				sendCDCbyte('S');
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	47 cd       	rjmp	.-1394   	; 0xd5e <get_parameters>
				sendCDCbyte('P');
    12d0:	5b dd       	rcall	.-1354   	; 0xd88 <set_parameters>
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
				sendCDCbyte(STK_OK);
    12d6:	30 cd       	rjmp	.-1440   	; 0xd38 <replyOK>
    12d8:	85 e0       	ldi	r24, 0x05	; 5
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	d4 dc       	rcall	.-1624   	; 0xc86 <fill>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12de:	f9 cf       	rjmp	.-14     	; 0x12d2 <avrisp+0xe2>
    12e0:	c3 dd       	rcall	.-1146   	; 0xe68 <start_pmode>
				sendCDCbyte('P');
				sendCDCbyte(STK_OK);
			}
			break;
		case STK_GET_PARM:
			get_parameters(getch());
    12e2:	f7 cf       	rjmp	.-18     	; 0x12d2 <avrisp+0xe2>
    12e4:	c9 dc       	rcall	.-1646   	; 0xc78 <getch>
			break;
		case STK_SET_PARM:
			set_parameters();
    12e6:	c8 2f       	mov	r28, r24
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    12ea:	d0 93 c5 01 	sts	0x01C5, r29
		case STK_GET_PARM:
			get_parameters(getch());
			break;
		case STK_SET_PARM:
			set_parameters();
			replyOK();
    12ee:	c0 93 c4 01 	sts	0x01C4, r28
			break;
		case STK_SET_PARM_EXT: // extended parameters - ignore for now
			fill(5);
    12f2:	c2 dc       	rcall	.-1660   	; 0xc78 <getch>
    12f4:	38 2f       	mov	r19, r24
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	2c 0f       	add	r18, r28
    12fa:	3d 1f       	adc	r19, r29
			replyOK();
			break;

		case STK_PMODE_START:
			start_pmode();
    12fc:	30 93 c5 01 	sts	0x01C5, r19
    1300:	20 93 c4 01 	sts	0x01C4, r18
			replyOK();
			break;
		case STK_SET_ADDR:
			ram.isp._addr = getch();
    1304:	e6 cf       	rjmp	.-52     	; 0x12d2 <avrisp+0xe2>
    1306:	b8 dc       	rcall	.-1680   	; 0xc78 <getch>
    1308:	b7 dc       	rcall	.-1682   	; 0xc78 <getch>
    130a:	e3 cf       	rjmp	.-58     	; 0x12d2 <avrisp+0xe2>
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	45 cf       	rjmp	.-374    	; 0x119c <program_page>
			ram.isp._addr += 256 * getch();
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	e4 cd       	rjmp	.-1080   	; 0xee0 <read_page>
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	98 cd       	rjmp	.-1232   	; 0xe4e <universal>
    131e:	80 91 c3 01 	lds	r24, 0x01C3
    1322:	80 78       	andi	r24, 0x80	; 128
    1324:	80 93 c3 01 	sts	0x01C3, r24
			replyOK();
			break;

		case STK_PROG_FLASH:
			//uint8_t low = getch();
			getch();
    1328:	c9 dc       	rcall	.-1646   	; 0xcbc <end_pmode>
    132a:	d3 cf       	rjmp	.-90     	; 0x12d2 <avrisp+0xe2>
			getch();
			replyOK();
			break;
		case STK_PROG_DATA:
			//uint8_t data = getch();
			getch();
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	6a cd       	rjmp	.-1324   	; 0xe06 <read_signature>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1332:	80 91 c3 01 	lds	r24, 0x01C3
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
    1336:	98 2f       	mov	r25, r24
    1338:	9f 5f       	subi	r25, 0xFF	; 255
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    133a:	9f 77       	andi	r25, 0x7F	; 127
    133c:	80 78       	andi	r24, 0x80	; 128
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
    133e:	89 2b       	or	r24, r25
    1340:	80 93 c3 01 	sts	0x01C3, r24
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <avrisp+0x172>
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
    1346:	80 91 c3 01 	lds	r24, 0x01C3
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
    134a:	98 2f       	mov	r25, r24
    134c:	9f 5f       	subi	r25, 0xFF	; 255
    134e:	9f 77       	andi	r25, 0x7F	; 127
    1350:	80 78       	andi	r24, 0x80	; 128
    1352:	89 2b       	or	r24, r25
			end_pmode();
    1354:	80 93 c3 01 	sts	0x01C3, r24
    1358:	8f dc       	rcall	.-1762   	; 0xc78 <getch>
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
    135a:	80 32       	cpi	r24, 0x20	; 32
    135c:	11 f4       	brne	.+4      	; 0x1362 <avrisp+0x172>
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
    135e:	82 e1       	ldi	r24, 0x12	; 18
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <avrisp+0x174>
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
    1362:	85 e1       	ldi	r24, 0x15	; 21
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	64 cc       	rjmp	.-1848   	; 0xc32 <sendCDCbyte>
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
    1370:	fc 01       	movw	r30, r24
    1372:	20 81       	ld	r18, Z
	protocol->leadError = false;
    1374:	20 68       	ori	r18, 0x80	; 128
    1376:	2f 7b       	andi	r18, 0xBF	; 191
    1378:	20 83       	st	Z, r18
    137a:	08 95       	ret

0000137c <NHPread>:
		protocol->reset = true;
	}
	return errorLevel;
}

NHP_Enum_t NHPread(uint8_t input, NHP_Data_t* protocol){
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	fb 01       	movw	r30, r22
	// check if previous reading had a lead error, copy that lead byte to the beginning
	if (protocol->leadError){
    1382:	90 81       	ld	r25, Z
    1384:	96 ff       	sbrs	r25, 6
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <NHPread+0x2a>
		protocol->readbuffer[0] = protocol->readbuffer[protocol->readlength];
    1388:	29 2f       	mov	r18, r25
    138a:	26 95       	lsr	r18
    138c:	26 95       	lsr	r18
    138e:	26 95       	lsr	r18
    1390:	27 70       	andi	r18, 0x07	; 7
    1392:	db 01       	movw	r26, r22
    1394:	a2 0f       	add	r26, r18
    1396:	b1 1d       	adc	r27, r1
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	2c 91       	ld	r18, X
    139c:	25 83       	std	Z+5, r18	; 0x05
		protocol->readlength = 1;
    139e:	97 7c       	andi	r25, 0xC7	; 199

		// reset leadError indicator
		protocol->leadError = false;
    13a0:	98 60       	ori	r25, 0x08	; 8
    13a2:	9f 7b       	andi	r25, 0xBF	; 191
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <NHPread+0x30>
	}
	// completely reset the protocol after sucessfull reading/error last time
	else if (protocol->reset){
    13a6:	97 ff       	sbrs	r25, 7
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <NHPread+0x32>
		protocol->mBlocks = 0;
		protocol->readlength = 0;
    13aa:	90 7c       	andi	r25, 0xC0	; 192
    13ac:	90 83       	st	Z, r25
	}

	//write input to the buffer
	protocol->readbuffer[protocol->readlength++] = input;
    13ae:	90 81       	ld	r25, Z
    13b0:	96 95       	lsr	r25
    13b2:	96 95       	lsr	r25
    13b4:	96 95       	lsr	r25
    13b6:	97 70       	andi	r25, 0x07	; 7
    13b8:	df 01       	movw	r26, r30
    13ba:	a9 0f       	add	r26, r25
    13bc:	b1 1d       	adc	r27, r1
    13be:	15 96       	adiw	r26, 0x05	; 5
    13c0:	8c 93       	st	X, r24
    13c2:	29 2f       	mov	r18, r25
    13c4:	2f 5f       	subi	r18, 0xFF	; 255
    13c6:	27 70       	andi	r18, 0x07	; 7
    13c8:	22 0f       	add	r18, r18
    13ca:	22 0f       	add	r18, r18
    13cc:	22 0f       	add	r18, r18
    13ce:	40 81       	ld	r20, Z
    13d0:	47 7c       	andi	r20, 0xC7	; 199
    13d2:	42 2b       	or	r20, r18
    13d4:	40 83       	st	Z, r20

	// create errorLevel that will be returned (contains errors or address)
	NHP_Enum_t errorLevel;
	
	// check the header(lead/data/end) indicator
	switch (input & NHP_MASK_HEADER){
    13d6:	28 2f       	mov	r18, r24
    13d8:	20 7c       	andi	r18, 0xC0	; 192
    13da:	34 2f       	mov	r19, r20
    13dc:	37 70       	andi	r19, 0x07	; 7
    13de:	20 38       	cpi	r18, 0x80	; 128
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <NHPread+0x68>
    13e2:	63 c0       	rjmp	.+198    	; 0x14aa <NHPread+0x12e>
    13e4:	20 3c       	cpi	r18, 0xC0	; 192
    13e6:	09 f0       	breq	.+2      	; 0x13ea <NHPread+0x6e>
    13e8:	45 c0       	rjmp	.+138    	; 0x1474 <NHPread+0xf8>

	case(NHP_HEADER_LEAD) :
	{
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;
    13ea:	28 2f       	mov	r18, r24
    13ec:	28 73       	andi	r18, 0x38	; 56
    13ee:	26 95       	lsr	r18
    13f0:	26 95       	lsr	r18
    13f2:	26 95       	lsr	r18

		if (protocol->mBlocks){
    13f4:	33 23       	and	r19, r19
    13f6:	49 f0       	breq	.+18     	; 0x140a <NHPread+0x8e>
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
			// write the buffer without the new lead, move it next reading
			protocol->readlength--;
    13f8:	99 0f       	add	r25, r25
    13fa:	99 0f       	add	r25, r25
    13fc:	99 0f       	add	r25, r25
    13fe:	47 7c       	andi	r20, 0xC7	; 199
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
    1400:	49 2b       	or	r20, r25
    1402:	40 64       	ori	r20, 0x40	; 64
    1404:	40 83       	st	Z, r20
		// read command indicator or block length
		uint8_t blocks = (input & NHP_MASK_LENGTH) >> 3;

		if (protocol->mBlocks){
			// we were still reading! Log an error but continue reading with this new lead
			errorLevel = NHP_ERR_LEAD;
    1406:	9e ef       	ldi	r25, 0xFE	; 254
    1408:	01 c0       	rjmp	.+2      	; 0x140c <NHPread+0x90>
			protocol->readlength--;
			// set indicator to move this lead byte to the beginning next reading
			protocol->leadError = true;
		}
		else
			errorLevel = NHP_NO_ERR;
    140a:	90 e0       	ldi	r25, 0x00	; 0

		if (blocks == 0 || blocks == 1){
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	98 f4       	brcc	.+38     	; 0x1436 <NHPread+0xba>
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
    1410:	90 81       	ld	r25, Z
    1412:	96 fb       	bst	r25, 6
    1414:	22 27       	eor	r18, r18
    1416:	20 f9       	bld	r18, 0
    1418:	89 2f       	mov	r24, r25
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	82 0f       	add	r24, r18
    1422:	87 70       	andi	r24, 0x07	; 7
    1424:	88 0f       	add	r24, r24
    1426:	88 0f       	add	r24, r24
    1428:	88 0f       	add	r24, r24
    142a:	97 7c       	andi	r25, 0xC7	; 199
			protocol->leadError = false;
    142c:	98 2b       	or	r25, r24
    142e:	9f 7b       	andi	r25, 0xBF	; 191
    1430:	90 83       	st	Z, r25

			// return command indicator
			errorLevel = NHP_COMMAND;
    1432:	9f ef       	ldi	r25, 0xFF	; 255
			break;
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <NHPread+0x138>
		}

		else if (blocks == 7){
    1436:	27 30       	cpi	r18, 0x07	; 7
    1438:	59 f4       	brne	.+22     	; 0x1450 <NHPread+0xd4>
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
    143a:	08 2f       	mov	r16, r24
    143c:	0f 70       	andi	r16, 0x0F	; 15
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	01 83       	std	Z+1, r16	; 0x01
    1446:	12 83       	std	Z+2, r17	; 0x02
    1448:	23 83       	std	Z+3, r18	; 0x03
    144a:	34 83       	std	Z+4, r19	; 0x04
			blocks -= 2;
    144c:	25 e0       	ldi	r18, 0x05	; 5
    144e:	0a c0       	rjmp	.+20     	; 0x1464 <NHPread+0xe8>
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
    1450:	48 2f       	mov	r20, r24
    1452:	47 70       	andi	r20, 0x07	; 7
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	41 83       	std	Z+1, r20	; 0x01
    145c:	52 83       	std	Z+2, r21	; 0x02
    145e:	63 83       	std	Z+3, r22	; 0x03
    1460:	74 83       	std	Z+4, r23	; 0x04
			blocks--;
    1462:	21 50       	subi	r18, 0x01	; 1
		}

		// save new block length to the protocol data
		protocol->mBlocks = blocks;
    1464:	27 70       	andi	r18, 0x07	; 7
    1466:	80 81       	ld	r24, Z
    1468:	88 7f       	andi	r24, 0xF8	; 248
    146a:	82 2b       	or	r24, r18
    146c:	80 83       	st	Z, r24
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
    146e:	99 23       	and	r25, r25
    1470:	29 f1       	breq	.+74     	; 0x14bc <NHPread+0x140>
    1472:	20 c0       	rjmp	.+64     	; 0x14b4 <NHPread+0x138>

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
    1474:	03 2f       	mov	r16, r19
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	02 30       	cpi	r16, 0x02	; 2
    147a:	11 05       	cpc	r17, r1
    147c:	24 f1       	brlt	.+72     	; 0x14c6 <NHPread+0x14a>
			// get next 7 bits of data
			protocol->mBlocks--;
    147e:	39 5f       	subi	r19, 0xF9	; 249
    1480:	37 70       	andi	r19, 0x07	; 7
    1482:	48 7f       	andi	r20, 0xF8	; 248
    1484:	43 2b       	or	r20, r19
    1486:	40 83       	st	Z, r20
			protocol->mWorkData <<= 7;
    1488:	41 81       	ldd	r20, Z+1	; 0x01
    148a:	52 81       	ldd	r21, Z+2	; 0x02
    148c:	63 81       	ldd	r22, Z+3	; 0x03
    148e:	74 81       	ldd	r23, Z+4	; 0x04
    1490:	97 e0       	ldi	r25, 0x07	; 7
    1492:	44 0f       	add	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	66 1f       	adc	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	9a 95       	dec	r25
    149c:	d1 f7       	brne	.-12     	; 0x1492 <NHPread+0x116>
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
    149e:	48 2b       	or	r20, r24
    14a0:	41 83       	std	Z+1, r20	; 0x01
    14a2:	52 83       	std	Z+2, r21	; 0x02
    14a4:	63 83       	std	Z+3, r22	; 0x03
    14a6:	74 83       	std	Z+4, r23	; 0x04
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <NHPread+0x140>
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
    14aa:	31 30       	cpi	r19, 0x01	; 1
    14ac:	71 f4       	brne	.+28     	; 0x14ca <NHPread+0x14e>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
    14ae:	98 2f       	mov	r25, r24
    14b0:	9f 73       	andi	r25, 0x3F	; 63
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
    14b4:	80 81       	ld	r24, Z
    14b6:	80 68       	ori	r24, 0x80	; 128
    14b8:	80 83       	st	Z, r24
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <NHPread+0x152>
	// ignore in progress reading
	else
		protocol->reset = false;
    14bc:	80 81       	ld	r24, Z
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	80 83       	st	Z, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <NHPread+0x152>
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
    14c6:	9d ef       	ldi	r25, 0xFD	; 253
    14c8:	f5 cf       	rjmp	.-22     	; 0x14b4 <NHPread+0x138>
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
    14ca:	9c ef       	ldi	r25, 0xFC	; 252
    14cc:	f3 cf       	rjmp	.-26     	; 0x14b4 <NHPread+0x138>
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
    14ce:	89 2f       	mov	r24, r25
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <NHPreadChecksum>:
	// reset variables
	protocol->reset = true;
	protocol->leadError = false;
}

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	eb 01       	movw	r28, r22
	NHP_Enum_t errorLevel = NHPread(input, protocol);
    14e0:	4d df       	rcall	.-358    	; 0x137c <NHPread>
    14e2:	18 16       	cp	r1, r24
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
    14e4:	b4 f4       	brge	.+44     	; 0x1512 <NHPreadChecksum+0x3c>
    14e6:	09 81       	ldd	r16, Y+1	; 0x01
    14e8:	1a 81       	ldd	r17, Y+2	; 0x02
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	a9 01       	movw	r20, r18
    14f0:	66 27       	eor	r22, r22
    14f2:	77 27       	eor	r23, r23
    14f4:	22 27       	eor	r18, r18
    14f6:	33 27       	eor	r19, r19
    14f8:	40 27       	eor	r20, r16
    14fa:	51 27       	eor	r21, r17
    14fc:	62 27       	eor	r22, r18
    14fe:	73 27       	eor	r23, r19
    1500:	4f 3f       	cpi	r20, 0xFF	; 255
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	61 05       	cpc	r22, r1
    1506:	71 05       	cpc	r23, r1
    1508:	21 f0       	breq	.+8      	; 0x1512 <NHPreadChecksum+0x3c>
    150a:	88 81       	ld	r24, Y
		errorLevel = NHP_ERR_CHECKSUM;
		protocol->reset = true;
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	88 83       	st	Y, r24
    1510:	8b ef       	ldi	r24, 0xFB	; 251

NHP_Enum_t NHPreadChecksum(uint8_t input, NHP_Data_t* protocol){
	NHP_Enum_t errorLevel = NHPread(input, protocol);
	// if its an valid address, check the data inverse too
	if (errorLevel > 0 && (((protocol->mWorkData & 0xFFFF) ^ (protocol->mWorkData >> 16)) != 0xFFFF)){
		errorLevel = NHP_ERR_CHECKSUM;
    1512:	df 91       	pop	r29
		protocol->reset = true;
	}
	return errorLevel;
}
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
    151c:	fa 01       	movw	r30, r20
    151e:	2c e1       	ldi	r18, 0x1C	; 28
    1520:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
    1522:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
    1524:	ab 01       	movw	r20, r22
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <NHPwriteChecksum+0x12>
    152a:	56 95       	lsr	r21
    152c:	47 95       	ror	r20
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
    1532:	48 30       	cpi	r20, 0x08	; 8
    1534:	28 f0       	brcs	.+10     	; 0x1540 <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
    1536:	97 30       	cpi	r25, 0x07	; 7
    1538:	59 f4       	brne	.+22     	; 0x1550 <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
    153a:	40 83       	st	Z, r20
				blocks--;
    153c:	96 e0       	ldi	r25, 0x06	; 6
    153e:	08 c0       	rjmp	.+16     	; 0x1550 <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
    1540:	40 83       	st	Z, r20
			blocks--;
    1542:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
    1544:	41 11       	cpse	r20, r1
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <NHPwriteChecksum+0x34>
    1548:	27 50       	subi	r18, 0x07	; 7
    154a:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
    154c:	92 30       	cpi	r25, 0x02	; 2
    154e:	51 f7       	brne	.-44     	; 0x1524 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
    1550:	49 2f       	mov	r20, r25
    1552:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
    1554:	0d c0       	rjmp	.+26     	; 0x1570 <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
    1556:	df 01       	movw	r26, r30
    1558:	a4 0f       	add	r26, r20
    155a:	b1 1d       	adc	r27, r1
    155c:	9b 01       	movw	r18, r22
    155e:	2f 77       	andi	r18, 0x7F	; 127
    1560:	33 27       	eor	r19, r19
    1562:	2c 93       	st	X, r18
		data >>= 7;
    1564:	66 0f       	add	r22, r22
    1566:	67 2f       	mov	r22, r23
    1568:	66 1f       	adc	r22, r22
    156a:	77 0b       	sbc	r23, r23
    156c:	71 95       	neg	r23
		datablocks--;
    156e:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
    1570:	41 11       	cpse	r20, r1
    1572:	f1 cf       	rjmp	.-30     	; 0x1556 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
    1574:	49 2f       	mov	r20, r25
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	9a 01       	movw	r18, r20
    157a:	63 e0       	ldi	r22, 0x03	; 3
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	6a 95       	dec	r22
    1582:	e1 f7       	brne	.-8      	; 0x157c <NHPwriteChecksum+0x60>
    1584:	20 6c       	ori	r18, 0xC0	; 192
    1586:	3f 6f       	ori	r19, 0xFF	; 255
    1588:	30 81       	ld	r19, Z
    158a:	32 2b       	or	r19, r18
    158c:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
    158e:	e4 0f       	add	r30, r20
    1590:	f5 1f       	adc	r31, r21
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	8f 73       	andi	r24, 0x3F	; 63
    1598:	80 68       	ori	r24, 0x80	; 128
    159a:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
    159c:	89 2f       	mov	r24, r25
    159e:	08 95       	ret

000015a0 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
	// end pmode if needed and setup Serial + HID again (on errors)
	//TODO pmode break to get out of this loop
	if (ram.isp.pmode)
    15ae:	80 91 c3 01 	lds	r24, 0x01C3
    15b2:	87 fd       	sbrc	r24, 7
		end_pmode();
    15b4:	83 db       	rcall	.-2298   	; 0xcbc <end_pmode>
    15b6:	01 da       	rcall	.-3070   	; 0x9ba <clearHIDReports>

	// clear HID reports if chip gets restarted
	clearHIDReports();
    15b8:	cc 88       	ldd	r12, Y+20	; 0x14
    15ba:	dd 88       	ldd	r13, Y+21	; 0x15

	uint32_t BaudRateBPS = CDCInterfaceInfo->State.LineEncoding.BaudRateBPS;
    15bc:	ee 88       	ldd	r14, Y+22	; 0x16
    15be:	ff 88       	ldd	r15, Y+23	; 0x17
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	c8 16       	cp	r12, r24
	uint8_t CharFormat;
	uint8_t DataBits;
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
    15c4:	d1 04       	cpc	r13, r1
    15c6:	e1 04       	cpc	r14, r1
    15c8:	f1 04       	cpc	r15, r1
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <EVENT_CDC_Device_LineEncodingChanged+0x34>
    15cc:	98 8d       	ldd	r25, Y+24	; 0x18
    15ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
		DataBits = 8;
		ParityType = CDC_PARITY_None;
	}
	else{
		// use the Baud rate config from the USB interface
		CharFormat = CDCInterfaceInfo->State.LineEncoding.CharFormat;
    15d0:	e9 8d       	ldd	r30, Y+25	; 0x19
		DataBits = CDCInterfaceInfo->State.LineEncoding.DataBits;
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <EVENT_CDC_Device_LineEncodingChanged+0x46>
		ParityType = CDCInterfaceInfo->State.LineEncoding.ParityType;
    15d4:	e0 e0       	ldi	r30, 0x00	; 0
    15d6:	88 e0       	ldi	r24, 0x08	; 8
	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
		DataBits = 8;
		ParityType = CDC_PARITY_None;
    15d8:	90 e0       	ldi	r25, 0x00	; 0

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
		DataBits = 8;
    15da:	c1 2c       	mov	r12, r1
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
		CharFormat = CDC_LINEENCODING_OneStopBit;
    15dc:	32 ec       	ldi	r19, 0xC2	; 194
	uint8_t DataBits;
	uint8_t ParityType;

	// configure Serial with HID baud to work after ISP reprogramming
	if (BaudRateBPS == AVRISP_BAUD || BaudRateBPS == 0){
		BaudRateBPS = 115200;
    15de:	d3 2e       	mov	r13, r19
    15e0:	ee 24       	eor	r14, r14
    15e2:	e3 94       	inc	r14
    15e4:	f1 2c       	mov	r15, r1
    15e6:	e1 50       	subi	r30, 0x01	; 1
    15e8:	e2 30       	cpi	r30, 0x02	; 2
    15ea:	28 f4       	brcc	.+10     	; 0x15f6 <EVENT_CDC_Device_LineEncodingChanged+0x56>
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	e4 5c       	subi	r30, 0xC4	; 196
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	c0 81       	ld	r28, Z
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <EVENT_CDC_Device_LineEncodingChanged+0x58>
    15f6:	c0 e0       	ldi	r28, 0x00	; 0
    15f8:	92 30       	cpi	r25, 0x02	; 2
    15fa:	09 f4       	brne	.+2      	; 0x15fe <EVENT_CDC_Device_LineEncodingChanged+0x5e>
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CharFormat == CDC_LINEENCODING_TwoStopBits)
    15fc:	c8 60       	ori	r28, 0x08	; 8
    15fe:	87 30       	cpi	r24, 0x07	; 7
		ConfigMask |= (1 << USBS1);
    1600:	31 f0       	breq	.+12     	; 0x160e <EVENT_CDC_Device_LineEncodingChanged+0x6e>

	switch (DataBits)
    1602:	88 30       	cpi	r24, 0x08	; 8
    1604:	31 f0       	breq	.+12     	; 0x1612 <EVENT_CDC_Device_LineEncodingChanged+0x72>
    1606:	86 30       	cpi	r24, 0x06	; 6
    1608:	29 f4       	brne	.+10     	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x74>
    160a:	c2 60       	ori	r28, 0x02	; 2
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x74>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    160e:	c4 60       	ori	r28, 0x04	; 4
		break;
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <EVENT_CDC_Device_LineEncodingChanged+0x74>
	case 7:
		ConfigMask |= (1 << UCSZ11);
    1612:	c6 60       	ori	r28, 0x06	; 6
		break;
    1614:	5b 9a       	sbi	0x0b, 3	; 11
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    1616:	10 92 c9 00 	sts	0x00C9, r1
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
	UCSR1B = 0;
    161a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
    161e:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
    1622:	c1 14       	cp	r12, r1
    1624:	81 ee       	ldi	r24, 0xE1	; 225

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (BaudRateBPS == 57600)
    1626:	d8 06       	cpc	r13, r24
    1628:	e1 04       	cpc	r14, r1
    162a:	f1 04       	cpc	r15, r1
    162c:	89 f0       	breq	.+34     	; 0x1650 <EVENT_CDC_Device_LineEncodingChanged+0xb0>
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
		? SERIAL_UBBRVAL(BaudRateBPS)
		: SERIAL_2X_UBBRVAL(BaudRateBPS);
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	60 58       	subi	r22, 0x80	; 128
    163c:	7b 47       	sbci	r23, 0x7B	; 123
    163e:	81 4e       	sbci	r24, 0xE1	; 225
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	a7 01       	movw	r20, r14
    1644:	96 01       	movw	r18, r12
    1646:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodsi4>
    164a:	21 50       	subi	r18, 0x01	; 1
    164c:	31 09       	sbc	r19, r1
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (BaudRateBPS == 57600)
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <EVENT_CDC_Device_LineEncodingChanged+0xb4>
    1650:	20 e1       	ldi	r18, 0x10	; 16
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	30 93 cd 00 	sts	0x00CD, r19
    1658:	20 93 cc 00 	sts	0x00CC, r18
    165c:	c0 93 ca 00 	sts	0x00CA, r28
		? SERIAL_UBBRVAL(BaudRateBPS)
		: SERIAL_2X_UBBRVAL(BaudRateBPS);

	UCSR1C = ConfigMask;
    1660:	c1 14       	cp	r12, r1
    1662:	81 ee       	ldi	r24, 0xE1	; 225
	UCSR1A = (BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    1664:	d8 06       	cpc	r13, r24
    1666:	e1 04       	cpc	r14, r1
    1668:	f1 04       	cpc	r15, r1
    166a:	11 f4       	brne	.+4      	; 0x1670 <EVENT_CDC_Device_LineEncodingChanged+0xd0>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <EVENT_CDC_Device_LineEncodingChanged+0xd2>
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	80 93 c8 00 	sts	0x00C8, r24
    1676:	88 e9       	ldi	r24, 0x98	; 152
    1678:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    167c:	5b 98       	cbi	0x0b, 3	; 11
    167e:	df 91       	pop	r29
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
    1680:	cf 91       	pop	r28
}
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	08 95       	ret

0000168c <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
	// clear all pending HID reports
	clearHIDReports();
    1692:	93 d9       	rcall	.-3290   	; 0x9ba <clearHIDReports>
    1694:	1e 9b       	sbis	0x03, 6	; 3

	bool CurrentDTRState;

	// autoreset disabled?
	if (!(AVR_NO_AUTORESET_LINE_PIN & AVR_NO_AUTORESET_LINE_MASK))
    1696:	03 c0       	rjmp	.+6      	; 0x169e <EVENT_CDC_Device_ControLineStateChanged+0x12>
    1698:	88 89       	ldd	r24, Y+16	; 0x10
		CurrentDTRState = true;
	else
	CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    169a:	80 ff       	sbrs	r24, 0

	if (CurrentDTRState)
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <EVENT_CDC_Device_ControLineStateChanged+0x16>
    169e:	5f 98       	cbi	0x0b, 7	; 11
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <EVENT_CDC_Device_ControLineStateChanged+0x22>
    16a2:	5f 9a       	sbi	0x0b, 7	; 11
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    16a4:	10 92 ca 01 	sts	0x01CA, r1

		// reset LEDs
		ram.PulseMSRemaining.whole = 0;
    16a8:	8b b1       	in	r24, 0x0b	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    16aa:	80 63       	ori	r24, 0x30	; 48
    16ac:	8b b9       	out	0x0b, r24	; 11
    16ae:	df 91       	pop	r29
		LEDs_SetAllLEDs(LEDS_NO_LEDS);
	}
}
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	7c 01       	movw	r14, r24
    16c8:	8b 01       	movw	r16, r22
    16ca:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16cc:	d7 d1       	rcall	.+942    	; 0x1a7c <Endpoint_WaitUntilReady>
    16ce:	b8 2e       	mov	r11, r24
    16d0:	81 11       	cpse	r24, r1
    16d2:	32 c0       	rjmp	.+100    	; 0x1738 <Endpoint_Write_Stream_LE+0x84>
    16d4:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <Endpoint_Write_Stream_LE+0x30>
    16d8:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
    16da:	39 81       	ldd	r19, Y+1	; 0x01
    16dc:	02 1b       	sub	r16, r18
    16de:	13 0b       	sbc	r17, r19
    16e0:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16e2:	f3 1e       	adc	r15, r19
    16e4:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16e6:	d1 2c       	mov	r13, r1
    16e8:	22 c0       	rjmp	.+68     	; 0x172e <Endpoint_Write_Stream_LE+0x7a>
    16ea:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16ee:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <Endpoint_Write_Stream_LE+0x66>
    16f2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16f6:	8e 77       	andi	r24, 0x7E	; 126
    16f8:	80 93 e8 00 	sts	0x00E8, r24
    16fc:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    16fe:	49 f0       	breq	.+18     	; 0x1712 <Endpoint_Write_Stream_LE+0x5e>
    1700:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1702:	99 81       	ldd	r25, Y+1	; 0x01
    1704:	8c 0d       	add	r24, r12
    1706:	9d 1d       	adc	r25, r13
    1708:	99 83       	std	Y+1, r25	; 0x01
    170a:	88 83       	st	Y, r24
    170c:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    170e:	b2 2e       	mov	r11, r18
    1710:	13 c0       	rjmp	.+38     	; 0x1738 <Endpoint_Write_Stream_LE+0x84>
    1712:	b4 d1       	rcall	.+872    	; 0x1a7c <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1714:	88 23       	and	r24, r24
    1716:	59 f0       	breq	.+22     	; 0x172e <Endpoint_Write_Stream_LE+0x7a>
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <Endpoint_Write_Stream_LE+0x82>
    171a:	f7 01       	movw	r30, r14
    171c:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    171e:	7f 01       	movw	r14, r30
    1720:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1724:	01 50       	subi	r16, 0x01	; 1
    1726:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1728:	ff ef       	ldi	r31, 0xFF	; 255
    172a:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    172c:	df 0a       	sbc	r13, r31
    172e:	01 15       	cp	r16, r1
    1730:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1732:	d9 f6       	brne	.-74     	; 0x16ea <Endpoint_Write_Stream_LE+0x36>
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <Endpoint_Write_Stream_LE+0x84>
    1736:	b8 2e       	mov	r11, r24
    1738:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    173a:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	08 95       	ret

0000174e <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    174e:	20 91 f4 01 	lds	r18, 0x01F4
    1752:	30 91 f5 01 	lds	r19, 0x01F5
    1756:	26 17       	cp	r18, r22
    1758:	37 07       	cpc	r19, r23
    175a:	48 f0       	brcs	.+18     	; 0x176e <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    175c:	61 15       	cp	r22, r1
    175e:	71 05       	cpc	r23, r1
    1760:	39 f4       	brne	.+14     	; 0x1770 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1762:	20 91 e8 00 	lds	r18, 0x00E8
    1766:	2e 77       	andi	r18, 0x7E	; 126
    1768:	20 93 e8 00 	sts	0x00E8, r18
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    176e:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1770:	9c 01       	movw	r18, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	34 c0       	rjmp	.+104    	; 0x17de <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1776:	90 91 ed 01 	lds	r25, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    177a:	99 23       	and	r25, r25
    177c:	09 f4       	brne	.+2      	; 0x1780 <Endpoint_Write_Control_Stream_LE+0x32>
    177e:	43 c0       	rjmp	.+134    	; 0x1806 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1780:	95 30       	cpi	r25, 0x05	; 5
    1782:	09 f4       	brne	.+2      	; 0x1786 <Endpoint_Write_Control_Stream_LE+0x38>
    1784:	42 c0       	rjmp	.+132    	; 0x180a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1786:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    178a:	93 fd       	sbrc	r25, 3
    178c:	3a c0       	rjmp	.+116    	; 0x1802 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    178e:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1792:	92 fd       	sbrc	r25, 2
    1794:	30 c0       	rjmp	.+96     	; 0x17f6 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1796:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    179a:	90 ff       	sbrs	r25, 0
    179c:	20 c0       	rjmp	.+64     	; 0x17de <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    179e:	80 91 f2 00 	lds	r24, 0x00F2
    17a2:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17a4:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17a6:	82 1b       	sub	r24, r18
    17a8:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17ac:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ae:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    17b2:	61 50       	subi	r22, 0x01	; 1
    17b4:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    17b6:	9f 01       	movw	r18, r30
    17b8:	28 0f       	add	r18, r24
    17ba:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <Endpoint_Write_Control_Stream_LE+0x7a>
    17c2:	28 30       	cpi	r18, 0x08	; 8
    17c4:	31 05       	cpc	r19, r1
    17c6:	90 f3       	brcs	.-28     	; 0x17ac <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	28 30       	cpi	r18, 0x08	; 8
    17cc:	31 05       	cpc	r19, r1
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0x84>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17d2:	90 91 e8 00 	lds	r25, 0x00E8
    17d6:	9e 77       	andi	r25, 0x7E	; 126
    17d8:	90 93 e8 00 	sts	0x00E8, r25
    17dc:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    17de:	61 15       	cp	r22, r1
    17e0:	71 05       	cpc	r23, r1
    17e2:	49 f6       	brne	.-110    	; 0x1776 <Endpoint_Write_Control_Stream_LE+0x28>
    17e4:	81 11       	cpse	r24, r1
    17e6:	c7 cf       	rjmp	.-114    	; 0x1776 <Endpoint_Write_Control_Stream_LE+0x28>
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17ea:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17ee:	88 23       	and	r24, r24
    17f0:	51 f0       	breq	.+20     	; 0x1806 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17f2:	85 30       	cpi	r24, 0x05	; 5
    17f4:	51 f0       	breq	.+20     	; 0x180a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    17fa:	82 ff       	sbrs	r24, 2
    17fc:	f6 cf       	rjmp	.-20     	; 0x17ea <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    180a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    180c:	08 95       	ret

0000180e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    180e:	61 15       	cp	r22, r1
    1810:	71 05       	cpc	r23, r1
    1812:	29 f4       	brne	.+10     	; 0x181e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1814:	20 91 e8 00 	lds	r18, 0x00E8
    1818:	2b 77       	andi	r18, 0x7B	; 123
    181a:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    181e:	9c 01       	movw	r18, r24
    1820:	21 c0       	rjmp	.+66     	; 0x1864 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1822:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1826:	88 23       	and	r24, r24
    1828:	81 f1       	breq	.+96     	; 0x188a <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    182a:	85 30       	cpi	r24, 0x05	; 5
    182c:	41 f1       	breq	.+80     	; 0x187e <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    182e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1832:	83 fd       	sbrc	r24, 3
    1834:	26 c0       	rjmp	.+76     	; 0x1882 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1836:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    183a:	82 ff       	sbrs	r24, 2
    183c:	f2 cf       	rjmp	.-28     	; 0x1822 <Endpoint_Read_Control_Stream_LE+0x14>
    183e:	f9 01       	movw	r30, r18
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1842:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1846:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1848:	9f 01       	movw	r18, r30
				Length--;
    184a:	61 50       	subi	r22, 0x01	; 1
    184c:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    184e:	29 f0       	breq	.+10     	; 0x185a <Endpoint_Read_Control_Stream_LE+0x4c>
    1850:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1852:	80 91 f2 00 	lds	r24, 0x00F2
    1856:	81 11       	cpse	r24, r1
    1858:	f4 cf       	rjmp	.-24     	; 0x1842 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    185a:	80 91 e8 00 	lds	r24, 0x00E8
    185e:	8b 77       	andi	r24, 0x7B	; 123
    1860:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1864:	61 15       	cp	r22, r1
    1866:	71 05       	cpc	r23, r1
    1868:	e1 f6       	brne	.-72     	; 0x1822 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    186a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    186e:	80 fd       	sbrc	r24, 0
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <Endpoint_Read_Control_Stream_LE+0x78>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1872:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1876:	88 23       	and	r24, r24
    1878:	41 f0       	breq	.+16     	; 0x188a <Endpoint_Read_Control_Stream_LE+0x7c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    187a:	85 30       	cpi	r24, 0x05	; 5
    187c:	b1 f7       	brne	.-20     	; 0x186a <Endpoint_Read_Control_Stream_LE+0x5c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    188a:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    188c:	08 95       	ret

0000188e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    188e:	20 91 f4 01 	lds	r18, 0x01F4
    1892:	30 91 f5 01 	lds	r19, 0x01F5
    1896:	26 17       	cp	r18, r22
    1898:	37 07       	cpc	r19, r23
    189a:	48 f0       	brcs	.+18     	; 0x18ae <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    189c:	61 15       	cp	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	39 f4       	brne	.+14     	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18a2:	20 91 e8 00 	lds	r18, 0x00E8
    18a6:	2e 77       	andi	r18, 0x7E	; 126
    18a8:	20 93 e8 00 	sts	0x00E8, r18
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ae:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18b0:	9c 01       	movw	r18, r24
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	35 c0       	rjmp	.+106    	; 0x1920 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18b6:	90 91 ed 01 	lds	r25, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ba:	99 23       	and	r25, r25
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <Endpoint_Write_Control_PStream_LE+0x32>
    18be:	44 c0       	rjmp	.+136    	; 0x1948 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18c0:	95 30       	cpi	r25, 0x05	; 5
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <Endpoint_Write_Control_PStream_LE+0x38>
    18c4:	43 c0       	rjmp	.+134    	; 0x194c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18c6:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ca:	93 fd       	sbrc	r25, 3
    18cc:	3b c0       	rjmp	.+118    	; 0x1944 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ce:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18d2:	92 fd       	sbrc	r25, 2
    18d4:	31 c0       	rjmp	.+98     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18d6:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18da:	90 ff       	sbrs	r25, 0
    18dc:	21 c0       	rjmp	.+66     	; 0x1920 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    18de:	80 91 f2 00 	lds	r24, 0x00F2
    18e2:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18e4:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    18e6:	82 1b       	sub	r24, r18
    18e8:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18ec:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18ee:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    18f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    18f4:	61 50       	subi	r22, 0x01	; 1
    18f6:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    18f8:	9c 01       	movw	r18, r24
    18fa:	2e 0f       	add	r18, r30
    18fc:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18fe:	61 15       	cp	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	19 f0       	breq	.+6      	; 0x190a <Endpoint_Write_Control_PStream_LE+0x7c>
    1904:	28 30       	cpi	r18, 0x08	; 8
    1906:	31 05       	cpc	r19, r1
    1908:	88 f3       	brcs	.-30     	; 0x18ec <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	28 30       	cpi	r18, 0x08	; 8
    190e:	31 05       	cpc	r19, r1
    1910:	09 f0       	breq	.+2      	; 0x1914 <Endpoint_Write_Control_PStream_LE+0x86>
    1912:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1914:	90 91 e8 00 	lds	r25, 0x00E8
    1918:	9e 77       	andi	r25, 0x7E	; 126
    191a:	90 93 e8 00 	sts	0x00E8, r25
    191e:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1920:	61 15       	cp	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	41 f6       	brne	.-112    	; 0x18b6 <Endpoint_Write_Control_PStream_LE+0x28>
    1926:	81 11       	cpse	r24, r1
    1928:	c6 cf       	rjmp	.-116    	; 0x18b6 <Endpoint_Write_Control_PStream_LE+0x28>
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    192c:	80 91 ed 01 	lds	r24, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1930:	88 23       	and	r24, r24
    1932:	51 f0       	breq	.+20     	; 0x1948 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1934:	85 30       	cpi	r24, 0x05	; 5
    1936:	51 f0       	breq	.+20     	; 0x194c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1938:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    193c:	82 ff       	sbrs	r24, 2
    193e:	f6 cf       	rjmp	.-20     	; 0x192c <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    194c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    194e:	08 95       	ret

00001950 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1950:	98 2f       	mov	r25, r24
    1952:	2c c0       	rjmp	.+88     	; 0x19ac <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1954:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1958:	98 17       	cp	r25, r24
    195a:	39 f0       	breq	.+14     	; 0x196a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    195c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1960:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1964:	50 91 f0 00 	lds	r21, 0x00F0
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    196a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    196c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    196e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1970:	21 fd       	sbrc	r18, 1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1974:	9f 5f       	subi	r25, 0xFF	; 255
    1976:	1a c0       	rjmp	.+52     	; 0x19ac <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1978:	30 91 eb 00 	lds	r19, 0x00EB
    197c:	3e 7f       	andi	r19, 0xFE	; 254
    197e:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1982:	30 91 ed 00 	lds	r19, 0x00ED
    1986:	3d 7f       	andi	r19, 0xFD	; 253
    1988:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    198c:	30 91 eb 00 	lds	r19, 0x00EB
    1990:	31 60       	ori	r19, 0x01	; 1
    1992:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1996:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    199a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    199e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    19a2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    19a6:	27 fd       	sbrc	r18, 7
    19a8:	e5 cf       	rjmp	.-54     	; 0x1974 <Endpoint_ConfigureEndpoint_Prv+0x24>
    19aa:	07 c0       	rjmp	.+14     	; 0x19ba <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19ac:	95 30       	cpi	r25, 0x05	; 5
    19ae:	90 f2       	brcs	.-92     	; 0x1954 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19b0:	8f 70       	andi	r24, 0x0F	; 15
    19b2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    19bc:	08 95       	ret

000019be <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	06 2f       	mov	r16, r22
    19c8:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	2e c0       	rjmp	.+92     	; 0x1a2a <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
    19ce:	98 81       	ld	r25, Y
    19d0:	91 11       	cpse	r25, r1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    19d4:	1f 5f       	subi	r17, 0xFF	; 255
    19d6:	25 96       	adiw	r28, 0x05	; 5
    19d8:	28 c0       	rjmp	.+80     	; 0x1a2a <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    19da:	2c 81       	ldd	r18, Y+4	; 0x04
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    19e2:	89 2f       	mov	r24, r25
    19e4:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    19e6:	85 30       	cpi	r24, 0x05	; 5
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	21 c0       	rjmp	.+66     	; 0x1a30 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	10 f0       	brcs	.+4      	; 0x19f6 <Endpoint_ConfigureEndpointTable+0x38>
    19f2:	56 e0       	ldi	r21, 0x06	; 6
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <Endpoint_ConfigureEndpointTable+0x3a>
    19f6:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    19f8:	28 e0       	ldi	r18, 0x08	; 8
    19fa:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a00:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a06:	2e 17       	cp	r18, r30
    1a08:	3f 07       	cpc	r19, r31
    1a0a:	d0 f3       	brcs	.-12     	; 0x1a00 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1a0c:	42 95       	swap	r20
    1a0e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a10:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1a12:	99 1f       	adc	r25, r25
    1a14:	99 27       	eor	r25, r25
    1a16:	99 1f       	adc	r25, r25
    1a18:	62 95       	swap	r22
    1a1a:	66 0f       	add	r22, r22
    1a1c:	66 0f       	add	r22, r22
    1a1e:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a20:	69 2b       	or	r22, r25
    1a22:	96 df       	rcall	.-212    	; 0x1950 <Endpoint_ConfigureEndpoint_Prv>
    1a24:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a26:	d6 cf       	rjmp	.-84     	; 0x19d4 <Endpoint_ConfigureEndpointTable+0x16>
    1a28:	e0 cf       	rjmp	.-64     	; 0x19ea <Endpoint_ConfigureEndpointTable+0x2c>
    1a2a:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1a2c:	d0 cf       	rjmp	.-96     	; 0x19ce <Endpoint_ConfigureEndpointTable+0x10>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1a30:	df 91       	pop	r29
}
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
    1a3a:	80 91 ee 01 	lds	r24, 0x01EE
    1a3e:	87 fd       	sbrc	r24, 7
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a42:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a46:	80 ff       	sbrs	r24, 0
    1a48:	0e c0       	rjmp	.+28     	; 0x1a66 <Endpoint_ClearStatusStage+0x2c>
    1a4a:	12 c0       	rjmp	.+36     	; 0x1a70 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a50:	82 fd       	sbrc	r24, 2
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a54:	80 91 ed 01 	lds	r24, 0x01ED
    1a58:	81 11       	cpse	r24, r1
    1a5a:	f8 cf       	rjmp	.-16     	; 0x1a4c <Endpoint_ClearStatusStage+0x12>
    1a5c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a5e:	80 91 e8 00 	lds	r24, 0x00E8
    1a62:	8b 77       	andi	r24, 0x7B	; 123
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a66:	80 91 ed 01 	lds	r24, 0x01ED
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	ea cf       	rjmp	.-44     	; 0x1a42 <Endpoint_ClearStatusStage+0x8>
    1a6e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a70:	80 91 e8 00 	lds	r24, 0x00E8
    1a74:	8e 77       	andi	r24, 0x7E	; 126
    1a76:	80 93 e8 00 	sts	0x00E8, r24
    1a7a:	08 95       	ret

00001a7c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a7c:	80 91 e4 00 	lds	r24, 0x00E4
    1a80:	90 91 e5 00 	lds	r25, 0x00E5
    1a84:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a86:	20 91 ec 00 	lds	r18, 0x00EC
    1a8a:	20 fd       	sbrc	r18, 0
    1a8c:	1f c0       	rjmp	.+62     	; 0x1acc <Endpoint_WaitUntilReady+0x50>
    1a8e:	23 c0       	rjmp	.+70     	; 0x1ad6 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a90:	20 91 ed 01 	lds	r18, 0x01ED

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a94:	22 23       	and	r18, r18
    1a96:	91 f0       	breq	.+36     	; 0x1abc <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a98:	25 30       	cpi	r18, 0x05	; 5
    1a9a:	91 f0       	breq	.+36     	; 0x1ac0 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a9c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1aa0:	25 fd       	sbrc	r18, 5
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <Endpoint_WaitUntilReady+0x48>
    1aa4:	20 91 e4 00 	lds	r18, 0x00E4
    1aa8:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1aac:	28 17       	cp	r18, r24
    1aae:	39 07       	cpc	r19, r25
    1ab0:	51 f3       	breq	.-44     	; 0x1a86 <Endpoint_WaitUntilReady+0xa>
    1ab2:	41 50       	subi	r20, 0x01	; 1
    1ab4:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ab6:	39 f7       	brne	.-50     	; 0x1a86 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1acc:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1ad0:	20 ff       	sbrs	r18, 0
    1ad2:	de cf       	rjmp	.-68     	; 0x1a90 <Endpoint_WaitUntilReady+0x14>
    1ad4:	f9 cf       	rjmp	.-14     	; 0x1ac8 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad6:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ada:	22 ff       	sbrs	r18, 2
    1adc:	d9 cf       	rjmp	.-78     	; 0x1a90 <Endpoint_WaitUntilReady+0x14>
    1ade:	f4 cf       	rjmp	.-24     	; 0x1ac8 <Endpoint_WaitUntilReady+0x4c>

00001ae0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1ae0:	41 d0       	rcall	.+130    	; 0x1b64 <USB_INT_DisableAllInterrupts>
    1ae2:	43 d0       	rcall	.+134    	; 0x1b6a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ae4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ae8:	8f 77       	andi	r24, 0x7F	; 127
    1aea:	80 93 d8 00 	sts	0x00D8, r24
    1aee:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	80 93 d8 00 	sts	0x00D8, r24
    1af8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	80 93 d8 00 	sts	0x00D8, r24
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b06:	86 e0       	ldi	r24, 0x06	; 6
    1b08:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b0a:	09 b4       	in	r0, 0x29	; 41
    1b0c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b0e:	fd cf       	rjmp	.-6      	; 0x1b0a <USB_ResetInterface+0x2a>
    1b10:	10 92 ed 01 	sts	0x01ED, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b14:	10 92 e9 01 	sts	0x01E9, r1
	USB_Device_ConfigurationNumber  = 0;
    1b18:	10 92 eb 01 	sts	0x01EB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b1c:	10 92 ea 01 	sts	0x01EA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b20:	42 e0       	ldi	r20, 0x02	; 2
    1b22:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	14 df       	rcall	.-472    	; 0x1950 <Endpoint_ConfigureEndpoint_Prv>
    1b28:	80 91 e1 00 	lds	r24, 0x00E1
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b2e:	80 93 e1 00 	sts	0x00E1, r24
    1b32:	80 91 e2 00 	lds	r24, 0x00E2
    1b36:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b38:	80 93 e2 00 	sts	0x00E2, r24
    1b3c:	80 91 e2 00 	lds	r24, 0x00E2
    1b40:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b42:	80 93 e2 00 	sts	0x00E2, r24
    1b46:	80 91 e0 00 	lds	r24, 0x00E0
    1b4a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b4c:	80 93 e0 00 	sts	0x00E0, r24
    1b50:	08 95       	ret

00001b52 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1b52:	e3 e6       	ldi	r30, 0x63	; 99
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8e 7f       	andi	r24, 0xFE	; 254
    1b5a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 ec 01 	sts	0x01EC, r24

	USB_ResetInterface();
    1b62:	be cf       	rjmp	.-132    	; 0x1ae0 <USB_ResetInterface>

00001b64 <USB_INT_DisableAllInterrupts>:
    1b64:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b68:	08 95       	ret

00001b6a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b6a:	10 92 e1 00 	sts	0x00E1, r1
    1b6e:	08 95       	ret

00001b70 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b92:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b96:	82 ff       	sbrs	r24, 2
    1b98:	0b c0       	rjmp	.+22     	; 0x1bb0 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b9a:	80 91 e2 00 	lds	r24, 0x00E2
    1b9e:	82 ff       	sbrs	r24, 2
    1ba0:	07 c0       	rjmp	.+14     	; 0x1bb0 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ba2:	80 91 e1 00 	lds	r24, 0x00E1
    1ba6:	8b 7f       	andi	r24, 0xFB	; 251
    1ba8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1bac:	0e 94 cf 03 	call	0x79e	; 0x79e <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1bb0:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1bb4:	80 ff       	sbrs	r24, 0
    1bb6:	18 c0       	rjmp	.+48     	; 0x1be8 <__vector_11+0x78>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1bb8:	80 91 e2 00 	lds	r24, 0x00E2
    1bbc:	80 ff       	sbrs	r24, 0
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <__vector_11+0x78>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1bc0:	80 91 e2 00 	lds	r24, 0x00E2
    1bc4:	8e 7f       	andi	r24, 0xFE	; 254
    1bc6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1bca:	80 91 e2 00 	lds	r24, 0x00E2
    1bce:	80 61       	ori	r24, 0x10	; 16
    1bd0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1bd4:	80 91 d8 00 	lds	r24, 0x00D8
    1bd8:	80 62       	ori	r24, 0x20	; 32
    1bda:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bde:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1be0:	10 92 ed 01 	sts	0x01ED, r1
		EVENT_USB_Device_Disconnect();
    1be4:	0e 94 77 03 	call	0x6ee	; 0x6ee <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1be8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1bec:	84 ff       	sbrs	r24, 4
    1bee:	30 c0       	rjmp	.+96     	; 0x1c50 <__vector_11+0xe0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1bf0:	80 91 e2 00 	lds	r24, 0x00E2
    1bf4:	84 ff       	sbrs	r24, 4
    1bf6:	2c c0       	rjmp	.+88     	; 0x1c50 <__vector_11+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bf8:	84 e0       	ldi	r24, 0x04	; 4
    1bfa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bfc:	86 e0       	ldi	r24, 0x06	; 6
    1bfe:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c00:	09 b4       	in	r0, 0x29	; 41
    1c02:	00 fe       	sbrs	r0, 0
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <__vector_11+0x90>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c06:	80 91 d8 00 	lds	r24, 0x00D8
    1c0a:	8f 7d       	andi	r24, 0xDF	; 223
    1c0c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c10:	80 91 e1 00 	lds	r24, 0x00E1
    1c14:	8f 7e       	andi	r24, 0xEF	; 239
    1c16:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c1a:	80 91 e2 00 	lds	r24, 0x00E2
    1c1e:	8f 7e       	andi	r24, 0xEF	; 239
    1c20:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c24:	80 91 e2 00 	lds	r24, 0x00E2
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c2e:	80 91 e9 01 	lds	r24, 0x01E9
    1c32:	88 23       	and	r24, r24
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	07 c0       	rjmp	.+14     	; 0x1c48 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c3a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c3e:	87 ff       	sbrs	r24, 7
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <__vector_11+0xd6>
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <__vector_11+0xd8>
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 ed 01 	sts	0x01ED, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1c4c:	0e 94 76 03 	call	0x6ec	; 0x6ec <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c50:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c54:	83 ff       	sbrs	r24, 3
    1c56:	27 c0       	rjmp	.+78     	; 0x1ca6 <__vector_11+0x136>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c58:	80 91 e2 00 	lds	r24, 0x00E2
    1c5c:	83 ff       	sbrs	r24, 3
    1c5e:	23 c0       	rjmp	.+70     	; 0x1ca6 <__vector_11+0x136>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c60:	80 91 e1 00 	lds	r24, 0x00E1
    1c64:	87 7f       	andi	r24, 0xF7	; 247
    1c66:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	80 93 ed 01 	sts	0x01ED, r24
		USB_Device_ConfigurationNumber = 0;
    1c70:	10 92 e9 01 	sts	0x01E9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c74:	80 91 e1 00 	lds	r24, 0x00E1
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
    1c7a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c7e:	80 91 e2 00 	lds	r24, 0x00E2
    1c82:	8e 7f       	andi	r24, 0xFE	; 254
    1c84:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c88:	80 91 e2 00 	lds	r24, 0x00E2
    1c8c:	80 61       	ori	r24, 0x10	; 16
    1c8e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	5b de       	rcall	.-842    	; 0x1950 <Endpoint_ConfigureEndpoint_Prv>
    1c9a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c9e:	88 60       	ori	r24, 0x08	; 8
    1ca0:	80 93 f0 00 	sts	0x00F0, r24
    1ca4:	b8 d1       	rcall	.+880    	; 0x2016 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ca6:	ff 91       	pop	r31
    1ca8:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	cf 93       	push	r28
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cec:	80 91 e9 00 	lds	r24, 0x00E9
    1cf0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cf2:	90 91 ec 00 	lds	r25, 0x00EC
    1cf6:	90 ff       	sbrs	r25, 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <__vector_12+0x36>
    1cfa:	90 e8       	ldi	r25, 0x80	; 128
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <__vector_12+0x38>
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d00:	c9 2f       	mov	r28, r25
    1d02:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d04:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d08:	80 91 f0 00 	lds	r24, 0x00F0
    1d0c:	87 7f       	andi	r24, 0xF7	; 247
    1d0e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1d12:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1d14:	1c d0       	rcall	.+56     	; 0x1d4e <USB_Device_ProcessControlRequest>
    1d16:	10 92 e9 00 	sts	0x00E9, r1
    1d1a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d1e:	88 60       	ori	r24, 0x08	; 8
    1d20:	80 93 f0 00 	sts	0x00F0, r24
    1d24:	cf 70       	andi	r28, 0x0F	; 15
    1d26:	c0 93 e9 00 	sts	0x00E9, r28
    1d2a:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1d2c:	ef 91       	pop	r30
    1d2e:	cf 91       	pop	r28
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	7f 91       	pop	r23
    1d3a:	6f 91       	pop	r22
    1d3c:	5f 91       	pop	r21
    1d3e:	4f 91       	pop	r20
    1d40:	3f 91       	pop	r19
    1d42:	2f 91       	pop	r18
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	0f 90       	pop	r0
    1d4a:	1f 90       	pop	r1
    1d4c:	18 95       	reti

00001d4e <USB_Device_ProcessControlRequest>:
    1d4e:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	ac 97       	sbiw	r28, 0x2c	; 44
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1d64:	ee ee       	ldi	r30, 0xEE	; 238
    1d66:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d68:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d6c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d6e:	21 e0       	ldi	r18, 0x01	; 1
    1d70:	e6 3f       	cpi	r30, 0xF6	; 246
    1d72:	f2 07       	cpc	r31, r18
    1d74:	c9 f7       	brne	.-14     	; 0x1d68 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d76:	0e 94 c7 03 	call	0x78e	; 0x78e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d7a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1d7e:	83 ff       	sbrs	r24, 3
    1d80:	32 c1       	rjmp	.+612    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d82:	80 91 ee 01 	lds	r24, 0x01EE

		switch (USB_ControlRequest.bRequest)
    1d86:	90 91 ef 01 	lds	r25, 0x01EF
    1d8a:	95 30       	cpi	r25, 0x05	; 5
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <USB_Device_ProcessControlRequest+0x42>
    1d8e:	87 c0       	rjmp	.+270    	; 0x1e9e <USB_Device_ProcessControlRequest+0x150>
    1d90:	38 f4       	brcc	.+14     	; 0x1da0 <USB_Device_ProcessControlRequest+0x52>
    1d92:	91 30       	cpi	r25, 0x01	; 1
    1d94:	b1 f1       	breq	.+108    	; 0x1e02 <USB_Device_ProcessControlRequest+0xb4>
    1d96:	70 f0       	brcs	.+28     	; 0x1db4 <USB_Device_ProcessControlRequest+0x66>
    1d98:	93 30       	cpi	r25, 0x03	; 3
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <USB_Device_ProcessControlRequest+0x50>
    1d9c:	24 c1       	rjmp	.+584    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1d9e:	31 c0       	rjmp	.+98     	; 0x1e02 <USB_Device_ProcessControlRequest+0xb4>
    1da0:	98 30       	cpi	r25, 0x08	; 8
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <USB_Device_ProcessControlRequest+0x58>
    1da4:	f4 c0       	rjmp	.+488    	; 0x1f8e <USB_Device_ProcessControlRequest+0x240>
    1da6:	99 30       	cpi	r25, 0x09	; 9
    1da8:	09 f4       	brne	.+2      	; 0x1dac <USB_Device_ProcessControlRequest+0x5e>
    1daa:	00 c1       	rjmp	.+512    	; 0x1fac <USB_Device_ProcessControlRequest+0x25e>
    1dac:	96 30       	cpi	r25, 0x06	; 6
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <USB_Device_ProcessControlRequest+0x64>
    1db0:	1a c1       	rjmp	.+564    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1db2:	9b c0       	rjmp	.+310    	; 0x1eea <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1db4:	80 38       	cpi	r24, 0x80	; 128
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <USB_Device_ProcessControlRequest+0x72>
    1db8:	82 38       	cpi	r24, 0x82	; 130
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <USB_Device_ProcessControlRequest+0x70>
    1dbc:	14 c1       	rjmp	.+552    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1dc0:	80 91 ea 01 	lds	r24, 0x01EA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1dc4:	90 91 eb 01 	lds	r25, 0x01EB
    1dc8:	99 23       	and	r25, r25
    1dca:	89 f0       	breq	.+34     	; 0x1dee <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1dcc:	82 60       	ori	r24, 0x02	; 2
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1dd0:	80 91 f2 01 	lds	r24, 0x01F2
    1dd4:	90 91 f3 01 	lds	r25, 0x01F3
    1dd8:	8f 70       	andi	r24, 0x0F	; 15
    1dda:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ddc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1de0:	80 91 eb 00 	lds	r24, 0x00EB
    1de4:	85 fb       	bst	r24, 5
    1de6:	88 27       	eor	r24, r24
    1de8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dee:	90 91 e8 00 	lds	r25, 0x00E8
    1df2:	97 7f       	andi	r25, 0xF7	; 247
    1df4:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1df8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1dfc:	10 92 f1 00 	sts	0x00F1, r1
    1e00:	d1 c0       	rjmp	.+418    	; 0x1fa4 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e02:	88 23       	and	r24, r24
    1e04:	19 f0       	breq	.+6      	; 0x1e0c <USB_Device_ProcessControlRequest+0xbe>
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <USB_Device_ProcessControlRequest+0xbe>
    1e0a:	ed c0       	rjmp	.+474    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e0c:	8f 71       	andi	r24, 0x1F	; 31
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <USB_Device_ProcessControlRequest+0xca>
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <USB_Device_ProcessControlRequest+0xc8>
    1e14:	e8 c0       	rjmp	.+464    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1e16:	0b c0       	rjmp	.+22     	; 0x1e2e <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e18:	80 91 f0 01 	lds	r24, 0x01F0
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <USB_Device_ProcessControlRequest+0xd4>
    1e20:	e2 c0       	rjmp	.+452    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e22:	93 30       	cpi	r25, 0x03	; 3
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <USB_Device_ProcessControlRequest+0xda>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	80 93 eb 01 	sts	0x01EB, r24
    1e2c:	2f c0       	rjmp	.+94     	; 0x1e8c <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e2e:	80 91 f0 01 	lds	r24, 0x01F0
    1e32:	81 11       	cpse	r24, r1
    1e34:	2b c0       	rjmp	.+86     	; 0x1e8c <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e36:	80 91 f2 01 	lds	r24, 0x01F2
    1e3a:	90 91 f3 01 	lds	r25, 0x01F3
    1e3e:	8f 70       	andi	r24, 0x0F	; 15
    1e40:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <USB_Device_ProcessControlRequest+0xfa>
    1e46:	cf c0       	rjmp	.+414    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e48:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e4c:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e50:	20 ff       	sbrs	r18, 0
    1e52:	1c c0       	rjmp	.+56     	; 0x1e8c <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e54:	20 91 ef 01 	lds	r18, 0x01EF
    1e58:	23 30       	cpi	r18, 0x03	; 3
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e5c:	80 91 eb 00 	lds	r24, 0x00EB
    1e60:	80 62       	ori	r24, 0x20	; 32
    1e62:	12 c0       	rjmp	.+36     	; 0x1e88 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e64:	90 91 eb 00 	lds	r25, 0x00EB
    1e68:	90 61       	ori	r25, 0x10	; 16
    1e6a:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e6e:	21 e0       	ldi	r18, 0x01	; 1
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <USB_Device_ProcessControlRequest+0x128>
    1e74:	22 0f       	add	r18, r18
    1e76:	8a 95       	dec	r24
    1e78:	ea f7       	brpl	.-6      	; 0x1e74 <USB_Device_ProcessControlRequest+0x126>
    1e7a:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1e7e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e82:	80 91 eb 00 	lds	r24, 0x00EB
    1e86:	88 60       	ori	r24, 0x08	; 8
    1e88:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e8c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e90:	80 91 e8 00 	lds	r24, 0x00E8
    1e94:	87 7f       	andi	r24, 0xF7	; 247
    1e96:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e9a:	cf dd       	rcall	.-1122   	; 0x1a3a <Endpoint_ClearStatusStage>
    1e9c:	a4 c0       	rjmp	.+328    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1e9e:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ea0:	a2 c0       	rjmp	.+324    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1ea2:	80 91 f0 01 	lds	r24, 0x01F0
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ea6:	90 91 f1 01 	lds	r25, 0x01F1
    1eaa:	8f 77       	andi	r24, 0x7F	; 127
    1eac:	99 27       	eor	r25, r25
    1eae:	18 2f       	mov	r17, r24
    1eb0:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1eb4:	90 78       	andi	r25, 0x80	; 128
    1eb6:	98 2b       	or	r25, r24
    1eb8:	90 93 e3 00 	sts	0x00E3, r25
    1ebc:	80 91 e8 00 	lds	r24, 0x00E8
    1ec0:	87 7f       	andi	r24, 0xF7	; 247
    1ec2:	80 93 e8 00 	sts	0x00E8, r24
    1ec6:	b9 dd       	rcall	.-1166   	; 0x1a3a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ec8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ecc:	80 ff       	sbrs	r24, 0
    1ece:	fc cf       	rjmp	.-8      	; 0x1ec8 <USB_Device_ProcessControlRequest+0x17a>

	while (!(Endpoint_IsINReady()));
    1ed0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ed4:	80 68       	ori	r24, 0x80	; 128
    1ed6:	80 93 e3 00 	sts	0x00E3, r24
    1eda:	11 23       	and	r17, r17
    1edc:	11 f0       	breq	.+4      	; 0x1ee2 <USB_Device_ProcessControlRequest+0x194>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <USB_Device_ProcessControlRequest+0x196>
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	80 93 ed 01 	sts	0x01ED, r24
    1ee8:	7e c0       	rjmp	.+252    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1eea:	80 58       	subi	r24, 0x80	; 128
    1eec:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <USB_Device_ProcessControlRequest+0x1a4>
    1ef0:	7a c0       	rjmp	.+244    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1ef2:	80 91 f0 01 	lds	r24, 0x01F0
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ef6:	90 91 f1 01 	lds	r25, 0x01F1
    1efa:	8c 3d       	cpi	r24, 0xDC	; 220
    1efc:	23 e0       	ldi	r18, 0x03	; 3
    1efe:	92 07       	cpc	r25, r18
    1f00:	71 f5       	brne	.+92     	; 0x1f5e <USB_Device_ProcessControlRequest+0x210>
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f06:	8a e2       	ldi	r24, 0x2A	; 42
    1f08:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f0a:	4f b7       	in	r20, 0x3f	; 63
    1f0c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f0e:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f10:	13 96       	adiw	r26, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f16:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f18:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	50 93 57 00 	sts	0x0057, r21
    1f20:	e4 91       	lpm	r30, Z+
    1f22:	20 ff       	sbrs	r18, 0
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <USB_Device_ProcessControlRequest+0x1de>

					if (SerialCharNum & 0x01)
    1f26:	e2 95       	swap	r30
    1f28:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    1f2a:	3f 5f       	subi	r19, 0xFF	; 255
    1f2c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f2e:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	ea 30       	cpi	r30, 0x0A	; 10
    1f34:	10 f0       	brcs	.+4      	; 0x1f3a <USB_Device_ProcessControlRequest+0x1ec>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f36:	c7 96       	adiw	r24, 0x37	; 55
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <USB_Device_ProcessControlRequest+0x1ee>
    1f3a:	c0 96       	adiw	r24, 0x30	; 48
    1f3c:	8d 93       	st	X+, r24
    1f3e:	9d 93       	st	X+, r25
    1f40:	2f 5f       	subi	r18, 0xFF	; 255
    1f42:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f44:	49 f7       	brne	.-46     	; 0x1f18 <USB_Device_ProcessControlRequest+0x1ca>
    1f46:	4f bf       	out	0x3f, r20	; 63
    1f48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	80 93 e8 00 	sts	0x00E8, r24
    1f52:	6a e2       	ldi	r22, 0x2A	; 42
    1f54:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	f9 db       	rcall	.-2062   	; 0x174e <Endpoint_Write_Control_Stream_LE>
    1f5c:	12 c0       	rjmp	.+36     	; 0x1f82 <USB_Device_ProcessControlRequest+0x234>
    1f5e:	ae 01       	movw	r20, r28
    1f60:	45 5d       	subi	r20, 0xD5	; 213
    1f62:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f64:	60 91 f2 01 	lds	r22, 0x01F2
    1f68:	0e 94 db 03 	call	0x7b6	; 0x7b6 <CALLBACK_USB_GetDescriptor>
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	d9 f1       	breq	.+118    	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1f70:	20 91 e8 00 	lds	r18, 0x00E8
    1f74:	27 7f       	andi	r18, 0xF7	; 247
    1f76:	20 93 e8 00 	sts	0x00E8, r18
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7e:	9c a5       	ldd	r25, Y+44	; 0x2c
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f80:	86 dc       	rcall	.-1780   	; 0x188e <Endpoint_Write_Control_PStream_LE>
    1f82:	80 91 e8 00 	lds	r24, 0x00E8
    1f86:	8b 77       	andi	r24, 0x7B	; 123
    1f88:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f8c:	2c c0       	rjmp	.+88     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1f8e:	80 38       	cpi	r24, 0x80	; 128
    1f90:	51 f5       	brne	.+84     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1f92:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f96:	87 7f       	andi	r24, 0xF7	; 247
    1f98:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9c:	80 91 e9 01 	lds	r24, 0x01E9
    1fa0:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1fa4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fa8:	8e 77       	andi	r24, 0x7E	; 126
    1faa:	75 cf       	rjmp	.-278    	; 0x1e96 <USB_Device_ProcessControlRequest+0x148>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fac:	81 11       	cpse	r24, r1
    1fae:	1b c0       	rjmp	.+54     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
    1fb0:	90 91 f0 01 	lds	r25, 0x01F0
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fb4:	92 30       	cpi	r25, 0x02	; 2
    1fb6:	b8 f4       	brcc	.+46     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1fb8:	80 91 e8 00 	lds	r24, 0x00E8
    1fbc:	87 7f       	andi	r24, 0xF7	; 247
    1fbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fc2:	90 93 e9 01 	sts	0x01E9, r25
    1fc6:	39 dd       	rcall	.-1422   	; 0x1a3a <Endpoint_ClearStatusStage>
    1fc8:	80 91 e9 01 	lds	r24, 0x01E9
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1fcc:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <USB_Device_ProcessControlRequest+0x28a>
    1fd0:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1fd4:	87 ff       	sbrs	r24, 7
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <USB_Device_ProcessControlRequest+0x28e>
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <USB_Device_ProcessControlRequest+0x290>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fde:	80 93 ed 01 	sts	0x01ED, r24
    1fe2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <EVENT_USB_Device_ConfigurationChanged>
    1fe6:	80 91 e8 00 	lds	r24, 0x00E8
    1fea:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1fec:	0a c0       	rjmp	.+20     	; 0x2002 <USB_Device_ProcessControlRequest+0x2b4>
    1fee:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ff2:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1ff4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ff8:	80 91 eb 00 	lds	r24, 0x00EB
    1ffc:	80 62       	ori	r24, 0x20	; 32
    1ffe:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2002:	ac 96       	adiw	r28, 0x2c	; 44
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	08 95       	ret

00002016 <USB_Event_Stub>:
    2016:	08 95       	ret

00002018 <USB_USBTask>:
    2018:	cf 93       	push	r28
    201a:	80 91 ed 01 	lds	r24, 0x01ED
    201e:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2020:	a9 f0       	breq	.+42     	; 0x204c <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2022:	80 91 e9 00 	lds	r24, 0x00E9
    2026:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2028:	90 91 ec 00 	lds	r25, 0x00EC
    202c:	90 ff       	sbrs	r25, 0
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <USB_USBTask+0x1c>
    2030:	90 e8       	ldi	r25, 0x80	; 128
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <USB_USBTask+0x1e>
    2034:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2036:	c9 2f       	mov	r28, r25
    2038:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    203a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    203e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2042:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2044:	84 de       	rcall	.-760    	; 0x1d4e <USB_Device_ProcessControlRequest>
    2046:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2048:	c0 93 e9 00 	sts	0x00E9, r28
    204c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    204e:	08 95       	ret

00002050 <CDC_Device_ConfigureEndpoints>:
    2050:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2052:	df 93       	push	r29
    2054:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2056:	40 96       	adiw	r24, 0x10	; 16
    2058:	fc 01       	movw	r30, r24
    205a:	8b e0       	ldi	r24, 0x0B	; 11
    205c:	df 01       	movw	r26, r30
    205e:	1d 92       	st	X+, r1
    2060:	8a 95       	dec	r24
    2062:	e9 f7       	brne	.-6      	; 0x205e <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    2068:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	ce 01       	movw	r24, r28
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	a4 dc       	rcall	.-1720   	; 0x19be <Endpoint_ConfigureEndpointTable>
    2076:	88 23       	and	r24, r24
    2078:	61 f0       	breq	.+24     	; 0x2092 <CDC_Device_ConfigureEndpoints+0x42>
    207a:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    207c:	ce 01       	movw	r24, r28
    207e:	06 96       	adiw	r24, 0x06	; 6
    2080:	9e dc       	rcall	.-1732   	; 0x19be <Endpoint_ConfigureEndpointTable>
    2082:	88 23       	and	r24, r24
    2084:	31 f0       	breq	.+12     	; 0x2092 <CDC_Device_ConfigureEndpoints+0x42>
    2086:	61 e0       	ldi	r22, 0x01	; 1
    2088:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    208a:	0b 96       	adiw	r24, 0x0b	; 11
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
	  return false;

	return true;
}
    2090:	96 cc       	rjmp	.-1748   	; 0x19be <Endpoint_ConfigureEndpointTable>
    2092:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
	  return false;

	return true;
}
    2098:	08 95       	ret

0000209a <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    209a:	cf 93       	push	r28
    209c:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    209e:	20 91 ed 01 	lds	r18, 0x01ED
    20a2:	24 30       	cpi	r18, 0x04	; 4
    20a4:	f1 f4       	brne	.+60     	; 0x20e2 <CDC_Device_SendByte+0x48>
    20a6:	fc 01       	movw	r30, r24
    20a8:	44 89       	ldd	r20, Z+20	; 0x14
    20aa:	55 89       	ldd	r21, Z+21	; 0x15
    20ac:	66 89       	ldd	r22, Z+22	; 0x16
    20ae:	77 89       	ldd	r23, Z+23	; 0x17
    20b0:	45 2b       	or	r20, r21
    20b2:	46 2b       	or	r20, r22
    20b4:	47 2b       	or	r20, r23
    20b6:	a9 f0       	breq	.+42     	; 0x20e2 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	8f 70       	andi	r24, 0x0F	; 15
    20bc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20c0:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    20c4:	85 ff       	sbrs	r24, 5
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20c8:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20d0:	80 91 e8 00 	lds	r24, 0x00E8
    20d4:	8e 77       	andi	r24, 0x7E	; 126
    20d6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    20da:	d0 dc       	rcall	.-1632   	; 0x1a7c <Endpoint_WaitUntilReady>
    20dc:	88 23       	and	r24, r24
    20de:	a1 f3       	breq	.-24     	; 0x20c8 <CDC_Device_SendByte+0x2e>
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <CDC_Device_SendByte+0x4a>
    20e2:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    20e4:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    20e6:	08 95       	ret

000020e8 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    20e8:	20 91 ed 01 	lds	r18, 0x01ED
    20ec:	24 30       	cpi	r18, 0x04	; 4
    20ee:	29 f5       	brne	.+74     	; 0x213a <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20f0:	fc 01       	movw	r30, r24
    20f2:	44 89       	ldd	r20, Z+20	; 0x14
    20f4:	55 89       	ldd	r21, Z+21	; 0x15
    20f6:	66 89       	ldd	r22, Z+22	; 0x16
    20f8:	77 89       	ldd	r23, Z+23	; 0x17
    20fa:	45 2b       	or	r20, r21
    20fc:	46 2b       	or	r20, r22
    20fe:	47 2b       	or	r20, r23
    2100:	e1 f0       	breq	.+56     	; 0x213a <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2102:	81 81       	ldd	r24, Z+1	; 0x01
    2104:	8f 70       	andi	r24, 0x0F	; 15
    2106:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    210a:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    210e:	81 11       	cpse	r24, r1
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2116:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    211a:	80 91 e8 00 	lds	r24, 0x00E8
    211e:	8e 77       	andi	r24, 0x7E	; 126
    2120:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2124:	95 fd       	sbrc	r25, 5
    2126:	f5 cf       	rjmp	.-22     	; 0x2112 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2128:	a9 dc       	rcall	.-1710   	; 0x1a7c <Endpoint_WaitUntilReady>
    212a:	81 11       	cpse	r24, r1
    212c:	07 c0       	rjmp	.+14     	; 0x213c <CDC_Device_Flush+0x54>
    212e:	90 91 e8 00 	lds	r25, 0x00E8
    2132:	9e 77       	andi	r25, 0x7E	; 126
    2134:	90 93 e8 00 	sts	0x00E8, r25
    2138:	08 95       	ret
    213a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    213c:	08 95       	ret

0000213e <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    213e:	20 91 ed 01 	lds	r18, 0x01ED
    2142:	24 30       	cpi	r18, 0x04	; 4
    2144:	89 f4       	brne	.+34     	; 0x2168 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2146:	fc 01       	movw	r30, r24
    2148:	44 89       	ldd	r20, Z+20	; 0x14
    214a:	55 89       	ldd	r21, Z+21	; 0x15
    214c:	66 89       	ldd	r22, Z+22	; 0x16
    214e:	77 89       	ldd	r23, Z+23	; 0x17
    2150:	45 2b       	or	r20, r21
    2152:	46 2b       	or	r20, r22
    2154:	47 2b       	or	r20, r23
    2156:	41 f0       	breq	.+16     	; 0x2168 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2158:	21 81       	ldd	r18, Z+1	; 0x01
    215a:	2f 70       	andi	r18, 0x0F	; 15
    215c:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2160:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    2164:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    2166:	c0 cf       	rjmp	.-128    	; 0x20e8 <CDC_Device_Flush>
    2168:	08 95       	ret

0000216a <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    216a:	20 91 ed 01 	lds	r18, 0x01ED
    216e:	24 30       	cpi	r18, 0x04	; 4
    2170:	19 f0       	breq	.+6      	; 0x2178 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    2172:	2f ef       	ldi	r18, 0xFF	; 255
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	24 c0       	rjmp	.+72     	; 0x21c0 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2178:	fc 01       	movw	r30, r24
    217a:	44 89       	ldd	r20, Z+20	; 0x14
    217c:	55 89       	ldd	r21, Z+21	; 0x15
    217e:	66 89       	ldd	r22, Z+22	; 0x16
    2180:	77 89       	ldd	r23, Z+23	; 0x17
    2182:	45 2b       	or	r20, r21
    2184:	46 2b       	or	r20, r22
    2186:	47 2b       	or	r20, r23
    2188:	a1 f3       	breq	.-24     	; 0x2172 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    218a:	86 81       	ldd	r24, Z+6	; 0x06
    218c:	8f 70       	andi	r24, 0x0F	; 15
    218e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2192:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2196:	82 ff       	sbrs	r24, 2
    2198:	ec cf       	rjmp	.-40     	; 0x2172 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    219a:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    219e:	88 23       	and	r24, r24
    21a0:	21 f0       	breq	.+8      	; 0x21aa <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    21a2:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    21aa:	2f ef       	ldi	r18, 0xFF	; 255
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21ae:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    21b2:	81 11       	cpse	r24, r1
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21b6:	80 91 e8 00 	lds	r24, 0x00E8
    21ba:	8b 77       	andi	r24, 0x7B	; 123
    21bc:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    21c0:	c9 01       	movw	r24, r18
    21c2:	08 95       	ret

000021c4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    21c4:	08 95       	ret

000021c6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21cc:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    21d0:	83 ff       	sbrs	r24, 3
    21d2:	a7 c0       	rjmp	.+334    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    21d4:	88 81       	ld	r24, Y
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	20 91 f2 01 	lds	r18, 0x01F2
    21dc:	30 91 f3 01 	lds	r19, 0x01F3
    21e0:	28 17       	cp	r18, r24
    21e2:	39 07       	cpc	r19, r25
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <CDC_Device_ProcessControlRequest+0x22>
    21e6:	9d c0       	rjmp	.+314    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    21e8:	80 91 ef 01 	lds	r24, 0x01EF
    21ec:	81 32       	cpi	r24, 0x21	; 33
    21ee:	61 f0       	breq	.+24     	; 0x2208 <CDC_Device_ProcessControlRequest+0x42>
    21f0:	20 f4       	brcc	.+8      	; 0x21fa <CDC_Device_ProcessControlRequest+0x34>
    21f2:	80 32       	cpi	r24, 0x20	; 32
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <CDC_Device_ProcessControlRequest+0x32>
    21f6:	95 c0       	rjmp	.+298    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    21f8:	3d c0       	rjmp	.+122    	; 0x2274 <CDC_Device_ProcessControlRequest+0xae>
    21fa:	82 32       	cpi	r24, 0x22	; 34
    21fc:	09 f4       	brne	.+2      	; 0x2200 <CDC_Device_ProcessControlRequest+0x3a>
    21fe:	6d c0       	rjmp	.+218    	; 0x22da <CDC_Device_ProcessControlRequest+0x114>
    2200:	83 32       	cpi	r24, 0x23	; 35
    2202:	09 f0       	breq	.+2      	; 0x2206 <CDC_Device_ProcessControlRequest+0x40>
    2204:	8e c0       	rjmp	.+284    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    2206:	7d c0       	rjmp	.+250    	; 0x2302 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2208:	80 91 ee 01 	lds	r24, 0x01EE
    220c:	81 3a       	cpi	r24, 0xA1	; 161
    220e:	09 f0       	breq	.+2      	; 0x2212 <CDC_Device_ProcessControlRequest+0x4c>
    2210:	88 c0       	rjmp	.+272    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2212:	80 91 e8 00 	lds	r24, 0x00E8
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    221c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2220:	80 ff       	sbrs	r24, 0
    2222:	fc cf       	rjmp	.-8      	; 0x221c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2224:	4c 89       	ldd	r20, Y+20	; 0x14
    2226:	5d 89       	ldd	r21, Y+21	; 0x15
    2228:	6e 89       	ldd	r22, Y+22	; 0x16
    222a:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    222c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2230:	bb 27       	eor	r27, r27
    2232:	a7 2f       	mov	r26, r23
    2234:	96 2f       	mov	r25, r22
    2236:	85 2f       	mov	r24, r21
    2238:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    223c:	cb 01       	movw	r24, r22
    223e:	aa 27       	eor	r26, r26
    2240:	bb 27       	eor	r27, r27
    2242:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2246:	47 2f       	mov	r20, r23
    2248:	55 27       	eor	r21, r21
    224a:	66 27       	eor	r22, r22
    224c:	77 27       	eor	r23, r23
    224e:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2252:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2254:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    2258:	89 8d       	ldd	r24, Y+25	; 0x19
    225a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    225e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2260:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2264:	80 91 e8 00 	lds	r24, 0x00E8
    2268:	8e 77       	andi	r24, 0x7E	; 126
    226a:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2272:	e3 cb       	rjmp	.-2106   	; 0x1a3a <Endpoint_ClearStatusStage>
    2274:	80 91 ee 01 	lds	r24, 0x01EE
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2278:	81 32       	cpi	r24, 0x21	; 33
    227a:	09 f0       	breq	.+2      	; 0x227e <CDC_Device_ProcessControlRequest+0xb8>
    227c:	52 c0       	rjmp	.+164    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    227e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2282:	87 7f       	andi	r24, 0xF7	; 247
    2284:	80 93 e8 00 	sts	0x00E8, r24
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <CDC_Device_ProcessControlRequest+0xce>
    228a:	80 91 ed 01 	lds	r24, 0x01ED
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    228e:	88 23       	and	r24, r24
    2290:	09 f4       	brne	.+2      	; 0x2294 <CDC_Device_ProcessControlRequest+0xce>
    2292:	47 c0       	rjmp	.+142    	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    2294:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2298:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    229a:	f7 cf       	rjmp	.-18     	; 0x228a <CDC_Device_ProcessControlRequest+0xc4>
    229c:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    22a0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    22a4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    22a8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    22ac:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    22ae:	2d 8b       	std	Y+21, r18	; 0x15
    22b0:	9e 8b       	std	Y+22, r25	; 0x16
    22b2:	8f 8b       	std	Y+23, r24	; 0x17
    22b4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22b8:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    22ba:	80 91 f1 00 	lds	r24, 0x00F1
    22be:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    22c0:	80 91 f1 00 	lds	r24, 0x00F1
    22c4:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    22c6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22ca:	8b 77       	andi	r24, 0x7B	; 123
    22cc:	80 93 e8 00 	sts	0x00E8, r24
    22d0:	b4 db       	rcall	.-2200   	; 0x1a3a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    22d2:	ce 01       	movw	r24, r28
    22d4:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22d6:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    22d8:	63 c9       	rjmp	.-3386   	; 0x15a0 <EVENT_CDC_Device_LineEncodingChanged>
    22da:	80 91 ee 01 	lds	r24, 0x01EE
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    22de:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22e0:	01 f5       	brne	.+64     	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    22e2:	80 91 e8 00 	lds	r24, 0x00E8
    22e6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22e8:	80 93 e8 00 	sts	0x00E8, r24
    22ec:	a6 db       	rcall	.-2228   	; 0x1a3a <Endpoint_ClearStatusStage>
    22ee:	80 91 f0 01 	lds	r24, 0x01F0
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    22f2:	90 91 f1 01 	lds	r25, 0x01F1

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    22f6:	99 8b       	std	Y+17, r25	; 0x11
    22f8:	88 8b       	std	Y+16, r24	; 0x10
    22fa:	ce 01       	movw	r24, r28
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	c5 c9       	rjmp	.-3190   	; 0x168c <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2302:	80 91 ee 01 	lds	r24, 0x01EE
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2306:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2308:	61 f4       	brne	.+24     	; 0x2322 <CDC_Device_ProcessControlRequest+0x15c>
    230a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    230e:	87 7f       	andi	r24, 0xF7	; 247
    2310:	80 93 e8 00 	sts	0x00E8, r24
    2314:	92 db       	rcall	.-2268   	; 0x1a3a <Endpoint_ClearStatusStage>
    2316:	60 91 f0 01 	lds	r22, 0x01F0
    231a:	ce 01       	movw	r24, r28
    231c:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    231e:	cf 91       	pop	r28
    2320:	51 cf       	rjmp	.-350    	; 0x21c4 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
			}

			break;
	}
}
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	00 d0       	rcall	.+0      	; 0x2346 <HID_Device_ProcessControlRequest+0x1e>
    2346:	1f 92       	push	r1
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    234e:	ad b6       	in	r10, 0x3d	; 61
    2350:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2352:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2356:	83 ff       	sbrs	r24, 3
    2358:	07 c1       	rjmp	.+526    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    235a:	f7 01       	movw	r30, r14
    235c:	80 81       	ld	r24, Z
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	20 91 f2 01 	lds	r18, 0x01F2
    2364:	30 91 f3 01 	lds	r19, 0x01F3
    2368:	28 17       	cp	r18, r24
    236a:	39 07       	cpc	r19, r25
    236c:	09 f0       	breq	.+2      	; 0x2370 <HID_Device_ProcessControlRequest+0x48>
    236e:	fc c0       	rjmp	.+504    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
	  return;

	switch (USB_ControlRequest.bRequest)
    2370:	80 91 ef 01 	lds	r24, 0x01EF
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	09 f4       	brne	.+2      	; 0x237a <HID_Device_ProcessControlRequest+0x52>
    2378:	9e c0       	rjmp	.+316    	; 0x24b6 <HID_Device_ProcessControlRequest+0x18e>
    237a:	30 f4       	brcc	.+12     	; 0x2388 <HID_Device_ProcessControlRequest+0x60>
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	71 f0       	breq	.+28     	; 0x239c <HID_Device_ProcessControlRequest+0x74>
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	09 f0       	breq	.+2      	; 0x2386 <HID_Device_ProcessControlRequest+0x5e>
    2384:	f1 c0       	rjmp	.+482    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    2386:	d4 c0       	rjmp	.+424    	; 0x2530 <HID_Device_ProcessControlRequest+0x208>
    2388:	8a 30       	cpi	r24, 0x0A	; 10
    238a:	09 f4       	brne	.+2      	; 0x238e <HID_Device_ProcessControlRequest+0x66>
    238c:	b9 c0       	rjmp	.+370    	; 0x2500 <HID_Device_ProcessControlRequest+0x1d8>
    238e:	8b 30       	cpi	r24, 0x0B	; 11
    2390:	09 f4       	brne	.+2      	; 0x2394 <HID_Device_ProcessControlRequest+0x6c>
    2392:	a2 c0       	rjmp	.+324    	; 0x24d8 <HID_Device_ProcessControlRequest+0x1b0>
    2394:	89 30       	cpi	r24, 0x09	; 9
    2396:	09 f0       	breq	.+2      	; 0x239a <HID_Device_ProcessControlRequest+0x72>
    2398:	e7 c0       	rjmp	.+462    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    239a:	4c c0       	rjmp	.+152    	; 0x2434 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    239c:	80 91 ee 01 	lds	r24, 0x01EE
    23a0:	81 3a       	cpi	r24, 0xA1	; 161
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <HID_Device_ProcessControlRequest+0x7e>
    23a4:	e1 c0       	rjmp	.+450    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    23a6:	8d b6       	in	r8, 0x3d	; 61
    23a8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    23ac:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    23ae:	80 91 f0 01 	lds	r24, 0x01F0
    23b2:	10 91 f1 01 	lds	r17, 0x01F1
    23b6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    23b8:	f7 01       	movw	r30, r14
    23ba:	40 85       	ldd	r20, Z+8	; 0x08
    23bc:	8d b7       	in	r24, 0x3d	; 61
    23be:	9e b7       	in	r25, 0x3e	; 62
    23c0:	84 1b       	sub	r24, r20
    23c2:	91 09       	sbc	r25, r1
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	9e bf       	out	0x3e, r25	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	8d bf       	out	0x3d, r24	; 61
    23ce:	cd b6       	in	r12, 0x3d	; 61
    23d0:	de b6       	in	r13, 0x3e	; 62
    23d2:	ef ef       	ldi	r30, 0xFF	; 255
    23d4:	ce 1a       	sub	r12, r30
    23d6:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
    23d8:	36 01       	movw	r6, r12
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	c6 01       	movw	r24, r12
    23e2:	ea d1       	rcall	.+980    	; 0x27b8 <memset>
    23e4:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    23e6:	41 50       	subi	r20, 0x01	; 1
    23e8:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    23ea:	0f 5f       	subi	r16, 0xFF	; 255
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	96 01       	movw	r18, r12
    23f0:	be 01       	movw	r22, r28
    23f2:	6d 5f       	subi	r22, 0xFD	; 253
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	c7 01       	movw	r24, r14
    23f8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <CALLBACK_HID_Device_CreateHIDReport>
    23fc:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    23fe:	26 81       	ldd	r18, Z+6	; 0x06
    2400:	37 81       	ldd	r19, Z+7	; 0x07
    2402:	21 15       	cp	r18, r1
    2404:	31 05       	cpc	r19, r1
    2406:	29 f0       	breq	.+10     	; 0x2412 <HID_Device_ProcessControlRequest+0xea>
    2408:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	b6 01       	movw	r22, r12
    240e:	c9 01       	movw	r24, r18
    2410:	ca d1       	rcall	.+916    	; 0x27a6 <memcpy>
    2412:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2416:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    241a:	87 7f       	andi	r24, 0xF7	; 247
    241c:	80 93 e8 00 	sts	0x00E8, r24
    2420:	69 81       	ldd	r22, Y+1	; 0x01
    2422:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2424:	c3 01       	movw	r24, r6
    2426:	93 d9       	rcall	.-3290   	; 0x174e <Endpoint_Write_Control_Stream_LE>
    2428:	80 91 e8 00 	lds	r24, 0x00E8
    242c:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    242e:	80 93 e8 00 	sts	0x00E8, r24
    2432:	39 c0       	rjmp	.+114    	; 0x24a6 <HID_Device_ProcessControlRequest+0x17e>
    2434:	80 91 ee 01 	lds	r24, 0x01EE
    2438:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    243a:	09 f0       	breq	.+2      	; 0x243e <HID_Device_ProcessControlRequest+0x116>
    243c:	95 c0       	rjmp	.+298    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    243e:	8d b6       	in	r8, 0x3d	; 61
    2440:	9e b6       	in	r9, 0x3e	; 62
    2442:	00 91 f4 01 	lds	r16, 0x01F4
    2446:	10 91 f5 01 	lds	r17, 0x01F5
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    244a:	70 90 f0 01 	lds	r7, 0x01F0
    244e:	60 90 f1 01 	lds	r6, 0x01F1
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2452:	8d b7       	in	r24, 0x3d	; 61
    2454:	9e b7       	in	r25, 0x3e	; 62
    2456:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2458:	91 0b       	sbc	r25, r17
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	9e bf       	out	0x3e, r25	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	8d bf       	out	0x3d, r24	; 61
    2464:	cd b6       	in	r12, 0x3d	; 61
    2466:	de b6       	in	r13, 0x3e	; 62
    2468:	ef ef       	ldi	r30, 0xFF	; 255
    246a:	ce 1a       	sub	r12, r30
    246c:	de 0a       	sbc	r13, r30
    246e:	80 91 e8 00 	lds	r24, 0x00E8
    2472:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2474:	80 93 e8 00 	sts	0x00E8, r24
    2478:	b8 01       	movw	r22, r16
    247a:	c6 01       	movw	r24, r12
    247c:	c8 d9       	rcall	.-3184   	; 0x180e <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    247e:	80 91 e8 00 	lds	r24, 0x00E8
    2482:	8e 77       	andi	r24, 0x7E	; 126
    2484:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2488:	21 e0       	ldi	r18, 0x01	; 1
    248a:	71 10       	cpse	r7, r1
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <HID_Device_ProcessControlRequest+0x168>
    248e:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	02 1b       	sub	r16, r18
    2494:	13 0b       	sbc	r17, r19
    2496:	2c 0d       	add	r18, r12
    2498:	3d 1d       	adc	r19, r13
    249a:	46 2d       	mov	r20, r6
    249c:	41 50       	subi	r20, 0x01	; 1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    249e:	67 2d       	mov	r22, r7
    24a0:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    24a2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    24a6:	88 2d       	mov	r24, r8
    24a8:	99 2d       	mov	r25, r9
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	9e bf       	out	0x3e, r25	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	8d bf       	out	0x3d, r24	; 61
    24b4:	59 c0       	rjmp	.+178    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    24b6:	80 91 ee 01 	lds	r24, 0x01EE
    24ba:	81 3a       	cpi	r24, 0xA1	; 161
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <HID_Device_ProcessControlRequest+0x198>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24be:	54 c0       	rjmp	.+168    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    24c0:	80 91 e8 00 	lds	r24, 0x00E8
    24c4:	87 7f       	andi	r24, 0xF7	; 247
    24c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ca:	80 91 e8 00 	lds	r24, 0x00E8
    24ce:	80 ff       	sbrs	r24, 0
    24d0:	fc cf       	rjmp	.-8      	; 0x24ca <HID_Device_ProcessControlRequest+0x1a2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24d2:	f7 01       	movw	r30, r14
    24d4:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24d6:	40 c0       	rjmp	.+128    	; 0x2558 <HID_Device_ProcessControlRequest+0x230>
    24d8:	80 91 ee 01 	lds	r24, 0x01EE
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    24dc:	81 32       	cpi	r24, 0x21	; 33
    24de:	09 f0       	breq	.+2      	; 0x24e2 <HID_Device_ProcessControlRequest+0x1ba>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24e0:	43 c0       	rjmp	.+134    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    24e2:	80 91 e8 00 	lds	r24, 0x00E8
    24e6:	87 7f       	andi	r24, 0xF7	; 247
    24e8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ec:	a6 da       	rcall	.-2740   	; 0x1a3a <Endpoint_ClearStatusStage>
    24ee:	90 91 f0 01 	lds	r25, 0x01F0
    24f2:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24f4:	91 11       	cpse	r25, r1
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <HID_Device_ProcessControlRequest+0x1d2>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	f7 01       	movw	r30, r14
    24fc:	81 87       	std	Z+9, r24	; 0x09
    24fe:	34 c0       	rjmp	.+104    	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    2500:	80 91 ee 01 	lds	r24, 0x01EE
    2504:	81 32       	cpi	r24, 0x21	; 33
    2506:	81 f5       	brne	.+96     	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    2508:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    250c:	87 7f       	andi	r24, 0xF7	; 247
    250e:	80 93 e8 00 	sts	0x00E8, r24
    2512:	93 da       	rcall	.-2778   	; 0x1a3a <Endpoint_ClearStatusStage>
    2514:	80 91 f0 01 	lds	r24, 0x01F0
    2518:	90 91 f1 01 	lds	r25, 0x01F1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    251c:	88 27       	eor	r24, r24
    251e:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2520:	96 95       	lsr	r25
    2522:	87 95       	ror	r24
    2524:	3a 95       	dec	r19
    2526:	e1 f7       	brne	.-8      	; 0x2520 <HID_Device_ProcessControlRequest+0x1f8>
    2528:	f7 01       	movw	r30, r14
    252a:	95 87       	std	Z+13, r25	; 0x0d
    252c:	84 87       	std	Z+12, r24	; 0x0c
    252e:	1c c0       	rjmp	.+56     	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    2530:	80 91 ee 01 	lds	r24, 0x01EE
    2534:	81 3a       	cpi	r24, 0xA1	; 161
    2536:	c1 f4       	brne	.+48     	; 0x2568 <HID_Device_ProcessControlRequest+0x240>
    2538:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    253c:	87 7f       	andi	r24, 0xF7	; 247
    253e:	80 93 e8 00 	sts	0x00E8, r24
    2542:	80 91 e8 00 	lds	r24, 0x00E8
    2546:	80 ff       	sbrs	r24, 0
    2548:	fc cf       	rjmp	.-8      	; 0x2542 <HID_Device_ProcessControlRequest+0x21a>
    254a:	f7 01       	movw	r30, r14
    254c:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    254e:	95 85       	ldd	r25, Z+13	; 0x0d
    2550:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2552:	87 95       	ror	r24
    2554:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2556:	87 95       	ror	r24
    2558:	80 93 f1 00 	sts	0x00F1, r24
    255c:	80 91 e8 00 	lds	r24, 0x00E8
    2560:	8e 77       	andi	r24, 0x7E	; 126
    2562:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2566:	69 da       	rcall	.-2862   	; 0x1a3a <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	be be       	out	0x3e, r11	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
			}

			break;
	}
}
    2576:	0f 90       	pop	r0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	ff 90       	pop	r15
    2582:	ef 90       	pop	r14
    2584:	df 90       	pop	r13
    2586:	cf 90       	pop	r12
    2588:	bf 90       	pop	r11
    258a:	af 90       	pop	r10
    258c:	9f 90       	pop	r9
    258e:	8f 90       	pop	r8
    2590:	7f 90       	pop	r7
    2592:	6f 90       	pop	r6
    2594:	08 95       	ret

00002596 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2596:	9c 01       	movw	r18, r24
    2598:	27 5f       	subi	r18, 0xF7	; 247
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	f9 01       	movw	r30, r18
    259e:	27 e0       	ldi	r18, 0x07	; 7
    25a0:	df 01       	movw	r26, r30
    25a2:	1d 92       	st	X+, r1
    25a4:	2a 95       	dec	r18
    25a6:	e9 f7       	brne	.-6      	; 0x25a2 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	fc 01       	movw	r30, r24
    25ac:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    25ae:	24 ef       	ldi	r18, 0xF4	; 244
    25b0:	31 e0       	ldi	r19, 0x01	; 1
    25b2:	35 87       	std	Z+13, r19	; 0x0d
    25b4:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    25b6:	23 e0       	ldi	r18, 0x03	; 3
    25b8:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	ff c9       	rjmp	.-3074   	; 0x19be <Endpoint_ConfigureEndpointTable>

000025c0 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <HID_Device_USBTask+0x22>
    25e2:	1f 92       	push	r1
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    25ea:	ad b6       	in	r10, 0x3d	; 61
    25ec:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    25ee:	80 91 ed 01 	lds	r24, 0x01ED
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <HID_Device_USBTask+0x38>
    25f6:	8f c0       	rjmp	.+286    	; 0x2716 <HID_Device_USBTask+0x156>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    25f8:	80 91 e4 00 	lds	r24, 0x00E4
    25fc:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2600:	f7 01       	movw	r30, r14
    2602:	22 85       	ldd	r18, Z+10	; 0x0a
    2604:	33 85       	ldd	r19, Z+11	; 0x0b
    2606:	28 17       	cp	r18, r24
    2608:	39 07       	cpc	r19, r25
    260a:	09 f4       	brne	.+2      	; 0x260e <HID_Device_USBTask+0x4e>
    260c:	84 c0       	rjmp	.+264    	; 0x2716 <HID_Device_USBTask+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    260e:	81 81       	ldd	r24, Z+1	; 0x01
    2610:	8f 70       	andi	r24, 0x0F	; 15
    2612:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2616:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    261a:	85 ff       	sbrs	r24, 5
    261c:	7c c0       	rjmp	.+248    	; 0x2716 <HID_Device_USBTask+0x156>
    261e:	6d b6       	in	r6, 0x3d	; 61
    2620:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2622:	40 85       	ldd	r20, Z+8	; 0x08
    2624:	8d b7       	in	r24, 0x3d	; 61
    2626:	9e b7       	in	r25, 0x3e	; 62
    2628:	84 1b       	sub	r24, r20
    262a:	91 09       	sbc	r25, r1
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	9e bf       	out	0x3e, r25	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	8d bf       	out	0x3d, r24	; 61
    2636:	cd b6       	in	r12, 0x3d	; 61
    2638:	de b6       	in	r13, 0x3e	; 62
    263a:	ef ef       	ldi	r30, 0xFF	; 255
    263c:	ce 1a       	sub	r12, r30
    263e:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    2640:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2642:	1a 82       	std	Y+2, r1	; 0x02
    2644:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2646:	46 01       	movw	r8, r12
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	c6 01       	movw	r24, r12
    2650:	b3 d0       	rcall	.+358    	; 0x27b8 <memset>
    2652:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2654:	0f 5f       	subi	r16, 0xFF	; 255
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	96 01       	movw	r18, r12
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	be 01       	movw	r22, r28
    265e:	6d 5f       	subi	r22, 0xFD	; 253
    2660:	7f 4f       	sbci	r23, 0xFF	; 255
    2662:	c7 01       	movw	r24, r14
    2664:	0e 94 ee 04 	call	0x9dc	; 0x9dc <CALLBACK_HID_Device_CreateHIDReport>
    2668:	58 2e       	mov	r5, r24
    266a:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    266c:	84 85       	ldd	r24, Z+12	; 0x0c
    266e:	95 85       	ldd	r25, Z+13	; 0x0d
    2670:	89 2b       	or	r24, r25
    2672:	31 f0       	breq	.+12     	; 0x2680 <HID_Device_USBTask+0xc0>
    2674:	01 e0       	ldi	r16, 0x01	; 1
    2676:	10 e0       	ldi	r17, 0x00	; 0
    2678:	86 85       	ldd	r24, Z+14	; 0x0e
    267a:	97 85       	ldd	r25, Z+15	; 0x0f
    267c:	89 2b       	or	r24, r25
    267e:	11 f0       	breq	.+4      	; 0x2684 <HID_Device_USBTask+0xc4>
    2680:	00 e0       	ldi	r16, 0x00	; 0
    2682:	10 e0       	ldi	r17, 0x00	; 0
    2684:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2686:	c6 80       	ldd	r12, Z+6	; 0x06
    2688:	d7 80       	ldd	r13, Z+7	; 0x07
    268a:	c1 14       	cp	r12, r1
    268c:	d1 04       	cpc	r13, r1
    268e:	89 f0       	breq	.+34     	; 0x26b2 <HID_Device_USBTask+0xf2>
    2690:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2692:	5a 81       	ldd	r21, Y+2	; 0x02
    2694:	b6 01       	movw	r22, r12
    2696:	c4 01       	movw	r24, r8
    2698:	79 d0       	rcall	.+242    	; 0x278c <memcmp>
    269a:	44 24       	eor	r4, r4
    269c:	43 94       	inc	r4
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <HID_Device_USBTask+0xe4>
    26a2:	41 2c       	mov	r4, r1
    26a4:	f7 01       	movw	r30, r14
    26a6:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	b4 01       	movw	r22, r8
    26ac:	c6 01       	movw	r24, r12
    26ae:	7b d0       	rcall	.+246    	; 0x27a6 <memcpy>
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <HID_Device_USBTask+0xf4>
    26b2:	41 2c       	mov	r4, r1
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    26b8:	89 2b       	or	r24, r25
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    26ba:	f9 f0       	breq	.+62     	; 0x26fa <HID_Device_USBTask+0x13a>
    26bc:	51 10       	cpse	r5, r1
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <HID_Device_USBTask+0x108>
    26c0:	41 10       	cpse	r4, r1
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <HID_Device_USBTask+0x108>
    26c4:	00 ff       	sbrs	r16, 0
    26c6:	19 c0       	rjmp	.+50     	; 0x26fa <HID_Device_USBTask+0x13a>
    26c8:	f7 01       	movw	r30, r14
    26ca:	84 85       	ldd	r24, Z+12	; 0x0c
    26cc:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    26ce:	97 87       	std	Z+15, r25	; 0x0f
    26d0:	86 87       	std	Z+14, r24	; 0x0e
    26d2:	81 81       	ldd	r24, Z+1	; 0x01
    26d4:	8f 70       	andi	r24, 0x0F	; 15
    26d6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	81 11       	cpse	r24, r1
    26de:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    26e2:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    26e4:	7a 81       	ldd	r23, Y+2	; 0x02
    26e6:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	c4 01       	movw	r24, r8
    26ec:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_Write_Stream_LE>
    26f0:	80 91 e8 00 	lds	r24, 0x00E8
    26f4:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    26f6:	80 93 e8 00 	sts	0x00E8, r24
    26fa:	80 91 e4 00 	lds	r24, 0x00E4
    26fe:	90 91 e5 00 	lds	r25, 0x00E5
    2702:	f7 01       	movw	r30, r14
    2704:	93 87       	std	Z+11, r25	; 0x0b
    2706:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2708:	86 2d       	mov	r24, r6
    270a:	97 2d       	mov	r25, r7
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	9e bf       	out	0x3e, r25	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	8d bf       	out	0x3d, r24	; 61
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	be be       	out	0x3e, r11	; 62
	}
}
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	ad be       	out	0x3d, r10	; 61
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	df 90       	pop	r13
    2734:	cf 90       	pop	r12
    2736:	bf 90       	pop	r11
    2738:	af 90       	pop	r10
    273a:	9f 90       	pop	r9
    273c:	8f 90       	pop	r8
    273e:	7f 90       	pop	r7
    2740:	6f 90       	pop	r6
    2742:	5f 90       	pop	r5
    2744:	4f 90       	pop	r4
    2746:	08 95       	ret

00002748 <__udivmodsi4>:
    2748:	a1 e2       	ldi	r26, 0x21	; 33
    274a:	1a 2e       	mov	r1, r26
    274c:	aa 1b       	sub	r26, r26
    274e:	bb 1b       	sub	r27, r27
    2750:	fd 01       	movw	r30, r26
    2752:	0d c0       	rjmp	.+26     	; 0x276e <__udivmodsi4_ep>

00002754 <__udivmodsi4_loop>:
    2754:	aa 1f       	adc	r26, r26
    2756:	bb 1f       	adc	r27, r27
    2758:	ee 1f       	adc	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	a2 17       	cp	r26, r18
    275e:	b3 07       	cpc	r27, r19
    2760:	e4 07       	cpc	r30, r20
    2762:	f5 07       	cpc	r31, r21
    2764:	20 f0       	brcs	.+8      	; 0x276e <__udivmodsi4_ep>
    2766:	a2 1b       	sub	r26, r18
    2768:	b3 0b       	sbc	r27, r19
    276a:	e4 0b       	sbc	r30, r20
    276c:	f5 0b       	sbc	r31, r21

0000276e <__udivmodsi4_ep>:
    276e:	66 1f       	adc	r22, r22
    2770:	77 1f       	adc	r23, r23
    2772:	88 1f       	adc	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	1a 94       	dec	r1
    2778:	69 f7       	brne	.-38     	; 0x2754 <__udivmodsi4_loop>
    277a:	60 95       	com	r22
    277c:	70 95       	com	r23
    277e:	80 95       	com	r24
    2780:	90 95       	com	r25
    2782:	9b 01       	movw	r18, r22
    2784:	ac 01       	movw	r20, r24
    2786:	bd 01       	movw	r22, r26
    2788:	cf 01       	movw	r24, r30
    278a:	08 95       	ret

0000278c <memcmp>:
    278c:	fb 01       	movw	r30, r22
    278e:	dc 01       	movw	r26, r24
    2790:	04 c0       	rjmp	.+8      	; 0x279a <memcmp+0xe>
    2792:	8d 91       	ld	r24, X+
    2794:	01 90       	ld	r0, Z+
    2796:	80 19       	sub	r24, r0
    2798:	21 f4       	brne	.+8      	; 0x27a2 <memcmp+0x16>
    279a:	41 50       	subi	r20, 0x01	; 1
    279c:	50 40       	sbci	r21, 0x00	; 0
    279e:	c8 f7       	brcc	.-14     	; 0x2792 <memcmp+0x6>
    27a0:	88 1b       	sub	r24, r24
    27a2:	99 0b       	sbc	r25, r25
    27a4:	08 95       	ret

000027a6 <memcpy>:
    27a6:	fb 01       	movw	r30, r22
    27a8:	dc 01       	movw	r26, r24
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <memcpy+0xa>
    27ac:	01 90       	ld	r0, Z+
    27ae:	0d 92       	st	X+, r0
    27b0:	41 50       	subi	r20, 0x01	; 1
    27b2:	50 40       	sbci	r21, 0x00	; 0
    27b4:	d8 f7       	brcc	.-10     	; 0x27ac <memcpy+0x6>
    27b6:	08 95       	ret

000027b8 <memset>:
    27b8:	dc 01       	movw	r26, r24
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <memset+0x6>
    27bc:	6d 93       	st	X+, r22
    27be:	41 50       	subi	r20, 0x01	; 1
    27c0:	50 40       	sbci	r21, 0x00	; 0
    27c2:	e0 f7       	brcc	.-8      	; 0x27bc <memset+0x4>
    27c4:	08 95       	ret

000027c6 <_exit>:
    27c6:	f8 94       	cli

000027c8 <__stop_program>:
    27c8:	ff cf       	rjmp	.-2      	; 0x27c8 <__stop_program>
