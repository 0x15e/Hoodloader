
Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001064  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  00001108  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a39d  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b4d  00000000  00000000  0000c71d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044f4  00000000  00000000  0000f26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f40  00000000  00000000  00013760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003caa  00000000  00000000  000146a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000068c3  00000000  00000000  0001834a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000808  00000000  00000000  0001ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
	uint16_t CurrentBit   = ReportItem->BitOffset;
      16:	00 00       	nop
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      1a:	00 00       	nop
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	ce c3       	rjmp	.+1948   	; 0x7ca <__vector_11>
      2e:	00 00       	nop

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	00 00                                               ..

00000096 <ManufacturerString>:
      96:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000b0 <LanguageString>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b0:	04 03 09 04                                         ....

000000b4 <ConfigurationDescriptor>:
      b4:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
      c4:	02 00 09 21 11 01 00 01 22 79 00 07 05 81 03 08     ...!...."y......
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d4:	00 05                                               ..

000000d6 <DeviceDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	12 01 10 01 00 00 00 08 eb 03 41 20 01 00 01 02     ..........A ....
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      e6:	00 01                                               ..

000000e8 <MouseReport>:
      e8:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f8:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     108:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
     128:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
     138:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     148:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     158:	29 65 95 06 75 08 81 00 c0 00                       )e..u.....

00000162 <__ctors_end>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d2 e0       	ldi	r29, 0x02	; 2
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
				ReportData     += 4;
     174:	e4 e6       	ldi	r30, 0x64	; 100
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
				break;
     17a:	05 90       	lpm	r0, Z+

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17c:	0d 92       	st	X+, r0
     17e:	a0 31       	cpi	r26, 0x10	; 16
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e1       	ldi	r26, 0x10	; 16
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a0 32       	cpi	r26, 0x20	; 32
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	25 d0       	rcall	.+74     	; 0x1e0 <main>
     196:	64 c7       	rjmp	.+3784   	; 0x1060 <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <LEDs_SetAllLEDs>:
     19a:	9b b1       	in	r25, 0x0b	; 11
     19c:	80 95       	com	r24
     19e:	90 63       	ori	r25, 0x30	; 48
     1a0:	89 23       	and	r24, r25
     1a2:	8b b9       	out	0x0b, r24	; 11
     1a4:	08 95       	ret

000001a6 <SetupHardware>:
     1a6:	84 b7       	in	r24, 0x34	; 52
     1a8:	87 7f       	andi	r24, 0xF7	; 247
     1aa:	84 bf       	out	0x34, r24	; 52
				ReportSize     -= 2;
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	f8 94       	cli
     1b2:	80 93 60 00 	sts	0x0060, r24
     1b6:	10 92 60 00 	sts	0x0060, r1
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	80 e8       	ldi	r24, 0x80	; 128
				ReportData     += 2;
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	80 93 61 00 	sts	0x0061, r24
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c8:	90 93 61 00 	sts	0x0061, r25
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	8a b1       	in	r24, 0x0a	; 10
     1d0:	80 63       	ori	r24, 0x30	; 48
     1d2:	8a b9       	out	0x0a, r24	; 10
				ReportSize     -= 1;
     1d4:	8b b1       	in	r24, 0x0b	; 11
     1d6:	80 63       	ori	r24, 0x30	; 48
     1d8:	8b b9       	out	0x0b, r24	; 11
     1da:	22 98       	cbi	0x04, 2	; 4
     1dc:	2a 9a       	sbi	0x05, 2	; 5
     1de:	e6 c2       	rjmp	.+1484   	; 0x7ac <USB_Init>

000001e0 <main>:
     1e0:	e2 df       	rcall	.-60     	; 0x1a6 <SetupHardware>
     1e2:	80 e2       	ldi	r24, 0x20	; 32
     1e4:	da df       	rcall	.-76     	; 0x19a <LEDs_SetAllLEDs>
     1e6:	78 94       	sei
				ReportData     += 1;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	5a d6       	rcall	.+3252   	; 0xea2 <HID_Device_USBTask>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	f3 d4       	rcall	.+2534   	; 0xbd6 <USB_USBTask>
     1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <main+0x8>

000001f2 <EVENT_USB_Device_Connect>:
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	d2 cf       	rjmp	.-92     	; 0x19a <LEDs_SetAllLEDs>

000001f6 <EVENT_USB_Device_Disconnect>:
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	d0 cf       	rjmp	.-96     	; 0x19a <LEDs_SetAllLEDs>

000001fa <EVENT_USB_Device_ConfigurationChanged>:
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	3c d6       	rcall	.+3192   	; 0xe78 <HID_Device_ConfigureEndpoints>
     200:	90 91 e2 00 	lds	r25, 0x00E2
     204:	94 60       	ori	r25, 0x04	; 4
     206:	90 93 e2 00 	sts	0x00E2, r25
     20a:	88 23       	and	r24, r24
     20c:	11 f0       	breq	.+4      	; 0x212 <EVENT_USB_Device_ConfigurationChanged+0x18>
     20e:	80 e1       	ldi	r24, 0x10	; 16
     210:	01 c0       	rjmp	.+2      	; 0x214 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     212:	80 e2       	ldi	r24, 0x20	; 32
     214:	c2 cf       	rjmp	.-124    	; 0x19a <LEDs_SetAllLEDs>

00000216 <EVENT_USB_Device_ControlRequest>:
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	f9 c4       	rjmp	.+2546   	; 0xc0e <HID_Device_ProcessControlRequest>

0000021c <EVENT_USB_Device_StartOfFrame>:
     21c:	80 91 0e 01 	lds	r24, 0x010E
     220:	90 91 0f 01 	lds	r25, 0x010F
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	29 f0       	breq	.+10     	; 0x232 <EVENT_USB_Device_StartOfFrame+0x16>
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	90 93 0f 01 	sts	0x010F, r25
     22e:	80 93 0e 01 	sts	0x010E, r24
     232:	08 95       	ret

00000234 <CALLBACK_HID_Device_CreateHIDReport>:
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	1a 9b       	sbis	0x03, 2	; 3
     23a:	03 c0       	rjmp	.+6      	; 0x242 <CALLBACK_HID_Device_CreateHIDReport+0xe>
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	8f 7c       	andi	r24, 0xCF	; 207
     240:	06 c0       	rjmp	.+12     	; 0x24e <CALLBACK_HID_Device_CreateHIDReport+0x1a>
     242:	f9 01       	movw	r30, r18
     244:	80 81       	ld	r24, Z
     246:	81 60       	ori	r24, 0x01	; 1
     248:	80 83       	st	Z, r24
     24a:	8b b1       	in	r24, 0x0b	; 11
     24c:	80 63       	ori	r24, 0x30	; 48
     24e:	8b b9       	out	0x0b, r24	; 11
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	fb 01       	movw	r30, r22
     254:	80 83       	st	Z, r24
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	f8 01       	movw	r30, r16
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <CALLBACK_HID_Device_ProcessHIDReport>:
     268:	08 95       	ret

0000026a <CALLBACK_USB_GetDescriptor>:
     26a:	29 2f       	mov	r18, r25
     26c:	33 27       	eor	r19, r19
     26e:	23 30       	cpi	r18, 0x03	; 3
     270:	31 05       	cpc	r19, r1
     272:	b1 f0       	breq	.+44     	; 0x2a0 <CALLBACK_USB_GetDescriptor+0x36>
     274:	4c f4       	brge	.+18     	; 0x288 <CALLBACK_USB_GetDescriptor+0x1e>
     276:	21 30       	cpi	r18, 0x01	; 1
     278:	31 05       	cpc	r19, r1
     27a:	09 f4       	brne	.+2      	; 0x27e <CALLBACK_USB_GetDescriptor+0x14>
     27c:	39 c0       	rjmp	.+114    	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x86>
     27e:	22 30       	cpi	r18, 0x02	; 2
     280:	31 05       	cpc	r19, r1
     282:	09 f0       	breq	.+2      	; 0x286 <CALLBACK_USB_GetDescriptor+0x1c>
     284:	3a c0       	rjmp	.+116    	; 0x2fa <CALLBACK_USB_GetDescriptor+0x90>
     286:	07 c0       	rjmp	.+14     	; 0x296 <CALLBACK_USB_GetDescriptor+0x2c>
     288:	21 32       	cpi	r18, 0x21	; 33
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28a:	31 05       	cpc	r19, r1
     28c:	39 f1       	breq	.+78     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x72>
     28e:	22 32       	cpi	r18, 0x22	; 34
     290:	31 05       	cpc	r19, r1
     292:	49 f1       	breq	.+82     	; 0x2e6 <CALLBACK_USB_GetDescriptor+0x7c>
     294:	32 c0       	rjmp	.+100    	; 0x2fa <CALLBACK_USB_GetDescriptor+0x90>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     296:	e2 e2       	ldi	r30, 0x22	; 34
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	84 eb       	ldi	r24, 0xB4	; 180
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	31 c0       	rjmp	.+98     	; 0x302 <__stack+0x3>
     2a0:	99 27       	eor	r25, r25
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	91 05       	cpc	r25, r1
     2a6:	61 f0       	breq	.+24     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x56>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a8:	82 30       	cpi	r24, 0x02	; 2
				break;
     2aa:	91 05       	cpc	r25, r1

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2ac:	81 f0       	breq	.+32     	; 0x2ce <CALLBACK_USB_GetDescriptor+0x64>
     2ae:	89 2b       	or	r24, r25
     2b0:	21 f5       	brne	.+72     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x90>
     2b2:	e0 eb       	ldi	r30, 0xB0	; 176
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	e4 91       	lpm	r30, Z+
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 eb       	ldi	r24, 0xB0	; 176
				break;
     2bc:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2be:	21 c0       	rjmp	.+66     	; 0x302 <__stack+0x3>
     2c0:	e6 e9       	ldi	r30, 0x96	; 150
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	e4 91       	lpm	r30, Z+
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
				break;
     2c8:	86 e9       	ldi	r24, 0x96	; 150

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	1a c0       	rjmp	.+52     	; 0x302 <__stack+0x3>
     2ce:	e4 e7       	ldi	r30, 0x74	; 116
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	e4 91       	lpm	r30, Z+
				break;
     2d4:	f0 e0       	ldi	r31, 0x00	; 0

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	84 e7       	ldi	r24, 0x74	; 116
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	13 c0       	rjmp	.+38     	; 0x302 <__stack+0x3>
     2dc:	e9 e0       	ldi	r30, 0x09	; 9
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	86 ec       	ldi	r24, 0xC6	; 198
     2e2:	90 e0       	ldi	r25, 0x00	; 0
				break;
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <__stack+0x3>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	e9 e7       	ldi	r30, 0x79	; 121
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	88 ee       	ldi	r24, 0xE8	; 232
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	09 c0       	rjmp	.+18     	; 0x302 <__stack+0x3>
				break;
     2f0:	e2 e1       	ldi	r30, 0x12	; 18

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	86 ed       	ldi	r24, 0xD6	; 214
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <__stack+0x3>
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
				break;
     300:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	da 01       	movw	r26, r20
     304:	8d 93       	st	X+, r24
				break;
     306:	9c 93       	st	X, r25

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	cf 01       	movw	r24, r30
     30a:	08 95       	ret

0000030c <Endpoint_Write_Stream_LE>:
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
				break;
     316:	0f 93       	push	r16

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
				break;
     31c:	df 93       	push	r29

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	7c 01       	movw	r14, r24
     320:	8b 01       	movw	r16, r22
     322:	ea 01       	movw	r28, r20
				break;
     324:	d8 d1       	rcall	.+944    	; 0x6d6 <Endpoint_WaitUntilReady>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	b8 2e       	mov	r11, r24
     328:	81 11       	cpse	r24, r1
     32a:	33 c0       	rjmp	.+102    	; 0x392 <Endpoint_Write_Stream_LE+0x86>

				if (ParserData->UsingReportIDs)
     32c:	20 97       	sbiw	r28, 0x00	; 0
     32e:	31 f0       	breq	.+12     	; 0x33c <Endpoint_Write_Stream_LE+0x30>
     330:	28 81       	ld	r18, Y
     332:	39 81       	ldd	r19, Y+1	; 0x01
     334:	02 1b       	sub	r16, r18
     336:	13 0b       	sbc	r17, r19
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	e2 0e       	add	r14, r18
     33a:	f3 1e       	adc	r15, r19
     33c:	c1 2c       	mov	r12, r1
     33e:	d1 2c       	mov	r13, r1
     340:	23 c0       	rjmp	.+70     	; 0x388 <Endpoint_Write_Stream_LE+0x7c>
     342:	80 91 e8 00 	lds	r24, 0x00E8
     346:	85 fd       	sbrc	r24, 5
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	15 c0       	rjmp	.+42     	; 0x374 <Endpoint_Write_Stream_LE+0x68>

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	80 91 e8 00 	lds	r24, 0x00E8
     34e:	8e 77       	andi	r24, 0x7E	; 126
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	80 93 e8 00 	sts	0x00E8, r24
     354:	40 d4       	rcall	.+2176   	; 0xbd6 <USB_USBTask>
     356:	20 97       	sbiw	r28, 0x00	; 0
     358:	49 f0       	breq	.+18     	; 0x36c <Endpoint_Write_Stream_LE+0x60>
     35a:	88 81       	ld	r24, Y
     35c:	99 81       	ldd	r25, Y+1	; 0x01
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	8c 0d       	add	r24, r12
     360:	9d 1d       	adc	r25, r13
     362:	99 83       	std	Y+1, r25	; 0x01
     364:	88 83       	st	Y, r24
     366:	25 e0       	ldi	r18, 0x05	; 5
     368:	b2 2e       	mov	r11, r18
     36a:	13 c0       	rjmp	.+38     	; 0x392 <Endpoint_Write_Stream_LE+0x86>
     36c:	b4 d1       	rcall	.+872    	; 0x6d6 <Endpoint_WaitUntilReady>
     36e:	88 23       	and	r24, r24
     370:	59 f0       	breq	.+22     	; 0x388 <Endpoint_Write_Stream_LE+0x7c>
     372:	0e c0       	rjmp	.+28     	; 0x390 <Endpoint_Write_Stream_LE+0x84>
     374:	f7 01       	movw	r30, r14
     376:	81 91       	ld	r24, Z+

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	7f 01       	movw	r14, r30
     37a:	80 93 f1 00 	sts	0x00F1, r24
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	01 50       	subi	r16, 0x01	; 1
     380:	11 09       	sbc	r17, r1
     382:	ff ef       	ldi	r31, 0xFF	; 255
     384:	cf 1a       	sub	r12, r31
     386:	df 0a       	sbc	r13, r31
     388:	01 15       	cp	r16, r1
     38a:	11 05       	cpc	r17, r1
     38c:	d1 f6       	brne	.-76     	; 0x342 <Endpoint_Write_Stream_LE+0x36>
     38e:	01 c0       	rjmp	.+2      	; 0x392 <Endpoint_Write_Stream_LE+0x86>
     390:	b8 2e       	mov	r11, r24
     392:	8b 2d       	mov	r24, r11
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	bf 90       	pop	r11
     3a6:	08 95       	ret

000003a8 <Endpoint_Write_Control_Stream_LE>:
     3a8:	20 91 1e 01 	lds	r18, 0x011E
     3ac:	30 91 1f 01 	lds	r19, 0x011F
     3b0:	26 17       	cp	r18, r22
     3b2:	37 07       	cpc	r19, r23
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	48 f0       	brcs	.+18     	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0x20>
     3b6:	61 15       	cp	r22, r1
     3b8:	71 05       	cpc	r23, r1
     3ba:	39 f4       	brne	.+14     	; 0x3ca <Endpoint_Write_Control_Stream_LE+0x22>
     3bc:	20 91 e8 00 	lds	r18, 0x00E8

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3c0:	2e 77       	andi	r18, 0x7E	; 126
     3c2:	20 93 e8 00 	sts	0x00E8, r18
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <Endpoint_Write_Control_Stream_LE+0x22>
     3c8:	b9 01       	movw	r22, r18
     3ca:	9c 01       	movw	r18, r24
				break;
     3cc:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	34 c0       	rjmp	.+104    	; 0x438 <Endpoint_Write_Control_Stream_LE+0x90>
     3d0:	90 91 17 01 	lds	r25, 0x0117
     3d4:	99 23       	and	r25, r25
     3d6:	09 f4       	brne	.+2      	; 0x3da <Endpoint_Write_Control_Stream_LE+0x32>
     3d8:	43 c0       	rjmp	.+134    	; 0x460 <Endpoint_Write_Control_Stream_LE+0xb8>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	95 30       	cpi	r25, 0x05	; 5
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x38>
     3de:	42 c0       	rjmp	.+132    	; 0x464 <Endpoint_Write_Control_Stream_LE+0xbc>
     3e0:	90 91 e8 00 	lds	r25, 0x00E8
     3e4:	93 fd       	sbrc	r25, 3
     3e6:	3a c0       	rjmp	.+116    	; 0x45c <Endpoint_Write_Control_Stream_LE+0xb4>
     3e8:	90 91 e8 00 	lds	r25, 0x00E8
     3ec:	92 fd       	sbrc	r25, 2
     3ee:	30 c0       	rjmp	.+96     	; 0x450 <Endpoint_Write_Control_Stream_LE+0xa8>
     3f0:	90 91 e8 00 	lds	r25, 0x00E8
     3f4:	90 ff       	sbrs	r25, 0
     3f6:	20 c0       	rjmp	.+64     	; 0x438 <Endpoint_Write_Control_Stream_LE+0x90>
     3f8:	80 91 f2 00 	lds	r24, 0x00F2
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	f9 01       	movw	r30, r18
     400:	82 1b       	sub	r24, r18
     402:	93 0b       	sbc	r25, r19
     404:	05 c0       	rjmp	.+10     	; 0x410 <Endpoint_Write_Control_Stream_LE+0x68>
     406:	21 91       	ld	r18, Z+
     408:	20 93 f1 00 	sts	0x00F1, r18

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	71 09       	sbc	r23, r1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	9f 01       	movw	r18, r30
     412:	28 0f       	add	r18, r24
     414:	39 1f       	adc	r19, r25
     416:	61 15       	cp	r22, r1
     418:	71 05       	cpc	r23, r1
     41a:	19 f0       	breq	.+6      	; 0x422 <Endpoint_Write_Control_Stream_LE+0x7a>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	28 30       	cpi	r18, 0x08	; 8
     41e:	31 05       	cpc	r19, r1
     420:	90 f3       	brcs	.-28     	; 0x406 <Endpoint_Write_Control_Stream_LE+0x5e>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	28 30       	cpi	r18, 0x08	; 8
     426:	31 05       	cpc	r19, r1

					while (CurrCollectionPath->Parent != NULL)
     428:	09 f0       	breq	.+2      	; 0x42c <Endpoint_Write_Control_Stream_LE+0x84>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 91 e8 00 	lds	r25, 0x00E8
     430:	9e 77       	andi	r25, 0x7E	; 126
     432:	90 93 e8 00 	sts	0x00E8, r25
     436:	9f 01       	movw	r18, r30
     438:	61 15       	cp	r22, r1
     43a:	71 05       	cpc	r23, r1
     43c:	49 f6       	brne	.-110    	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x28>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	81 11       	cpse	r24, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	c7 cf       	rjmp	.-114    	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x28>
     442:	06 c0       	rjmp	.+12     	; 0x450 <Endpoint_Write_Control_Stream_LE+0xa8>
     444:	80 91 17 01 	lds	r24, 0x0117
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	88 23       	and	r24, r24
     44a:	51 f0       	breq	.+20     	; 0x460 <Endpoint_Write_Control_Stream_LE+0xb8>
     44c:	85 30       	cpi	r24, 0x05	; 5
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	51 f0       	breq	.+20     	; 0x464 <Endpoint_Write_Control_Stream_LE+0xbc>
     450:	80 91 e8 00 	lds	r24, 0x00E8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     454:	82 ff       	sbrs	r24, 2
     456:	f6 cf       	rjmp	.-20     	; 0x444 <Endpoint_Write_Control_Stream_LE+0x9c>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	08 95       	ret
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	08 95       	ret

				if (UsageListSize)
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	08 95       	ret
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	08 95       	ret

00000468 <Endpoint_Read_Control_Stream_LE>:
     468:	61 15       	cp	r22, r1
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	71 05       	cpc	r23, r1
     46c:	29 f4       	brne	.+10     	; 0x478 <Endpoint_Read_Control_Stream_LE+0x10>
     46e:	20 91 e8 00 	lds	r18, 0x00E8
     472:	2b 77       	andi	r18, 0x7B	; 123
     474:	20 93 e8 00 	sts	0x00E8, r18
     478:	9c 01       	movw	r18, r24
     47a:	21 c0       	rjmp	.+66     	; 0x4be <Endpoint_Read_Control_Stream_LE+0x56>
     47c:	80 91 17 01 	lds	r24, 0x0117

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	88 23       	and	r24, r24
     482:	81 f1       	breq	.+96     	; 0x4e4 <Endpoint_Read_Control_Stream_LE+0x7c>
					  UsageList[i - 1] = UsageList[i];
     484:	85 30       	cpi	r24, 0x05	; 5
     486:	41 f1       	breq	.+80     	; 0x4d8 <Endpoint_Read_Control_Stream_LE+0x70>
     488:	80 91 e8 00 	lds	r24, 0x00E8

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	83 fd       	sbrc	r24, 3
     48e:	26 c0       	rjmp	.+76     	; 0x4dc <Endpoint_Read_Control_Stream_LE+0x74>
     490:	80 91 e8 00 	lds	r24, 0x00E8
     494:	82 ff       	sbrs	r24, 2
     496:	f2 cf       	rjmp	.-28     	; 0x47c <Endpoint_Read_Control_Stream_LE+0x14>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	f9 01       	movw	r30, r18
     49a:	07 c0       	rjmp	.+14     	; 0x4aa <Endpoint_Read_Control_Stream_LE+0x42>
     49c:	80 91 f1 00 	lds	r24, 0x00F1
     4a0:	81 93       	st	Z+, r24
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	9f 01       	movw	r18, r30
     4a4:	61 50       	subi	r22, 0x01	; 1
     4a6:	71 09       	sbc	r23, r1
     4a8:	29 f0       	breq	.+10     	; 0x4b4 <Endpoint_Read_Control_Stream_LE+0x4c>
     4aa:	9f 01       	movw	r18, r30
     4ac:	80 91 f2 00 	lds	r24, 0x00F2
     4b0:	81 11       	cpse	r24, r1
     4b2:	f4 cf       	rjmp	.-24     	; 0x49c <Endpoint_Read_Control_Stream_LE+0x34>
     4b4:	80 91 e8 00 	lds	r24, 0x00E8
     4b8:	8b 77       	andi	r24, 0x7B	; 123
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	80 93 e8 00 	sts	0x00E8, r24
     4be:	61 15       	cp	r22, r1
     4c0:	71 05       	cpc	r23, r1
     4c2:	e1 f6       	brne	.-72     	; 0x47c <Endpoint_Read_Control_Stream_LE+0x14>
     4c4:	80 91 e8 00 	lds	r24, 0x00E8
     4c8:	80 fd       	sbrc	r24, 0
     4ca:	0a c0       	rjmp	.+20     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x78>
     4cc:	80 91 17 01 	lds	r24, 0x0117
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	88 23       	and	r24, r24
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <Endpoint_Read_Control_Stream_LE+0x7c>
     4d4:	85 30       	cpi	r24, 0x05	; 5
     4d6:	b1 f7       	brne	.-20     	; 0x4c4 <Endpoint_Read_Control_Stream_LE+0x5c>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	08 95       	ret
     4dc:	81 e0       	ldi	r24, 0x01	; 1
				break;
     4de:	08 95       	ret
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	08 95       	ret
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	08 95       	ret

000004e8 <Endpoint_Write_Control_PStream_LE>:
     4e8:	20 91 1e 01 	lds	r18, 0x011E
     4ec:	30 91 1f 01 	lds	r19, 0x011F
     4f0:	26 17       	cp	r18, r22
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	37 07       	cpc	r19, r23
     4f4:	48 f0       	brcs	.+18     	; 0x508 <Endpoint_Write_Control_PStream_LE+0x20>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	61 15       	cp	r22, r1
     4f8:	71 05       	cpc	r23, r1
     4fa:	39 f4       	brne	.+14     	; 0x50a <Endpoint_Write_Control_PStream_LE+0x22>
     4fc:	20 91 e8 00 	lds	r18, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     500:	2e 77       	andi	r18, 0x7E	; 126
     502:	20 93 e8 00 	sts	0x00E8, r18

					if (UsageListSize)
     506:	01 c0       	rjmp	.+2      	; 0x50a <Endpoint_Write_Control_PStream_LE+0x22>
     508:	b9 01       	movw	r22, r18
     50a:	9c 01       	movw	r18, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	35 c0       	rjmp	.+106    	; 0x57a <Endpoint_Write_Control_PStream_LE+0x92>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	90 91 17 01 	lds	r25, 0x0117
     514:	99 23       	and	r25, r25
     516:	09 f4       	brne	.+2      	; 0x51a <Endpoint_Write_Control_PStream_LE+0x32>
     518:	44 c0       	rjmp	.+136    	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0xba>
     51a:	95 30       	cpi	r25, 0x05	; 5
     51c:	09 f4       	brne	.+2      	; 0x520 <Endpoint_Write_Control_PStream_LE+0x38>
     51e:	43 c0       	rjmp	.+134    	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0xbe>
     520:	90 91 e8 00 	lds	r25, 0x00E8
     524:	93 fd       	sbrc	r25, 3

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	3b c0       	rjmp	.+118    	; 0x59e <Endpoint_Write_Control_PStream_LE+0xb6>
     528:	90 91 e8 00 	lds	r25, 0x00E8
						  UsageList[i - 1] = UsageList[i];
     52c:	92 fd       	sbrc	r25, 2
     52e:	31 c0       	rjmp	.+98     	; 0x592 <Endpoint_Write_Control_PStream_LE+0xaa>
     530:	90 91 e8 00 	lds	r25, 0x00E8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     534:	90 ff       	sbrs	r25, 0
     536:	21 c0       	rjmp	.+66     	; 0x57a <Endpoint_Write_Control_PStream_LE+0x92>
     538:	80 91 f2 00 	lds	r24, 0x00F2
     53c:	90 e0       	ldi	r25, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	f9 01       	movw	r30, r18
     540:	82 1b       	sub	r24, r18
     542:	93 0b       	sbc	r25, r19
     544:	06 c0       	rjmp	.+12     	; 0x552 <Endpoint_Write_Control_PStream_LE+0x6a>
     546:	24 91       	lpm	r18, Z+
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	20 93 f1 00 	sts	0x00F1, r18
     54c:	31 96       	adiw	r30, 0x01	; 1
     54e:	61 50       	subi	r22, 0x01	; 1
     550:	71 09       	sbc	r23, r1
     552:	9c 01       	movw	r18, r24
     554:	2e 0f       	add	r18, r30
     556:	3f 1f       	adc	r19, r31
     558:	61 15       	cp	r22, r1
     55a:	71 05       	cpc	r23, r1
     55c:	19 f0       	breq	.+6      	; 0x564 <Endpoint_Write_Control_PStream_LE+0x7c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	28 30       	cpi	r18, 0x08	; 8
     560:	31 05       	cpc	r19, r1
     562:	88 f3       	brcs	.-30     	; 0x546 <Endpoint_Write_Control_PStream_LE+0x5e>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	28 30       	cpi	r18, 0x08	; 8
     568:	31 05       	cpc	r19, r1
     56a:	09 f0       	breq	.+2      	; 0x56e <Endpoint_Write_Control_PStream_LE+0x86>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 91 e8 00 	lds	r25, 0x00E8
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     572:	9e 77       	andi	r25, 0x7E	; 126
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	90 93 e8 00 	sts	0x00E8, r25
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	9f 01       	movw	r18, r30
     57a:	61 15       	cp	r22, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	71 05       	cpc	r23, r1
     57e:	41 f6       	brne	.-112    	; 0x510 <Endpoint_Write_Control_PStream_LE+0x28>
     580:	81 11       	cpse	r24, r1
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	c6 cf       	rjmp	.-116    	; 0x510 <Endpoint_Write_Control_PStream_LE+0x28>
     584:	06 c0       	rjmp	.+12     	; 0x592 <Endpoint_Write_Control_PStream_LE+0xaa>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	80 91 17 01 	lds	r24, 0x0117
     58a:	88 23       	and	r24, r24
     58c:	51 f0       	breq	.+20     	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0xba>
     58e:	85 30       	cpi	r24, 0x05	; 5
     590:	51 f0       	breq	.+20     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0xbe>
     592:	80 91 e8 00 	lds	r24, 0x00E8
     596:	82 ff       	sbrs	r24, 2
     598:	f6 cf       	rjmp	.-20     	; 0x586 <Endpoint_Write_Control_PStream_LE+0x9e>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	08 95       	ret
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	08 95       	ret

000005aa <Endpoint_ConfigureEndpoint_Prv>:
     5aa:	98 2f       	mov	r25, r24
     5ac:	2c c0       	rjmp	.+88     	; 0x606 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     5ae:	90 93 e9 00 	sts	0x00E9, r25

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	98 17       	cp	r25, r24
     5b4:	39 f0       	breq	.+14     	; 0x5c4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     5b6:	70 91 ec 00 	lds	r23, 0x00EC
     5ba:	20 91 ed 00 	lds	r18, 0x00ED
     5be:	50 91 f0 00 	lds	r21, 0x00F0
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x20>
     5c4:	24 2f       	mov	r18, r20
     5c6:	76 2f       	mov	r23, r22
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	21 fd       	sbrc	r18, 1
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <Endpoint_ConfigureEndpoint_Prv+0x28>
     5ce:	9f 5f       	subi	r25, 0xFF	; 255
     5d0:	1a c0       	rjmp	.+52     	; 0x606 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     5d2:	30 91 eb 00 	lds	r19, 0x00EB
     5d6:	3e 7f       	andi	r19, 0xFE	; 254
     5d8:	30 93 eb 00 	sts	0x00EB, r19
     5dc:	30 91 ed 00 	lds	r19, 0x00ED
     5e0:	3d 7f       	andi	r19, 0xFD	; 253
     5e2:	30 93 ed 00 	sts	0x00ED, r19
     5e6:	30 91 eb 00 	lds	r19, 0x00EB
     5ea:	31 60       	ori	r19, 0x01	; 1
     5ec:	30 93 eb 00 	sts	0x00EB, r19
     5f0:	70 93 ec 00 	sts	0x00EC, r23

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	20 93 ed 00 	sts	0x00ED, r18
     5f8:	50 93 f0 00 	sts	0x00F0, r21
					  return HID_PARSE_InsufficientReportItems;
     5fc:	20 91 ee 00 	lds	r18, 0x00EE

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     600:	27 fd       	sbrc	r18, 7
     602:	e5 cf       	rjmp	.-54     	; 0x5ce <Endpoint_ConfigureEndpoint_Prv+0x24>
     604:	07 c0       	rjmp	.+14     	; 0x614 <Endpoint_ConfigureEndpoint_Prv+0x6a>
     606:	95 30       	cpi	r25, 0x05	; 5
     608:	90 f2       	brcs	.-92     	; 0x5ae <Endpoint_ConfigureEndpoint_Prv+0x4>
     60a:	8f 70       	andi	r24, 0x0F	; 15
     60c:	80 93 e9 00 	sts	0x00E9, r24
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret

00000618 <Endpoint_ConfigureEndpointTable>:
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	df 93       	push	r29
     620:	06 2f       	mov	r16, r22
     622:	ec 01       	movw	r28, r24
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	2e c0       	rjmp	.+92     	; 0x684 <Endpoint_ConfigureEndpointTable+0x6c>
     628:	98 81       	ld	r25, Y
     62a:	91 11       	cpse	r25, r1
     62c:	03 c0       	rjmp	.+6      	; 0x634 <Endpoint_ConfigureEndpointTable+0x1c>
     62e:	1f 5f       	subi	r17, 0xFF	; 255
     630:	25 96       	adiw	r28, 0x05	; 5
     632:	28 c0       	rjmp	.+80     	; 0x684 <Endpoint_ConfigureEndpointTable+0x6c>
     634:	2c 81       	ldd	r18, Y+4	; 0x04
     636:	e9 81       	ldd	r30, Y+1	; 0x01
     638:	fa 81       	ldd	r31, Y+2	; 0x02
     63a:	6b 81       	ldd	r22, Y+3	; 0x03
     63c:	89 2f       	mov	r24, r25
     63e:	8f 70       	andi	r24, 0x0F	; 15
     640:	85 30       	cpi	r24, 0x05	; 5
     642:	10 f0       	brcs	.+4      	; 0x648 <Endpoint_ConfigureEndpointTable+0x30>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	21 c0       	rjmp	.+66     	; 0x68a <Endpoint_ConfigureEndpointTable+0x72>
     648:	22 30       	cpi	r18, 0x02	; 2
     64a:	10 f0       	brcs	.+4      	; 0x650 <Endpoint_ConfigureEndpointTable+0x38>
     64c:	56 e0       	ldi	r21, 0x06	; 6
     64e:	01 c0       	rjmp	.+2      	; 0x652 <Endpoint_ConfigureEndpointTable+0x3a>
     650:	52 e0       	ldi	r21, 0x02	; 2
     652:	28 e0       	ldi	r18, 0x08	; 8
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	03 c0       	rjmp	.+6      	; 0x660 <Endpoint_ConfigureEndpointTable+0x48>
     65a:	4f 5f       	subi	r20, 0xFF	; 255
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	2e 17       	cp	r18, r30
     662:	3f 07       	cpc	r19, r31
     664:	d0 f3       	brcs	.-12     	; 0x65a <Endpoint_ConfigureEndpointTable+0x42>
     666:	42 95       	swap	r20
     668:	40 7f       	andi	r20, 0xF0	; 240
     66a:	45 2b       	or	r20, r21
     66c:	99 1f       	adc	r25, r25
     66e:	99 27       	eor	r25, r25
     670:	99 1f       	adc	r25, r25
     672:	62 95       	swap	r22
     674:	66 0f       	add	r22, r22
     676:	66 0f       	add	r22, r22
     678:	60 7c       	andi	r22, 0xC0	; 192
     67a:	69 2b       	or	r22, r25
     67c:	96 df       	rcall	.-212    	; 0x5aa <Endpoint_ConfigureEndpoint_Prv>
					  ParserData->TotalReportItems++;
     67e:	81 11       	cpse	r24, r1
     680:	d6 cf       	rjmp	.-84     	; 0x62e <Endpoint_ConfigureEndpointTable+0x16>
     682:	e0 cf       	rjmp	.-64     	; 0x644 <Endpoint_ConfigureEndpointTable+0x2c>
     684:	10 13       	cpse	r17, r16
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	d0 cf       	rjmp	.-96     	; 0x628 <Endpoint_ConfigureEndpointTable+0x10>
     688:	81 e0       	ldi	r24, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	df 91       	pop	r29
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	cf 91       	pop	r28
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <Endpoint_ClearStatusStage>:
     694:	80 91 18 01 	lds	r24, 0x0118
     698:	87 fd       	sbrc	r24, 7
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <Endpoint_ClearStatusStage+0x12>
     69c:	80 91 e8 00 	lds	r24, 0x00E8
     6a0:	80 ff       	sbrs	r24, 0
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <Endpoint_ClearStatusStage+0x2c>
     6a4:	12 c0       	rjmp	.+36     	; 0x6ca <Endpoint_ClearStatusStage+0x36>
     6a6:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	82 fd       	sbrc	r24, 2
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <Endpoint_ClearStatusStage+0x24>
     6ae:	80 91 17 01 	lds	r24, 0x0117
     6b2:	81 11       	cpse	r24, r1
     6b4:	f8 cf       	rjmp	.-16     	; 0x6a6 <Endpoint_ClearStatusStage+0x12>
     6b6:	08 95       	ret
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	80 91 e8 00 	lds	r24, 0x00E8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	8b 77       	andi	r24, 0x7B	; 123
     6be:	08 c0       	rjmp	.+16     	; 0x6d0 <Endpoint_ClearStatusStage+0x3c>
     6c0:	80 91 17 01 	lds	r24, 0x0117
     6c4:	81 11       	cpse	r24, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	ea cf       	rjmp	.-44     	; 0x69c <Endpoint_ClearStatusStage+0x8>
     6c8:	08 95       	ret
     6ca:	80 91 e8 00 	lds	r24, 0x00E8
     6ce:	8e 77       	andi	r24, 0x7E	; 126
     6d0:	80 93 e8 00 	sts	0x00E8, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d4:	08 95       	ret

000006d6 <Endpoint_WaitUntilReady>:
     6d6:	80 91 e4 00 	lds	r24, 0x00E4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6da:	90 91 e5 00 	lds	r25, 0x00E5
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	45 e6       	ldi	r20, 0x65	; 101
     6e0:	20 91 ec 00 	lds	r18, 0x00EC
     6e4:	20 fd       	sbrc	r18, 0
     6e6:	1f c0       	rjmp	.+62     	; 0x726 <Endpoint_WaitUntilReady+0x50>
     6e8:	23 c0       	rjmp	.+70     	; 0x730 <Endpoint_WaitUntilReady+0x5a>
     6ea:	20 91 17 01 	lds	r18, 0x0117
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ee:	22 23       	and	r18, r18
     6f0:	91 f0       	breq	.+36     	; 0x716 <Endpoint_WaitUntilReady+0x40>
     6f2:	25 30       	cpi	r18, 0x05	; 5
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	91 f0       	breq	.+36     	; 0x71a <Endpoint_WaitUntilReady+0x44>
     6f6:	20 91 eb 00 	lds	r18, 0x00EB

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6fa:	25 fd       	sbrc	r18, 5
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	10 c0       	rjmp	.+32     	; 0x71e <Endpoint_WaitUntilReady+0x48>
     6fe:	20 91 e4 00 	lds	r18, 0x00E4
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     702:	30 91 e5 00 	lds	r19, 0x00E5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     706:	28 17       	cp	r18, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	39 07       	cpc	r19, r25
     70a:	51 f3       	breq	.-44     	; 0x6e0 <Endpoint_WaitUntilReady+0xa>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	41 50       	subi	r20, 0x01	; 1
     70e:	c9 01       	movw	r24, r18
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	39 f7       	brne	.-50     	; 0x6e0 <Endpoint_WaitUntilReady+0xa>
     712:	84 e0       	ldi	r24, 0x04	; 4
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	08 95       	ret
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	08 95       	ret
     71a:	83 e0       	ldi	r24, 0x03	; 3

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	08 95       	ret
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	08 95       	ret
     726:	20 91 e8 00 	lds	r18, 0x00E8
     72a:	20 ff       	sbrs	r18, 0
     72c:	de cf       	rjmp	.-68     	; 0x6ea <Endpoint_WaitUntilReady+0x14>
     72e:	f9 cf       	rjmp	.-14     	; 0x722 <Endpoint_WaitUntilReady+0x4c>
     730:	20 91 e8 00 	lds	r18, 0x00E8
     734:	22 ff       	sbrs	r18, 2
     736:	d9 cf       	rjmp	.-78     	; 0x6ea <Endpoint_WaitUntilReady+0x14>
     738:	f4 cf       	rjmp	.-24     	; 0x722 <Endpoint_WaitUntilReady+0x4c>

0000073a <USB_ResetInterface>:
     73a:	41 d0       	rcall	.+130    	; 0x7be <USB_INT_DisableAllInterrupts>
     73c:	43 d0       	rcall	.+134    	; 0x7c4 <USB_INT_ClearAllInterrupts>
     73e:	80 91 d8 00 	lds	r24, 0x00D8
     742:	8f 77       	andi	r24, 0x7F	; 127
     744:	80 93 d8 00 	sts	0x00D8, r24
     748:	80 91 d8 00 	lds	r24, 0x00D8
     74c:	80 68       	ori	r24, 0x80	; 128
     74e:	80 93 d8 00 	sts	0x00D8, r24

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
				USBCON |=  (1 << USBE);
     752:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     756:	8f 7d       	andi	r24, 0xDF	; 223
     758:	80 93 d8 00 	sts	0x00D8, r24
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     760:	86 e0       	ldi	r24, 0x06	; 6
     762:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     764:	09 b4       	in	r0, 0x29	; 41
     766:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     768:	fd cf       	rjmp	.-6      	; 0x764 <USB_ResetInterface+0x2a>
     76a:	10 92 17 01 	sts	0x0117, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     76e:	10 92 13 01 	sts	0x0113, r1
	USB_Device_ConfigurationNumber  = 0;
     772:	10 92 15 01 	sts	0x0115, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     776:	10 92 14 01 	sts	0x0114, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     77a:	42 e0       	ldi	r20, 0x02	; 2
     77c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	14 df       	rcall	.-472    	; 0x5aa <Endpoint_ConfigureEndpoint_Prv>
     782:	80 91 e1 00 	lds	r24, 0x00E1
     786:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     788:	80 93 e1 00 	sts	0x00E1, r24
     78c:	80 91 e2 00 	lds	r24, 0x00E2
     790:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     792:	80 93 e2 00 	sts	0x00E2, r24
     796:	80 91 e2 00 	lds	r24, 0x00E2
     79a:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     79c:	80 93 e2 00 	sts	0x00E2, r24
     7a0:	80 91 e0 00 	lds	r24, 0x00E0
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7a6:	80 93 e0 00 	sts	0x00E0, r24
     7aa:	08 95       	ret

000007ac <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     7ac:	e3 e6       	ldi	r30, 0x63	; 99
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	8e 7f       	andi	r24, 0xFE	; 254
     7b4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 16 01 	sts	0x0116, r24

	USB_ResetInterface();
     7bc:	be cf       	rjmp	.-132    	; 0x73a <USB_ResetInterface>

000007be <USB_INT_DisableAllInterrupts>:
     7be:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7c2:	08 95       	ret

000007c4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7c4:	10 92 e1 00 	sts	0x00E1, r1
     7c8:	08 95       	ret

000007ca <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	4f 93       	push	r20
     7da:	5f 93       	push	r21
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	8f 93       	push	r24
     7e2:	9f 93       	push	r25
     7e4:	af 93       	push	r26
     7e6:	bf 93       	push	r27
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7ec:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7f0:	82 ff       	sbrs	r24, 2
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     7f4:	80 91 e2 00 	lds	r24, 0x00E2
     7f8:	82 ff       	sbrs	r24, 2
     7fa:	06 c0       	rjmp	.+12     	; 0x808 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     7fc:	80 91 e1 00 	lds	r24, 0x00E1
     800:	8b 7f       	andi	r24, 0xFB	; 251
     802:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     806:	0a dd       	rcall	.-1516   	; 0x21c <EVENT_USB_Device_StartOfFrame>
     808:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     80c:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     80e:	17 c0       	rjmp	.+46     	; 0x83e <__vector_11+0x74>
     810:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     814:	80 ff       	sbrs	r24, 0
     816:	13 c0       	rjmp	.+38     	; 0x83e <__vector_11+0x74>
     818:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 93 e2 00 	sts	0x00E2, r24
     822:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     826:	80 61       	ori	r24, 0x10	; 16
     828:	80 93 e2 00 	sts	0x00E2, r24
     82c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     830:	80 62       	ori	r24, 0x20	; 32
     832:	80 93 d8 00 	sts	0x00D8, r24
     836:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     838:	10 92 17 01 	sts	0x0117, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     83c:	dc dc       	rcall	.-1608   	; 0x1f6 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     83e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     842:	84 ff       	sbrs	r24, 4
     844:	2f c0       	rjmp	.+94     	; 0x8a4 <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     846:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     84a:	84 ff       	sbrs	r24, 4
     84c:	2b c0       	rjmp	.+86     	; 0x8a4 <__vector_11+0xda>
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     852:	86 e0       	ldi	r24, 0x06	; 6
     854:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     856:	09 b4       	in	r0, 0x29	; 41
     858:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     85a:	fd cf       	rjmp	.-6      	; 0x856 <__vector_11+0x8c>
     85c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     860:	8f 7d       	andi	r24, 0xDF	; 223
     862:	80 93 d8 00 	sts	0x00D8, r24
     866:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     86a:	8f 7e       	andi	r24, 0xEF	; 239
     86c:	80 93 e1 00 	sts	0x00E1, r24
     870:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     874:	8f 7e       	andi	r24, 0xEF	; 239
     876:	80 93 e2 00 	sts	0x00E2, r24
     87a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     87e:	81 60       	ori	r24, 0x01	; 1
     880:	80 93 e2 00 	sts	0x00E2, r24
     884:	80 91 13 01 	lds	r24, 0x0113
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     888:	88 23       	and	r24, r24
     88a:	11 f0       	breq	.+4      	; 0x890 <__vector_11+0xc6>
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	07 c0       	rjmp	.+14     	; 0x89e <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     890:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     894:	87 ff       	sbrs	r24, 7
     896:	02 c0       	rjmp	.+4      	; 0x89c <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	01 c0       	rjmp	.+2      	; 0x89e <__vector_11+0xd4>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 17 01 	sts	0x0117, r24
     8a2:	a7 dc       	rcall	.-1714   	; 0x1f2 <EVENT_USB_Device_Connect>
     8a4:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8a8:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8aa:	22 c0       	rjmp	.+68     	; 0x8f0 <__vector_11+0x126>
     8ac:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8b0:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8b2:	1e c0       	rjmp	.+60     	; 0x8f0 <__vector_11+0x126>
     8b4:	80 91 e1 00 	lds	r24, 0x00E1
     8b8:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8ba:	80 93 e1 00 	sts	0x00E1, r24
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	80 93 17 01 	sts	0x0117, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8c4:	10 92 13 01 	sts	0x0113, r1
     8c8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     8cc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8ce:	80 93 e1 00 	sts	0x00E1, r24
     8d2:	80 91 e2 00 	lds	r24, 0x00E2
     8d6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8d8:	80 93 e2 00 	sts	0x00E2, r24
     8dc:	80 91 e2 00 	lds	r24, 0x00E2
     8e0:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8e2:	80 93 e2 00 	sts	0x00E2, r24
     8e6:	42 e0       	ldi	r20, 0x02	; 2
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8ec:	5e de       	rcall	.-836    	; 0x5aa <Endpoint_ConfigureEndpoint_Prv>
     8ee:	72 d1       	rcall	.+740    	; 0xbd4 <USB_Event_Stub>
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <USB_Device_ProcessControlRequest>:
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     91c:	ac 97       	sbiw	r28, 0x2c	; 44
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     928:	e8 e1       	ldi	r30, 0x18	; 24
     92a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     92c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     930:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	e0 32       	cpi	r30, 0x20	; 32
     936:	f2 07       	cpc	r31, r18
     938:	c9 f7       	brne	.-14     	; 0x92c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     93a:	6d dc       	rcall	.-1830   	; 0x216 <EVENT_USB_Device_ControlRequest>
     93c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     940:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     942:	30 c1       	rjmp	.+608    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     944:	80 91 18 01 	lds	r24, 0x0118
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     948:	90 91 19 01 	lds	r25, 0x0119

		switch (USB_ControlRequest.bRequest)
     94c:	95 30       	cpi	r25, 0x05	; 5
     94e:	09 f4       	brne	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0x40>
     950:	87 c0       	rjmp	.+270    	; 0xa60 <USB_Device_ProcessControlRequest+0x14e>
     952:	38 f4       	brcc	.+14     	; 0x962 <USB_Device_ProcessControlRequest+0x50>
     954:	91 30       	cpi	r25, 0x01	; 1
     956:	b1 f1       	breq	.+108    	; 0x9c4 <USB_Device_ProcessControlRequest+0xb2>
     958:	70 f0       	brcs	.+28     	; 0x976 <USB_Device_ProcessControlRequest+0x64>
     95a:	93 30       	cpi	r25, 0x03	; 3
     95c:	09 f0       	breq	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x4e>
     95e:	22 c1       	rjmp	.+580    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     960:	31 c0       	rjmp	.+98     	; 0x9c4 <USB_Device_ProcessControlRequest+0xb2>
     962:	98 30       	cpi	r25, 0x08	; 8
     964:	09 f4       	brne	.+2      	; 0x968 <USB_Device_ProcessControlRequest+0x56>
     966:	f3 c0       	rjmp	.+486    	; 0xb4e <USB_Device_ProcessControlRequest+0x23c>
     968:	99 30       	cpi	r25, 0x09	; 9
     96a:	09 f4       	brne	.+2      	; 0x96e <USB_Device_ProcessControlRequest+0x5c>
     96c:	ff c0       	rjmp	.+510    	; 0xb6c <USB_Device_ProcessControlRequest+0x25a>
     96e:	96 30       	cpi	r25, 0x06	; 6
     970:	09 f0       	breq	.+2      	; 0x974 <USB_Device_ProcessControlRequest+0x62>
     972:	18 c1       	rjmp	.+560    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     974:	9b c0       	rjmp	.+310    	; 0xaac <USB_Device_ProcessControlRequest+0x19a>
     976:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     978:	21 f0       	breq	.+8      	; 0x982 <USB_Device_ProcessControlRequest+0x70>
     97a:	82 38       	cpi	r24, 0x82	; 130
     97c:	09 f0       	breq	.+2      	; 0x980 <USB_Device_ProcessControlRequest+0x6e>
     97e:	12 c1       	rjmp	.+548    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     980:	08 c0       	rjmp	.+16     	; 0x992 <USB_Device_ProcessControlRequest+0x80>
     982:	80 91 14 01 	lds	r24, 0x0114
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     986:	90 91 15 01 	lds	r25, 0x0115
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     98a:	99 23       	and	r25, r25
     98c:	89 f0       	breq	.+34     	; 0x9b0 <USB_Device_ProcessControlRequest+0x9e>
     98e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     990:	0f c0       	rjmp	.+30     	; 0x9b0 <USB_Device_ProcessControlRequest+0x9e>
     992:	80 91 1c 01 	lds	r24, 0x011C
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     996:	90 91 1d 01 	lds	r25, 0x011D
     99a:	8f 70       	andi	r24, 0x0F	; 15
     99c:	99 27       	eor	r25, r25
     99e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9a2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9a6:	85 fb       	bst	r24, 5
     9a8:	88 27       	eor	r24, r24
     9aa:	80 f9       	bld	r24, 0
     9ac:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9b0:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9b4:	97 7f       	andi	r25, 0xF7	; 247
     9b6:	90 93 e8 00 	sts	0x00E8, r25
     9ba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9be:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     9c2:	d0 c0       	rjmp	.+416    	; 0xb64 <USB_Device_ProcessControlRequest+0x252>
     9c4:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9c6:	19 f0       	breq	.+6      	; 0x9ce <USB_Device_ProcessControlRequest+0xbc>
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	09 f0       	breq	.+2      	; 0x9ce <USB_Device_ProcessControlRequest+0xbc>
     9cc:	eb c0       	rjmp	.+470    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     9ce:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9d0:	21 f0       	breq	.+8      	; 0x9da <USB_Device_ProcessControlRequest+0xc8>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0xc6>
     9d6:	e6 c0       	rjmp	.+460    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <USB_Device_ProcessControlRequest+0xde>
     9da:	80 91 1a 01 	lds	r24, 0x011A
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <USB_Device_ProcessControlRequest+0xd2>
     9e2:	e0 c0       	rjmp	.+448    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     9e4:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     9e6:	09 f0       	breq	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0xd8>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	80 93 15 01 	sts	0x0115, r24
     9ee:	2f c0       	rjmp	.+94     	; 0xa4e <USB_Device_ProcessControlRequest+0x13c>
     9f0:	80 91 1a 01 	lds	r24, 0x011A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     9f4:	81 11       	cpse	r24, r1
     9f6:	2b c0       	rjmp	.+86     	; 0xa4e <USB_Device_ProcessControlRequest+0x13c>
     9f8:	80 91 1c 01 	lds	r24, 0x011C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9fc:	90 91 1d 01 	lds	r25, 0x011D
     a00:	8f 70       	andi	r24, 0x0F	; 15
     a02:	99 27       	eor	r25, r25
     a04:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0xf8>
     a08:	cd c0       	rjmp	.+410    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     a0a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a0e:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a12:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a14:	1c c0       	rjmp	.+56     	; 0xa4e <USB_Device_ProcessControlRequest+0x13c>
     a16:	20 91 19 01 	lds	r18, 0x0119
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a1a:	23 30       	cpi	r18, 0x03	; 3
     a1c:	21 f4       	brne	.+8      	; 0xa26 <USB_Device_ProcessControlRequest+0x114>
     a1e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a22:	80 62       	ori	r24, 0x20	; 32
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <USB_Device_ProcessControlRequest+0x138>
     a26:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a2a:	90 61       	ori	r25, 0x10	; 16
     a2c:	90 93 eb 00 	sts	0x00EB, r25
     a30:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <USB_Device_ProcessControlRequest+0x126>
     a36:	22 0f       	add	r18, r18
     a38:	8a 95       	dec	r24
     a3a:	ea f7       	brpl	.-6      	; 0xa36 <USB_Device_ProcessControlRequest+0x124>
     a3c:	20 93 ea 00 	sts	0x00EA, r18
     a40:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     a44:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a48:	88 60       	ori	r24, 0x08	; 8
     a4a:	80 93 eb 00 	sts	0x00EB, r24
     a4e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a52:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a56:	87 7f       	andi	r24, 0xF7	; 247
     a58:	80 93 e8 00 	sts	0x00E8, r24
     a5c:	1b de       	rcall	.-970    	; 0x694 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a5e:	a2 c0       	rjmp	.+324    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     a60:	81 11       	cpse	r24, r1
     a62:	a0 c0       	rjmp	.+320    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a64:	80 91 1a 01 	lds	r24, 0x011A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a68:	90 91 1b 01 	lds	r25, 0x011B
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	99 27       	eor	r25, r25
     a70:	18 2f       	mov	r17, r24
     a72:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a76:	90 78       	andi	r25, 0x80	; 128
     a78:	98 2b       	or	r25, r24
     a7a:	90 93 e3 00 	sts	0x00E3, r25
     a7e:	80 91 e8 00 	lds	r24, 0x00E8
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	80 93 e8 00 	sts	0x00E8, r24
     a88:	05 de       	rcall	.-1014   	; 0x694 <Endpoint_ClearStatusStage>
     a8a:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a8e:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <USB_Device_ProcessControlRequest+0x178>
     a92:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     a96:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     a98:	80 93 e3 00 	sts	0x00E3, r24
     a9c:	11 23       	and	r17, r17
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <USB_Device_ProcessControlRequest+0x192>
     aa0:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x194>
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	80 93 17 01 	sts	0x0117, r24
     aaa:	7c c0       	rjmp	.+248    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     aac:	80 58       	subi	r24, 0x80	; 128
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ab2:	78 c0       	rjmp	.+240    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     ab4:	80 91 1a 01 	lds	r24, 0x011A
     ab8:	90 91 1b 01 	lds	r25, 0x011B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     abc:	8c 3d       	cpi	r24, 0xDC	; 220
     abe:	23 e0       	ldi	r18, 0x03	; 3
     ac0:	92 07       	cpc	r25, r18
     ac2:	71 f5       	brne	.+92     	; 0xb20 <USB_Device_ProcessControlRequest+0x20e>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	8a 83       	std	Y+2, r24	; 0x02
     ac8:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ace:	f8 94       	cli
     ad0:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ad2:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ad4:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     ad6:	3e e0       	ldi	r19, 0x0E	; 14
     ad8:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ada:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     adc:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ade:	50 93 57 00 	sts	0x0057, r21
     ae2:	e4 91       	lpm	r30, Z+
     ae4:	20 ff       	sbrs	r18, 0
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <USB_Device_ProcessControlRequest+0x1dc>
     ae8:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     aea:	ef 70       	andi	r30, 0x0F	; 15
     aec:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     aee:	ef 70       	andi	r30, 0x0F	; 15
     af0:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     af2:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     af4:	ea 30       	cpi	r30, 0x0A	; 10
     af6:	10 f0       	brcs	.+4      	; 0xafc <USB_Device_ProcessControlRequest+0x1ea>
     af8:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     afa:	01 c0       	rjmp	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0x1ec>
     afc:	c0 96       	adiw	r24, 0x30	; 48
     afe:	8d 93       	st	X+, r24
     b00:	9d 93       	st	X+, r25
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	24 31       	cpi	r18, 0x14	; 20
     b06:	49 f7       	brne	.-46     	; 0xada <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b08:	4f bf       	out	0x3f, r20	; 63
     b0a:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b0e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b10:	80 93 e8 00 	sts	0x00E8, r24
     b14:	6a e2       	ldi	r22, 0x2A	; 42
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	45 dc       	rcall	.-1910   	; 0x3a8 <Endpoint_Write_Control_Stream_LE>
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <USB_Device_ProcessControlRequest+0x230>
     b20:	ae 01       	movw	r20, r28
     b22:	45 5d       	subi	r20, 0xD5	; 213
     b24:	5f 4f       	sbci	r21, 0xFF	; 255
     b26:	60 91 1c 01 	lds	r22, 0x011C
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b2a:	9f db       	rcall	.-2242   	; 0x26a <CALLBACK_USB_GetDescriptor>
     b2c:	00 97       	sbiw	r24, 0x00	; 0
     b2e:	d1 f1       	breq	.+116    	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     b30:	20 91 e8 00 	lds	r18, 0x00E8
     b34:	27 7f       	andi	r18, 0xF7	; 247
     b36:	20 93 e8 00 	sts	0x00E8, r18
     b3a:	bc 01       	movw	r22, r24
     b3c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b3e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b40:	d3 dc       	rcall	.-1626   	; 0x4e8 <Endpoint_Write_Control_PStream_LE>
     b42:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b46:	8b 77       	andi	r24, 0x7B	; 123
     b48:	80 93 e8 00 	sts	0x00E8, r24
     b4c:	2b c0       	rjmp	.+86     	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b4e:	80 38       	cpi	r24, 0x80	; 128
     b50:	49 f5       	brne	.+82     	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
     b52:	80 91 e8 00 	lds	r24, 0x00E8
     b56:	87 7f       	andi	r24, 0xF7	; 247
     b58:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b5c:	80 91 13 01 	lds	r24, 0x0113
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b60:	80 93 f1 00 	sts	0x00F1, r24
     b64:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b68:	8e 77       	andi	r24, 0x7E	; 126
     b6a:	76 cf       	rjmp	.-276    	; 0xa58 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b6c:	81 11       	cpse	r24, r1
     b6e:	1a c0       	rjmp	.+52     	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b70:	90 91 1a 01 	lds	r25, 0x011A
     b74:	92 30       	cpi	r25, 0x02	; 2
     b76:	b0 f4       	brcc	.+44     	; 0xba4 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b78:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b7c:	87 7f       	andi	r24, 0xF7	; 247
     b7e:	80 93 e8 00 	sts	0x00E8, r24
     b82:	90 93 13 01 	sts	0x0113, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b86:	86 dd       	rcall	.-1268   	; 0x694 <Endpoint_ClearStatusStage>
     b88:	80 91 13 01 	lds	r24, 0x0113
     b8c:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <USB_Device_ProcessControlRequest+0x286>
     b90:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     b94:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <USB_Device_ProcessControlRequest+0x28a>
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x28c>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b9e:	80 93 17 01 	sts	0x0117, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ba2:	2b db       	rcall	.-2474   	; 0x1fa <EVENT_USB_Device_ConfigurationChanged>
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
     ba8:	83 ff       	sbrs	r24, 3
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <USB_Device_ProcessControlRequest+0x2ae>
     bac:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bb6:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bba:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bbc:	80 93 eb 00 	sts	0x00EB, r24
     bc0:	ac 96       	adiw	r28, 0x2c	; 44
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     bd0:	1f 91       	pop	r17
     bd2:	08 95       	ret

00000bd4 <USB_Event_Stub>:
     bd4:	08 95       	ret

00000bd6 <USB_USBTask>:
     bd6:	cf 93       	push	r28
     bd8:	80 91 17 01 	lds	r24, 0x0117
     bdc:	88 23       	and	r24, r24
     bde:	a9 f0       	breq	.+42     	; 0xc0a <USB_USBTask+0x34>
     be0:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     be4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     be6:	90 91 ec 00 	lds	r25, 0x00EC
     bea:	90 ff       	sbrs	r25, 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <USB_USBTask+0x1c>
     bee:	90 e8       	ldi	r25, 0x80	; 128
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <USB_USBTask+0x1e>
     bf2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bf4:	c9 2f       	mov	r28, r25
     bf6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bfc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c00:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c02:	87 de       	rcall	.-754    	; 0x912 <USB_Device_ProcessControlRequest>
     c04:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c06:	c0 93 e9 00 	sts	0x00E9, r28
     c0a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c0c:	08 95       	ret

00000c0e <HID_Device_ProcessControlRequest>:
     c0e:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c10:	7f 92       	push	r7
     c12:	8f 92       	push	r8
     c14:	9f 92       	push	r9
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <HID_Device_ProcessControlRequest+0x1e>
     c2c:	1f 92       	push	r1
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c34:	ad b6       	in	r10, 0x3d	; 61
     c36:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c38:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c3c:	83 ff       	sbrs	r24, 3
     c3e:	05 c1       	rjmp	.+522    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c40:	f7 01       	movw	r30, r14
     c42:	80 81       	ld	r24, Z
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	20 91 1c 01 	lds	r18, 0x011C
     c4a:	30 91 1d 01 	lds	r19, 0x011D
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	09 f0       	breq	.+2      	; 0xc56 <HID_Device_ProcessControlRequest+0x48>
     c54:	fa c0       	rjmp	.+500    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
	  return;

	switch (USB_ControlRequest.bRequest)
     c56:	80 91 19 01 	lds	r24, 0x0119
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	09 f4       	brne	.+2      	; 0xc60 <HID_Device_ProcessControlRequest+0x52>
     c5e:	9c c0       	rjmp	.+312    	; 0xd98 <HID_Device_ProcessControlRequest+0x18a>
     c60:	30 f4       	brcc	.+12     	; 0xc6e <HID_Device_ProcessControlRequest+0x60>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	71 f0       	breq	.+28     	; 0xc82 <HID_Device_ProcessControlRequest+0x74>
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	09 f0       	breq	.+2      	; 0xc6c <HID_Device_ProcessControlRequest+0x5e>
     c6a:	ef c0       	rjmp	.+478    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     c6c:	d2 c0       	rjmp	.+420    	; 0xe12 <HID_Device_ProcessControlRequest+0x204>
     c6e:	8a 30       	cpi	r24, 0x0A	; 10
     c70:	09 f4       	brne	.+2      	; 0xc74 <HID_Device_ProcessControlRequest+0x66>
     c72:	b7 c0       	rjmp	.+366    	; 0xde2 <HID_Device_ProcessControlRequest+0x1d4>
     c74:	8b 30       	cpi	r24, 0x0B	; 11
     c76:	09 f4       	brne	.+2      	; 0xc7a <HID_Device_ProcessControlRequest+0x6c>
     c78:	a0 c0       	rjmp	.+320    	; 0xdba <HID_Device_ProcessControlRequest+0x1ac>
     c7a:	89 30       	cpi	r24, 0x09	; 9
     c7c:	09 f0       	breq	.+2      	; 0xc80 <HID_Device_ProcessControlRequest+0x72>
     c7e:	e5 c0       	rjmp	.+458    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     c80:	4b c0       	rjmp	.+150    	; 0xd18 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c82:	80 91 18 01 	lds	r24, 0x0118
     c86:	81 3a       	cpi	r24, 0xA1	; 161
     c88:	09 f0       	breq	.+2      	; 0xc8c <HID_Device_ProcessControlRequest+0x7e>
     c8a:	df c0       	rjmp	.+446    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     c8c:	8d b6       	in	r8, 0x3d	; 61
     c8e:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     c90:	1a 82       	std	Y+2, r1	; 0x02
     c92:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     c94:	80 91 1a 01 	lds	r24, 0x011A
     c98:	10 91 1b 01 	lds	r17, 0x011B
     c9c:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     c9e:	f7 01       	movw	r30, r14
     ca0:	40 85       	ldd	r20, Z+8	; 0x08
     ca2:	8d b7       	in	r24, 0x3d	; 61
     ca4:	9e b7       	in	r25, 0x3e	; 62
     ca6:	84 1b       	sub	r24, r20
     ca8:	91 09       	sbc	r25, r1
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	9e bf       	out	0x3e, r25	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	8d bf       	out	0x3d, r24	; 61
     cb4:	cd b6       	in	r12, 0x3d	; 61
     cb6:	de b6       	in	r13, 0x3e	; 62
     cb8:	ef ef       	ldi	r30, 0xFF	; 255
     cba:	ce 1a       	sub	r12, r30
     cbc:	de 0a       	sbc	r13, r30

				memset(ReportData, 0, sizeof(ReportData));
     cbe:	36 01       	movw	r6, r12
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	c6 01       	movw	r24, r12
     cc8:	c4 d1       	rcall	.+904    	; 0x1052 <memset>
     cca:	41 2f       	mov	r20, r17
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ccc:	41 50       	subi	r20, 0x01	; 1
     cce:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     cd0:	0f 5f       	subi	r16, 0xFF	; 255
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	96 01       	movw	r18, r12
     cd6:	be 01       	movw	r22, r28
     cd8:	6d 5f       	subi	r22, 0xFD	; 253
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	c7 01       	movw	r24, r14
     cde:	aa da       	rcall	.-2732   	; 0x234 <CALLBACK_HID_Device_CreateHIDReport>
     ce0:	f7 01       	movw	r30, r14
     ce2:	26 81       	ldd	r18, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     ce4:	37 81       	ldd	r19, Z+7	; 0x07
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	29 f0       	breq	.+10     	; 0xcf6 <HID_Device_ProcessControlRequest+0xe8>
     cec:	40 85       	ldd	r20, Z+8	; 0x08
     cee:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     cf0:	b6 01       	movw	r22, r12
     cf2:	c9 01       	movw	r24, r18
     cf4:	a5 d1       	rcall	.+842    	; 0x1040 <memcpy>
     cf6:	10 92 e9 00 	sts	0x00E9, r1
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cfe:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d00:	80 93 e8 00 	sts	0x00E8, r24
     d04:	69 81       	ldd	r22, Y+1	; 0x01
     d06:	7a 81       	ldd	r23, Y+2	; 0x02
     d08:	c3 01       	movw	r24, r6
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d0a:	4e db       	rcall	.-2404   	; 0x3a8 <Endpoint_Write_Control_Stream_LE>
     d0c:	80 91 e8 00 	lds	r24, 0x00E8
     d10:	8b 77       	andi	r24, 0x7B	; 123
     d12:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d16:	38 c0       	rjmp	.+112    	; 0xd88 <HID_Device_ProcessControlRequest+0x17a>
     d18:	80 91 18 01 	lds	r24, 0x0118
     d1c:	81 32       	cpi	r24, 0x21	; 33
     d1e:	09 f0       	breq	.+2      	; 0xd22 <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d20:	94 c0       	rjmp	.+296    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     d22:	8d b6       	in	r8, 0x3d	; 61
     d24:	9e b6       	in	r9, 0x3e	; 62
     d26:	00 91 1e 01 	lds	r16, 0x011E
     d2a:	10 91 1f 01 	lds	r17, 0x011F
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d2e:	70 90 1a 01 	lds	r7, 0x011A
     d32:	60 90 1b 01 	lds	r6, 0x011B
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d36:	8d b7       	in	r24, 0x3d	; 61
     d38:	9e b7       	in	r25, 0x3e	; 62
     d3a:	80 1b       	sub	r24, r16
     d3c:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	9e bf       	out	0x3e, r25	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	8d bf       	out	0x3d, r24	; 61
     d48:	cd b6       	in	r12, 0x3d	; 61
     d4a:	de b6       	in	r13, 0x3e	; 62
     d4c:	ef ef       	ldi	r30, 0xFF	; 255
     d4e:	ce 1a       	sub	r12, r30
     d50:	de 0a       	sbc	r13, r30
     d52:	80 91 e8 00 	lds	r24, 0x00E8
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d5c:	b8 01       	movw	r22, r16
     d5e:	c6 01       	movw	r24, r12
     d60:	83 db       	rcall	.-2298   	; 0x468 <Endpoint_Read_Control_Stream_LE>
     d62:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     d66:	8e 77       	andi	r24, 0x7E	; 126
     d68:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	71 10       	cpse	r7, r1
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <HID_Device_ProcessControlRequest+0x166>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d76:	02 1b       	sub	r16, r18
     d78:	13 0b       	sbc	r17, r19
     d7a:	2c 0d       	add	r18, r12
     d7c:	3d 1d       	adc	r19, r13
     d7e:	46 2d       	mov	r20, r6
     d80:	41 50       	subi	r20, 0x01	; 1
     d82:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     d84:	c7 01       	movw	r24, r14
     d86:	70 da       	rcall	.-2848   	; 0x268 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d88:	88 2d       	mov	r24, r8
     d8a:	99 2d       	mov	r25, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	9e bf       	out	0x3e, r25	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	8d bf       	out	0x3d, r24	; 61
     d96:	59 c0       	rjmp	.+178    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     d98:	80 91 18 01 	lds	r24, 0x0118
     d9c:	81 3a       	cpi	r24, 0xA1	; 161
     d9e:	09 f0       	breq	.+2      	; 0xda2 <HID_Device_ProcessControlRequest+0x194>
     da0:	54 c0       	rjmp	.+168    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     da2:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     da6:	87 7f       	andi	r24, 0xF7	; 247
     da8:	80 93 e8 00 	sts	0x00E8, r24
     dac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db0:	80 ff       	sbrs	r24, 0
     db2:	fc cf       	rjmp	.-8      	; 0xdac <HID_Device_ProcessControlRequest+0x19e>
     db4:	f7 01       	movw	r30, r14
     db6:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     db8:	40 c0       	rjmp	.+128    	; 0xe3a <HID_Device_ProcessControlRequest+0x22c>
     dba:	80 91 18 01 	lds	r24, 0x0118
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     dbe:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <HID_Device_ProcessControlRequest+0x1b6>
     dc2:	43 c0       	rjmp	.+134    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	80 93 e8 00 	sts	0x00E8, r24
     dce:	62 dc       	rcall	.-1852   	; 0x694 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dd0:	90 91 1a 01 	lds	r25, 0x011A
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	91 11       	cpse	r25, r1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <HID_Device_ProcessControlRequest+0x1ce>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     dde:	81 87       	std	Z+9, r24	; 0x09
     de0:	34 c0       	rjmp	.+104    	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     de2:	80 91 18 01 	lds	r24, 0x0118
     de6:	81 32       	cpi	r24, 0x21	; 33
     de8:	81 f5       	brne	.+96     	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     dea:	80 91 e8 00 	lds	r24, 0x00E8
     dee:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df0:	80 93 e8 00 	sts	0x00E8, r24
     df4:	4f dc       	rcall	.-1890   	; 0x694 <Endpoint_ClearStatusStage>
     df6:	80 91 1a 01 	lds	r24, 0x011A
     dfa:	90 91 1b 01 	lds	r25, 0x011B
     dfe:	88 27       	eor	r24, r24
     e00:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e06:	3a 95       	dec	r19
     e08:	e1 f7       	brne	.-8      	; 0xe02 <HID_Device_ProcessControlRequest+0x1f4>
     e0a:	f7 01       	movw	r30, r14
     e0c:	95 87       	std	Z+13, r25	; 0x0d
     e0e:	84 87       	std	Z+12, r24	; 0x0c
     e10:	1c c0       	rjmp	.+56     	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     e12:	80 91 18 01 	lds	r24, 0x0118
     e16:	81 3a       	cpi	r24, 0xA1	; 161
     e18:	c1 f4       	brne	.+48     	; 0xe4a <HID_Device_ProcessControlRequest+0x23c>
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	87 7f       	andi	r24, 0xF7	; 247
     e20:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e24:	80 91 e8 00 	lds	r24, 0x00E8
     e28:	80 ff       	sbrs	r24, 0
     e2a:	fc cf       	rjmp	.-8      	; 0xe24 <HID_Device_ProcessControlRequest+0x216>
     e2c:	f7 01       	movw	r30, r14
     e2e:	84 85       	ldd	r24, Z+12	; 0x0c
     e30:	95 85       	ldd	r25, Z+13	; 0x0d
     e32:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e34:	87 95       	ror	r24
     e36:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e38:	87 95       	ror	r24
     e3a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
     e42:	8e 77       	andi	r24, 0x7E	; 126
     e44:	80 93 e8 00 	sts	0x00E8, r24
     e48:	25 dc       	rcall	.-1974   	; 0x694 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e4e:	be be       	out	0x3e, r11	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	ad be       	out	0x3d, r10	; 61
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
			}

			break;
	}
}
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	7f 90       	pop	r7
     e74:	6f 90       	pop	r6
     e76:	08 95       	ret

00000e78 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e78:	9c 01       	movw	r18, r24
     e7a:	27 5f       	subi	r18, 0xF7	; 247
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	f9 01       	movw	r30, r18
     e80:	27 e0       	ldi	r18, 0x07	; 7
     e82:	df 01       	movw	r26, r30
     e84:	1d 92       	st	X+, r1
     e86:	2a 95       	dec	r18
     e88:	e9 f7       	brne	.-6      	; 0xe84 <HID_Device_ConfigureEndpoints+0xc>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	fc 01       	movw	r30, r24
     e8e:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     e90:	24 ef       	ldi	r18, 0xF4	; 244
     e92:	31 e0       	ldi	r19, 0x01	; 1
     e94:	35 87       	std	Z+13, r19	; 0x0d
     e96:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     e98:	23 e0       	ldi	r18, 0x03	; 3
     e9a:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	bb cb       	rjmp	.-2186   	; 0x618 <Endpoint_ConfigureEndpointTable>

00000ea2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ea2:	4f 92       	push	r4
     ea4:	5f 92       	push	r5
     ea6:	6f 92       	push	r6
     ea8:	7f 92       	push	r7
     eaa:	8f 92       	push	r8
     eac:	9f 92       	push	r9
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <HID_Device_USBTask+0x22>
     ec4:	1f 92       	push	r1
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ecc:	ad b6       	in	r10, 0x3d	; 61
     ece:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ed0:	80 91 17 01 	lds	r24, 0x0117
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	09 f0       	breq	.+2      	; 0xeda <HID_Device_USBTask+0x38>
     ed8:	8d c0       	rjmp	.+282    	; 0xff4 <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     eda:	80 91 e4 00 	lds	r24, 0x00E4
     ede:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     ee2:	f7 01       	movw	r30, r14
     ee4:	22 85       	ldd	r18, Z+10	; 0x0a
     ee6:	33 85       	ldd	r19, Z+11	; 0x0b
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	09 f4       	brne	.+2      	; 0xef0 <HID_Device_USBTask+0x4e>
     eee:	82 c0       	rjmp	.+260    	; 0xff4 <HID_Device_USBTask+0x152>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	8f 70       	andi	r24, 0x0F	; 15
     ef4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     efc:	85 ff       	sbrs	r24, 5
     efe:	7a c0       	rjmp	.+244    	; 0xff4 <HID_Device_USBTask+0x152>
     f00:	6d b6       	in	r6, 0x3d	; 61
     f02:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f04:	40 85       	ldd	r20, Z+8	; 0x08
     f06:	8d b7       	in	r24, 0x3d	; 61
     f08:	9e b7       	in	r25, 0x3e	; 62
     f0a:	84 1b       	sub	r24, r20
     f0c:	91 09       	sbc	r25, r1
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	9e bf       	out	0x3e, r25	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	8d bf       	out	0x3d, r24	; 61
     f18:	cd b6       	in	r12, 0x3d	; 61
     f1a:	de b6       	in	r13, 0x3e	; 62
     f1c:	ef ef       	ldi	r30, 0xFF	; 255
     f1e:	ce 1a       	sub	r12, r30
     f20:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
     f22:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f24:	1a 82       	std	Y+2, r1	; 0x02
     f26:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f28:	46 01       	movw	r8, r12
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	c6 01       	movw	r24, r12
     f32:	8f d0       	rcall	.+286    	; 0x1052 <memset>
     f34:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	96 01       	movw	r18, r12
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	be 01       	movw	r22, r28
     f40:	6d 5f       	subi	r22, 0xFD	; 253
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	c7 01       	movw	r24, r14
     f46:	76 d9       	rcall	.-3348   	; 0x234 <CALLBACK_HID_Device_CreateHIDReport>
     f48:	58 2e       	mov	r5, r24
     f4a:	f7 01       	movw	r30, r14
     f4c:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f4e:	95 85       	ldd	r25, Z+13	; 0x0d
     f50:	89 2b       	or	r24, r25
     f52:	31 f0       	breq	.+12     	; 0xf60 <HID_Device_USBTask+0xbe>
     f54:	01 e0       	ldi	r16, 0x01	; 1
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	86 85       	ldd	r24, Z+14	; 0x0e
     f5a:	97 85       	ldd	r25, Z+15	; 0x0f
     f5c:	89 2b       	or	r24, r25
     f5e:	11 f0       	breq	.+4      	; 0xf64 <HID_Device_USBTask+0xc2>
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	f7 01       	movw	r30, r14
     f66:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f68:	d7 80       	ldd	r13, Z+7	; 0x07
     f6a:	c1 14       	cp	r12, r1
     f6c:	d1 04       	cpc	r13, r1
     f6e:	89 f0       	breq	.+34     	; 0xf92 <HID_Device_USBTask+0xf0>
     f70:	49 81       	ldd	r20, Y+1	; 0x01
     f72:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f74:	b6 01       	movw	r22, r12
     f76:	c4 01       	movw	r24, r8
     f78:	56 d0       	rcall	.+172    	; 0x1026 <memcmp>
     f7a:	44 24       	eor	r4, r4
     f7c:	43 94       	inc	r4
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	09 f4       	brne	.+2      	; 0xf84 <HID_Device_USBTask+0xe2>
     f82:	41 2c       	mov	r4, r1
     f84:	f7 01       	movw	r30, r14
     f86:	40 85       	ldd	r20, Z+8	; 0x08
     f88:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f8a:	b4 01       	movw	r22, r8
     f8c:	c6 01       	movw	r24, r12
     f8e:	58 d0       	rcall	.+176    	; 0x1040 <memcpy>
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <HID_Device_USBTask+0xf2>
     f92:	41 2c       	mov	r4, r1
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	89 2b       	or	r24, r25

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <HID_Device_USBTask+0x136>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     f9c:	51 10       	cpse	r5, r1
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <HID_Device_USBTask+0x106>
     fa0:	41 10       	cpse	r4, r1
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <HID_Device_USBTask+0x106>
     fa4:	00 ff       	sbrs	r16, 0
     fa6:	18 c0       	rjmp	.+48     	; 0xfd8 <HID_Device_USBTask+0x136>
     fa8:	f7 01       	movw	r30, r14
     faa:	84 85       	ldd	r24, Z+12	; 0x0c
     fac:	95 85       	ldd	r25, Z+13	; 0x0d
     fae:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     fb0:	86 87       	std	Z+14, r24	; 0x0e
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	8f 70       	andi	r24, 0x0F	; 15
     fb6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 11       	cpse	r24, r1
     fbe:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     fc2:	69 81       	ldd	r22, Y+1	; 0x01
     fc4:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fca:	c4 01       	movw	r24, r8
     fcc:	9f d9       	rcall	.-3266   	; 0x30c <Endpoint_Write_Stream_LE>
     fce:	80 91 e8 00 	lds	r24, 0x00E8
     fd2:	8e 77       	andi	r24, 0x7E	; 126
     fd4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fd8:	80 91 e4 00 	lds	r24, 0x00E4
     fdc:	90 91 e5 00 	lds	r25, 0x00E5
     fe0:	f7 01       	movw	r30, r14
     fe2:	93 87       	std	Z+11, r25	; 0x0b
     fe4:	82 87       	std	Z+10, r24	; 0x0a
     fe6:	86 2d       	mov	r24, r6
     fe8:	97 2d       	mov	r25, r7

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	9e bf       	out	0x3e, r25	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	8d bf       	out	0x3d, r24	; 61
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	be be       	out	0x3e, r11	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	ad be       	out	0x3d, r10	; 61
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	7f 90       	pop	r7
    101e:	6f 90       	pop	r6
    1020:	5f 90       	pop	r5
    1022:	4f 90       	pop	r4
    1024:	08 95       	ret

00001026 <memcmp>:
    1026:	fb 01       	movw	r30, r22
    1028:	dc 01       	movw	r26, r24
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <memcmp+0xe>
    102c:	8d 91       	ld	r24, X+
    102e:	01 90       	ld	r0, Z+
    1030:	80 19       	sub	r24, r0
    1032:	21 f4       	brne	.+8      	; 0x103c <memcmp+0x16>
    1034:	41 50       	subi	r20, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	c8 f7       	brcc	.-14     	; 0x102c <memcmp+0x6>
    103a:	88 1b       	sub	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	08 95       	ret

00001040 <memcpy>:
    1040:	fb 01       	movw	r30, r22
    1042:	dc 01       	movw	r26, r24
    1044:	02 c0       	rjmp	.+4      	; 0x104a <memcpy+0xa>
    1046:	01 90       	ld	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	41 50       	subi	r20, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	d8 f7       	brcc	.-10     	; 0x1046 <memcpy+0x6>
    1050:	08 95       	ret

00001052 <memset>:
    1052:	dc 01       	movw	r26, r24
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <memset+0x6>
    1056:	6d 93       	st	X+, r22
    1058:	41 50       	subi	r20, 0x01	; 1
    105a:	50 40       	sbci	r21, 0x00	; 0
    105c:	e0 f7       	brcc	.-8      	; 0x1056 <memset+0x4>
    105e:	08 95       	ret

00001060 <_exit>:
    1060:	f8 94       	cli

00001062 <__stop_program>:
    1062:	ff cf       	rjmp	.-2      	; 0x1062 <__stop_program>
