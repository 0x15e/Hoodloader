
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001726  000017ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  00800136  00800136  000017f0  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00002ea7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008b8  00000000  00000000  00002ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e0d0  00000000  00000000  00003781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b0a  00000000  00000000  00011851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005988  00000000  00000000  0001535b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015bc  00000000  00000000  0001ace4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004700  00000000  00000000  0001c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008727  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  000290c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		PORTD |= LEDS_ALL_LEDS;
	}

	static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
	{
		PORTD &= ~LEDMask;
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
	return;
}

void end_pmode(void) {
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
       2:	00 00       	nop
	//	+ buff[19];

}

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>

void end_pmode(void) {
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_MOSI); // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SCK);  // INPUT
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT
       6:	00 00       	nop
}

uint8_t getch() {
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
	AVR_SPI_DDR &= ~(1 << AVR_SS);   // INPUT

	// set hardware SS to input so we can use SPI slave mode
	AVR_SPI_DDR &= ~(1 << AVR_HARDWARE_SS); // INPUT

	ram.isp.pmode = false;
       a:	00 00       	nop
	int16_t ReceivedByte = -1;
	// wait until CDC sends a byte
	while (ReceivedByte < 0)
		ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	return ReceivedByte;
}
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>

void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
       e:	00 00       	nop
			 *  \ingroup Group_GlobalInt
			 */
			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
      12:	00 00       	nop
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(STK_OK);
	}
	else {
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
void sendCDCbyte(uint8_t b){
	//TODO improve this
	// try to send until sucess
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
		USB_USBTask();
      16:	00 00       	nop
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
	while (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, b) != ENDPOINT_READYWAIT_NoError){
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
		USB_USBTask();
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
      1a:	00 00       	nop

void breply(uint8_t b) {
	if (CRC_EOP == getch()) {  // EOP should be next char
		sendCDCbyte(STK_INSYNC);
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
		break;
	case 0x81:
		breply(SWMAJ);
		break;
	case 0x82:
		breply(SWMIN);
      1e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
	return ReceivedByte;
}

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
		sendCDCbyte(b);
		sendCDCbyte(STK_OK);
	}
	else {
		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
      26:	00 00       	nop
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>

void fill(int n) {
	// fill the buffer with the number of bytes passed in from CDC Serial 
	for (int x = 0; x < n; x++)
		ram.ispBuffer[x] = getch();
}
      2a:	00 00       	nop
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
      2c:	a3 c6       	rjmp	.+3398   	; 0xd74 <__vector_11>
      2e:	00 00       	nop

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		Buffer->Base = DataPtr;
		Buffer->Index = 0;
      30:	4a c7       	rjmp	.+3732   	; 0xec6 <__vector_12>
		USB_USBTask();
		while (1){
			// TODO remove this freezing loop!
			LEDs_TurnOnLEDs(LEDS_ERR);
			_delay_ms(100);
			LEDs_TurnOnLEDs(LEDS_ERR);
      32:	00 00       	nop
	//n = spi_send(b);
	spi_send(b);
	//if (n != a) error = -1;
	//n = spi_send(c);
	spi_send(c);
	return spi_send(d);
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
		Buffer->Size = Size;
		Buffer->Count = 0;
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
      3a:	00 00       	nop
	if (length > ram.isp.param.eepromsize) {
		ram.isp.error++;
		return STK_FAILED;
	}
	while (remaining > EECHUNK) {
		write_eeprom_chunk(start, EECHUNK);
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
		LRingBuffer_InitBuffer(&ram.USARTtoUSB_Buffer, ram.USARTtoUSB_Buffer_Data, sizeof(ram.USARTtoUSB_Buffer_Data));

	// HID Setup
	HIDreset();

	ram.skipNHP = 0;
      3e:	00 00       	nop
		// signalize Error
		LEDs_TurnOnLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>

	// HID Setup
	HIDreset();

	ram.skipNHP = 0;
	NHPreset(&ram.NHP);
      42:	00 00       	nop
	sendCDCbyte(STK_INSYNC);
	uint8_t high = spi_transaction(0x30, 0x00, 0x00, 0x00);
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
		addr & 0xFF,
		0);
}

char flash_read_page(int length) {
	for (int x = 0; x < length; x += 2) {
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
	_delay_ms(50 + EXTRA_SPI_DELAY);

	AVR_SPI_PORT &= ~(1 << AVR_SS); // LOW

	_delay_ms(50 + EXTRA_SPI_DELAY); // extra delay added from adafruit <--
	AVR_SPI_DDR &= ~(1 << AVR_MISO); // INPUT
      4a:	00 00       	nop
	AVR_SPI_DDR |= (1 << AVR_MOSI); // OUTPUT
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>

	spi_transaction(0xAC, 0x53, 0x00, 0x00);
      4e:	00 00       	nop
		uint8_t high = flash_read(HIGH, ram.isp._addr);
		sendCDCbyte(high);
		ram.isp._addr++;
	}
	return STK_OK;
}
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
// write (length) bytes, (start) is a byte address
uint8_t write_eeprom_chunk(int start, int length) {
      52:	00 00       	nop
	sendCDCbyte(high);
	uint8_t middle = spi_transaction(0x30, 0x00, 0x01, 0x00);
	sendCDCbyte(middle);
	uint8_t low = spi_transaction(0x30, 0x00, 0x02, 0x00);
	sendCDCbyte(low);
	sendCDCbyte(STK_OK);
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
		write_flash(length);
		return;
	}
	if (memtype == 'E') {
		result = (char)write_eeprom(length);
		if (CRC_EOP == getch()) {
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
		_delay_ms(50);
		LEDs_TurnOnLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
      5a:	00 00       	nop
		start += EECHUNK;
		remaining -= EECHUNK;
	}
	write_eeprom_chunk(start, remaining);
	return STK_OK;
}
      5c:	32 c2       	rjmp	.+1124   	; 0x4c2 <__vector_23>
	for (int x = 0; x < length; x++) {
		int addr = start + x;
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
      5e:	00 00       	nop
		LEDs_TurnOnLEDs(LEDS_PMODE);
		_delay_ms(50);
		LEDs_TurnOffLEDs(LEDS_PMODE);

		sendCDCbyte(STK_NOSYNC);
		ram.isp.error++;
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
      62:	00 00       	nop
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
      66:	00 00       	nop
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000a4 <ManufacturerString>:
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
		case STK_GET_SYNC:
			ram.isp.error = 0;
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      c2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
      d2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      e2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				sendCDCbyte('V');
				sendCDCbyte('R');
				sendCDCbyte(' ');
				sendCDCbyte('I');
				sendCDCbyte('S');
				sendCDCbyte('P');
      f2:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000100 <DeviceDescriptor>:

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     100:	12 01 10 01 02 00 00 08 eb 03 68 6e 01 00 01 02     ..........hn....
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     110:	dc 01                                               ..

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d2 e0       	ldi	r29, 0x02	; 2
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e6 e2       	ldi	r30, 0x26	; 38
     126:	f7 e1       	ldi	r31, 0x17	; 23
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a6 33       	cpi	r26, 0x36	; 54
     130:	b1 07       	cpc	r27, r17
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	a6 e3       	ldi	r26, 0x36	; 54
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	b1 e0       	ldi	r27, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a5 35       	cpi	r26, 0x55	; 85
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	63 d0       	rcall	.+198    	; 0x20c <main>
     146:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <_exit>

0000014a <__bad_interrupt>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <LRingBuffer_Append.constprop.4>:
     14c:	e6 e3       	ldi	r30, 0x36	; 54
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	4f b7       	in	r20, 0x3f	; 63
     152:	f8 94       	cli
     154:	20 81       	ld	r18, Z
     156:	31 81       	ldd	r19, Z+1	; 0x01
     158:	21 15       	cp	r18, r1
     15a:	31 05       	cpc	r19, r1
     15c:	09 f4       	brne	.+2      	; 0x160 <LRingBuffer_Append.constprop.4+0x14>
     15e:	1d c0       	rjmp	.+58     	; 0x19a <LRingBuffer_Append.constprop.4+0x4e>
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     160:	82 81       	ldd	r24, Z+2	; 0x02
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	54 81       	ldd	r21, Z+4	; 0x04
     166:	85 1b       	sub	r24, r21
     168:	91 09       	sbc	r25, r1
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	97 ff       	sbrs	r25, 7
     16e:	03 c0       	rjmp	.+6      	; 0x176 <LRingBuffer_Append.constprop.4+0x2a>
     170:	53 81       	ldd	r21, Z+3	; 0x03
     172:	85 0f       	add	r24, r21
				ReportData     += 4;
     174:	91 1d       	adc	r25, r1
     176:	d9 01       	movw	r26, r18
     178:	a8 0f       	add	r26, r24
				break;
     17a:	b9 1f       	adc	r27, r25

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17c:	6c 93       	st	X, r22
     17e:	84 81       	ldd	r24, Z+4	; 0x04
     180:	93 81       	ldd	r25, Z+3	; 0x03
     182:	89 13       	cpse	r24, r25
     184:	08 c0       	rjmp	.+16     	; 0x196 <LRingBuffer_Append.constprop.4+0x4a>
     186:	92 81       	ldd	r25, Z+2	; 0x02
     188:	91 11       	cpse	r25, r1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <LRingBuffer_Append.constprop.4+0x42>
     18c:	82 83       	std	Z+2, r24	; 0x02
     18e:	82 81       	ldd	r24, Z+2	; 0x02
     190:	81 50       	subi	r24, 0x01	; 1
     192:	82 83       	std	Z+2, r24	; 0x02
     194:	02 c0       	rjmp	.+4      	; 0x19a <LRingBuffer_Append.constprop.4+0x4e>
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	84 83       	std	Z+4, r24	; 0x04
     19a:	4f bf       	out	0x3f, r20	; 63
     19c:	08 95       	ret

0000019e <SetupHardware>:
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	84 b7       	in	r24, 0x34	; 52
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	84 bf       	out	0x34, r24	; 52
     1a8:	28 e1       	ldi	r18, 0x18	; 24
     1aa:	0f b6       	in	r0, 0x3f	; 63
				ReportSize     -= 2;
     1ac:	f8 94       	cli
     1ae:	20 93 60 00 	sts	0x0060, r18
     1b2:	10 92 60 00 	sts	0x0060, r1
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	85 bd       	out	0x25, r24	; 37
     1bc:	80 e1       	ldi	r24, 0x10	; 16
     1be:	90 e0       	ldi	r25, 0x00	; 0
				ReportData     += 2;
     1c0:	90 93 cd 00 	sts	0x00CD, r25
     1c4:	80 93 cc 00 	sts	0x00CC, r24
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c8:	ca ec       	ldi	r28, 0xCA	; 202
     1ca:	d0 e0       	ldi	r29, 0x00	; 0
     1cc:	96 e0       	ldi	r25, 0x06	; 6
     1ce:	98 83       	st	Y, r25
     1d0:	a8 ec       	ldi	r26, 0xC8	; 200
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
				ReportSize     -= 1;
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	8c 93       	st	X, r24
     1d8:	e9 ec       	ldi	r30, 0xC9	; 201
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	20 83       	st	Z, r18
     1de:	53 9a       	sbi	0x0a, 3	; 10
     1e0:	5a 9a       	sbi	0x0b, 2	; 11
     1e2:	5b 9a       	sbi	0x0b, 3	; 11
     1e4:	10 82       	st	Z, r1
     1e6:	1c 92       	st	X, r1
				ReportData     += 1;
     1e8:	18 82       	st	Y, r1
     1ea:	98 83       	st	Y, r25
     1ec:	8c 93       	st	X, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	88 e9       	ldi	r24, 0x98	; 152
     1f0:	80 83       	st	Z, r24
     1f2:	5b 98       	cbi	0x0b, 3	; 11
     1f4:	8a b1       	in	r24, 0x0a	; 10
     1f6:	80 63       	ori	r24, 0x30	; 48
     1f8:	8a b9       	out	0x0a, r24	; 10
     1fa:	8b b1       	in	r24, 0x0b	; 11
     1fc:	80 63       	ori	r24, 0x30	; 48
     1fe:	8b b9       	out	0x0b, r24	; 11
     200:	aa d5       	rcall	.+2900   	; 0xd56 <USB_Init>
     202:	5f 9a       	sbi	0x0b, 7	; 11
     204:	57 9a       	sbi	0x0a, 7	; 10
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <main>:
     20c:	e6 e3       	ldi	r30, 0x36	; 54
     20e:	f1 e0       	ldi	r31, 0x01	; 1
     210:	2f b7       	in	r18, 0x3f	; 63
     212:	f8 94       	cli
     214:	86 e4       	ldi	r24, 0x46	; 70
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
     21c:	12 82       	std	Z+2, r1	; 0x02
     21e:	84 e6       	ldi	r24, 0x64	; 100
     220:	83 83       	std	Z+3, r24	; 0x03
     222:	14 82       	std	Z+4, r1	; 0x04
     224:	2f bf       	out	0x3f, r18	; 63
     226:	10 92 3b 01 	sts	0x013B, r1
     22a:	86 ef       	ldi	r24, 0xF6	; 246
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	d6 d2       	rcall	.+1452   	; 0x7dc <NHPreset>
     230:	10 92 45 01 	sts	0x0145, r1
     234:	bb d2       	rcall	.+1398   	; 0x7ac <HIDreset>
     236:	c7 d2       	rcall	.+1422   	; 0x7c6 <avrispReset>
     238:	b2 df       	rcall	.-156    	; 0x19e <SetupHardware>
     23a:	78 94       	sei
     23c:	c6 e3       	ldi	r28, 0x36	; 54
     23e:	d1 e0       	ldi	r29, 0x01	; 1
     240:	80 91 3e 01 	lds	r24, 0x013E
     244:	81 11       	cpse	r24, r1
     246:	06 c0       	rjmp	.+12     	; 0x254 <main+0x48>
     248:	83 b1       	in	r24, 0x03	; 3
     24a:	80 72       	andi	r24, 0x20	; 32
     24c:	83 b9       	out	0x03, r24	; 3
     24e:	81 11       	cpse	r24, r1
     250:	01 c0       	rjmp	.+2      	; 0x254 <main+0x48>
     252:	68 d2       	rcall	.+1232   	; 0x724 <clearHIDReports>
     254:	80 e1       	ldi	r24, 0x10	; 16
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 b1 09 	call	0x1362	; 0x1362 <CDC_Device_ReceiveByte>
     25c:	97 fd       	sbrc	r25, 7
     25e:	19 c0       	rjmp	.+50     	; 0x292 <main+0x86>
     260:	40 91 24 01 	lds	r20, 0x0124
     264:	50 91 25 01 	lds	r21, 0x0125
     268:	60 91 26 01 	lds	r22, 0x0126
     26c:	70 91 27 01 	lds	r23, 0x0127
     270:	41 30       	cpi	r20, 0x01	; 1
     272:	51 05       	cpc	r21, r1
     274:	61 05       	cpc	r22, r1
     276:	71 05       	cpc	r23, r1
     278:	61 f0       	breq	.+24     	; 0x292 <main+0x86>
     27a:	5c 98       	cbi	0x0b, 4	; 11
     27c:	90 91 45 01 	lds	r25, 0x0145
     280:	9c 60       	ori	r25, 0x0C	; 12
     282:	90 93 45 01 	sts	0x0145, r25
     286:	90 91 c8 00 	lds	r25, 0x00C8
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28a:	95 ff       	sbrs	r25, 5
     28c:	fc cf       	rjmp	.-8      	; 0x286 <main+0x7a>
     28e:	80 93 ce 00 	sts	0x00CE, r24
     292:	2f b7       	in	r18, 0x3f	; 63
     294:	f8 94       	cli
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     296:	80 91 36 01 	lds	r24, 0x0136
     29a:	90 91 37 01 	lds	r25, 0x0137
     29e:	89 2b       	or	r24, r25
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <main+0x9c>
     2a2:	80 91 3a 01 	lds	r24, 0x013A
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <main+0x9e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     2aa:	2f bf       	out	0x3f, r18	; 63

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	00 97       	sbiw	r24, 0x00	; 0
     2b0:	19 f4       	brne	.+6      	; 0x2b8 <main+0xac>
     2b2:	a8 99       	sbic	0x15, 0	; 21
     2b4:	72 c0       	rjmp	.+228    	; 0x39a <__stack+0x9b>
     2b6:	f8 c0       	rjmp	.+496    	; 0x4a8 <__stack+0x1a9>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b8:	5d 98       	cbi	0x0b, 5	; 11
     2ba:	20 91 45 01 	lds	r18, 0x0145

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2be:	23 60       	ori	r18, 0x03	; 3
     2c0:	20 93 45 01 	sts	0x0145, r18
     2c4:	20 91 11 01 	lds	r18, 0x0111
				break;
     2c8:	2f 70       	andi	r18, 0x0F	; 15

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ca:	20 93 e9 00 	sts	0x00E9, r18
     2ce:	20 91 e8 00 	lds	r18, 0x00E8
     2d2:	20 ff       	sbrs	r18, 0
				break;
     2d4:	ee cf       	rjmp	.-36     	; 0x2b2 <main+0xa6>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	80 31       	cpi	r24, 0x10	; 16
     2d8:	91 05       	cpc	r25, r1
     2da:	10 f0       	brcs	.+4      	; 0x2e0 <main+0xd4>
     2dc:	8f e0       	ldi	r24, 0x0F	; 15
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	f8 2e       	mov	r15, r24
     2e2:	00 e0       	ldi	r16, 0x00	; 0
				break;
     2e4:	10 e0       	ldi	r17, 0x00	; 0

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	56 c0       	rjmp	.+172    	; 0x394 <__stack+0x95>
     2e8:	80 91 3b 01 	lds	r24, 0x013B
     2ec:	88 23       	and	r24, r24
     2ee:	31 f0       	breq	.+12     	; 0x2fc <main+0xf0>
				break;
     2f0:	80 91 45 01 	lds	r24, 0x0145

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f4:	80 63       	ori	r24, 0x30	; 48
     2f6:	80 93 45 01 	sts	0x0145, r24
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <main+0xf2>
     2fc:	13 d2       	rcall	.+1062   	; 0x724 <clearHIDReports>
     2fe:	80 91 20 01 	lds	r24, 0x0120
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	80 fd       	sbrc	r24, 0
     304:	0c c0       	rjmp	.+24     	; 0x31e <__stack+0x1f>
				break;
     306:	80 91 3b 01 	lds	r24, 0x013B

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     30a:	88 23       	and	r24, r24
     30c:	41 f0       	breq	.+16     	; 0x31e <__stack+0x1f>
     30e:	fe 01       	movw	r30, r28
     310:	2f b7       	in	r18, 0x3f	; 63
     312:	f8 94       	cli
     314:	80 81       	ld	r24, Z
				break;
     316:	91 81       	ldd	r25, Z+1	; 0x01

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	89 2b       	or	r24, r25
     31a:	61 f5       	brne	.+88     	; 0x374 <__stack+0x75>
				break;
     31c:	31 c0       	rjmp	.+98     	; 0x380 <__stack+0x81>

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	7f b7       	in	r23, 0x3f	; 63
     320:	f8 94       	cli
     322:	20 91 36 01 	lds	r18, 0x0136
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	30 91 37 01 	lds	r19, 0x0137
     32a:	21 15       	cp	r18, r1

				if (ParserData->UsingReportIDs)
     32c:	31 05       	cpc	r19, r1
     32e:	41 f0       	breq	.+16     	; 0x340 <__stack+0x41>
     330:	40 91 3a 01 	lds	r20, 0x013A
     334:	44 23       	and	r20, r20
     336:	21 f0       	breq	.+8      	; 0x340 <__stack+0x41>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	14 16       	cp	r1, r20
     33c:	15 06       	cpc	r1, r21
     33e:	24 f0       	brlt	.+8      	; 0x348 <__stack+0x49>
     340:	7f bf       	out	0x3f, r23	; 63
     342:	6f ef       	ldi	r22, 0xFF	; 255
     344:	7f ef       	ldi	r23, 0xFF	; 255
     346:	10 c0       	rjmp	.+32     	; 0x368 <__stack+0x69>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	80 91 38 01 	lds	r24, 0x0138

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	84 1b       	sub	r24, r20
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	95 0b       	sbc	r25, r21
     352:	97 ff       	sbrs	r25, 7
     354:	04 c0       	rjmp	.+8      	; 0x35e <__stack+0x5f>
     356:	40 91 39 01 	lds	r20, 0x0139
     35a:	84 0f       	add	r24, r20
     35c:	91 1d       	adc	r25, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	f9 01       	movw	r30, r18
     360:	e8 0f       	add	r30, r24
     362:	f9 1f       	adc	r31, r25
     364:	60 81       	ld	r22, Z
     366:	7f bf       	out	0x3f, r23	; 63
     368:	80 e1       	ldi	r24, 0x10	; 16
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	92 d7       	rcall	.+3876   	; 0x1292 <CDC_Device_SendByte>
     36e:	88 23       	and	r24, r24
     370:	71 f2       	breq	.-100    	; 0x30e <__stack+0xf>
     372:	9f cf       	rjmp	.-194    	; 0x2b2 <main+0xa6>
     374:	84 81       	ldd	r24, Z+4	; 0x04
     376:	81 11       	cpse	r24, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	01 c0       	rjmp	.+2      	; 0x37c <__stack+0x7d>
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__stack+0x81>
     37c:	81 50       	subi	r24, 0x01	; 1
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	84 83       	std	Z+4, r24	; 0x04
     380:	2f bf       	out	0x3f, r18	; 63
     382:	80 91 3b 01 	lds	r24, 0x013B
     386:	88 23       	and	r24, r24
     388:	19 f0       	breq	.+6      	; 0x390 <__stack+0x91>
     38a:	81 50       	subi	r24, 0x01	; 1
     38c:	80 93 3b 01 	sts	0x013B, r24
     390:	0f 5f       	subi	r16, 0xFF	; 255
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	f0 12       	cpse	r15, r16
     396:	a8 cf       	rjmp	.-176    	; 0x2e8 <main+0xdc>
     398:	8c cf       	rjmp	.-232    	; 0x2b2 <main+0xa6>
     39a:	a8 9a       	sbi	0x15, 0	; 21
     39c:	90 91 45 01 	lds	r25, 0x0145
     3a0:	89 2f       	mov	r24, r25
     3a2:	80 73       	andi	r24, 0x30	; 48
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <__stack+0xa9>
     3a6:	5e c0       	rjmp	.+188    	; 0x464 <__stack+0x165>
     3a8:	89 2f       	mov	r24, r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	8d 5f       	subi	r24, 0xFD	; 253
     3b0:	83 70       	andi	r24, 0x03	; 3
     3b2:	28 2f       	mov	r18, r24
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	22 95       	swap	r18
     3b6:	20 7f       	andi	r18, 0xF0	; 240
     3b8:	9f 7c       	andi	r25, 0xCF	; 207
     3ba:	92 2b       	or	r25, r18
     3bc:	90 93 45 01 	sts	0x0145, r25

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3c0:	81 11       	cpse	r24, r1
     3c2:	50 c0       	rjmp	.+160    	; 0x464 <__stack+0x165>
     3c4:	80 91 3e 01 	lds	r24, 0x013E
     3c8:	81 11       	cpse	r24, r1
     3ca:	4c c0       	rjmp	.+152    	; 0x464 <__stack+0x165>
				break;
     3cc:	e0 91 f6 01 	lds	r30, 0x01F6

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3d0:	e6 ff       	sbrs	r30, 6
     3d2:	15 c0       	rjmp	.+42     	; 0x3fe <__stack+0xff>
     3d4:	e6 95       	lsr	r30
     3d6:	e6 95       	lsr	r30
     3d8:	e6 95       	lsr	r30
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	e7 70       	andi	r30, 0x07	; 7
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	e5 50       	subi	r30, 0x05	; 5
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	60 81       	ld	r22, Z
     3e4:	86 e3       	ldi	r24, 0x36	; 54
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	b1 de       	rcall	.-670    	; 0x14c <LRingBuffer_Append.constprop.4>
     3ea:	80 91 f6 01 	lds	r24, 0x01F6
     3ee:	86 fb       	bst	r24, 6
     3f0:	88 27       	eor	r24, r24
     3f2:	80 f9       	bld	r24, 0
     3f4:	90 91 3b 01 	lds	r25, 0x013B
     3f8:	89 0f       	add	r24, r25
				break;
     3fa:	80 93 3b 01 	sts	0x013B, r24
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fe:	80 91 f6 01 	lds	r24, 0x01F6
     402:	87 fd       	sbrc	r24, 7
     404:	2b c0       	rjmp	.+86     	; 0x45c <__stack+0x15d>
     406:	86 95       	lsr	r24
     408:	86 95       	lsr	r24

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	86 95       	lsr	r24
     40c:	87 70       	andi	r24, 0x07	; 7
     40e:	00 e0       	ldi	r16, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	10 e0       	ldi	r17, 0x00	; 0
     412:	e8 2e       	mov	r14, r24
     414:	f1 2c       	mov	r15, r1
     416:	86 e3       	ldi	r24, 0x36	; 54
     418:	c8 2e       	mov	r12, r24
     41a:	81 e0       	ldi	r24, 0x01	; 1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	d8 2e       	mov	r13, r24
     41e:	ce 0c       	add	r12, r14
     420:	df 1c       	adc	r13, r15
     422:	09 c0       	rjmp	.+18     	; 0x436 <__stack+0x137>
     424:	f6 01       	movw	r30, r12
     426:	e0 0f       	add	r30, r16

					while (CurrCollectionPath->Parent != NULL)
     428:	f1 1f       	adc	r31, r17
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	eb 53       	subi	r30, 0x3B	; 59
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	60 81       	ld	r22, Z
     430:	86 e3       	ldi	r24, 0x36	; 54
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	8b de       	rcall	.-746    	; 0x14c <LRingBuffer_Append.constprop.4>
     436:	01 50       	subi	r16, 0x01	; 1
     438:	11 09       	sbc	r17, r1
     43a:	c8 01       	movw	r24, r16
     43c:	80 95       	com	r24
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	90 95       	com	r25
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	8e 15       	cp	r24, r14
     442:	9f 05       	cpc	r25, r15
     444:	7c f3       	brlt	.-34     	; 0x424 <__stack+0x125>
     446:	80 91 f6 01 	lds	r24, 0x01F6
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     44a:	86 95       	lsr	r24
     44c:	86 95       	lsr	r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	86 95       	lsr	r24
     450:	87 70       	andi	r24, 0x07	; 7
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	90 91 3b 01 	lds	r25, 0x013B
     456:	89 0f       	add	r24, r25
     458:	80 93 3b 01 	sts	0x013B, r24
     45c:	86 ef       	ldi	r24, 0xF6	; 246
     45e:	91 e0       	ldi	r25, 0x01	; 1

				if (UsageListSize)
     460:	bd d1       	rcall	.+890    	; 0x7dc <NHPreset>
     462:	70 d1       	rcall	.+736    	; 0x744 <checkNHPControlAddressError>
     464:	90 91 45 01 	lds	r25, 0x0145
     468:	89 2f       	mov	r24, r25
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	83 70       	andi	r24, 0x03	; 3
     46c:	49 f0       	breq	.+18     	; 0x480 <__stack+0x181>
     46e:	81 50       	subi	r24, 0x01	; 1
     470:	83 70       	andi	r24, 0x03	; 3
     472:	9c 7f       	andi	r25, 0xFC	; 252
     474:	98 2b       	or	r25, r24
     476:	90 93 45 01 	sts	0x0145, r25
     47a:	81 11       	cpse	r24, r1
     47c:	01 c0       	rjmp	.+2      	; 0x480 <__stack+0x181>
     47e:	5d 9a       	sbi	0x0b, 5	; 11

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	90 91 45 01 	lds	r25, 0x0145
					  UsageList[i - 1] = UsageList[i];
     484:	89 2f       	mov	r24, r25
     486:	8c 70       	andi	r24, 0x0C	; 12
     488:	79 f0       	breq	.+30     	; 0x4a8 <__stack+0x1a9>
     48a:	89 2f       	mov	r24, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	86 95       	lsr	r24
     48e:	86 95       	lsr	r24
     490:	8d 5f       	subi	r24, 0xFD	; 253
     492:	83 70       	andi	r24, 0x03	; 3
     494:	28 2f       	mov	r18, r24
     496:	22 0f       	add	r18, r18
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	22 0f       	add	r18, r18
     49a:	93 7f       	andi	r25, 0xF3	; 243
     49c:	92 2b       	or	r25, r18
     49e:	90 93 45 01 	sts	0x0145, r25
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	81 11       	cpse	r24, r1
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__stack+0x1a9>
     4a6:	5c 9a       	sbi	0x0b, 4	; 11
     4a8:	80 e1       	ldi	r24, 0x10	; 16
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	44 d7       	rcall	.+3720   	; 0x1336 <CDC_Device_USBTask>
     4ae:	b0 d6       	rcall	.+3424   	; 0x1210 <USB_USBTask>
     4b0:	c7 ce       	rjmp	.-626    	; 0x240 <main+0x34>

000004b2 <EVENT_USB_Device_Connect>:
     4b2:	08 95       	ret

000004b4 <EVENT_USB_Device_Disconnect>:
     4b4:	08 95       	ret

000004b6 <EVENT_USB_Device_ConfigurationChanged>:
     4b6:	80 e1       	ldi	r24, 0x10	; 16
     4b8:	91 e0       	ldi	r25, 0x01	; 1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	c6 c6       	rjmp	.+3468   	; 0x1248 <CDC_Device_ConfigureEndpoints>

000004bc <EVENT_USB_Device_ControlRequest>:
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	7e c7       	rjmp	.+3836   	; 0x13be <CDC_Device_ProcessControlRequest>

000004c2 <__vector_23>:
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
				break;
     4de:	ff 93       	push	r31
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	40 91 ce 00 	lds	r20, 0x00CE
     4e4:	80 91 4c 02 	lds	r24, 0x024C
     4e8:	84 30       	cpi	r24, 0x04	; 4
     4ea:	e9 f4       	brne	.+58     	; 0x526 <__vector_23+0x64>
     4ec:	e6 e3       	ldi	r30, 0x36	; 54
     4ee:	f1 e0       	ldi	r31, 0x01	; 1
     4f0:	2f b7       	in	r18, 0x3f	; 63
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	f8 94       	cli
     4f4:	80 81       	ld	r24, Z
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	a1 f0       	breq	.+40     	; 0x524 <__vector_23+0x62>
     4fc:	54 81       	ldd	r21, Z+4	; 0x04
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	33 81       	ldd	r19, Z+3	; 0x03
     500:	53 13       	cpse	r21, r19
     502:	01 c0       	rjmp	.+2      	; 0x506 <__vector_23+0x44>
     504:	0f c0       	rjmp	.+30     	; 0x524 <__vector_23+0x62>

					if (UsageListSize)
     506:	32 81       	ldd	r19, Z+2	; 0x02
     508:	dc 01       	movw	r26, r24
     50a:	a3 0f       	add	r26, r19
     50c:	b1 1d       	adc	r27, r1
     50e:	4c 93       	st	X, r20
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	83 2f       	mov	r24, r19
     512:	8f 5f       	subi	r24, 0xFF	; 255
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	93 81       	ldd	r25, Z+3	; 0x03
     518:	89 13       	cpse	r24, r25
     51a:	01 c0       	rjmp	.+2      	; 0x51e <__vector_23+0x5c>
     51c:	12 82       	std	Z+2, r1	; 0x02
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	84 83       	std	Z+4, r24	; 0x04
     524:	2f bf       	out	0x3f, r18	; 63

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	ff 91       	pop	r31
     528:	ef 91       	pop	r30
						  UsageList[i - 1] = UsageList[i];
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <CALLBACK_USB_GetDescriptor>:
     544:	29 2f       	mov	r18, r25
     546:	33 27       	eor	r19, r19
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	22 30       	cpi	r18, 0x02	; 2
     54a:	31 05       	cpc	r19, r1
     54c:	39 f0       	breq	.+14     	; 0x55c <CALLBACK_USB_GetDescriptor+0x18>
     54e:	23 30       	cpi	r18, 0x03	; 3
     550:	31 05       	cpc	r19, r1
     552:	49 f0       	breq	.+18     	; 0x566 <CALLBACK_USB_GetDescriptor+0x22>
     554:	21 30       	cpi	r18, 0x01	; 1
     556:	31 05       	cpc	r19, r1
     558:	21 f1       	breq	.+72     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x5e>
     55a:	28 c0       	rjmp	.+80     	; 0x5ac <CALLBACK_USB_GetDescriptor+0x68>
     55c:	ee e3       	ldi	r30, 0x3E	; 62
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	82 ec       	ldi	r24, 0xC2	; 194
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	27 c0       	rjmp	.+78     	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x70>
     566:	99 27       	eor	r25, r25
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	91 05       	cpc	r25, r1
     56c:	61 f0       	breq	.+24     	; 0x586 <CALLBACK_USB_GetDescriptor+0x42>
     56e:	82 30       	cpi	r24, 0x02	; 2
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	91 05       	cpc	r25, r1
     572:	81 f0       	breq	.+32     	; 0x594 <CALLBACK_USB_GetDescriptor+0x50>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	89 2b       	or	r24, r25
     576:	d1 f4       	brne	.+52     	; 0x5ac <CALLBACK_USB_GetDescriptor+0x68>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	ee eb       	ldi	r30, 0xBE	; 190
     57a:	f0 e0       	ldi	r31, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	e4 91       	lpm	r30, Z+
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	8e eb       	ldi	r24, 0xBE	; 190
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	17 c0       	rjmp	.+46     	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x70>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	e4 ea       	ldi	r30, 0xA4	; 164
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	e4 91       	lpm	r30, Z+
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	84 ea       	ldi	r24, 0xA4	; 164
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	10 c0       	rjmp	.+32     	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x70>
     594:	e4 e7       	ldi	r30, 0x74	; 116
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e4 91       	lpm	r30, Z+
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	84 e7       	ldi	r24, 0x74	; 116
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x70>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	e2 e1       	ldi	r30, 0x12	; 18
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x70>
     5ac:	e0 e0       	ldi	r30, 0x00	; 0
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	da 01       	movw	r26, r20
     5b6:	8d 93       	st	X+, r24
     5b8:	9c 93       	st	X, r25
     5ba:	cf 01       	movw	r24, r30
     5bc:	08 95       	ret

000005be <LRingBuffer_Append_Buffer.constprop.0>:
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	64 0f       	add	r22, r20
     5d0:	75 1f       	adc	r23, r21
     5d2:	c6 e3       	ldi	r28, 0x36	; 54
     5d4:	d1 e0       	ldi	r29, 0x01	; 1
     5d6:	2c c0       	rjmp	.+88     	; 0x630 <LRingBuffer_Append_Buffer.constprop.0+0x72>
     5d8:	fb 01       	movw	r30, r22
     5da:	e2 1b       	sub	r30, r18
     5dc:	f3 0b       	sbc	r31, r19
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	00 81       	ld	r16, Z
     5e2:	fe 01       	movw	r30, r28
     5e4:	1f b7       	in	r17, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	a0 81       	ld	r26, Z
     5ea:	b1 81       	ldd	r27, Z+1	; 0x01
     5ec:	10 97       	sbiw	r26, 0x00	; 0
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <LRingBuffer_Append_Buffer.constprop.0+0x34>
     5f0:	1c c0       	rjmp	.+56     	; 0x62a <LRingBuffer_Append_Buffer.constprop.0+0x6c>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	f4 80       	ldd	r15, Z+4	; 0x04
     5f8:	8f 19       	sub	r24, r15
					  return HID_PARSE_InsufficientReportItems;
     5fa:	91 09       	sbc	r25, r1
     5fc:	01 97       	sbiw	r24, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	97 ff       	sbrs	r25, 7
     600:	03 c0       	rjmp	.+6      	; 0x608 <LRingBuffer_Append_Buffer.constprop.0+0x4a>
     602:	f3 80       	ldd	r15, Z+3	; 0x03
     604:	8f 0d       	add	r24, r15
     606:	91 1d       	adc	r25, r1
     608:	a8 0f       	add	r26, r24
     60a:	b9 1f       	adc	r27, r25
     60c:	0c 93       	st	X, r16
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	89 13       	cpse	r24, r25
     614:	08 c0       	rjmp	.+16     	; 0x626 <LRingBuffer_Append_Buffer.constprop.0+0x68>
     616:	92 81       	ldd	r25, Z+2	; 0x02
     618:	91 11       	cpse	r25, r1
     61a:	01 c0       	rjmp	.+2      	; 0x61e <LRingBuffer_Append_Buffer.constprop.0+0x60>
     61c:	82 83       	std	Z+2, r24	; 0x02
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	82 81       	ldd	r24, Z+2	; 0x02
     620:	81 50       	subi	r24, 0x01	; 1
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	02 c0       	rjmp	.+4      	; 0x62a <LRingBuffer_Append_Buffer.constprop.0+0x6c>
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	84 83       	std	Z+4, r24	; 0x04
     62a:	1f bf       	out	0x3f, r17	; 63
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	24 17       	cp	r18, r20
     632:	35 07       	cpc	r19, r21
     634:	8c f2       	brlt	.-94     	; 0x5d8 <LRingBuffer_Append_Buffer.constprop.0+0x1a>
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	08 95       	ret

00000642 <CALLBACK_HID_Device_CreateHIDReport>:
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	7b 01       	movw	r14, r22
     650:	c9 01       	movw	r24, r18
     652:	e8 01       	movw	r28, r16
     654:	e0 91 aa 01 	lds	r30, 0x01AA
     658:	e3 30       	cpi	r30, 0x03	; 3
     65a:	31 f0       	breq	.+12     	; 0x668 <CALLBACK_HID_Device_CreateHIDReport+0x26>
     65c:	10 92 ec 01 	sts	0x01EC, r1
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	e4 51       	subi	r30, 0x14	; 20
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	10 82       	st	Z, r1
     668:	40 91 ab 01 	lds	r20, 0x01AB
     66c:	ed ea       	ldi	r30, 0xAD	; 173
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	bf 01       	movw	r22, r30
     674:	0e 94 81 0b 	call	0x1702	; 0x1702 <memcpy>
     678:	80 91 aa 01 	lds	r24, 0x01AA
     67c:	f7 01       	movw	r30, r14
					  ParserData->TotalReportItems++;
     67e:	80 83       	st	Z, r24
     680:	80 91 ab 01 	lds	r24, 0x01AB
     684:	88 83       	st	Y, r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	10 92 aa 01 	sts	0x01AA, r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	10 92 ac 01 	sts	0x01AC, r1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     690:	10 92 ab 01 	sts	0x01AB, r1
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	08 95       	ret

000006a4 <flushHID>:
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <flushHID+0x8>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	91 e0       	ldi	r25, 0x01	; 1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	3a d7       	rcall	.+3700   	; 0x1520 <HID_Device_USBTask>
     6ac:	80 91 aa 01 	lds	r24, 0x01AA
     6b0:	88 23       	and	r24, r24
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <flushHID+0x1c>
     6b4:	90 91 ab 01 	lds	r25, 0x01AB
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	80 91 ac 01 	lds	r24, 0x01AC

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	98 17       	cp	r25, r24
     6be:	99 f3       	breq	.-26     	; 0x6a6 <flushHID+0x2>
     6c0:	08 95       	ret

000006c2 <getHIDReportLength>:
     6c2:	81 50       	subi	r24, 0x01	; 1
     6c4:	89 30       	cpi	r24, 0x09	; 9
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	30 f4       	brcc	.+12     	; 0x6d4 <getHIDReportLength+0x12>
     6c8:	e8 2f       	mov	r30, r24
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	e5 5d       	subi	r30, 0xD5	; 213
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	80 81       	ld	r24, Z
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	08 95       	ret
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret

000006d8 <clearHIDReport>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	18 2f       	mov	r17, r24
     6e0:	c8 2f       	mov	r28, r24
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
     6e4:	c4 51       	subi	r28, 0x14	; 20
     6e6:	de 4f       	sbci	r29, 0xFE	; 254
     6e8:	88 81       	ld	r24, Y
     6ea:	81 11       	cpse	r24, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	17 c0       	rjmp	.+46     	; 0x71c <clearHIDReport+0x44>
     6ee:	13 30       	cpi	r17, 0x03	; 3
     6f0:	a9 f0       	breq	.+42     	; 0x71c <clearHIDReport+0x44>
     6f2:	81 2f       	mov	r24, r17
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	e6 df       	rcall	.-52     	; 0x6c2 <getHIDReportLength>
     6f6:	88 23       	and	r24, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	89 f0       	breq	.+34     	; 0x71c <clearHIDReport+0x44>
     6fa:	80 93 ac 01 	sts	0x01AC, r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fe:	80 93 ab 01 	sts	0x01AB, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     702:	10 93 aa 01 	sts	0x01AA, r17
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     706:	2d ea       	ldi	r18, 0xAD	; 173

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	31 e0       	ldi	r19, 0x01	; 1
     70a:	48 2f       	mov	r20, r24
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	60 e0       	ldi	r22, 0x00	; 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	c9 01       	movw	r24, r18
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	ff d7       	rcall	.+4094   	; 0x1714 <memset>
     716:	c6 df       	rcall	.-116    	; 0x6a4 <flushHID>
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	88 83       	st	Y, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <clearHIDReports>:
     724:	cf 93       	push	r28
     726:	80 91 ec 01 	lds	r24, 0x01EC
     72a:	81 11       	cpse	r24, r1
     72c:	09 c0       	rjmp	.+18     	; 0x740 <clearHIDReports+0x1c>
     72e:	c1 e0       	ldi	r28, 0x01	; 1
     730:	8c 2f       	mov	r24, r28
     732:	d2 df       	rcall	.-92     	; 0x6d8 <clearHIDReport>
     734:	cf 5f       	subi	r28, 0xFF	; 255
     736:	ca 30       	cpi	r28, 0x0A	; 10
     738:	d9 f7       	brne	.-10     	; 0x730 <clearHIDReports+0xc>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 ec 01 	sts	0x01EC, r24
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <checkNHPControlAddressError>:
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	00 d0       	rcall	.+0      	; 0x74c <checkNHPControlAddressError+0x8>
     74c:	00 d0       	rcall	.+0      	; 0x74e <checkNHPControlAddressError+0xa>
     74e:	00 d0       	rcall	.+0      	; 0x750 <checkNHPControlAddressError+0xc>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	60 91 aa 01 	lds	r22, 0x01AA
     758:	66 23       	and	r22, r22
     75a:	c1 f0       	breq	.+48     	; 0x78c <checkNHPControlAddressError+0x48>
     75c:	80 91 ac 01 	lds	r24, 0x01AC
     760:	81 11       	cpse	r24, r1
     762:	14 c0       	rjmp	.+40     	; 0x78c <checkNHPControlAddressError+0x48>
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	71 60       	ori	r23, 0x01	; 1
     768:	ae 01       	movw	r20, r28
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	3b d0       	rcall	.+118    	; 0x7e8 <NHPwriteChecksum>
     772:	18 2f       	mov	r17, r24
     774:	48 2f       	mov	r20, r24
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	86 e3       	ldi	r24, 0x36	; 54
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	1e df       	rcall	.-452    	; 0x5be <LRingBuffer_Append_Buffer.constprop.0>
     782:	90 91 3b 01 	lds	r25, 0x013B
     786:	91 0f       	add	r25, r17
     788:	90 93 3b 01 	sts	0x013B, r25
     78c:	10 92 aa 01 	sts	0x01AA, r1
     790:	10 92 ac 01 	sts	0x01AC, r1
     794:	10 92 ab 01 	sts	0x01AB, r1
     798:	26 96       	adiw	r28, 0x06	; 6
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	08 95       	ret

000007ac <HIDreset>:
     7ac:	10 92 aa 01 	sts	0x01AA, r1
     7b0:	10 92 ac 01 	sts	0x01AC, r1
     7b4:	10 92 ab 01 	sts	0x01AB, r1
     7b8:	4a e0       	ldi	r20, 0x0A	; 10
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	8c ee       	ldi	r24, 0xEC	; 236
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	a7 c7       	rjmp	.+3918   	; 0x1714 <memset>

000007c6 <avrispReset>:
//================================================================================
// AVRISP
//================================================================================

void avrispReset(void){
	ram.isp.error = 0;
     7c6:	10 92 3d 01 	sts	0x013D, r1
     7ca:	10 92 3c 01 	sts	0x013C, r1
	ram.isp.pmode = false;
     7ce:	10 92 3e 01 	sts	0x013E, r1
	ram.isp._addr = 0; // just to be sure
     7d2:	10 92 40 01 	sts	0x0140, r1
     7d6:	10 92 3f 01 	sts	0x013F, r1
     7da:	08 95       	ret

000007dc <NHPreset>:
// Read NHP
//================================================================================

void NHPreset(NHP_Data_t* protocol){
	// reset variables
	protocol->reset = true;
     7dc:	fc 01       	movw	r30, r24
     7de:	20 81       	ld	r18, Z
	protocol->leadError = false;
     7e0:	20 68       	ori	r18, 0x80	; 128
     7e2:	2f 7b       	andi	r18, 0xBF	; 191
     7e4:	20 83       	st	Z, r18
     7e6:	08 95       	ret

000007e8 <NHPwriteChecksum>:
	uint32_t temp = ~data;
	uint32_t checksum = (temp << 16) | data;
	return NHPwriteChecksum(address, checksum, buff);
}

uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
     7e8:	fa 01       	movw	r30, r20
     7ea:	2c e1       	ldi	r18, 0x1C	; 28
     7ec:	30 e0       	ldi	r19, 0x00	; 0
	// start with the maximum size of blocks
	uint8_t blocks = 7;
     7ee:	97 e0       	ldi	r25, 0x07	; 7

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
		uint8_t nextvalue = (data >> (7 * (blocks - 3)));
     7f0:	ab 01       	movw	r20, r22
     7f2:	02 2e       	mov	r0, r18
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <NHPwriteChecksum+0x12>
     7f6:	56 95       	lsr	r21
     7f8:	47 95       	ror	r20
     7fa:	0a 94       	dec	r0
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <NHPwriteChecksum+0xe>
		if (nextvalue > NHP_MASK_DATA_3BIT){
     7fe:	48 30       	cpi	r20, 0x08	; 8
     800:	28 f0       	brcs	.+10     	; 0x80c <NHPwriteChecksum+0x24>
			// special case for the MSB
			if (blocks == 7) {
     802:	97 30       	cpi	r25, 0x07	; 7
     804:	59 f4       	brne	.+22     	; 0x81c <NHPwriteChecksum+0x34>
				buff[0] = nextvalue;
     806:	40 83       	st	Z, r20
				blocks--;
     808:	96 e0       	ldi	r25, 0x06	; 6
     80a:	08 c0       	rjmp	.+16     	; 0x81c <NHPwriteChecksum+0x34>
			}
			break;
		}
		else{
			// write the possible first 3 bits and check again after if zero
			buff[0] = nextvalue;
     80c:	40 83       	st	Z, r20
			blocks--;
     80e:	91 50       	subi	r25, 0x01	; 1
			// we have our first bits, stop (nonzero)
			if (nextvalue)
     810:	41 11       	cpse	r20, r1
     812:	04 c0       	rjmp	.+8      	; 0x81c <NHPwriteChecksum+0x34>
     814:	27 50       	subi	r18, 0x07	; 7
     816:	31 09       	sbc	r19, r1
uint8_t NHPwriteChecksum(uint8_t address, uint16_t data, uint8_t* buff){
	// start with the maximum size of blocks
	uint8_t blocks = 7;

	// check for the first 7 bit block that doesnt fit into the first 3 bits
	while (blocks > 2){
     818:	92 30       	cpi	r25, 0x02	; 2
     81a:	51 f7       	brne	.-44     	; 0x7f0 <NHPwriteChecksum+0x8>
				break;
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
     81c:	49 2f       	mov	r20, r25
     81e:	42 50       	subi	r20, 0x02	; 2
	while (datablocks > 0){
     820:	0d c0       	rjmp	.+26     	; 0x83c <NHPwriteChecksum+0x54>
		buff[datablocks] = data & NHP_MASK_DATA_7BIT;
     822:	df 01       	movw	r26, r30
     824:	a4 0f       	add	r26, r20
     826:	b1 1d       	adc	r27, r1
     828:	9b 01       	movw	r18, r22
     82a:	2f 77       	andi	r18, 0x7F	; 127
     82c:	33 27       	eor	r19, r19
     82e:	2c 93       	st	X, r18
		data >>= 7;
     830:	66 0f       	add	r22, r22
     832:	67 2f       	mov	r22, r23
     834:	66 1f       	adc	r22, r22
     836:	77 0b       	sbc	r23, r23
     838:	71 95       	neg	r23
		datablocks--;
     83a:	41 50       	subi	r20, 0x01	; 1
		}
	}

	// write the rest of the data bits
	uint8_t datablocks = blocks - 2;
	while (datablocks > 0){
     83c:	41 11       	cpse	r20, r1
     83e:	f1 cf       	rjmp	.-30     	; 0x822 <NHPwriteChecksum+0x3a>
		data >>= 7;
		datablocks--;
	}

	// write lead + length mask
	buff[0] |= NHP_HEADER_LEAD | (blocks << 3);
     840:	49 2f       	mov	r20, r25
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	9a 01       	movw	r18, r20
     846:	63 e0       	ldi	r22, 0x03	; 3
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	6a 95       	dec	r22
     84e:	e1 f7       	brne	.-8      	; 0x848 <NHPwriteChecksum+0x60>
     850:	20 6c       	ori	r18, 0xC0	; 192
     852:	3f 6f       	ori	r19, 0xFF	; 255
     854:	30 81       	ld	r19, Z
     856:	32 2b       	or	r19, r18
     858:	30 83       	st	Z, r19

	// write end mask
	buff[blocks - 1] = NHP_HEADER_END | ((address - 1) & NHP_MASK_ADDRESS);
     85a:	e4 0f       	add	r30, r20
     85c:	f5 1f       	adc	r31, r21
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	81 50       	subi	r24, 0x01	; 1
     862:	8f 73       	andi	r24, 0x3F	; 63
     864:	80 68       	ori	r24, 0x80	; 128
     866:	80 83       	st	Z, r24

	// return the length
	return blocks;
}
     868:	89 2f       	mov	r24, r25
     86a:	08 95       	ret

0000086c <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	e9 8d       	ldd	r30, Y+25	; 0x19
     876:	e1 50       	subi	r30, 0x01	; 1
     878:	e2 30       	cpi	r30, 0x02	; 2
     87a:	28 f4       	brcc	.+10     	; 0x886 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	ec 5c       	subi	r30, 0xCC	; 204
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	10 81       	ld	r17, Z
     884:	01 c0       	rjmp	.+2      	; 0x888 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     886:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     888:	88 8d       	ldd	r24, Y+24	; 0x18
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	09 f4       	brne	.+2      	; 0x890 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
     88e:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     890:	8a 8d       	ldd	r24, Y+26	; 0x1a
     892:	87 30       	cpi	r24, 0x07	; 7
     894:	31 f0       	breq	.+12     	; 0x8a2 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	31 f0       	breq	.+12     	; 0x8a6 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     89a:	86 30       	cpi	r24, 0x06	; 6
     89c:	29 f4       	brne	.+10     	; 0x8a8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
     89e:	12 60       	ori	r17, 0x02	; 2
		break;
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
     8a2:	14 60       	ori	r17, 0x04	; 4
		break;
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     8a6:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
     8a8:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
     8aa:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     8ae:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     8b2:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     8b6:	2c 89       	ldd	r18, Y+20	; 0x14
     8b8:	3d 89       	ldd	r19, Y+21	; 0x15
     8ba:	4e 89       	ldd	r20, Y+22	; 0x16
     8bc:	5f 89       	ldd	r21, Y+23	; 0x17
     8be:	21 15       	cp	r18, r1
     8c0:	81 ee       	ldi	r24, 0xE1	; 225
     8c2:	38 07       	cpc	r19, r24
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	71 f0       	breq	.+28     	; 0x8e6 <EVENT_CDC_Device_LineEncodingChanged+0x7a>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     8ca:	ca 01       	movw	r24, r20
     8cc:	b9 01       	movw	r22, r18
     8ce:	96 95       	lsr	r25
     8d0:	87 95       	ror	r24
     8d2:	77 95       	ror	r23
     8d4:	67 95       	ror	r22
     8d6:	60 58       	subi	r22, 0x80	; 128
     8d8:	7b 47       	sbci	r23, 0x7B	; 123
     8da:	81 4e       	sbci	r24, 0xE1	; 225
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	e2 d6       	rcall	.+3524   	; 0x16a4 <__udivmodsi4>
     8e0:	21 50       	subi	r18, 0x01	; 1
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     8e2:	31 09       	sbc	r19, r1
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <EVENT_CDC_Device_LineEncodingChanged+0x7e>
     8e6:	20 e1       	ldi	r18, 0x10	; 16
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	30 93 cd 00 	sts	0x00CD, r19
     8ee:	20 93 cc 00 	sts	0x00CC, r18
     8f2:	10 93 ca 00 	sts	0x00CA, r17
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
     8f6:	8c 89       	ldd	r24, Y+20	; 0x14
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     8f8:	9d 89       	ldd	r25, Y+21	; 0x15
     8fa:	ae 89       	ldd	r26, Y+22	; 0x16
     8fc:	bf 89       	ldd	r27, Y+23	; 0x17
     8fe:	81 15       	cp	r24, r1
     900:	91 4e       	sbci	r25, 0xE1	; 225
     902:	a1 05       	cpc	r26, r1
     904:	b1 05       	cpc	r27, r1
     906:	11 f4       	brne	.+4      	; 0x90c <EVENT_CDC_Device_LineEncodingChanged+0xa0>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	01 c0       	rjmp	.+2      	; 0x90e <EVENT_CDC_Device_LineEncodingChanged+0xa2>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	80 93 c8 00 	sts	0x00C8, r24
     912:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     914:	80 93 c9 00 	sts	0x00C9, r24
     918:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
     91a:	df 91       	pop	r29
	//	//TODO pmode break to get out of this loop
	//	end_pmode();
	//// clear HID reports if chip gets restarted
	//else
	//clearHIDReports();
}
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	08 95       	ret

00000922 <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     922:	fc 01       	movw	r30, r24
     924:	20 89       	ldd	r18, Z+16	; 0x10
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState){
     926:	20 ff       	sbrs	r18, 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     92a:	5f 98       	cbi	0x0b, 7	; 11
     92c:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     92e:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     930:	8b b1       	in	r24, 0x0b	; 11
     932:	80 63       	ori	r24, 0x30	; 48
     934:	8b b9       	out	0x0b, r24	; 11
     936:	08 95       	ret

00000938 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	7c 01       	movw	r14, r24
     94c:	8b 01       	movw	r16, r22
     94e:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     950:	97 d1       	rcall	.+814    	; 0xc80 <Endpoint_WaitUntilReady>
     952:	b8 2e       	mov	r11, r24
     954:	81 11       	cpse	r24, r1
     956:	32 c0       	rjmp	.+100    	; 0x9bc <Endpoint_Write_Stream_LE+0x84>
     958:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     95a:	31 f0       	breq	.+12     	; 0x968 <Endpoint_Write_Stream_LE+0x30>
     95c:	28 81       	ld	r18, Y
	{
		Length -= *BytesProcessed;
     95e:	39 81       	ldd	r19, Y+1	; 0x01
     960:	02 1b       	sub	r16, r18
     962:	13 0b       	sbc	r17, r19
     964:	e2 0e       	add	r14, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     966:	f3 1e       	adc	r15, r19
     968:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     96a:	d1 2c       	mov	r13, r1
     96c:	22 c0       	rjmp	.+68     	; 0x9b2 <Endpoint_Write_Stream_LE+0x7a>
     96e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     972:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     974:	14 c0       	rjmp	.+40     	; 0x99e <Endpoint_Write_Stream_LE+0x66>
     976:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     97a:	8e 77       	andi	r24, 0x7E	; 126
     97c:	80 93 e8 00 	sts	0x00E8, r24
     980:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     982:	49 f0       	breq	.+18     	; 0x996 <Endpoint_Write_Stream_LE+0x5e>
     984:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     986:	99 81       	ldd	r25, Y+1	; 0x01
     988:	8c 0d       	add	r24, r12
     98a:	9d 1d       	adc	r25, r13
     98c:	99 83       	std	Y+1, r25	; 0x01
     98e:	88 83       	st	Y, r24
     990:	25 e0       	ldi	r18, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     992:	b2 2e       	mov	r11, r18
     994:	13 c0       	rjmp	.+38     	; 0x9bc <Endpoint_Write_Stream_LE+0x84>
     996:	74 d1       	rcall	.+744    	; 0xc80 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     998:	88 23       	and	r24, r24
     99a:	59 f0       	breq	.+22     	; 0x9b2 <Endpoint_Write_Stream_LE+0x7a>
     99c:	0e c0       	rjmp	.+28     	; 0x9ba <Endpoint_Write_Stream_LE+0x82>
     99e:	f7 01       	movw	r30, r14
     9a0:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     9a2:	7f 01       	movw	r14, r30
     9a4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9a8:	01 50       	subi	r16, 0x01	; 1
     9aa:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     9ac:	ff ef       	ldi	r31, 0xFF	; 255
     9ae:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     9b0:	df 0a       	sbc	r13, r31
     9b2:	01 15       	cp	r16, r1
     9b4:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     9b6:	d9 f6       	brne	.-74     	; 0x96e <Endpoint_Write_Stream_LE+0x36>
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <Endpoint_Write_Stream_LE+0x84>
     9ba:	b8 2e       	mov	r11, r24
     9bc:	8b 2d       	mov	r24, r11
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     9be:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	08 95       	ret

000009d2 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     9d2:	20 91 53 02 	lds	r18, 0x0253
     9d6:	30 91 54 02 	lds	r19, 0x0254
     9da:	26 17       	cp	r18, r22
     9dc:	37 07       	cpc	r19, r23
     9de:	48 f0       	brcs	.+18     	; 0x9f2 <Endpoint_Write_Control_Stream_LE+0x20>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9e0:	61 15       	cp	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e6:	20 91 e8 00 	lds	r18, 0x00E8
     9ea:	2e 77       	andi	r18, 0x7E	; 126
     9ec:	20 93 e8 00 	sts	0x00E8, r18
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9f2:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9f4:	9c 01       	movw	r18, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	34 c0       	rjmp	.+104    	; 0xa62 <Endpoint_Write_Control_Stream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9fa:	90 91 4c 02 	lds	r25, 0x024C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9fe:	99 23       	and	r25, r25
     a00:	09 f4       	brne	.+2      	; 0xa04 <Endpoint_Write_Control_Stream_LE+0x32>
     a02:	43 c0       	rjmp	.+134    	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a04:	95 30       	cpi	r25, 0x05	; 5
     a06:	09 f4       	brne	.+2      	; 0xa0a <Endpoint_Write_Control_Stream_LE+0x38>
     a08:	42 c0       	rjmp	.+132    	; 0xa8e <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a0a:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a0e:	93 fd       	sbrc	r25, 3
     a10:	3a c0       	rjmp	.+116    	; 0xa86 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a12:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a16:	92 fd       	sbrc	r25, 2
     a18:	30 c0       	rjmp	.+96     	; 0xa7a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a1a:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a1e:	90 ff       	sbrs	r25, 0
     a20:	20 c0       	rjmp	.+64     	; 0xa62 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a22:	80 91 f2 00 	lds	r24, 0x00F2
     a26:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a28:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     a2a:	82 1b       	sub	r24, r18
     a2c:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a30:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a32:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a36:	61 50       	subi	r22, 0x01	; 1
     a38:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     a3a:	9f 01       	movw	r18, r30
     a3c:	28 0f       	add	r18, r24
     a3e:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a40:	61 15       	cp	r22, r1
     a42:	71 05       	cpc	r23, r1
     a44:	19 f0       	breq	.+6      	; 0xa4c <Endpoint_Write_Control_Stream_LE+0x7a>
     a46:	28 30       	cpi	r18, 0x08	; 8
     a48:	31 05       	cpc	r19, r1
     a4a:	90 f3       	brcs	.-28     	; 0xa30 <Endpoint_Write_Control_Stream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	28 30       	cpi	r18, 0x08	; 8
     a50:	31 05       	cpc	r19, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <Endpoint_Write_Control_Stream_LE+0x84>
     a54:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a56:	90 91 e8 00 	lds	r25, 0x00E8
     a5a:	9e 77       	andi	r25, 0x7E	; 126
     a5c:	90 93 e8 00 	sts	0x00E8, r25
     a60:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a62:	61 15       	cp	r22, r1
     a64:	71 05       	cpc	r23, r1
     a66:	49 f6       	brne	.-110    	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x28>
     a68:	81 11       	cpse	r24, r1
     a6a:	c7 cf       	rjmp	.-114    	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x28>
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a6e:	80 91 4c 02 	lds	r24, 0x024C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a72:	88 23       	and	r24, r24
     a74:	51 f0       	breq	.+20     	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a76:	85 30       	cpi	r24, 0x05	; 5
     a78:	51 f0       	breq	.+20     	; 0xa8e <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a7a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a7e:	82 ff       	sbrs	r24, 2
     a80:	f6 cf       	rjmp	.-20     	; 0xa6e <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a8e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a90:	08 95       	ret

00000a92 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a92:	20 91 53 02 	lds	r18, 0x0253
     a96:	30 91 54 02 	lds	r19, 0x0254
     a9a:	26 17       	cp	r18, r22
     a9c:	37 07       	cpc	r19, r23
     a9e:	48 f0       	brcs	.+18     	; 0xab2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     aa0:	61 15       	cp	r22, r1
     aa2:	71 05       	cpc	r23, r1
     aa4:	39 f4       	brne	.+14     	; 0xab4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aa6:	20 91 e8 00 	lds	r18, 0x00E8
     aaa:	2e 77       	andi	r18, 0x7E	; 126
     aac:	20 93 e8 00 	sts	0x00E8, r18
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ab2:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ab4:	9c 01       	movw	r18, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	35 c0       	rjmp	.+106    	; 0xb24 <Endpoint_Write_Control_PStream_LE+0x92>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aba:	90 91 4c 02 	lds	r25, 0x024C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     abe:	99 23       	and	r25, r25
     ac0:	09 f4       	brne	.+2      	; 0xac4 <Endpoint_Write_Control_PStream_LE+0x32>
     ac2:	44 c0       	rjmp	.+136    	; 0xb4c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ac4:	95 30       	cpi	r25, 0x05	; 5
     ac6:	09 f4       	brne	.+2      	; 0xaca <Endpoint_Write_Control_PStream_LE+0x38>
     ac8:	43 c0       	rjmp	.+134    	; 0xb50 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     aca:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ace:	93 fd       	sbrc	r25, 3
     ad0:	3b c0       	rjmp	.+118    	; 0xb48 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ad2:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ad6:	92 fd       	sbrc	r25, 2
     ad8:	31 c0       	rjmp	.+98     	; 0xb3c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ada:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ade:	90 ff       	sbrs	r25, 0
     ae0:	21 c0       	rjmp	.+66     	; 0xb24 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ae2:	80 91 f2 00 	lds	r24, 0x00F2
     ae6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ae8:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     aea:	82 1b       	sub	r24, r18
     aec:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     aee:	06 c0       	rjmp	.+12     	; 0xafc <Endpoint_Write_Control_PStream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     af0:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     af6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     af8:	61 50       	subi	r22, 0x01	; 1
     afa:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     afc:	9c 01       	movw	r18, r24
     afe:	2e 0f       	add	r18, r30
     b00:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b02:	61 15       	cp	r22, r1
     b04:	71 05       	cpc	r23, r1
     b06:	19 f0       	breq	.+6      	; 0xb0e <Endpoint_Write_Control_PStream_LE+0x7c>
     b08:	28 30       	cpi	r18, 0x08	; 8
     b0a:	31 05       	cpc	r19, r1
     b0c:	88 f3       	brcs	.-30     	; 0xaf0 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	28 30       	cpi	r18, 0x08	; 8
     b12:	31 05       	cpc	r19, r1
     b14:	09 f0       	breq	.+2      	; 0xb18 <Endpoint_Write_Control_PStream_LE+0x86>
     b16:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b18:	90 91 e8 00 	lds	r25, 0x00E8
     b1c:	9e 77       	andi	r25, 0x7E	; 126
     b1e:	90 93 e8 00 	sts	0x00E8, r25
     b22:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b24:	61 15       	cp	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	41 f6       	brne	.-112    	; 0xaba <Endpoint_Write_Control_PStream_LE+0x28>
     b2a:	81 11       	cpse	r24, r1
     b2c:	c6 cf       	rjmp	.-116    	; 0xaba <Endpoint_Write_Control_PStream_LE+0x28>
     b2e:	06 c0       	rjmp	.+12     	; 0xb3c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b30:	80 91 4c 02 	lds	r24, 0x024C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b34:	88 23       	and	r24, r24
     b36:	51 f0       	breq	.+20     	; 0xb4c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b38:	85 30       	cpi	r24, 0x05	; 5
     b3a:	51 f0       	breq	.+20     	; 0xb50 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b3c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b40:	82 ff       	sbrs	r24, 2
     b42:	f6 cf       	rjmp	.-20     	; 0xb30 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b50:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b52:	08 95       	ret

00000b54 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b54:	98 2f       	mov	r25, r24
     b56:	2c c0       	rjmp	.+88     	; 0xbb0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b58:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     b5c:	98 17       	cp	r25, r24
     b5e:	39 f0       	breq	.+14     	; 0xb6e <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     b60:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     b64:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     b68:	50 91 f0 00 	lds	r21, 0x00F0
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     b6e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     b70:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     b72:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b74:	21 fd       	sbrc	r18, 1
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b78:	9f 5f       	subi	r25, 0xFF	; 255
     b7a:	1a c0       	rjmp	.+52     	; 0xbb0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b7c:	30 91 eb 00 	lds	r19, 0x00EB
     b80:	3e 7f       	andi	r19, 0xFE	; 254
     b82:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     b86:	30 91 ed 00 	lds	r19, 0x00ED
     b8a:	3d 7f       	andi	r19, 0xFD	; 253
     b8c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     b90:	30 91 eb 00 	lds	r19, 0x00EB
     b94:	31 60       	ori	r19, 0x01	; 1
     b96:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     b9a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     b9e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     ba2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     ba6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     baa:	27 fd       	sbrc	r18, 7
     bac:	e5 cf       	rjmp	.-54     	; 0xb78 <Endpoint_ConfigureEndpoint_Prv+0x24>
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     bb0:	95 30       	cpi	r25, 0x05	; 5
     bb2:	90 f2       	brcs	.-92     	; 0xb58 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     bc0:	08 95       	ret

00000bc2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	06 2f       	mov	r16, r22
     bcc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     bce:	10 e0       	ldi	r17, 0x00	; 0
     bd0:	2e c0       	rjmp	.+92     	; 0xc2e <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
     bd2:	98 81       	ld	r25, Y
     bd4:	91 11       	cpse	r25, r1
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <Endpoint_ConfigureEndpointTable+0x1c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
     bda:	25 96       	adiw	r28, 0x05	; 5
     bdc:	28 c0       	rjmp	.+80     	; 0xc2e <Endpoint_ConfigureEndpointTable+0x6c>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     bde:	2c 81       	ldd	r18, Y+4	; 0x04
     be0:	e9 81       	ldd	r30, Y+1	; 0x01
     be2:	fa 81       	ldd	r31, Y+2	; 0x02
     be4:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     be6:	89 2f       	mov	r24, r25
     be8:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	10 f0       	brcs	.+4      	; 0xbf2 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	21 c0       	rjmp	.+66     	; 0xc34 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	10 f0       	brcs	.+4      	; 0xbfa <Endpoint_ConfigureEndpointTable+0x38>
     bf6:	56 e0       	ldi	r21, 0x06	; 6
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <Endpoint_ConfigureEndpointTable+0x3a>
     bfa:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     bfc:	28 e0       	ldi	r18, 0x08	; 8
     bfe:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     c04:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     c0a:	2e 17       	cp	r18, r30
     c0c:	3f 07       	cpc	r19, r31
     c0e:	d0 f3       	brcs	.-12     	; 0xc04 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c10:	42 95       	swap	r20
     c12:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c14:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     c16:	99 1f       	adc	r25, r25
     c18:	99 27       	eor	r25, r25
     c1a:	99 1f       	adc	r25, r25
     c1c:	62 95       	swap	r22
     c1e:	66 0f       	add	r22, r22
     c20:	66 0f       	add	r22, r22
     c22:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c24:	69 2b       	or	r22, r25
     c26:	96 df       	rcall	.-212    	; 0xb54 <Endpoint_ConfigureEndpoint_Prv>
     c28:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     c2a:	d6 cf       	rjmp	.-84     	; 0xbd8 <Endpoint_ConfigureEndpointTable+0x16>
     c2c:	e0 cf       	rjmp	.-64     	; 0xbee <Endpoint_ConfigureEndpointTable+0x2c>
     c2e:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c30:	d0 cf       	rjmp	.-96     	; 0xbd2 <Endpoint_ConfigureEndpointTable+0x10>
     c32:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     c34:	df 91       	pop	r29
}
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     c3e:	80 91 4d 02 	lds	r24, 0x024D
     c42:	87 fd       	sbrc	r24, 7
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c46:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c4a:	80 ff       	sbrs	r24, 0
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <Endpoint_ClearStatusStage+0x2c>
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c50:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c54:	82 fd       	sbrc	r24, 2
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c58:	80 91 4c 02 	lds	r24, 0x024C
     c5c:	81 11       	cpse	r24, r1
     c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <Endpoint_ClearStatusStage+0x12>
     c60:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c62:	80 91 e8 00 	lds	r24, 0x00E8
     c66:	8b 77       	andi	r24, 0x7B	; 123
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c6a:	80 91 4c 02 	lds	r24, 0x024C
     c6e:	81 11       	cpse	r24, r1
     c70:	ea cf       	rjmp	.-44     	; 0xc46 <Endpoint_ClearStatusStage+0x8>
     c72:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c74:	80 91 e8 00 	lds	r24, 0x00E8
     c78:	8e 77       	andi	r24, 0x7E	; 126
     c7a:	80 93 e8 00 	sts	0x00E8, r24
     c7e:	08 95       	ret

00000c80 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c80:	80 91 e4 00 	lds	r24, 0x00E4
     c84:	90 91 e5 00 	lds	r25, 0x00E5
     c88:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c8a:	20 91 ec 00 	lds	r18, 0x00EC
     c8e:	20 fd       	sbrc	r18, 0
     c90:	1f c0       	rjmp	.+62     	; 0xcd0 <Endpoint_WaitUntilReady+0x50>
     c92:	23 c0       	rjmp	.+70     	; 0xcda <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c94:	20 91 4c 02 	lds	r18, 0x024C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c98:	22 23       	and	r18, r18
     c9a:	91 f0       	breq	.+36     	; 0xcc0 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c9c:	25 30       	cpi	r18, 0x05	; 5
     c9e:	91 f0       	breq	.+36     	; 0xcc4 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ca0:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     ca4:	25 fd       	sbrc	r18, 5
     ca6:	10 c0       	rjmp	.+32     	; 0xcc8 <Endpoint_WaitUntilReady+0x48>
     ca8:	20 91 e4 00 	lds	r18, 0x00E4
     cac:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	51 f3       	breq	.-44     	; 0xc8a <Endpoint_WaitUntilReady+0xa>
     cb6:	41 50       	subi	r20, 0x01	; 1
     cb8:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cba:	39 f7       	brne	.-50     	; 0xc8a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cd0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     cd4:	20 ff       	sbrs	r18, 0
     cd6:	de cf       	rjmp	.-68     	; 0xc94 <Endpoint_WaitUntilReady+0x14>
     cd8:	f9 cf       	rjmp	.-14     	; 0xccc <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cda:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     cde:	22 ff       	sbrs	r18, 2
     ce0:	d9 cf       	rjmp	.-78     	; 0xc94 <Endpoint_WaitUntilReady+0x14>
     ce2:	f4 cf       	rjmp	.-24     	; 0xccc <Endpoint_WaitUntilReady+0x4c>

00000ce4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ce4:	41 d0       	rcall	.+130    	; 0xd68 <USB_INT_DisableAllInterrupts>
     ce6:	43 d0       	rcall	.+134    	; 0xd6e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ce8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	80 93 d8 00 	sts	0x00D8, r24
     cf2:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	80 93 d8 00 	sts	0x00D8, r24
     cfc:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d00:	8f 7d       	andi	r24, 0xDF	; 223
     d02:	80 93 d8 00 	sts	0x00D8, r24
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d0e:	09 b4       	in	r0, 0x29	; 41
     d10:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <USB_ResetInterface+0x2a>
     d14:	10 92 4c 02 	sts	0x024C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     d18:	10 92 48 02 	sts	0x0248, r1
	USB_Device_ConfigurationNumber  = 0;
     d1c:	10 92 4a 02 	sts	0x024A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     d20:	10 92 49 02 	sts	0x0249, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     d24:	42 e0       	ldi	r20, 0x02	; 2
     d26:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	14 df       	rcall	.-472    	; 0xb54 <Endpoint_ConfigureEndpoint_Prv>
     d2c:	80 91 e1 00 	lds	r24, 0x00E1
     d30:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d32:	80 93 e1 00 	sts	0x00E1, r24
     d36:	80 91 e2 00 	lds	r24, 0x00E2
     d3a:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d3c:	80 93 e2 00 	sts	0x00E2, r24
     d40:	80 91 e2 00 	lds	r24, 0x00E2
     d44:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     d46:	80 93 e2 00 	sts	0x00E2, r24
     d4a:	80 91 e0 00 	lds	r24, 0x00E0
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d50:	80 93 e0 00 	sts	0x00E0, r24
     d54:	08 95       	ret

00000d56 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     d56:	e3 e6       	ldi	r30, 0x63	; 99
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 4b 02 	sts	0x024B, r24

	USB_ResetInterface();
     d66:	be cf       	rjmp	.-132    	; 0xce4 <USB_ResetInterface>

00000d68 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d68:	10 92 e2 00 	sts	0x00E2, r1
     d6c:	08 95       	ret

00000d6e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d6e:	10 92 e1 00 	sts	0x00E1, r1
     d72:	08 95       	ret

00000d74 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d96:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d9a:	82 ff       	sbrs	r24, 2
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d9e:	80 91 e2 00 	lds	r24, 0x00E2
     da2:	82 ff       	sbrs	r24, 2
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     da6:	80 91 e1 00 	lds	r24, 0x00E1
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     db0:	2e d2       	rcall	.+1116   	; 0x120e <USB_Event_Stub>
     db2:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     db6:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     db8:	17 c0       	rjmp	.+46     	; 0xde8 <__vector_11+0x74>
     dba:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     dbe:	80 ff       	sbrs	r24, 0
     dc0:	13 c0       	rjmp	.+38     	; 0xde8 <__vector_11+0x74>
     dc2:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	80 93 e2 00 	sts	0x00E2, r24
     dcc:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     dd0:	80 61       	ori	r24, 0x10	; 16
     dd2:	80 93 e2 00 	sts	0x00E2, r24
     dd6:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     dda:	80 62       	ori	r24, 0x20	; 32
     ddc:	80 93 d8 00 	sts	0x00D8, r24
     de0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     de2:	10 92 4c 02 	sts	0x024C, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     de6:	66 db       	rcall	.-2356   	; 0x4b4 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     de8:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     dec:	84 ff       	sbrs	r24, 4
     dee:	2f c0       	rjmp	.+94     	; 0xe4e <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     df0:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     df4:	84 ff       	sbrs	r24, 4
     df6:	2b c0       	rjmp	.+86     	; 0xe4e <__vector_11+0xda>
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e00:	09 b4       	in	r0, 0x29	; 41
     e02:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e04:	fd cf       	rjmp	.-6      	; 0xe00 <__vector_11+0x8c>
     e06:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e0a:	8f 7d       	andi	r24, 0xDF	; 223
     e0c:	80 93 d8 00 	sts	0x00D8, r24
     e10:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e14:	8f 7e       	andi	r24, 0xEF	; 239
     e16:	80 93 e1 00 	sts	0x00E1, r24
     e1a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e1e:	8f 7e       	andi	r24, 0xEF	; 239
     e20:	80 93 e2 00 	sts	0x00E2, r24
     e24:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 93 e2 00 	sts	0x00E2, r24
     e2e:	80 91 48 02 	lds	r24, 0x0248
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e32:	88 23       	and	r24, r24
     e34:	11 f0       	breq	.+4      	; 0xe3a <__vector_11+0xc6>
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     e3a:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e3e:	87 ff       	sbrs	r24, 7
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <__vector_11+0xd4>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 4c 02 	sts	0x024C, r24
     e4c:	32 db       	rcall	.-2460   	; 0x4b2 <EVENT_USB_Device_Connect>
     e4e:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     e52:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     e54:	27 c0       	rjmp	.+78     	; 0xea4 <__vector_11+0x130>
     e56:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e5a:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     e5c:	23 c0       	rjmp	.+70     	; 0xea4 <__vector_11+0x130>
     e5e:	80 91 e1 00 	lds	r24, 0x00E1
     e62:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     e64:	80 93 e1 00 	sts	0x00E1, r24
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	80 93 4c 02 	sts	0x024C, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e6e:	10 92 48 02 	sts	0x0248, r1
     e72:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     e76:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e78:	80 93 e1 00 	sts	0x00E1, r24
     e7c:	80 91 e2 00 	lds	r24, 0x00E2
     e80:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e82:	80 93 e2 00 	sts	0x00E2, r24
     e86:	80 91 e2 00 	lds	r24, 0x00E2
     e8a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e8c:	80 93 e2 00 	sts	0x00E2, r24
     e90:	42 e0       	ldi	r20, 0x02	; 2
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e96:	5e de       	rcall	.-836    	; 0xb54 <Endpoint_ConfigureEndpoint_Prv>
     e98:	80 91 f0 00 	lds	r24, 0x00F0
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ea2:	b5 d1       	rcall	.+874    	; 0x120e <USB_Event_Stub>
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	cf 93       	push	r28
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     eea:	80 91 e9 00 	lds	r24, 0x00E9
     eee:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ef0:	90 91 ec 00 	lds	r25, 0x00EC
     ef4:	90 ff       	sbrs	r25, 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <__vector_12+0x36>
     ef8:	90 e8       	ldi	r25, 0x80	; 128
     efa:	01 c0       	rjmp	.+2      	; 0xefe <__vector_12+0x38>
     efc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     efe:	c9 2f       	mov	r28, r25
     f00:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f02:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     f06:	80 91 f0 00 	lds	r24, 0x00F0
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     f10:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     f12:	1c d0       	rcall	.+56     	; 0xf4c <USB_Device_ProcessControlRequest>
     f14:	10 92 e9 00 	sts	0x00E9, r1
     f18:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	80 93 f0 00 	sts	0x00F0, r24
     f22:	cf 70       	andi	r28, 0x0F	; 15
     f24:	c0 93 e9 00 	sts	0x00E9, r28
     f28:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f2a:	ef 91       	pop	r30
     f2c:	cf 91       	pop	r28
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	ac 97       	sbiw	r28, 0x2c	; 44
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     f62:	ed e4       	ldi	r30, 0x4D	; 77
     f64:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f66:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     f6a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     f6c:	22 e0       	ldi	r18, 0x02	; 2
     f6e:	e5 35       	cpi	r30, 0x55	; 85
     f70:	f2 07       	cpc	r31, r18
     f72:	c9 f7       	brne	.-14     	; 0xf66 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     f74:	a3 da       	rcall	.-2746   	; 0x4bc <EVENT_USB_Device_ControlRequest>
     f76:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f7a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     f7c:	30 c1       	rjmp	.+608    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
     f7e:	80 91 4d 02 	lds	r24, 0x024D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f82:	90 91 4e 02 	lds	r25, 0x024E

		switch (USB_ControlRequest.bRequest)
     f86:	95 30       	cpi	r25, 0x05	; 5
     f88:	09 f4       	brne	.+2      	; 0xf8c <USB_Device_ProcessControlRequest+0x40>
     f8a:	87 c0       	rjmp	.+270    	; 0x109a <USB_Device_ProcessControlRequest+0x14e>
     f8c:	38 f4       	brcc	.+14     	; 0xf9c <USB_Device_ProcessControlRequest+0x50>
     f8e:	91 30       	cpi	r25, 0x01	; 1
     f90:	b1 f1       	breq	.+108    	; 0xffe <USB_Device_ProcessControlRequest+0xb2>
     f92:	70 f0       	brcs	.+28     	; 0xfb0 <USB_Device_ProcessControlRequest+0x64>
     f94:	93 30       	cpi	r25, 0x03	; 3
     f96:	09 f0       	breq	.+2      	; 0xf9a <USB_Device_ProcessControlRequest+0x4e>
     f98:	22 c1       	rjmp	.+580    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
     f9a:	31 c0       	rjmp	.+98     	; 0xffe <USB_Device_ProcessControlRequest+0xb2>
     f9c:	98 30       	cpi	r25, 0x08	; 8
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <USB_Device_ProcessControlRequest+0x56>
     fa0:	f3 c0       	rjmp	.+486    	; 0x1188 <USB_Device_ProcessControlRequest+0x23c>
     fa2:	99 30       	cpi	r25, 0x09	; 9
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <USB_Device_ProcessControlRequest+0x5c>
     fa6:	ff c0       	rjmp	.+510    	; 0x11a6 <USB_Device_ProcessControlRequest+0x25a>
     fa8:	96 30       	cpi	r25, 0x06	; 6
     faa:	09 f0       	breq	.+2      	; 0xfae <USB_Device_ProcessControlRequest+0x62>
     fac:	18 c1       	rjmp	.+560    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
     fae:	9b c0       	rjmp	.+310    	; 0x10e6 <USB_Device_ProcessControlRequest+0x19a>
     fb0:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fb2:	21 f0       	breq	.+8      	; 0xfbc <USB_Device_ProcessControlRequest+0x70>
     fb4:	82 38       	cpi	r24, 0x82	; 130
     fb6:	09 f0       	breq	.+2      	; 0xfba <USB_Device_ProcessControlRequest+0x6e>
     fb8:	12 c1       	rjmp	.+548    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <USB_Device_ProcessControlRequest+0x80>
     fbc:	80 91 49 02 	lds	r24, 0x0249
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     fc0:	90 91 4a 02 	lds	r25, 0x024A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     fc4:	99 23       	and	r25, r25
     fc6:	89 f0       	breq	.+34     	; 0xfea <USB_Device_ProcessControlRequest+0x9e>
     fc8:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     fca:	0f c0       	rjmp	.+30     	; 0xfea <USB_Device_ProcessControlRequest+0x9e>
     fcc:	80 91 51 02 	lds	r24, 0x0251
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fd0:	90 91 52 02 	lds	r25, 0x0252
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	99 27       	eor	r25, r25
     fd8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fdc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     fe0:	85 fb       	bst	r24, 5
     fe2:	88 27       	eor	r24, r24
     fe4:	80 f9       	bld	r24, 0
     fe6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fea:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fee:	97 7f       	andi	r25, 0xF7	; 247
     ff0:	90 93 e8 00 	sts	0x00E8, r25
     ff4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ff8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ffc:	d0 c0       	rjmp	.+416    	; 0x119e <USB_Device_ProcessControlRequest+0x252>
     ffe:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1000:	19 f0       	breq	.+6      	; 0x1008 <USB_Device_ProcessControlRequest+0xbc>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	09 f0       	breq	.+2      	; 0x1008 <USB_Device_ProcessControlRequest+0xbc>
    1006:	eb c0       	rjmp	.+470    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    1008:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    100a:	21 f0       	breq	.+8      	; 0x1014 <USB_Device_ProcessControlRequest+0xc8>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	09 f0       	breq	.+2      	; 0x1012 <USB_Device_ProcessControlRequest+0xc6>
    1010:	e6 c0       	rjmp	.+460    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    1012:	0b c0       	rjmp	.+22     	; 0x102a <USB_Device_ProcessControlRequest+0xde>
    1014:	80 91 4f 02 	lds	r24, 0x024F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f0       	breq	.+2      	; 0x101e <USB_Device_ProcessControlRequest+0xd2>
    101c:	e0 c0       	rjmp	.+448    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    101e:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1020:	09 f0       	breq	.+2      	; 0x1024 <USB_Device_ProcessControlRequest+0xd8>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	80 93 4a 02 	sts	0x024A, r24
    1028:	2f c0       	rjmp	.+94     	; 0x1088 <USB_Device_ProcessControlRequest+0x13c>
    102a:	80 91 4f 02 	lds	r24, 0x024F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    102e:	81 11       	cpse	r24, r1
    1030:	2b c0       	rjmp	.+86     	; 0x1088 <USB_Device_ProcessControlRequest+0x13c>
    1032:	80 91 51 02 	lds	r24, 0x0251
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1036:	90 91 52 02 	lds	r25, 0x0252
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	99 27       	eor	r25, r25
    103e:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1040:	09 f4       	brne	.+2      	; 0x1044 <USB_Device_ProcessControlRequest+0xf8>
    1042:	cd c0       	rjmp	.+410    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    1044:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1048:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    104c:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    104e:	1c c0       	rjmp	.+56     	; 0x1088 <USB_Device_ProcessControlRequest+0x13c>
    1050:	20 91 4e 02 	lds	r18, 0x024E
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1054:	23 30       	cpi	r18, 0x03	; 3
    1056:	21 f4       	brne	.+8      	; 0x1060 <USB_Device_ProcessControlRequest+0x114>
    1058:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    105c:	80 62       	ori	r24, 0x20	; 32
    105e:	12 c0       	rjmp	.+36     	; 0x1084 <USB_Device_ProcessControlRequest+0x138>
    1060:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1064:	90 61       	ori	r25, 0x10	; 16
    1066:	90 93 eb 00 	sts	0x00EB, r25
    106a:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <USB_Device_ProcessControlRequest+0x126>
    1070:	22 0f       	add	r18, r18
    1072:	8a 95       	dec	r24
    1074:	ea f7       	brpl	.-6      	; 0x1070 <USB_Device_ProcessControlRequest+0x124>
    1076:	20 93 ea 00 	sts	0x00EA, r18
    107a:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    107e:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	80 93 eb 00 	sts	0x00EB, r24
    1088:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    108c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1090:	87 7f       	andi	r24, 0xF7	; 247
    1092:	80 93 e8 00 	sts	0x00E8, r24
    1096:	d3 dd       	rcall	.-1114   	; 0xc3e <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1098:	a2 c0       	rjmp	.+324    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    109a:	81 11       	cpse	r24, r1
    109c:	a0 c0       	rjmp	.+320    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    109e:	80 91 4f 02 	lds	r24, 0x024F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    10a2:	90 91 50 02 	lds	r25, 0x0250
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	99 27       	eor	r25, r25
    10aa:	18 2f       	mov	r17, r24
    10ac:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    10b0:	90 78       	andi	r25, 0x80	; 128
    10b2:	98 2b       	or	r25, r24
    10b4:	90 93 e3 00 	sts	0x00E3, r25
    10b8:	80 91 e8 00 	lds	r24, 0x00E8
    10bc:	87 7f       	andi	r24, 0xF7	; 247
    10be:	80 93 e8 00 	sts	0x00E8, r24
    10c2:	bd dd       	rcall	.-1158   	; 0xc3e <Endpoint_ClearStatusStage>
    10c4:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    10c8:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10ca:	fc cf       	rjmp	.-8      	; 0x10c4 <USB_Device_ProcessControlRequest+0x178>
    10cc:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    10d0:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    10d2:	80 93 e3 00 	sts	0x00E3, r24
    10d6:	11 23       	and	r17, r17
    10d8:	11 f0       	breq	.+4      	; 0x10de <USB_Device_ProcessControlRequest+0x192>
    10da:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <USB_Device_ProcessControlRequest+0x194>
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	80 93 4c 02 	sts	0x024C, r24
    10e4:	7c c0       	rjmp	.+248    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    10e6:	80 58       	subi	r24, 0x80	; 128
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10ec:	78 c0       	rjmp	.+240    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    10ee:	80 91 4f 02 	lds	r24, 0x024F
    10f2:	90 91 50 02 	lds	r25, 0x0250
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    10f6:	8c 3d       	cpi	r24, 0xDC	; 220
    10f8:	23 e0       	ldi	r18, 0x03	; 3
    10fa:	92 07       	cpc	r25, r18
    10fc:	71 f5       	brne	.+92     	; 0x115a <USB_Device_ProcessControlRequest+0x20e>
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1108:	f8 94       	cli
    110a:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    110c:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    110e:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1110:	3e e0       	ldi	r19, 0x0E	; 14
    1112:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1114:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1116:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1118:	50 93 57 00 	sts	0x0057, r21
    111c:	e4 91       	lpm	r30, Z+
    111e:	20 ff       	sbrs	r18, 0
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <USB_Device_ProcessControlRequest+0x1dc>
    1122:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    1124:	ef 70       	andi	r30, 0x0F	; 15
    1126:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    1128:	ef 70       	andi	r30, 0x0F	; 15
    112a:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    112c:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    112e:	ea 30       	cpi	r30, 0x0A	; 10
    1130:	10 f0       	brcs	.+4      	; 0x1136 <USB_Device_ProcessControlRequest+0x1ea>
    1132:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <USB_Device_ProcessControlRequest+0x1ec>
    1136:	c0 96       	adiw	r24, 0x30	; 48
    1138:	8d 93       	st	X+, r24
    113a:	9d 93       	st	X+, r25
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	24 31       	cpi	r18, 0x14	; 20
    1140:	49 f7       	brne	.-46     	; 0x1114 <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1142:	4f bf       	out	0x3f, r20	; 63
    1144:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1148:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114a:	80 93 e8 00 	sts	0x00E8, r24
    114e:	6a e2       	ldi	r22, 0x2A	; 42
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	3d dc       	rcall	.-1926   	; 0x9d2 <Endpoint_Write_Control_Stream_LE>
    1158:	11 c0       	rjmp	.+34     	; 0x117c <USB_Device_ProcessControlRequest+0x230>
    115a:	ae 01       	movw	r20, r28
    115c:	45 5d       	subi	r20, 0xD5	; 213
    115e:	5f 4f       	sbci	r21, 0xFF	; 255
    1160:	60 91 51 02 	lds	r22, 0x0251
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1164:	ef d9       	rcall	.-3106   	; 0x544 <CALLBACK_USB_GetDescriptor>
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	d1 f1       	breq	.+116    	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    116a:	20 91 e8 00 	lds	r18, 0x00E8
    116e:	27 7f       	andi	r18, 0xF7	; 247
    1170:	20 93 e8 00 	sts	0x00E8, r18
    1174:	bc 01       	movw	r22, r24
    1176:	8b a5       	ldd	r24, Y+43	; 0x2b
    1178:	9c a5       	ldd	r25, Y+44	; 0x2c
    117a:	8b dc       	rcall	.-1770   	; 0xa92 <Endpoint_Write_Control_PStream_LE>
    117c:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1180:	8b 77       	andi	r24, 0x7B	; 123
    1182:	80 93 e8 00 	sts	0x00E8, r24
    1186:	2b c0       	rjmp	.+86     	; 0x11de <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1188:	80 38       	cpi	r24, 0x80	; 128
    118a:	49 f5       	brne	.+82     	; 0x11de <USB_Device_ProcessControlRequest+0x292>
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	87 7f       	andi	r24, 0xF7	; 247
    1192:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1196:	80 91 48 02 	lds	r24, 0x0248
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    119a:	80 93 f1 00 	sts	0x00F1, r24
    119e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    11a2:	8e 77       	andi	r24, 0x7E	; 126
    11a4:	76 cf       	rjmp	.-276    	; 0x1092 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11a6:	81 11       	cpse	r24, r1
    11a8:	1a c0       	rjmp	.+52     	; 0x11de <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11aa:	90 91 4f 02 	lds	r25, 0x024F
    11ae:	92 30       	cpi	r25, 0x02	; 2
    11b0:	b0 f4       	brcc	.+44     	; 0x11de <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11b6:	87 7f       	andi	r24, 0xF7	; 247
    11b8:	80 93 e8 00 	sts	0x00E8, r24
    11bc:	90 93 48 02 	sts	0x0248, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11c0:	3e dd       	rcall	.-1412   	; 0xc3e <Endpoint_ClearStatusStage>
    11c2:	80 91 48 02 	lds	r24, 0x0248
    11c6:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <USB_Device_ProcessControlRequest+0x286>
    11ca:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    11ce:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <USB_Device_ProcessControlRequest+0x28a>
    11d2:	84 e0       	ldi	r24, 0x04	; 4
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <USB_Device_ProcessControlRequest+0x28c>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    11d8:	80 93 4c 02 	sts	0x024C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    11dc:	6c d9       	rcall	.-3368   	; 0x4b6 <EVENT_USB_Device_ConfigurationChanged>
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	83 ff       	sbrs	r24, 3
    11e4:	0a c0       	rjmp	.+20     	; 0x11fa <USB_Device_ProcessControlRequest+0x2ae>
    11e6:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    11ea:	87 7f       	andi	r24, 0xF7	; 247
    11ec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11f0:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    11f4:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11f6:	80 93 eb 00 	sts	0x00EB, r24
    11fa:	ac 96       	adiw	r28, 0x2c	; 44
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    120a:	1f 91       	pop	r17
    120c:	08 95       	ret

0000120e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    120e:	08 95       	ret

00001210 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1210:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1212:	80 91 4c 02 	lds	r24, 0x024C
    1216:	88 23       	and	r24, r24
    1218:	a9 f0       	breq	.+42     	; 0x1244 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    121a:	80 91 e9 00 	lds	r24, 0x00E9
    121e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1220:	90 91 ec 00 	lds	r25, 0x00EC
    1224:	90 ff       	sbrs	r25, 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <USB_USBTask+0x1c>
    1228:	90 e8       	ldi	r25, 0x80	; 128
    122a:	01 c0       	rjmp	.+2      	; 0x122e <USB_USBTask+0x1e>
    122c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    122e:	c9 2f       	mov	r28, r25
    1230:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1232:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1236:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    123a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    123c:	87 de       	rcall	.-754    	; 0xf4c <USB_Device_ProcessControlRequest>
    123e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1240:	c0 93 e9 00 	sts	0x00E9, r28
    1244:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1246:	08 95       	ret

00001248 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    124e:	40 96       	adiw	r24, 0x10	; 16
    1250:	fc 01       	movw	r30, r24
    1252:	8b e0       	ldi	r24, 0x0B	; 11
    1254:	df 01       	movw	r26, r30
    1256:	1d 92       	st	X+, r1
    1258:	8a 95       	dec	r24
    125a:	e9 f7       	brne	.-6      	; 0x1256 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1260:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	aa dc       	rcall	.-1708   	; 0xbc2 <Endpoint_ConfigureEndpointTable>
    126e:	88 23       	and	r24, r24
    1270:	61 f0       	breq	.+24     	; 0x128a <CDC_Device_ConfigureEndpoints+0x42>
    1272:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1274:	ce 01       	movw	r24, r28
    1276:	06 96       	adiw	r24, 0x06	; 6
    1278:	a4 dc       	rcall	.-1720   	; 0xbc2 <Endpoint_ConfigureEndpointTable>
    127a:	88 23       	and	r24, r24
    127c:	31 f0       	breq	.+12     	; 0x128a <CDC_Device_ConfigureEndpoints+0x42>
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1282:	0b 96       	adiw	r24, 0x0b	; 11
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
	  return false;

	return true;
}
    1288:	9c cc       	rjmp	.-1736   	; 0xbc2 <Endpoint_ConfigureEndpointTable>
    128a:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
	  return false;

	return true;
}
    1290:	08 95       	ret

00001292 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1292:	cf 93       	push	r28
    1294:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1296:	20 91 4c 02 	lds	r18, 0x024C
    129a:	24 30       	cpi	r18, 0x04	; 4
    129c:	f1 f4       	brne	.+60     	; 0x12da <CDC_Device_SendByte+0x48>
    129e:	fc 01       	movw	r30, r24
    12a0:	44 89       	ldd	r20, Z+20	; 0x14
    12a2:	55 89       	ldd	r21, Z+21	; 0x15
    12a4:	66 89       	ldd	r22, Z+22	; 0x16
    12a6:	77 89       	ldd	r23, Z+23	; 0x17
    12a8:	45 2b       	or	r20, r21
    12aa:	46 2b       	or	r20, r22
    12ac:	47 2b       	or	r20, r23
    12ae:	a9 f0       	breq	.+42     	; 0x12da <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b0:	81 81       	ldd	r24, Z+1	; 0x01
    12b2:	8f 70       	andi	r24, 0x0F	; 15
    12b4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12b8:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    12bc:	85 ff       	sbrs	r24, 5
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12c0:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0a c0       	rjmp	.+20     	; 0x12dc <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c8:	80 91 e8 00 	lds	r24, 0x00E8
    12cc:	8e 77       	andi	r24, 0x7E	; 126
    12ce:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    12d2:	d6 dc       	rcall	.-1620   	; 0xc80 <Endpoint_WaitUntilReady>
    12d4:	88 23       	and	r24, r24
    12d6:	a1 f3       	breq	.-24     	; 0x12c0 <CDC_Device_SendByte+0x2e>
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <CDC_Device_SendByte+0x4a>
    12da:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    12dc:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    12de:	08 95       	ret

000012e0 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    12e0:	20 91 4c 02 	lds	r18, 0x024C
    12e4:	24 30       	cpi	r18, 0x04	; 4
    12e6:	29 f5       	brne	.+74     	; 0x1332 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    12e8:	fc 01       	movw	r30, r24
    12ea:	44 89       	ldd	r20, Z+20	; 0x14
    12ec:	55 89       	ldd	r21, Z+21	; 0x15
    12ee:	66 89       	ldd	r22, Z+22	; 0x16
    12f0:	77 89       	ldd	r23, Z+23	; 0x17
    12f2:	45 2b       	or	r20, r21
    12f4:	46 2b       	or	r20, r22
    12f6:	47 2b       	or	r20, r23
    12f8:	e1 f0       	breq	.+56     	; 0x1332 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12fa:	81 81       	ldd	r24, Z+1	; 0x01
    12fc:	8f 70       	andi	r24, 0x0F	; 15
    12fe:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1302:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1306:	81 11       	cpse	r24, r1
    1308:	02 c0       	rjmp	.+4      	; 0x130e <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    130e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1312:	80 91 e8 00 	lds	r24, 0x00E8
    1316:	8e 77       	andi	r24, 0x7E	; 126
    1318:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    131c:	95 fd       	sbrc	r25, 5
    131e:	f5 cf       	rjmp	.-22     	; 0x130a <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1320:	af dc       	rcall	.-1698   	; 0xc80 <Endpoint_WaitUntilReady>
    1322:	81 11       	cpse	r24, r1
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <CDC_Device_Flush+0x54>
    1326:	90 91 e8 00 	lds	r25, 0x00E8
    132a:	9e 77       	andi	r25, 0x7E	; 126
    132c:	90 93 e8 00 	sts	0x00E8, r25
    1330:	08 95       	ret
    1332:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1334:	08 95       	ret

00001336 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1336:	20 91 4c 02 	lds	r18, 0x024C
    133a:	24 30       	cpi	r18, 0x04	; 4
    133c:	89 f4       	brne	.+34     	; 0x1360 <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    133e:	fc 01       	movw	r30, r24
    1340:	44 89       	ldd	r20, Z+20	; 0x14
    1342:	55 89       	ldd	r21, Z+21	; 0x15
    1344:	66 89       	ldd	r22, Z+22	; 0x16
    1346:	77 89       	ldd	r23, Z+23	; 0x17
    1348:	45 2b       	or	r20, r21
    134a:	46 2b       	or	r20, r22
    134c:	47 2b       	or	r20, r23
    134e:	41 f0       	breq	.+16     	; 0x1360 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1350:	21 81       	ldd	r18, Z+1	; 0x01
    1352:	2f 70       	andi	r18, 0x0F	; 15
    1354:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1358:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    135c:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    135e:	c0 cf       	rjmp	.-128    	; 0x12e0 <CDC_Device_Flush>
    1360:	08 95       	ret

00001362 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1362:	20 91 4c 02 	lds	r18, 0x024C
    1366:	24 30       	cpi	r18, 0x04	; 4
    1368:	19 f0       	breq	.+6      	; 0x1370 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	24 c0       	rjmp	.+72     	; 0x13b8 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1370:	fc 01       	movw	r30, r24
    1372:	44 89       	ldd	r20, Z+20	; 0x14
    1374:	55 89       	ldd	r21, Z+21	; 0x15
    1376:	66 89       	ldd	r22, Z+22	; 0x16
    1378:	77 89       	ldd	r23, Z+23	; 0x17
    137a:	45 2b       	or	r20, r21
    137c:	46 2b       	or	r20, r22
    137e:	47 2b       	or	r20, r23
    1380:	a1 f3       	breq	.-24     	; 0x136a <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1382:	86 81       	ldd	r24, Z+6	; 0x06
    1384:	8f 70       	andi	r24, 0x0F	; 15
    1386:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    138a:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    138e:	82 ff       	sbrs	r24, 2
    1390:	ec cf       	rjmp	.-40     	; 0x136a <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1392:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1396:	88 23       	and	r24, r24
    1398:	21 f0       	breq	.+8      	; 0x13a2 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    139a:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    13a6:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    13aa:	81 11       	cpse	r24, r1
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13ae:	80 91 e8 00 	lds	r24, 0x00E8
    13b2:	8b 77       	andi	r24, 0x7B	; 123
    13b4:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    13b8:	c9 01       	movw	r24, r18
    13ba:	08 95       	ret

000013bc <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    13bc:	08 95       	ret

000013be <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13c4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    13c8:	83 ff       	sbrs	r24, 3
    13ca:	a7 c0       	rjmp	.+334    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    13cc:	88 81       	ld	r24, Y
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	20 91 51 02 	lds	r18, 0x0251
    13d4:	30 91 52 02 	lds	r19, 0x0252
    13d8:	28 17       	cp	r18, r24
    13da:	39 07       	cpc	r19, r25
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <CDC_Device_ProcessControlRequest+0x22>
    13de:	9d c0       	rjmp	.+314    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    13e0:	80 91 4e 02 	lds	r24, 0x024E
    13e4:	81 32       	cpi	r24, 0x21	; 33
    13e6:	61 f0       	breq	.+24     	; 0x1400 <CDC_Device_ProcessControlRequest+0x42>
    13e8:	20 f4       	brcc	.+8      	; 0x13f2 <CDC_Device_ProcessControlRequest+0x34>
    13ea:	80 32       	cpi	r24, 0x20	; 32
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <CDC_Device_ProcessControlRequest+0x32>
    13ee:	95 c0       	rjmp	.+298    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    13f0:	3d c0       	rjmp	.+122    	; 0x146c <CDC_Device_ProcessControlRequest+0xae>
    13f2:	82 32       	cpi	r24, 0x22	; 34
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <CDC_Device_ProcessControlRequest+0x3a>
    13f6:	6d c0       	rjmp	.+218    	; 0x14d2 <CDC_Device_ProcessControlRequest+0x114>
    13f8:	83 32       	cpi	r24, 0x23	; 35
    13fa:	09 f0       	breq	.+2      	; 0x13fe <CDC_Device_ProcessControlRequest+0x40>
    13fc:	8e c0       	rjmp	.+284    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    13fe:	7d c0       	rjmp	.+250    	; 0x14fa <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1400:	80 91 4d 02 	lds	r24, 0x024D
    1404:	81 3a       	cpi	r24, 0xA1	; 161
    1406:	09 f0       	breq	.+2      	; 0x140a <CDC_Device_ProcessControlRequest+0x4c>
    1408:	88 c0       	rjmp	.+272    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    140a:	80 91 e8 00 	lds	r24, 0x00E8
    140e:	87 7f       	andi	r24, 0xF7	; 247
    1410:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1414:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1418:	80 ff       	sbrs	r24, 0
    141a:	fc cf       	rjmp	.-8      	; 0x1414 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    141c:	4c 89       	ldd	r20, Y+20	; 0x14
    141e:	5d 89       	ldd	r21, Y+21	; 0x15
    1420:	6e 89       	ldd	r22, Y+22	; 0x16
    1422:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1424:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1428:	bb 27       	eor	r27, r27
    142a:	a7 2f       	mov	r26, r23
    142c:	96 2f       	mov	r25, r22
    142e:	85 2f       	mov	r24, r21
    1430:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    1434:	cb 01       	movw	r24, r22
    1436:	aa 27       	eor	r26, r26
    1438:	bb 27       	eor	r27, r27
    143a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    143e:	47 2f       	mov	r20, r23
    1440:	55 27       	eor	r21, r21
    1442:	66 27       	eor	r22, r22
    1444:	77 27       	eor	r23, r23
    1446:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    144a:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    144c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1450:	89 8d       	ldd	r24, Y+25	; 0x19
    1452:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1456:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1458:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    145c:	80 91 e8 00 	lds	r24, 0x00E8
    1460:	8e 77       	andi	r24, 0x7E	; 126
    1462:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    146a:	e9 cb       	rjmp	.-2094   	; 0xc3e <Endpoint_ClearStatusStage>
    146c:	80 91 4d 02 	lds	r24, 0x024D
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1470:	81 32       	cpi	r24, 0x21	; 33
    1472:	09 f0       	breq	.+2      	; 0x1476 <CDC_Device_ProcessControlRequest+0xb8>
    1474:	52 c0       	rjmp	.+164    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    1476:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    147a:	87 7f       	andi	r24, 0xF7	; 247
    147c:	80 93 e8 00 	sts	0x00E8, r24
    1480:	05 c0       	rjmp	.+10     	; 0x148c <CDC_Device_ProcessControlRequest+0xce>
    1482:	80 91 4c 02 	lds	r24, 0x024C
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <CDC_Device_ProcessControlRequest+0xce>
    148a:	47 c0       	rjmp	.+142    	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    148c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1490:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1492:	f7 cf       	rjmp	.-18     	; 0x1482 <CDC_Device_ProcessControlRequest+0xc4>
    1494:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1498:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    149c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    14a0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    14a4:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    14a6:	2d 8b       	std	Y+21, r18	; 0x15
    14a8:	9e 8b       	std	Y+22, r25	; 0x16
    14aa:	8f 8b       	std	Y+23, r24	; 0x17
    14ac:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14b0:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    14b2:	80 91 f1 00 	lds	r24, 0x00F1
    14b6:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    14b8:	80 91 f1 00 	lds	r24, 0x00F1
    14bc:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    14be:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14c2:	8b 77       	andi	r24, 0x7B	; 123
    14c4:	80 93 e8 00 	sts	0x00E8, r24
    14c8:	ba db       	rcall	.-2188   	; 0xc3e <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    14ca:	ce 01       	movw	r24, r28
    14cc:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    14ce:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    14d0:	cd c9       	rjmp	.-3174   	; 0x86c <EVENT_CDC_Device_LineEncodingChanged>
    14d2:	80 91 4d 02 	lds	r24, 0x024D
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    14d6:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14d8:	01 f5       	brne	.+64     	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    14da:	80 91 e8 00 	lds	r24, 0x00E8
    14de:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14e0:	80 93 e8 00 	sts	0x00E8, r24
    14e4:	ac db       	rcall	.-2216   	; 0xc3e <Endpoint_ClearStatusStage>
    14e6:	80 91 4f 02 	lds	r24, 0x024F
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    14ea:	90 91 50 02 	lds	r25, 0x0250

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    14ee:	99 8b       	std	Y+17, r25	; 0x11
    14f0:	88 8b       	std	Y+16, r24	; 0x10
    14f2:	ce 01       	movw	r24, r28
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	14 ca       	rjmp	.-3032   	; 0x922 <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    14fa:	80 91 4d 02 	lds	r24, 0x024D
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    14fe:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1500:	61 f4       	brne	.+24     	; 0x151a <CDC_Device_ProcessControlRequest+0x15c>
    1502:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1506:	87 7f       	andi	r24, 0xF7	; 247
    1508:	80 93 e8 00 	sts	0x00E8, r24
    150c:	98 db       	rcall	.-2256   	; 0xc3e <Endpoint_ClearStatusStage>
    150e:	60 91 4f 02 	lds	r22, 0x024F
    1512:	ce 01       	movw	r24, r28
    1514:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1516:	cf 91       	pop	r28
    1518:	51 cf       	rjmp	.-350    	; 0x13bc <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1520:	4f 92       	push	r4
    1522:	5f 92       	push	r5
    1524:	6f 92       	push	r6
    1526:	7f 92       	push	r7
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	00 d0       	rcall	.+0      	; 0x1542 <HID_Device_USBTask+0x22>
    1542:	1f 92       	push	r1
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    154a:	ad b6       	in	r10, 0x3d	; 61
    154c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    154e:	80 91 4c 02 	lds	r24, 0x024C
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	09 f0       	breq	.+2      	; 0x1558 <HID_Device_USBTask+0x38>
    1556:	8d c0       	rjmp	.+282    	; 0x1672 <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1558:	80 91 e4 00 	lds	r24, 0x00E4
    155c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1560:	f7 01       	movw	r30, r14
    1562:	22 85       	ldd	r18, Z+10	; 0x0a
    1564:	33 85       	ldd	r19, Z+11	; 0x0b
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	09 f4       	brne	.+2      	; 0x156e <HID_Device_USBTask+0x4e>
    156c:	82 c0       	rjmp	.+260    	; 0x1672 <HID_Device_USBTask+0x152>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    156e:	81 81       	ldd	r24, Z+1	; 0x01
    1570:	8f 70       	andi	r24, 0x0F	; 15
    1572:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1576:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    157a:	85 ff       	sbrs	r24, 5
    157c:	7a c0       	rjmp	.+244    	; 0x1672 <HID_Device_USBTask+0x152>
    157e:	6d b6       	in	r6, 0x3d	; 61
    1580:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1582:	40 85       	ldd	r20, Z+8	; 0x08
    1584:	8d b7       	in	r24, 0x3d	; 61
    1586:	9e b7       	in	r25, 0x3e	; 62
    1588:	84 1b       	sub	r24, r20
    158a:	91 09       	sbc	r25, r1
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	9e bf       	out	0x3e, r25	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	8d bf       	out	0x3d, r24	; 61
    1596:	cd b6       	in	r12, 0x3d	; 61
    1598:	de b6       	in	r13, 0x3e	; 62
    159a:	ef ef       	ldi	r30, 0xFF	; 255
    159c:	ce 1a       	sub	r12, r30
    159e:	de 0a       	sbc	r13, r30
		uint8_t  ReportID     = 0;
    15a0:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    15a2:	1a 82       	std	Y+2, r1	; 0x02
    15a4:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    15a6:	46 01       	movw	r8, r12
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	c6 01       	movw	r24, r12
    15b0:	b1 d0       	rcall	.+354    	; 0x1714 <memset>
    15b2:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    15b4:	0f 5f       	subi	r16, 0xFF	; 255
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	96 01       	movw	r18, r12
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	be 01       	movw	r22, r28
    15be:	6d 5f       	subi	r22, 0xFD	; 253
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	c7 01       	movw	r24, r14
    15c4:	3e d8       	rcall	.-3972   	; 0x642 <CALLBACK_HID_Device_CreateHIDReport>
    15c6:	58 2e       	mov	r5, r24
    15c8:	f7 01       	movw	r30, r14
    15ca:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    15cc:	95 85       	ldd	r25, Z+13	; 0x0d
    15ce:	89 2b       	or	r24, r25
    15d0:	31 f0       	breq	.+12     	; 0x15de <HID_Device_USBTask+0xbe>
    15d2:	01 e0       	ldi	r16, 0x01	; 1
    15d4:	10 e0       	ldi	r17, 0x00	; 0
    15d6:	86 85       	ldd	r24, Z+14	; 0x0e
    15d8:	97 85       	ldd	r25, Z+15	; 0x0f
    15da:	89 2b       	or	r24, r25
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <HID_Device_USBTask+0xc2>
    15de:	00 e0       	ldi	r16, 0x00	; 0
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	f7 01       	movw	r30, r14
    15e4:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    15e6:	d7 80       	ldd	r13, Z+7	; 0x07
    15e8:	c1 14       	cp	r12, r1
    15ea:	d1 04       	cpc	r13, r1
    15ec:	89 f0       	breq	.+34     	; 0x1610 <HID_Device_USBTask+0xf0>
    15ee:	49 81       	ldd	r20, Y+1	; 0x01
    15f0:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    15f2:	b6 01       	movw	r22, r12
    15f4:	c4 01       	movw	r24, r8
    15f6:	78 d0       	rcall	.+240    	; 0x16e8 <memcmp>
    15f8:	44 24       	eor	r4, r4
    15fa:	43 94       	inc	r4
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f4       	brne	.+2      	; 0x1602 <HID_Device_USBTask+0xe2>
    1600:	41 2c       	mov	r4, r1
    1602:	f7 01       	movw	r30, r14
    1604:	40 85       	ldd	r20, Z+8	; 0x08
    1606:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1608:	b4 01       	movw	r22, r8
    160a:	c6 01       	movw	r24, r12
    160c:	7a d0       	rcall	.+244    	; 0x1702 <memcpy>
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <HID_Device_USBTask+0xf2>
    1610:	41 2c       	mov	r4, r1
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	89 2b       	or	r24, r25

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1618:	f1 f0       	breq	.+60     	; 0x1656 <HID_Device_USBTask+0x136>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    161a:	51 10       	cpse	r5, r1
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <HID_Device_USBTask+0x106>
    161e:	41 10       	cpse	r4, r1
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <HID_Device_USBTask+0x106>
    1622:	00 ff       	sbrs	r16, 0
    1624:	18 c0       	rjmp	.+48     	; 0x1656 <HID_Device_USBTask+0x136>
    1626:	f7 01       	movw	r30, r14
    1628:	84 85       	ldd	r24, Z+12	; 0x0c
    162a:	95 85       	ldd	r25, Z+13	; 0x0d
    162c:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    162e:	86 87       	std	Z+14, r24	; 0x0e
    1630:	81 81       	ldd	r24, Z+1	; 0x01
    1632:	8f 70       	andi	r24, 0x0F	; 15
    1634:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	81 11       	cpse	r24, r1
    163c:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1648:	c4 01       	movw	r24, r8
    164a:	76 d9       	rcall	.-3348   	; 0x938 <Endpoint_Write_Stream_LE>
    164c:	80 91 e8 00 	lds	r24, 0x00E8
    1650:	8e 77       	andi	r24, 0x7E	; 126
    1652:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1656:	80 91 e4 00 	lds	r24, 0x00E4
    165a:	90 91 e5 00 	lds	r25, 0x00E5
    165e:	f7 01       	movw	r30, r14
    1660:	93 87       	std	Z+11, r25	; 0x0b
    1662:	82 87       	std	Z+10, r24	; 0x0a
    1664:	86 2d       	mov	r24, r6
    1666:	97 2d       	mov	r25, r7

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	9e bf       	out	0x3e, r25	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	8d bf       	out	0x3d, r24	; 61
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	be be       	out	0x3e, r11	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	ad be       	out	0x3d, r10	; 61
	}
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	df 90       	pop	r13
    1690:	cf 90       	pop	r12
    1692:	bf 90       	pop	r11
    1694:	af 90       	pop	r10
    1696:	9f 90       	pop	r9
    1698:	8f 90       	pop	r8
    169a:	7f 90       	pop	r7
    169c:	6f 90       	pop	r6
    169e:	5f 90       	pop	r5
    16a0:	4f 90       	pop	r4
    16a2:	08 95       	ret

000016a4 <__udivmodsi4>:
    16a4:	a1 e2       	ldi	r26, 0x21	; 33
    16a6:	1a 2e       	mov	r1, r26
    16a8:	aa 1b       	sub	r26, r26
    16aa:	bb 1b       	sub	r27, r27
    16ac:	fd 01       	movw	r30, r26
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <__udivmodsi4_ep>

000016b0 <__udivmodsi4_loop>:
    16b0:	aa 1f       	adc	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	ee 1f       	adc	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	a2 17       	cp	r26, r18
    16ba:	b3 07       	cpc	r27, r19
    16bc:	e4 07       	cpc	r30, r20
    16be:	f5 07       	cpc	r31, r21
    16c0:	20 f0       	brcs	.+8      	; 0x16ca <__udivmodsi4_ep>
    16c2:	a2 1b       	sub	r26, r18
    16c4:	b3 0b       	sbc	r27, r19
    16c6:	e4 0b       	sbc	r30, r20
    16c8:	f5 0b       	sbc	r31, r21

000016ca <__udivmodsi4_ep>:
    16ca:	66 1f       	adc	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	1a 94       	dec	r1
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <__udivmodsi4_loop>
    16d6:	60 95       	com	r22
    16d8:	70 95       	com	r23
    16da:	80 95       	com	r24
    16dc:	90 95       	com	r25
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
    16e2:	bd 01       	movw	r22, r26
    16e4:	cf 01       	movw	r24, r30
    16e6:	08 95       	ret

000016e8 <memcmp>:
    16e8:	fb 01       	movw	r30, r22
    16ea:	dc 01       	movw	r26, r24
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <memcmp+0xe>
    16ee:	8d 91       	ld	r24, X+
    16f0:	01 90       	ld	r0, Z+
    16f2:	80 19       	sub	r24, r0
    16f4:	21 f4       	brne	.+8      	; 0x16fe <memcmp+0x16>
    16f6:	41 50       	subi	r20, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	c8 f7       	brcc	.-14     	; 0x16ee <memcmp+0x6>
    16fc:	88 1b       	sub	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	08 95       	ret

00001702 <memcpy>:
    1702:	fb 01       	movw	r30, r22
    1704:	dc 01       	movw	r26, r24
    1706:	02 c0       	rjmp	.+4      	; 0x170c <memcpy+0xa>
    1708:	01 90       	ld	r0, Z+
    170a:	0d 92       	st	X+, r0
    170c:	41 50       	subi	r20, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	d8 f7       	brcc	.-10     	; 0x1708 <memcpy+0x6>
    1712:	08 95       	ret

00001714 <memset>:
    1714:	dc 01       	movw	r26, r24
    1716:	01 c0       	rjmp	.+2      	; 0x171a <memset+0x6>
    1718:	6d 93       	st	X+, r22
    171a:	41 50       	subi	r20, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	e0 f7       	brcc	.-8      	; 0x1718 <memset+0x4>
    1720:	08 95       	ret

00001722 <_exit>:
    1722:	f8 94       	cli

00001724 <__stop_program>:
    1724:	ff cf       	rjmp	.-2      	; 0x1724 <__stop_program>
