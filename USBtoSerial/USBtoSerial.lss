
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000010e4  00001178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  0080011e  0080011e  00001196  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008b0  00000000  00000000  00002871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000df04  00000000  00000000  00003121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003aa2  00000000  00000000  00011025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000058f4  00000000  00000000  00014ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015ac  00000000  00000000  0001a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000046fb  00000000  00000000  0001b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000086a3  00000000  00000000  00020063  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  00028706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
	const uint16_t ReportSize)
{
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
       6:	00 00       	nop
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
       a:	00 00       	nop
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
      12:	00 00       	nop
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
      16:	00 00       	nop
	}
}
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
      1a:	00 00       	nop
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
		ram.HID.isEmpty[ram.HID.ID] = false;
      1e:	00 00       	nop
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
	}
}
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
      22:	00 00       	nop
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
      26:	00 00       	nop
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
      2a:	00 00       	nop
	uint8_t length = getHIDReportLength(ID);
	if (!length) return;

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
	ram.HID.ID = ID;
      2c:	5a c4       	rjmp	.+2228   	; 0x8e2 <__vector_11>
      2e:	00 00       	nop
	memset(&ram.HID.buffer, 0x00, length);
      30:	01 c5       	rjmp	.+2562   	; 0xa34 <__vector_12>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
      32:	00 00       	nop
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
		ram.HID.isEmpty[ram.HID.ID] = false;
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
      36:	00 00       	nop
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
		ram.skipNHP += ram.NHP.readlength;
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
	*ReportSize = ram.HID.length;
      3e:	00 00       	nop
		if (pos < 0)
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
	ram.HID.length = ram.HID.recvlength = length;
	ram.HID.ID = ID;
	memset(&ram.HID.buffer, 0x00, length);

	// flush HID
	flushHID();
      42:	00 00       	nop
			pos = Buffer->Size + pos;
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
	*ReportSize = ram.HID.length;

	// reset ID
	ram.HID.ID = 0;
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
		Buffer->Base[pos] = Data;
      4a:	00 00       	nop
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
		ram.skipNHP += length;
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
	*ReportSize = ram.HID.length;

	// reset ID
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
      4e:	00 00       	nop

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
	// this will forcewrite the report every time
	return true;

	//}
	//else return false;
}
      52:	00 00       	nop
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
			if (Buffer->Index == 0)
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
      5c:	6f c1       	rjmp	.+734    	; 0x33c <__vector_23>
				Buffer->Index = Buffer->Size;
      5e:	00 00       	nop
			Buffer->Index--;
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
      62:	00 00       	nop
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
      66:	00 00       	nop
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);

		// error, write down this wrong ID report
		if (!ram.HID.length)
      74:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
      84:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000a4 <ManufacturerString>:
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
		case STK_GET_SYNC:
			ram.isp.error = 0;
			replyOK();
			break;
		case STK_GET_SIGNON:
			if (getch() == CRC_EOP) {
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      c2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
      d2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      e2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				sendCDCbyte('V');
				sendCDCbyte('R');
				sendCDCbyte(' ');
				sendCDCbyte('I');
				sendCDCbyte('S');
				sendCDCbyte('P');
      f2:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000100 <DeviceDescriptor>:

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     100:	12 01 10 01 02 00 00 08 eb 03 68 6e 01 00 01 02     ..........hn....
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     110:	dc 01                                               ..

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d2 e0       	ldi	r29, 0x02	; 2
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e4 ee       	ldi	r30, 0xE4	; 228
     126:	f0 e1       	ldi	r31, 0x10	; 16
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	ae 31       	cpi	r26, 0x1E	; 30
     130:	b1 07       	cpc	r27, r17
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	ae e1       	ldi	r26, 0x1E	; 30
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	b1 e0       	ldi	r27, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	ab 33       	cpi	r26, 0x3B	; 59
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	39 d0       	rcall	.+114    	; 0x1b8 <main>
     146:	cc c7       	rjmp	.+3992   	; 0x10e0 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <SetupHardware>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	84 b7       	in	r24, 0x34	; 52
     150:	87 7f       	andi	r24, 0xF7	; 247
     152:	84 bf       	out	0x34, r24	; 52
     154:	28 e1       	ldi	r18, 0x18	; 24
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	20 93 60 00 	sts	0x0060, r18
     15e:	10 92 60 00 	sts	0x0060, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     162:	0f be       	out	0x3f, r0	; 63
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	85 bd       	out	0x25, r24	; 37
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 cd 00 	sts	0x00CD, r25
     170:	80 93 cc 00 	sts	0x00CC, r24
				ReportData     += 4;
     174:	ca ec       	ldi	r28, 0xCA	; 202
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	96 e0       	ldi	r25, 0x06	; 6
				break;
     17a:	98 83       	st	Y, r25

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17c:	a8 ec       	ldi	r26, 0xC8	; 200
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	8c 93       	st	X, r24
     184:	e9 ec       	ldi	r30, 0xC9	; 201
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	20 83       	st	Z, r18
     18a:	53 9a       	sbi	0x0a, 3	; 10
     18c:	5a 9a       	sbi	0x0b, 2	; 11
     18e:	5b 9a       	sbi	0x0b, 3	; 11
     190:	10 82       	st	Z, r1
     192:	1c 92       	st	X, r1
     194:	18 82       	st	Y, r1
     196:	98 83       	st	Y, r25
     198:	8c 93       	st	X, r24
     19a:	88 e9       	ldi	r24, 0x98	; 152
     19c:	80 83       	st	Z, r24
     19e:	5b 98       	cbi	0x0b, 3	; 11
     1a0:	8a b1       	in	r24, 0x0a	; 10
     1a2:	80 63       	ori	r24, 0x30	; 48
     1a4:	8a b9       	out	0x0a, r24	; 10
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 63       	ori	r24, 0x30	; 48
     1aa:	8b b9       	out	0x0b, r24	; 11
				ReportSize     -= 2;
     1ac:	8b d3       	rcall	.+1814   	; 0x8c4 <USB_Init>
     1ae:	5f 9a       	sbi	0x0b, 7	; 11
     1b0:	57 9a       	sbi	0x0a, 7	; 10
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <main>:
     1b8:	ee e1       	ldi	r30, 0x1E	; 30
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	2f b7       	in	r18, 0x3f	; 63
     1be:	f8 94       	cli
				ReportData     += 2;
     1c0:	8e e2       	ldi	r24, 0x2E	; 46
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	91 83       	std	Z+1, r25	; 0x01
				break;
     1c6:	80 83       	st	Z, r24

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c8:	12 82       	std	Z+2, r1	; 0x02
     1ca:	84 e6       	ldi	r24, 0x64	; 100
     1cc:	83 83       	std	Z+3, r24	; 0x03
     1ce:	14 82       	std	Z+4, r1	; 0x04
     1d0:	2f bf       	out	0x3f, r18	; 63
     1d2:	10 92 23 01 	sts	0x0123, r1
				ReportSize     -= 1;
     1d6:	8e ed       	ldi	r24, 0xDE	; 222
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	46 d1       	rcall	.+652    	; 0x468 <NHPreset>
     1dc:	10 92 2d 01 	sts	0x012D, r1
     1e0:	2b d1       	rcall	.+598    	; 0x438 <HIDreset>
     1e2:	37 d1       	rcall	.+622    	; 0x452 <avrispReset>
     1e4:	b2 df       	rcall	.-156    	; 0x14a <SetupHardware>
     1e6:	78 94       	sei
				ReportData     += 1;
     1e8:	0e e1       	ldi	r16, 0x1E	; 30
     1ea:	11 e0       	ldi	r17, 0x01	; 1
     1ec:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	6f d6       	rcall	.+3294   	; 0xed0 <CDC_Device_ReceiveByte>
     1f2:	97 fd       	sbrc	r25, 7
     1f4:	0c c0       	rjmp	.+24     	; 0x20e <main+0x56>
     1f6:	5c 98       	cbi	0x0b, 4	; 11
     1f8:	90 91 2d 01 	lds	r25, 0x012D
     1fc:	9c 60       	ori	r25, 0x0C	; 12
     1fe:	90 93 2d 01 	sts	0x012D, r25
     202:	90 91 c8 00 	lds	r25, 0x00C8
     206:	95 ff       	sbrs	r25, 5
     208:	fc cf       	rjmp	.-8      	; 0x202 <main+0x4a>
     20a:	80 93 ce 00 	sts	0x00CE, r24
     20e:	2f b7       	in	r18, 0x3f	; 63
     210:	f8 94       	cli
     212:	80 91 1e 01 	lds	r24, 0x011E
     216:	90 91 1f 01 	lds	r25, 0x011F
     21a:	89 2b       	or	r24, r25
     21c:	19 f0       	breq	.+6      	; 0x224 <main+0x6c>
     21e:	80 91 22 01 	lds	r24, 0x0122
     222:	01 c0       	rjmp	.+2      	; 0x226 <main+0x6e>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	2f bf       	out	0x3f, r18	; 63
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	19 f4       	brne	.+6      	; 0x234 <main+0x7c>
     22e:	a8 99       	sbic	0x15, 0	; 21
     230:	55 c0       	rjmp	.+170    	; 0x2dc <main+0x124>
     232:	77 c0       	rjmp	.+238    	; 0x322 <__stack+0x23>
     234:	5d 98       	cbi	0x0b, 5	; 11
     236:	20 91 2d 01 	lds	r18, 0x012D
     23a:	23 60       	ori	r18, 0x03	; 3
     23c:	20 93 2d 01 	sts	0x012D, r18
     240:	20 91 01 01 	lds	r18, 0x0101
     244:	2f 70       	andi	r18, 0x0F	; 15
     246:	20 93 e9 00 	sts	0x00E9, r18
     24a:	20 91 e8 00 	lds	r18, 0x00E8
     24e:	20 ff       	sbrs	r18, 0
     250:	ee cf       	rjmp	.-36     	; 0x22e <main+0x76>
     252:	80 31       	cpi	r24, 0x10	; 16
     254:	91 05       	cpc	r25, r1
     256:	10 f0       	brcs	.+4      	; 0x25c <main+0xa4>
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	f8 2e       	mov	r15, r24
     25e:	c0 e0       	ldi	r28, 0x00	; 0
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	39 c0       	rjmp	.+114    	; 0x2d6 <main+0x11e>
     264:	7f b7       	in	r23, 0x3f	; 63
     266:	f8 94       	cli
     268:	20 91 1e 01 	lds	r18, 0x011E
     26c:	30 91 1f 01 	lds	r19, 0x011F
     270:	21 15       	cp	r18, r1
     272:	31 05       	cpc	r19, r1
     274:	41 f0       	breq	.+16     	; 0x286 <main+0xce>
     276:	40 91 22 01 	lds	r20, 0x0122
     27a:	44 23       	and	r20, r20
     27c:	21 f0       	breq	.+8      	; 0x286 <main+0xce>
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	14 16       	cp	r1, r20
     282:	15 06       	cpc	r1, r21
     284:	24 f0       	brlt	.+8      	; 0x28e <main+0xd6>
     286:	7f bf       	out	0x3f, r23	; 63
     288:	6f ef       	ldi	r22, 0xFF	; 255
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28a:	7f ef       	ldi	r23, 0xFF	; 255
     28c:	10 c0       	rjmp	.+32     	; 0x2ae <main+0xf6>
     28e:	80 91 20 01 	lds	r24, 0x0120
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	84 1b       	sub	r24, r20
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     296:	95 0b       	sbc	r25, r21
     298:	97 ff       	sbrs	r25, 7
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <main+0xec>
     29c:	40 91 21 01 	lds	r20, 0x0121
     2a0:	84 0f       	add	r24, r20
     2a2:	91 1d       	adc	r25, r1
     2a4:	f9 01       	movw	r30, r18
     2a6:	e8 0f       	add	r30, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a8:	f9 1f       	adc	r31, r25
				break;
     2aa:	60 81       	ld	r22, Z

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2ac:	7f bf       	out	0x3f, r23	; 63
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	a6 d5       	rcall	.+2892   	; 0xe00 <CDC_Device_SendByte>
     2b4:	81 11       	cpse	r24, r1
     2b6:	bb cf       	rjmp	.-138    	; 0x22e <main+0x76>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b8:	f8 01       	movw	r30, r16
     2ba:	9f b7       	in	r25, 0x3f	; 63
				break;
     2bc:	f8 94       	cli

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2be:	20 81       	ld	r18, Z
     2c0:	31 81       	ldd	r19, Z+1	; 0x01
     2c2:	23 2b       	or	r18, r19
     2c4:	31 f0       	breq	.+12     	; 0x2d2 <main+0x11a>
     2c6:	24 81       	ldd	r18, Z+4	; 0x04
				break;
     2c8:	21 11       	cpse	r18, r1

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <main+0x116>
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <main+0x11a>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	24 83       	std	Z+4, r18	; 0x04
     2d2:	9f bf       	out	0x3f, r25	; 63
				break;
     2d4:	21 96       	adiw	r28, 0x01	; 1

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	fc 12       	cpse	r15, r28
     2d8:	c5 cf       	rjmp	.-118    	; 0x264 <main+0xac>
     2da:	a9 cf       	rjmp	.-174    	; 0x22e <main+0x76>
     2dc:	a8 9a       	sbi	0x15, 0	; 21
     2de:	90 91 2d 01 	lds	r25, 0x012D
     2e2:	89 2f       	mov	r24, r25
				break;
     2e4:	83 70       	andi	r24, 0x03	; 3

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	49 f0       	breq	.+18     	; 0x2fa <main+0x142>
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	9c 7f       	andi	r25, 0xFC	; 252
     2ee:	98 2b       	or	r25, r24
				break;
     2f0:	90 93 2d 01 	sts	0x012D, r25

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f4:	81 11       	cpse	r24, r1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <main+0x142>
     2f8:	5d 9a       	sbi	0x0b, 5	; 11
     2fa:	90 91 2d 01 	lds	r25, 0x012D
     2fe:	89 2f       	mov	r24, r25
				break;
     300:	8c 70       	andi	r24, 0x0C	; 12

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	79 f0       	breq	.+30     	; 0x322 <__stack+0x23>
     304:	89 2f       	mov	r24, r25
				break;
     306:	86 95       	lsr	r24

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	86 95       	lsr	r24
     30a:	8d 5f       	subi	r24, 0xFD	; 253
     30c:	83 70       	andi	r24, 0x03	; 3
     30e:	28 2f       	mov	r18, r24
     310:	22 0f       	add	r18, r18
     312:	22 0f       	add	r18, r18
     314:	93 7f       	andi	r25, 0xF3	; 243
				break;
     316:	92 2b       	or	r25, r18

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	90 93 2d 01 	sts	0x012D, r25
				break;
     31c:	81 11       	cpse	r24, r1

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	01 c0       	rjmp	.+2      	; 0x322 <__stack+0x23>
     320:	5c 9a       	sbi	0x0b, 4	; 11
     322:	80 e0       	ldi	r24, 0x00	; 0
				break;
     324:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	be d5       	rcall	.+2940   	; 0xea4 <CDC_Device_USBTask>
     328:	2a d5       	rcall	.+2644   	; 0xd7e <USB_USBTask>
     32a:	60 cf       	rjmp	.-320    	; 0x1ec <main+0x34>

0000032c <EVENT_USB_Device_Connect>:

				if (ParserData->UsingReportIDs)
     32c:	08 95       	ret

0000032e <EVENT_USB_Device_Disconnect>:
     32e:	08 95       	ret

00000330 <EVENT_USB_Device_ConfigurationChanged>:
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	40 c5       	rjmp	.+2688   	; 0xdb6 <CDC_Device_ConfigureEndpoints>

00000336 <EVENT_USB_Device_ControlRequest>:
     336:	80 e0       	ldi	r24, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	f8 c5       	rjmp	.+3056   	; 0xf2c <CDC_Device_ProcessControlRequest>

0000033c <__vector_23>:
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	3f 93       	push	r19

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	4f 93       	push	r20
     34c:	5f 93       	push	r21
     34e:	8f 93       	push	r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
     35a:	40 91 ce 00 	lds	r20, 0x00CE
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	80 91 32 02 	lds	r24, 0x0232
     362:	84 30       	cpi	r24, 0x04	; 4
     364:	e9 f4       	brne	.+58     	; 0x3a0 <__vector_23+0x64>
     366:	ee e1       	ldi	r30, 0x1E	; 30
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	2f b7       	in	r18, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 f0       	breq	.+40     	; 0x39e <__vector_23+0x62>
     376:	54 81       	ldd	r21, Z+4	; 0x04

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	33 81       	ldd	r19, Z+3	; 0x03
     37a:	53 13       	cpse	r21, r19
     37c:	01 c0       	rjmp	.+2      	; 0x380 <__vector_23+0x44>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	0f c0       	rjmp	.+30     	; 0x39e <__vector_23+0x62>
     380:	32 81       	ldd	r19, Z+2	; 0x02
     382:	dc 01       	movw	r26, r24
     384:	a3 0f       	add	r26, r19
     386:	b1 1d       	adc	r27, r1
     388:	4c 93       	st	X, r20
     38a:	83 2f       	mov	r24, r19
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	93 81       	ldd	r25, Z+3	; 0x03
     392:	89 13       	cpse	r24, r25
     394:	01 c0       	rjmp	.+2      	; 0x398 <__vector_23+0x5c>
     396:	12 82       	std	Z+2, r1	; 0x02
     398:	84 81       	ldd	r24, Z+4	; 0x04
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	84 83       	std	Z+4, r24	; 0x04
     39e:	2f bf       	out	0x3f, r18	; 63
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <CALLBACK_USB_GetDescriptor>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	29 2f       	mov	r18, r25
     3c0:	33 27       	eor	r19, r19
     3c2:	22 30       	cpi	r18, 0x02	; 2
     3c4:	31 05       	cpc	r19, r1
     3c6:	39 f0       	breq	.+14     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x18>
     3c8:	23 30       	cpi	r18, 0x03	; 3
     3ca:	31 05       	cpc	r19, r1
				break;
     3cc:	49 f0       	breq	.+18     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x22>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	21 30       	cpi	r18, 0x01	; 1
     3d0:	31 05       	cpc	r19, r1
     3d2:	21 f1       	breq	.+72     	; 0x41c <CALLBACK_USB_GetDescriptor+0x5e>
     3d4:	28 c0       	rjmp	.+80     	; 0x426 <CALLBACK_USB_GetDescriptor+0x68>
     3d6:	ee e3       	ldi	r30, 0x3E	; 62
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	82 ec       	ldi	r24, 0xC2	; 194
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	27 c0       	rjmp	.+78     	; 0x42e <CALLBACK_USB_GetDescriptor+0x70>
     3e0:	99 27       	eor	r25, r25
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	91 05       	cpc	r25, r1
     3e6:	61 f0       	breq	.+24     	; 0x400 <CALLBACK_USB_GetDescriptor+0x42>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	91 05       	cpc	r25, r1
     3ec:	81 f0       	breq	.+32     	; 0x40e <CALLBACK_USB_GetDescriptor+0x50>
     3ee:	89 2b       	or	r24, r25
     3f0:	d1 f4       	brne	.+52     	; 0x426 <CALLBACK_USB_GetDescriptor+0x68>
     3f2:	ee eb       	ldi	r30, 0xBE	; 190
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e4 91       	lpm	r30, Z+
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
				break;
     3fa:	8e eb       	ldi	r24, 0xBE	; 190
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	17 c0       	rjmp	.+46     	; 0x42e <CALLBACK_USB_GetDescriptor+0x70>
     400:	e4 ea       	ldi	r30, 0xA4	; 164
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	e4 91       	lpm	r30, Z+
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	84 ea       	ldi	r24, 0xA4	; 164

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	10 c0       	rjmp	.+32     	; 0x42e <CALLBACK_USB_GetDescriptor+0x70>
     40e:	e4 e7       	ldi	r30, 0x74	; 116
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e4 91       	lpm	r30, Z+
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	84 e7       	ldi	r24, 0x74	; 116
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	09 c0       	rjmp	.+18     	; 0x42e <CALLBACK_USB_GetDescriptor+0x70>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	e2 e1       	ldi	r30, 0x12	; 18
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	04 c0       	rjmp	.+8      	; 0x42e <CALLBACK_USB_GetDescriptor+0x70>
     426:	e0 e0       	ldi	r30, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     428:	f0 e0       	ldi	r31, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	da 01       	movw	r26, r20
     430:	8d 93       	st	X+, r24
     432:	9c 93       	st	X, r25
     434:	cf 01       	movw	r24, r30
     436:	08 95       	ret

00000438 <HIDreset>:
     438:	10 92 92 01 	sts	0x0192, r1
     43c:	10 92 94 01 	sts	0x0194, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	10 92 93 01 	sts	0x0193, r1
     444:	4a e0       	ldi	r20, 0x0A	; 10
     446:	50 e0       	ldi	r21, 0x00	; 0
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	84 ed       	ldi	r24, 0xD4	; 212
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	40 c6       	rjmp	.+3200   	; 0x10d2 <memset>

00000452 <avrispReset>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     452:	10 92 25 01 	sts	0x0125, r1
     456:	10 92 24 01 	sts	0x0124, r1
     45a:	10 92 26 01 	sts	0x0126, r1
     45e:	10 92 28 01 	sts	0x0128, r1

				if (UsageListSize)
     462:	10 92 27 01 	sts	0x0127, r1
     466:	08 95       	ret

00000468 <NHPreset>:
     468:	fc 01       	movw	r30, r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	20 81       	ld	r18, Z
     46c:	20 68       	ori	r18, 0x80	; 128
     46e:	2f 7b       	andi	r18, 0xBF	; 191
     470:	20 83       	st	Z, r18
     472:	08 95       	ret

00000474 <EVENT_CDC_Device_LineEncodingChanged>:
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
     47c:	e9 8d       	ldd	r30, Y+25	; 0x19
     47e:	e1 50       	subi	r30, 0x01	; 1

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	e2 30       	cpi	r30, 0x02	; 2
     482:	28 f4       	brcc	.+10     	; 0x48e <EVENT_CDC_Device_LineEncodingChanged+0x1a>
					  UsageList[i - 1] = UsageList[i];
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e5 5e       	subi	r30, 0xE5	; 229
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	10 81       	ld	r17, Z

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	01 c0       	rjmp	.+2      	; 0x490 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	88 8d       	ldd	r24, Y+24	; 0x18
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	09 f4       	brne	.+2      	; 0x498 <EVENT_CDC_Device_LineEncodingChanged+0x24>
     496:	18 60       	ori	r17, 0x08	; 8
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	8a 8d       	ldd	r24, Y+26	; 0x1a
     49a:	87 30       	cpi	r24, 0x07	; 7
     49c:	31 f0       	breq	.+12     	; 0x4aa <EVENT_CDC_Device_LineEncodingChanged+0x36>
     49e:	88 30       	cpi	r24, 0x08	; 8
     4a0:	31 f0       	breq	.+12     	; 0x4ae <EVENT_CDC_Device_LineEncodingChanged+0x3a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	86 30       	cpi	r24, 0x06	; 6
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     4a6:	12 60       	ori	r17, 0x02	; 2
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     4aa:	14 60       	ori	r17, 0x04	; 4
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     4ae:	16 60       	ori	r17, 0x06	; 6
     4b0:	5b 9a       	sbi	0x0b, 3	; 11
     4b2:	10 92 c9 00 	sts	0x00C9, r1
     4b6:	10 92 c8 00 	sts	0x00C8, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	10 92 ca 00 	sts	0x00CA, r1
     4be:	2c 89       	ldd	r18, Y+20	; 0x14
     4c0:	3d 89       	ldd	r19, Y+21	; 0x15
     4c2:	4e 89       	ldd	r20, Y+22	; 0x16
     4c4:	5f 89       	ldd	r21, Y+23	; 0x17
     4c6:	21 15       	cp	r18, r1
     4c8:	81 ee       	ldi	r24, 0xE1	; 225
     4ca:	38 07       	cpc	r19, r24
     4cc:	41 05       	cpc	r20, r1
     4ce:	51 05       	cpc	r21, r1
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	71 f0       	breq	.+28     	; 0x4ee <EVENT_CDC_Device_LineEncodingChanged+0x7a>
     4d2:	ca 01       	movw	r24, r20
     4d4:	b9 01       	movw	r22, r18
     4d6:	96 95       	lsr	r25
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	87 95       	ror	r24
     4da:	77 95       	ror	r23
     4dc:	67 95       	ror	r22
				break;
     4de:	60 58       	subi	r22, 0x80	; 128
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	7b 47       	sbci	r23, 0x7B	; 123
     4e2:	81 4e       	sbci	r24, 0xE1	; 225
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	d3 d5       	rcall	.+2982   	; 0x108e <__udivmodsi4>
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	31 09       	sbc	r19, r1
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
     4ee:	20 e1       	ldi	r18, 0x10	; 16
     4f0:	30 e0       	ldi	r19, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f2:	30 93 cd 00 	sts	0x00CD, r19
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f6:	20 93 cc 00 	sts	0x00CC, r18
     4fa:	10 93 ca 00 	sts	0x00CA, r17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	8c 89       	ldd	r24, Y+20	; 0x14
     500:	9d 89       	ldd	r25, Y+21	; 0x15
     502:	ae 89       	ldd	r26, Y+22	; 0x16
     504:	bf 89       	ldd	r27, Y+23	; 0x17

					if (UsageListSize)
     506:	81 15       	cp	r24, r1
     508:	91 4e       	sbci	r25, 0xE1	; 225
     50a:	a1 05       	cpc	r26, r1
     50c:	b1 05       	cpc	r27, r1
     50e:	11 f4       	brne	.+4      	; 0x514 <EVENT_CDC_Device_LineEncodingChanged+0xa0>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	01 c0       	rjmp	.+2      	; 0x516 <EVENT_CDC_Device_LineEncodingChanged+0xa2>
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	80 93 c8 00 	sts	0x00C8, r24
     51a:	88 e9       	ldi	r24, 0x98	; 152
     51c:	80 93 c9 00 	sts	0x00C9, r24
     520:	5b 98       	cbi	0x0b, 3	; 11
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	1f 91       	pop	r17
     528:	08 95       	ret

0000052a <EVENT_CDC_Device_ControLineStateChanged>:
						  UsageList[i - 1] = UsageList[i];
     52a:	fc 01       	movw	r30, r24
     52c:	20 89       	ldd	r18, Z+16	; 0x10
     52e:	20 ff       	sbrs	r18, 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <EVENT_CDC_Device_ControLineStateChanged+0xc>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     532:	5f 98       	cbi	0x0b, 7	; 11
     534:	08 95       	ret
     536:	5f 9a       	sbi	0x0b, 7	; 11
     538:	8b b1       	in	r24, 0x0b	; 11
     53a:	80 63       	ori	r24, 0x30	; 48
     53c:	8b b9       	out	0x0b, r24	; 11
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	08 95       	ret

00000540 <Endpoint_Write_Control_Stream_LE>:
     540:	20 91 39 02 	lds	r18, 0x0239
     544:	30 91 3a 02 	lds	r19, 0x023A
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	26 17       	cp	r18, r22
     54a:	37 07       	cpc	r19, r23
     54c:	48 f0       	brcs	.+18     	; 0x560 <Endpoint_Write_Control_Stream_LE+0x20>
     54e:	61 15       	cp	r22, r1
     550:	71 05       	cpc	r23, r1
     552:	39 f4       	brne	.+14     	; 0x562 <Endpoint_Write_Control_Stream_LE+0x22>
     554:	20 91 e8 00 	lds	r18, 0x00E8
     558:	2e 77       	andi	r18, 0x7E	; 126
     55a:	20 93 e8 00 	sts	0x00E8, r18
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	01 c0       	rjmp	.+2      	; 0x562 <Endpoint_Write_Control_Stream_LE+0x22>
     560:	b9 01       	movw	r22, r18
     562:	9c 01       	movw	r18, r24
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	34 c0       	rjmp	.+104    	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0x90>
     568:	90 91 32 02 	lds	r25, 0x0232
     56c:	99 23       	and	r25, r25
     56e:	09 f4       	brne	.+2      	; 0x572 <Endpoint_Write_Control_Stream_LE+0x32>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	43 c0       	rjmp	.+134    	; 0x5f8 <Endpoint_Write_Control_Stream_LE+0xb8>
     572:	95 30       	cpi	r25, 0x05	; 5
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	09 f4       	brne	.+2      	; 0x578 <Endpoint_Write_Control_Stream_LE+0x38>
     576:	42 c0       	rjmp	.+132    	; 0x5fc <Endpoint_Write_Control_Stream_LE+0xbc>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	90 91 e8 00 	lds	r25, 0x00E8
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	93 fd       	sbrc	r25, 3
     57e:	3a c0       	rjmp	.+116    	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0xb4>
     580:	90 91 e8 00 	lds	r25, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     584:	92 fd       	sbrc	r25, 2

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	30 c0       	rjmp	.+96     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xa8>
     588:	90 91 e8 00 	lds	r25, 0x00E8
     58c:	90 ff       	sbrs	r25, 0
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0x90>
     590:	80 91 f2 00 	lds	r24, 0x00F2
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	f9 01       	movw	r30, r18
     598:	82 1b       	sub	r24, r18
     59a:	93 0b       	sbc	r25, r19
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x68>
     59e:	21 91       	ld	r18, Z+
     5a0:	20 93 f1 00 	sts	0x00F1, r18

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a4:	61 50       	subi	r22, 0x01	; 1
     5a6:	71 09       	sbc	r23, r1
     5a8:	9f 01       	movw	r18, r30
     5aa:	28 0f       	add	r18, r24
     5ac:	39 1f       	adc	r19, r25
     5ae:	61 15       	cp	r22, r1
     5b0:	71 05       	cpc	r23, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	19 f0       	breq	.+6      	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x7a>
     5b4:	28 30       	cpi	r18, 0x08	; 8
     5b6:	31 05       	cpc	r19, r1
     5b8:	90 f3       	brcs	.-28     	; 0x59e <Endpoint_Write_Control_Stream_LE+0x5e>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	28 30       	cpi	r18, 0x08	; 8
     5be:	31 05       	cpc	r19, r1
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x84>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 91 e8 00 	lds	r25, 0x00E8
     5c8:	9e 77       	andi	r25, 0x7E	; 126
     5ca:	90 93 e8 00 	sts	0x00E8, r25
     5ce:	9f 01       	movw	r18, r30
     5d0:	61 15       	cp	r22, r1
     5d2:	71 05       	cpc	r23, r1
     5d4:	49 f6       	brne	.-110    	; 0x568 <Endpoint_Write_Control_Stream_LE+0x28>
     5d6:	81 11       	cpse	r24, r1
     5d8:	c7 cf       	rjmp	.-114    	; 0x568 <Endpoint_Write_Control_Stream_LE+0x28>
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xa8>
     5dc:	80 91 32 02 	lds	r24, 0x0232
     5e0:	88 23       	and	r24, r24
     5e2:	51 f0       	breq	.+20     	; 0x5f8 <Endpoint_Write_Control_Stream_LE+0xb8>
     5e4:	85 30       	cpi	r24, 0x05	; 5
     5e6:	51 f0       	breq	.+20     	; 0x5fc <Endpoint_Write_Control_Stream_LE+0xbc>
     5e8:	80 91 e8 00 	lds	r24, 0x00E8
     5ec:	82 ff       	sbrs	r24, 2
     5ee:	f6 cf       	rjmp	.-20     	; 0x5dc <Endpoint_Write_Control_Stream_LE+0x9c>
     5f0:	80 e0       	ldi	r24, 0x00	; 0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	08 95       	ret
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret
     5f8:	82 e0       	ldi	r24, 0x02	; 2
					  return HID_PARSE_InsufficientReportItems;
     5fa:	08 95       	ret
     5fc:	83 e0       	ldi	r24, 0x03	; 3

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	08 95       	ret

00000600 <Endpoint_Write_Control_PStream_LE>:
     600:	20 91 39 02 	lds	r18, 0x0239
     604:	30 91 3a 02 	lds	r19, 0x023A
     608:	26 17       	cp	r18, r22
     60a:	37 07       	cpc	r19, r23
     60c:	48 f0       	brcs	.+18     	; 0x620 <Endpoint_Write_Control_PStream_LE+0x20>
     60e:	61 15       	cp	r22, r1
     610:	71 05       	cpc	r23, r1
     612:	39 f4       	brne	.+14     	; 0x622 <Endpoint_Write_Control_PStream_LE+0x22>
     614:	20 91 e8 00 	lds	r18, 0x00E8
     618:	2e 77       	andi	r18, 0x7E	; 126
     61a:	20 93 e8 00 	sts	0x00E8, r18
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	01 c0       	rjmp	.+2      	; 0x622 <Endpoint_Write_Control_PStream_LE+0x22>
     620:	b9 01       	movw	r22, r18
     622:	9c 01       	movw	r18, r24
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	35 c0       	rjmp	.+106    	; 0x692 <Endpoint_Write_Control_PStream_LE+0x92>
     628:	90 91 32 02 	lds	r25, 0x0232
     62c:	99 23       	and	r25, r25
     62e:	09 f4       	brne	.+2      	; 0x632 <Endpoint_Write_Control_PStream_LE+0x32>
     630:	44 c0       	rjmp	.+136    	; 0x6ba <Endpoint_Write_Control_PStream_LE+0xba>
     632:	95 30       	cpi	r25, 0x05	; 5
     634:	09 f4       	brne	.+2      	; 0x638 <Endpoint_Write_Control_PStream_LE+0x38>
     636:	43 c0       	rjmp	.+134    	; 0x6be <Endpoint_Write_Control_PStream_LE+0xbe>
     638:	90 91 e8 00 	lds	r25, 0x00E8
     63c:	93 fd       	sbrc	r25, 3
     63e:	3b c0       	rjmp	.+118    	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0xb6>
     640:	90 91 e8 00 	lds	r25, 0x00E8
     644:	92 fd       	sbrc	r25, 2
     646:	31 c0       	rjmp	.+98     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0xaa>
     648:	90 91 e8 00 	lds	r25, 0x00E8
     64c:	90 ff       	sbrs	r25, 0
     64e:	21 c0       	rjmp	.+66     	; 0x692 <Endpoint_Write_Control_PStream_LE+0x92>
     650:	80 91 f2 00 	lds	r24, 0x00F2
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	82 1b       	sub	r24, r18
     65a:	93 0b       	sbc	r25, r19
     65c:	06 c0       	rjmp	.+12     	; 0x66a <Endpoint_Write_Control_PStream_LE+0x6a>
     65e:	24 91       	lpm	r18, Z+
     660:	20 93 f1 00 	sts	0x00F1, r18
     664:	31 96       	adiw	r30, 0x01	; 1
     666:	61 50       	subi	r22, 0x01	; 1
     668:	71 09       	sbc	r23, r1
     66a:	9c 01       	movw	r18, r24
     66c:	2e 0f       	add	r18, r30
     66e:	3f 1f       	adc	r19, r31
     670:	61 15       	cp	r22, r1
     672:	71 05       	cpc	r23, r1
     674:	19 f0       	breq	.+6      	; 0x67c <Endpoint_Write_Control_PStream_LE+0x7c>
     676:	28 30       	cpi	r18, 0x08	; 8
     678:	31 05       	cpc	r19, r1
     67a:	88 f3       	brcs	.-30     	; 0x65e <Endpoint_Write_Control_PStream_LE+0x5e>
     67c:	81 e0       	ldi	r24, 0x01	; 1
					  ParserData->TotalReportItems++;
     67e:	28 30       	cpi	r18, 0x08	; 8
     680:	31 05       	cpc	r19, r1
     682:	09 f0       	breq	.+2      	; 0x686 <Endpoint_Write_Control_PStream_LE+0x86>
     684:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	90 91 e8 00 	lds	r25, 0x00E8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	9e 77       	andi	r25, 0x7E	; 126
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	90 93 e8 00 	sts	0x00E8, r25
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     690:	9f 01       	movw	r18, r30
     692:	61 15       	cp	r22, r1
     694:	71 05       	cpc	r23, r1
     696:	41 f6       	brne	.-112    	; 0x628 <Endpoint_Write_Control_PStream_LE+0x28>
     698:	81 11       	cpse	r24, r1
     69a:	c6 cf       	rjmp	.-116    	; 0x628 <Endpoint_Write_Control_PStream_LE+0x28>
     69c:	06 c0       	rjmp	.+12     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0xaa>
     69e:	80 91 32 02 	lds	r24, 0x0232
     6a2:	88 23       	and	r24, r24
     6a4:	51 f0       	breq	.+20     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0xba>
     6a6:	85 30       	cpi	r24, 0x05	; 5
     6a8:	51 f0       	breq	.+20     	; 0x6be <Endpoint_Write_Control_PStream_LE+0xbe>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
     6ae:	82 ff       	sbrs	r24, 2
     6b0:	f6 cf       	rjmp	.-20     	; 0x69e <Endpoint_Write_Control_PStream_LE+0x9e>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	08 95       	ret
     6b6:	81 e0       	ldi	r24, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	08 95       	ret
     6ba:	82 e0       	ldi	r24, 0x02	; 2

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	08 95       	ret
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	08 95       	ret

000006c2 <Endpoint_ConfigureEndpoint_Prv>:
     6c2:	98 2f       	mov	r25, r24
     6c4:	2c c0       	rjmp	.+88     	; 0x71e <Endpoint_ConfigureEndpoint_Prv+0x5c>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c6:	90 93 e9 00 	sts	0x00E9, r25
     6ca:	98 17       	cp	r25, r24
     6cc:	39 f0       	breq	.+14     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x1a>
     6ce:	70 91 ec 00 	lds	r23, 0x00EC
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	20 91 ed 00 	lds	r18, 0x00ED
     6d6:	50 91 f0 00 	lds	r21, 0x00F0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <Endpoint_ConfigureEndpoint_Prv+0x20>
     6dc:	24 2f       	mov	r18, r20
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	76 2f       	mov	r23, r22
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	21 fd       	sbrc	r18, 1
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <Endpoint_ConfigureEndpoint_Prv+0x28>
     6e6:	9f 5f       	subi	r25, 0xFF	; 255
     6e8:	1a c0       	rjmp	.+52     	; 0x71e <Endpoint_ConfigureEndpoint_Prv+0x5c>
     6ea:	30 91 eb 00 	lds	r19, 0x00EB
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ee:	3e 7f       	andi	r19, 0xFE	; 254
     6f0:	30 93 eb 00 	sts	0x00EB, r19
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	30 91 ed 00 	lds	r19, 0x00ED

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	3d 7f       	andi	r19, 0xFD	; 253
     6fa:	30 93 ed 00 	sts	0x00ED, r19
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fe:	30 91 eb 00 	lds	r19, 0x00EB
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     702:	31 60       	ori	r19, 0x01	; 1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	30 93 eb 00 	sts	0x00EB, r19

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	70 93 ec 00 	sts	0x00EC, r23
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	20 93 ed 00 	sts	0x00ED, r18
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	50 93 f0 00 	sts	0x00F0, r21
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	20 91 ee 00 	lds	r18, 0x00EE
     718:	27 fd       	sbrc	r18, 7
     71a:	e5 cf       	rjmp	.-54     	; 0x6e6 <Endpoint_ConfigureEndpoint_Prv+0x24>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	07 c0       	rjmp	.+14     	; 0x72c <Endpoint_ConfigureEndpoint_Prv+0x6a>
     71e:	95 30       	cpi	r25, 0x05	; 5
     720:	90 f2       	brcs	.-92     	; 0x6c6 <Endpoint_ConfigureEndpoint_Prv+0x4>
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	80 93 e9 00 	sts	0x00E9, r24
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	08 95       	ret
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	08 95       	ret

00000730 <Endpoint_ConfigureEndpointTable>:
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	06 2f       	mov	r16, r22
     73a:	ec 01       	movw	r28, r24
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	2e c0       	rjmp	.+92     	; 0x79c <Endpoint_ConfigureEndpointTable+0x6c>
     740:	98 81       	ld	r25, Y
     742:	91 11       	cpse	r25, r1
     744:	03 c0       	rjmp	.+6      	; 0x74c <Endpoint_ConfigureEndpointTable+0x1c>
     746:	1f 5f       	subi	r17, 0xFF	; 255
     748:	25 96       	adiw	r28, 0x05	; 5
     74a:	28 c0       	rjmp	.+80     	; 0x79c <Endpoint_ConfigureEndpointTable+0x6c>
     74c:	2c 81       	ldd	r18, Y+4	; 0x04
     74e:	e9 81       	ldd	r30, Y+1	; 0x01
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     750:	fa 81       	ldd	r31, Y+2	; 0x02
     752:	6b 81       	ldd	r22, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     754:	89 2f       	mov	r24, r25
     756:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	10 f0       	brcs	.+4      	; 0x760 <Endpoint_ConfigureEndpointTable+0x30>
		  return false;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	21 c0       	rjmp	.+66     	; 0x7a2 <Endpoint_ConfigureEndpointTable+0x72>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     760:	22 30       	cpi	r18, 0x02	; 2
     762:	10 f0       	brcs	.+4      	; 0x768 <Endpoint_ConfigureEndpointTable+0x38>
     764:	56 e0       	ldi	r21, 0x06	; 6
     766:	01 c0       	rjmp	.+2      	; 0x76a <Endpoint_ConfigureEndpointTable+0x3a>
     768:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     76a:	28 e0       	ldi	r18, 0x08	; 8
     76c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	03 c0       	rjmp	.+6      	; 0x778 <Endpoint_ConfigureEndpointTable+0x48>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     772:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     778:	2e 17       	cp	r18, r30
     77a:	3f 07       	cpc	r19, r31
     77c:	d0 f3       	brcs	.-12     	; 0x772 <Endpoint_ConfigureEndpointTable+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     77e:	42 95       	swap	r20
     780:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     782:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     784:	99 1f       	adc	r25, r25
     786:	99 27       	eor	r25, r25
     788:	99 1f       	adc	r25, r25
     78a:	62 95       	swap	r22
     78c:	66 0f       	add	r22, r22
     78e:	66 0f       	add	r22, r22
     790:	60 7c       	andi	r22, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     792:	69 2b       	or	r22, r25
     794:	96 df       	rcall	.-212    	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv>
     796:	81 11       	cpse	r24, r1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     798:	d6 cf       	rjmp	.-84     	; 0x746 <Endpoint_ConfigureEndpointTable+0x16>
     79a:	e0 cf       	rjmp	.-64     	; 0x75c <Endpoint_ConfigureEndpointTable+0x2c>
     79c:	10 13       	cpse	r17, r16
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     79e:	d0 cf       	rjmp	.-96     	; 0x740 <Endpoint_ConfigureEndpointTable+0x10>
     7a0:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     7a2:	df 91       	pop	r29
}
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	08 95       	ret

000007ac <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     7ac:	80 91 33 02 	lds	r24, 0x0233
     7b0:	87 fd       	sbrc	r24, 7
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7b8:	80 ff       	sbrs	r24, 0
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <Endpoint_ClearStatusStage+0x2c>
     7bc:	12 c0       	rjmp	.+36     	; 0x7e2 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7be:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7c2:	82 fd       	sbrc	r24, 2
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7c6:	80 91 32 02 	lds	r24, 0x0232
     7ca:	81 11       	cpse	r24, r1
     7cc:	f8 cf       	rjmp	.-16     	; 0x7be <Endpoint_ClearStatusStage+0x12>
     7ce:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d0:	80 91 e8 00 	lds	r24, 0x00E8
     7d4:	8b 77       	andi	r24, 0x7B	; 123
     7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7d8:	80 91 32 02 	lds	r24, 0x0232
     7dc:	81 11       	cpse	r24, r1
     7de:	ea cf       	rjmp	.-44     	; 0x7b4 <Endpoint_ClearStatusStage+0x8>
     7e0:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7e2:	80 91 e8 00 	lds	r24, 0x00E8
     7e6:	8e 77       	andi	r24, 0x7E	; 126
     7e8:	80 93 e8 00 	sts	0x00E8, r24
     7ec:	08 95       	ret

000007ee <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7ee:	80 91 e4 00 	lds	r24, 0x00E4
     7f2:	90 91 e5 00 	lds	r25, 0x00E5
     7f6:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7f8:	20 91 ec 00 	lds	r18, 0x00EC
     7fc:	20 fd       	sbrc	r18, 0
     7fe:	1f c0       	rjmp	.+62     	; 0x83e <Endpoint_WaitUntilReady+0x50>
     800:	23 c0       	rjmp	.+70     	; 0x848 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     802:	20 91 32 02 	lds	r18, 0x0232

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     806:	22 23       	and	r18, r18
     808:	91 f0       	breq	.+36     	; 0x82e <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     80a:	25 30       	cpi	r18, 0x05	; 5
     80c:	91 f0       	breq	.+36     	; 0x832 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     80e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     812:	25 fd       	sbrc	r18, 5
     814:	10 c0       	rjmp	.+32     	; 0x836 <Endpoint_WaitUntilReady+0x48>
     816:	20 91 e4 00 	lds	r18, 0x00E4
     81a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	51 f3       	breq	.-44     	; 0x7f8 <Endpoint_WaitUntilReady+0xa>
     824:	41 50       	subi	r20, 0x01	; 1
     826:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     828:	39 f7       	brne	.-50     	; 0x7f8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     83e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     842:	20 ff       	sbrs	r18, 0
     844:	de cf       	rjmp	.-68     	; 0x802 <Endpoint_WaitUntilReady+0x14>
     846:	f9 cf       	rjmp	.-14     	; 0x83a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     848:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     84c:	22 ff       	sbrs	r18, 2
     84e:	d9 cf       	rjmp	.-78     	; 0x802 <Endpoint_WaitUntilReady+0x14>
     850:	f4 cf       	rjmp	.-24     	; 0x83a <Endpoint_WaitUntilReady+0x4c>

00000852 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     852:	41 d0       	rcall	.+130    	; 0x8d6 <USB_INT_DisableAllInterrupts>
     854:	43 d0       	rcall	.+134    	; 0x8dc <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     856:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     85a:	8f 77       	andi	r24, 0x7F	; 127
     85c:	80 93 d8 00 	sts	0x00D8, r24
     860:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     864:	80 68       	ori	r24, 0x80	; 128
     866:	80 93 d8 00 	sts	0x00D8, r24
     86a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     86e:	8f 7d       	andi	r24, 0xDF	; 223
     870:	80 93 d8 00 	sts	0x00D8, r24
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     87c:	09 b4       	in	r0, 0x29	; 41
     87e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     880:	fd cf       	rjmp	.-6      	; 0x87c <USB_ResetInterface+0x2a>
     882:	10 92 32 02 	sts	0x0232, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     886:	10 92 2e 02 	sts	0x022E, r1
	USB_Device_ConfigurationNumber  = 0;
     88a:	10 92 30 02 	sts	0x0230, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     88e:	10 92 2f 02 	sts	0x022F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	14 df       	rcall	.-472    	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv>
     89a:	80 91 e1 00 	lds	r24, 0x00E1
     89e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8a0:	80 93 e1 00 	sts	0x00E1, r24
     8a4:	80 91 e2 00 	lds	r24, 0x00E2
     8a8:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8aa:	80 93 e2 00 	sts	0x00E2, r24
     8ae:	80 91 e2 00 	lds	r24, 0x00E2
     8b2:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8b4:	80 93 e2 00 	sts	0x00E2, r24
     8b8:	80 91 e0 00 	lds	r24, 0x00E0
     8bc:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8be:	80 93 e0 00 	sts	0x00E0, r24
     8c2:	08 95       	ret

000008c4 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     8c4:	e3 e6       	ldi	r30, 0x63	; 99
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 31 02 	sts	0x0231, r24

	USB_ResetInterface();
     8d4:	be cf       	rjmp	.-132    	; 0x852 <USB_ResetInterface>

000008d6 <USB_INT_DisableAllInterrupts>:
     8d6:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8da:	08 95       	ret

000008dc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8dc:	10 92 e1 00 	sts	0x00E1, r1
     8e0:	08 95       	ret

000008e2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     904:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     908:	82 ff       	sbrs	r24, 2
     90a:	0a c0       	rjmp	.+20     	; 0x920 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     90c:	80 91 e2 00 	lds	r24, 0x00E2
     910:	82 ff       	sbrs	r24, 2
     912:	06 c0       	rjmp	.+12     	; 0x920 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     914:	80 91 e1 00 	lds	r24, 0x00E1
     918:	8b 7f       	andi	r24, 0xFB	; 251
     91a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     91e:	2e d2       	rcall	.+1116   	; 0xd7c <USB_Event_Stub>
     920:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     924:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     926:	17 c0       	rjmp	.+46     	; 0x956 <__vector_11+0x74>
     928:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     92c:	80 ff       	sbrs	r24, 0
     92e:	13 c0       	rjmp	.+38     	; 0x956 <__vector_11+0x74>
     930:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     934:	8e 7f       	andi	r24, 0xFE	; 254
     936:	80 93 e2 00 	sts	0x00E2, r24
     93a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     93e:	80 61       	ori	r24, 0x10	; 16
     940:	80 93 e2 00 	sts	0x00E2, r24
     944:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     948:	80 62       	ori	r24, 0x20	; 32
     94a:	80 93 d8 00 	sts	0x00D8, r24
     94e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     950:	10 92 32 02 	sts	0x0232, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     954:	ec dc       	rcall	.-1576   	; 0x32e <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     956:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     95a:	84 ff       	sbrs	r24, 4
     95c:	2f c0       	rjmp	.+94     	; 0x9bc <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     95e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     962:	84 ff       	sbrs	r24, 4
     964:	2b c0       	rjmp	.+86     	; 0x9bc <__vector_11+0xda>
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     96e:	09 b4       	in	r0, 0x29	; 41
     970:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     972:	fd cf       	rjmp	.-6      	; 0x96e <__vector_11+0x8c>
     974:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     978:	8f 7d       	andi	r24, 0xDF	; 223
     97a:	80 93 d8 00 	sts	0x00D8, r24
     97e:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     982:	8f 7e       	andi	r24, 0xEF	; 239
     984:	80 93 e1 00 	sts	0x00E1, r24
     988:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     98c:	8f 7e       	andi	r24, 0xEF	; 239
     98e:	80 93 e2 00 	sts	0x00E2, r24
     992:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 93 e2 00 	sts	0x00E2, r24
     99c:	80 91 2e 02 	lds	r24, 0x022E
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9a0:	88 23       	and	r24, r24
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <__vector_11+0xc6>
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     9a8:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9ac:	87 ff       	sbrs	r24, 7
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__vector_11+0xd4>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 32 02 	sts	0x0232, r24
     9ba:	b8 dc       	rcall	.-1680   	; 0x32c <EVENT_USB_Device_Connect>
     9bc:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     9c0:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9c2:	27 c0       	rjmp	.+78     	; 0xa12 <__vector_11+0x130>
     9c4:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9c8:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9ca:	23 c0       	rjmp	.+70     	; 0xa12 <__vector_11+0x130>
     9cc:	80 91 e1 00 	lds	r24, 0x00E1
     9d0:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9d2:	80 93 e1 00 	sts	0x00E1, r24
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	80 93 32 02 	sts	0x0232, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9dc:	10 92 2e 02 	sts	0x022E, r1
     9e0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9e6:	80 93 e1 00 	sts	0x00E1, r24
     9ea:	80 91 e2 00 	lds	r24, 0x00E2
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9f0:	80 93 e2 00 	sts	0x00E2, r24
     9f4:	80 91 e2 00 	lds	r24, 0x00E2
     9f8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9fa:	80 93 e2 00 	sts	0x00E2, r24
     9fe:	42 e0       	ldi	r20, 0x02	; 2
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a04:	5e de       	rcall	.-836    	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv>
     a06:	80 91 f0 00 	lds	r24, 0x00F0
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a10:	b5 d1       	rcall	.+874    	; 0xd7c <USB_Event_Stub>
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	2f 93       	push	r18
     a40:	3f 93       	push	r19
     a42:	4f 93       	push	r20
     a44:	5f 93       	push	r21
     a46:	6f 93       	push	r22
     a48:	7f 93       	push	r23
     a4a:	8f 93       	push	r24
     a4c:	9f 93       	push	r25
     a4e:	af 93       	push	r26
     a50:	bf 93       	push	r27
     a52:	cf 93       	push	r28
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a58:	80 91 e9 00 	lds	r24, 0x00E9
     a5c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a5e:	90 91 ec 00 	lds	r25, 0x00EC
     a62:	90 ff       	sbrs	r25, 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <__vector_12+0x36>
     a66:	90 e8       	ldi	r25, 0x80	; 128
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <__vector_12+0x38>
     a6a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a6c:	c9 2f       	mov	r28, r25
     a6e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a70:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a74:	80 91 f0 00 	lds	r24, 0x00F0
     a78:	87 7f       	andi	r24, 0xF7	; 247
     a7a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a7e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a80:	1c d0       	rcall	.+56     	; 0xaba <USB_Device_ProcessControlRequest>
     a82:	10 92 e9 00 	sts	0x00E9, r1
     a86:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	80 93 f0 00 	sts	0x00F0, r24
     a90:	cf 70       	andi	r28, 0x0F	; 15
     a92:	c0 93 e9 00 	sts	0x00E9, r28
     a96:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a98:	ef 91       	pop	r30
     a9a:	cf 91       	pop	r28
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <USB_Device_ProcessControlRequest>:
     aba:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	ac 97       	sbiw	r28, 0x2c	; 44
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ad0:	e3 e3       	ldi	r30, 0x33	; 51
     ad2:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ad4:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ad8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ada:	22 e0       	ldi	r18, 0x02	; 2
     adc:	eb 33       	cpi	r30, 0x3B	; 59
     ade:	f2 07       	cpc	r31, r18
     ae0:	c9 f7       	brne	.-14     	; 0xad4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ae2:	29 dc       	rcall	.-1966   	; 0x336 <EVENT_USB_Device_ControlRequest>
     ae4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ae8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     aea:	30 c1       	rjmp	.+608    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     aec:	80 91 33 02 	lds	r24, 0x0233
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     af0:	90 91 34 02 	lds	r25, 0x0234

		switch (USB_ControlRequest.bRequest)
     af4:	95 30       	cpi	r25, 0x05	; 5
     af6:	09 f4       	brne	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x40>
     af8:	87 c0       	rjmp	.+270    	; 0xc08 <USB_Device_ProcessControlRequest+0x14e>
     afa:	38 f4       	brcc	.+14     	; 0xb0a <USB_Device_ProcessControlRequest+0x50>
     afc:	91 30       	cpi	r25, 0x01	; 1
     afe:	b1 f1       	breq	.+108    	; 0xb6c <USB_Device_ProcessControlRequest+0xb2>
     b00:	70 f0       	brcs	.+28     	; 0xb1e <USB_Device_ProcessControlRequest+0x64>
     b02:	93 30       	cpi	r25, 0x03	; 3
     b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Device_ProcessControlRequest+0x4e>
     b06:	22 c1       	rjmp	.+580    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b08:	31 c0       	rjmp	.+98     	; 0xb6c <USB_Device_ProcessControlRequest+0xb2>
     b0a:	98 30       	cpi	r25, 0x08	; 8
     b0c:	09 f4       	brne	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0x56>
     b0e:	f3 c0       	rjmp	.+486    	; 0xcf6 <USB_Device_ProcessControlRequest+0x23c>
     b10:	99 30       	cpi	r25, 0x09	; 9
     b12:	09 f4       	brne	.+2      	; 0xb16 <USB_Device_ProcessControlRequest+0x5c>
     b14:	ff c0       	rjmp	.+510    	; 0xd14 <USB_Device_ProcessControlRequest+0x25a>
     b16:	96 30       	cpi	r25, 0x06	; 6
     b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Device_ProcessControlRequest+0x62>
     b1a:	18 c1       	rjmp	.+560    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b1c:	9b c0       	rjmp	.+310    	; 0xc54 <USB_Device_ProcessControlRequest+0x19a>
     b1e:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b20:	21 f0       	breq	.+8      	; 0xb2a <USB_Device_ProcessControlRequest+0x70>
     b22:	82 38       	cpi	r24, 0x82	; 130
     b24:	09 f0       	breq	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x6e>
     b26:	12 c1       	rjmp	.+548    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <USB_Device_ProcessControlRequest+0x80>
     b2a:	80 91 2f 02 	lds	r24, 0x022F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b2e:	90 91 30 02 	lds	r25, 0x0230
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b32:	99 23       	and	r25, r25
     b34:	89 f0       	breq	.+34     	; 0xb58 <USB_Device_ProcessControlRequest+0x9e>
     b36:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b38:	0f c0       	rjmp	.+30     	; 0xb58 <USB_Device_ProcessControlRequest+0x9e>
     b3a:	80 91 37 02 	lds	r24, 0x0237
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b3e:	90 91 38 02 	lds	r25, 0x0238
     b42:	8f 70       	andi	r24, 0x0F	; 15
     b44:	99 27       	eor	r25, r25
     b46:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b4a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b4e:	85 fb       	bst	r24, 5
     b50:	88 27       	eor	r24, r24
     b52:	80 f9       	bld	r24, 0
     b54:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b58:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b5c:	97 7f       	andi	r25, 0xF7	; 247
     b5e:	90 93 e8 00 	sts	0x00E8, r25
     b62:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b66:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b6a:	d0 c0       	rjmp	.+416    	; 0xd0c <USB_Device_ProcessControlRequest+0x252>
     b6c:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b6e:	19 f0       	breq	.+6      	; 0xb76 <USB_Device_ProcessControlRequest+0xbc>
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	09 f0       	breq	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0xbc>
     b74:	eb c0       	rjmp	.+470    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b76:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b78:	21 f0       	breq	.+8      	; 0xb82 <USB_Device_ProcessControlRequest+0xc8>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	09 f0       	breq	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0xc6>
     b7e:	e6 c0       	rjmp	.+460    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <USB_Device_ProcessControlRequest+0xde>
     b82:	80 91 35 02 	lds	r24, 0x0235
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	09 f0       	breq	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0xd2>
     b8a:	e0 c0       	rjmp	.+448    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     b8c:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b8e:	09 f0       	breq	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0xd8>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	80 93 30 02 	sts	0x0230, r24
     b96:	2f c0       	rjmp	.+94     	; 0xbf6 <USB_Device_ProcessControlRequest+0x13c>
     b98:	80 91 35 02 	lds	r24, 0x0235

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b9c:	81 11       	cpse	r24, r1
     b9e:	2b c0       	rjmp	.+86     	; 0xbf6 <USB_Device_ProcessControlRequest+0x13c>
     ba0:	80 91 37 02 	lds	r24, 0x0237
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ba4:	90 91 38 02 	lds	r25, 0x0238
     ba8:	8f 70       	andi	r24, 0x0F	; 15
     baa:	99 27       	eor	r25, r25
     bac:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bae:	09 f4       	brne	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0xf8>
     bb0:	cd c0       	rjmp	.+410    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     bb2:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb6:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bba:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     bbc:	1c c0       	rjmp	.+56     	; 0xbf6 <USB_Device_ProcessControlRequest+0x13c>
     bbe:	20 91 34 02 	lds	r18, 0x0234
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     bc2:	23 30       	cpi	r18, 0x03	; 3
     bc4:	21 f4       	brne	.+8      	; 0xbce <USB_Device_ProcessControlRequest+0x114>
     bc6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bca:	80 62       	ori	r24, 0x20	; 32
     bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <USB_Device_ProcessControlRequest+0x138>
     bce:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     bd2:	90 61       	ori	r25, 0x10	; 16
     bd4:	90 93 eb 00 	sts	0x00EB, r25
     bd8:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x126>
     bde:	22 0f       	add	r18, r18
     be0:	8a 95       	dec	r24
     be2:	ea f7       	brpl	.-6      	; 0xbde <USB_Device_ProcessControlRequest+0x124>
     be4:	20 93 ea 00 	sts	0x00EA, r18
     be8:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     bec:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	80 93 eb 00 	sts	0x00EB, r24
     bf6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfe:	87 7f       	andi	r24, 0xF7	; 247
     c00:	80 93 e8 00 	sts	0x00E8, r24
     c04:	d3 dd       	rcall	.-1114   	; 0x7ac <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c06:	a2 c0       	rjmp	.+324    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     c08:	81 11       	cpse	r24, r1
     c0a:	a0 c0       	rjmp	.+320    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c0c:	80 91 35 02 	lds	r24, 0x0235
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c10:	90 91 36 02 	lds	r25, 0x0236
     c14:	8f 77       	andi	r24, 0x7F	; 127
     c16:	99 27       	eor	r25, r25
     c18:	18 2f       	mov	r17, r24
     c1a:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c1e:	90 78       	andi	r25, 0x80	; 128
     c20:	98 2b       	or	r25, r24
     c22:	90 93 e3 00 	sts	0x00E3, r25
     c26:	80 91 e8 00 	lds	r24, 0x00E8
     c2a:	87 7f       	andi	r24, 0xF7	; 247
     c2c:	80 93 e8 00 	sts	0x00E8, r24
     c30:	bd dd       	rcall	.-1158   	; 0x7ac <Endpoint_ClearStatusStage>
     c32:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c36:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <USB_Device_ProcessControlRequest+0x178>
     c3a:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     c3e:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     c40:	80 93 e3 00 	sts	0x00E3, r24
     c44:	11 23       	and	r17, r17
     c46:	11 f0       	breq	.+4      	; 0xc4c <USB_Device_ProcessControlRequest+0x192>
     c48:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x194>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	80 93 32 02 	sts	0x0232, r24
     c52:	7c c0       	rjmp	.+248    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     c54:	80 58       	subi	r24, 0x80	; 128
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	08 f0       	brcs	.+2      	; 0xc5c <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c5a:	78 c0       	rjmp	.+240    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     c5c:	80 91 35 02 	lds	r24, 0x0235
     c60:	90 91 36 02 	lds	r25, 0x0236
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c64:	8c 3d       	cpi	r24, 0xDC	; 220
     c66:	23 e0       	ldi	r18, 0x03	; 3
     c68:	92 07       	cpc	r25, r18
     c6a:	71 f5       	brne	.+92     	; 0xcc8 <USB_Device_ProcessControlRequest+0x20e>
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	8a 83       	std	Y+2, r24	; 0x02
     c70:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c76:	f8 94       	cli
     c78:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c7a:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c7c:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     c7e:	3e e0       	ldi	r19, 0x0E	; 14
     c80:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c82:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c84:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c86:	50 93 57 00 	sts	0x0057, r21
     c8a:	e4 91       	lpm	r30, Z+
     c8c:	20 ff       	sbrs	r18, 0
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <USB_Device_ProcessControlRequest+0x1dc>
     c90:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     c92:	ef 70       	andi	r30, 0x0F	; 15
     c94:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     c96:	ef 70       	andi	r30, 0x0F	; 15
     c98:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     c9a:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     c9c:	ea 30       	cpi	r30, 0x0A	; 10
     c9e:	10 f0       	brcs	.+4      	; 0xca4 <USB_Device_ProcessControlRequest+0x1ea>
     ca0:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <USB_Device_ProcessControlRequest+0x1ec>
     ca4:	c0 96       	adiw	r24, 0x30	; 48
     ca6:	8d 93       	st	X+, r24
     ca8:	9d 93       	st	X+, r25
     caa:	2f 5f       	subi	r18, 0xFF	; 255
     cac:	24 31       	cpi	r18, 0x14	; 20
     cae:	49 f7       	brne	.-46     	; 0xc82 <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cb0:	4f bf       	out	0x3f, r20	; 63
     cb2:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     cb6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cb8:	80 93 e8 00 	sts	0x00E8, r24
     cbc:	6a e2       	ldi	r22, 0x2A	; 42
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	3d dc       	rcall	.-1926   	; 0x540 <Endpoint_Write_Control_Stream_LE>
     cc6:	11 c0       	rjmp	.+34     	; 0xcea <USB_Device_ProcessControlRequest+0x230>
     cc8:	ae 01       	movw	r20, r28
     cca:	45 5d       	subi	r20, 0xD5	; 213
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	60 91 37 02 	lds	r22, 0x0237
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     cd2:	75 db       	rcall	.-2326   	; 0x3be <CALLBACK_USB_GetDescriptor>
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	d1 f1       	breq	.+116    	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     cd8:	20 91 e8 00 	lds	r18, 0x00E8
     cdc:	27 7f       	andi	r18, 0xF7	; 247
     cde:	20 93 e8 00 	sts	0x00E8, r18
     ce2:	bc 01       	movw	r22, r24
     ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ce8:	8b dc       	rcall	.-1770   	; 0x600 <Endpoint_Write_Control_PStream_LE>
     cea:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cee:	8b 77       	andi	r24, 0x7B	; 123
     cf0:	80 93 e8 00 	sts	0x00E8, r24
     cf4:	2b c0       	rjmp	.+86     	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf6:	80 38       	cpi	r24, 0x80	; 128
     cf8:	49 f5       	brne	.+82     	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d04:	80 91 2e 02 	lds	r24, 0x022E
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d08:	80 93 f1 00 	sts	0x00F1, r24
     d0c:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d10:	8e 77       	andi	r24, 0x7E	; 126
     d12:	76 cf       	rjmp	.-276    	; 0xc00 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d14:	81 11       	cpse	r24, r1
     d16:	1a c0       	rjmp	.+52     	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d18:	90 91 35 02 	lds	r25, 0x0235
     d1c:	92 30       	cpi	r25, 0x02	; 2
     d1e:	b0 f4       	brcc	.+44     	; 0xd4c <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d20:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d24:	87 7f       	andi	r24, 0xF7	; 247
     d26:	80 93 e8 00 	sts	0x00E8, r24
     d2a:	90 93 2e 02 	sts	0x022E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d2e:	3e dd       	rcall	.-1412   	; 0x7ac <Endpoint_ClearStatusStage>
     d30:	80 91 2e 02 	lds	r24, 0x022E
     d34:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <USB_Device_ProcessControlRequest+0x286>
     d38:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d3c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <USB_Device_ProcessControlRequest+0x28a>
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <USB_Device_ProcessControlRequest+0x28c>
     d44:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d46:	80 93 32 02 	sts	0x0232, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d4a:	f2 da       	rcall	.-2588   	; 0x330 <EVENT_USB_Device_ConfigurationChanged>
     d4c:	80 91 e8 00 	lds	r24, 0x00E8
     d50:	83 ff       	sbrs	r24, 3
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <USB_Device_ProcessControlRequest+0x2ae>
     d54:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d5e:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d62:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d64:	80 93 eb 00 	sts	0x00EB, r24
     d68:	ac 96       	adiw	r28, 0x2c	; 44
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <USB_Event_Stub>:
     d7c:	08 95       	ret

00000d7e <USB_USBTask>:
     d7e:	cf 93       	push	r28
     d80:	80 91 32 02 	lds	r24, 0x0232
     d84:	88 23       	and	r24, r24
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <USB_USBTask+0x34>
     d88:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d8c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d8e:	90 91 ec 00 	lds	r25, 0x00EC
     d92:	90 ff       	sbrs	r25, 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <USB_USBTask+0x1c>
     d96:	90 e8       	ldi	r25, 0x80	; 128
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <USB_USBTask+0x1e>
     d9a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d9c:	c9 2f       	mov	r28, r25
     d9e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     da4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     da8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     daa:	87 de       	rcall	.-754    	; 0xaba <USB_Device_ProcessControlRequest>
     dac:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dae:	c0 93 e9 00 	sts	0x00E9, r28
     db2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     db4:	08 95       	ret

00000db6 <CDC_Device_ConfigureEndpoints>:
     db6:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     dbc:	40 96       	adiw	r24, 0x10	; 16
     dbe:	fc 01       	movw	r30, r24
     dc0:	8b e0       	ldi	r24, 0x0B	; 11
     dc2:	df 01       	movw	r26, r30
     dc4:	1d 92       	st	X+, r1
     dc6:	8a 95       	dec	r24
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     dce:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	aa dc       	rcall	.-1708   	; 0x730 <Endpoint_ConfigureEndpointTable>
     ddc:	88 23       	and	r24, r24
     dde:	61 f0       	breq	.+24     	; 0xdf8 <CDC_Device_ConfigureEndpoints+0x42>
     de0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     de2:	ce 01       	movw	r24, r28
     de4:	06 96       	adiw	r24, 0x06	; 6
     de6:	a4 dc       	rcall	.-1720   	; 0x730 <Endpoint_ConfigureEndpointTable>
     de8:	88 23       	and	r24, r24
     dea:	31 f0       	breq	.+12     	; 0xdf8 <CDC_Device_ConfigureEndpoints+0x42>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     df0:	0b 96       	adiw	r24, 0x0b	; 11
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
	  return false;

	return true;
}
     df6:	9c cc       	rjmp	.-1736   	; 0x730 <Endpoint_ConfigureEndpointTable>
     df8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
	  return false;

	return true;
}
     dfe:	08 95       	ret

00000e00 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     e00:	cf 93       	push	r28
     e02:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e04:	20 91 32 02 	lds	r18, 0x0232
     e08:	24 30       	cpi	r18, 0x04	; 4
     e0a:	f1 f4       	brne	.+60     	; 0xe48 <CDC_Device_SendByte+0x48>
     e0c:	fc 01       	movw	r30, r24
     e0e:	44 89       	ldd	r20, Z+20	; 0x14
     e10:	55 89       	ldd	r21, Z+21	; 0x15
     e12:	66 89       	ldd	r22, Z+22	; 0x16
     e14:	77 89       	ldd	r23, Z+23	; 0x17
     e16:	45 2b       	or	r20, r21
     e18:	46 2b       	or	r20, r22
     e1a:	47 2b       	or	r20, r23
     e1c:	a9 f0       	breq	.+42     	; 0xe48 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	8f 70       	andi	r24, 0x0F	; 15
     e22:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e26:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     e2a:	85 ff       	sbrs	r24, 5
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2e:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0a c0       	rjmp	.+20     	; 0xe4a <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e36:	80 91 e8 00 	lds	r24, 0x00E8
     e3a:	8e 77       	andi	r24, 0x7E	; 126
     e3c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e40:	d6 dc       	rcall	.-1620   	; 0x7ee <Endpoint_WaitUntilReady>
     e42:	88 23       	and	r24, r24
     e44:	a1 f3       	breq	.-24     	; 0xe2e <CDC_Device_SendByte+0x2e>
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <CDC_Device_SendByte+0x4a>
     e48:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e4a:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     e4c:	08 95       	ret

00000e4e <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e4e:	20 91 32 02 	lds	r18, 0x0232
     e52:	24 30       	cpi	r18, 0x04	; 4
     e54:	29 f5       	brne	.+74     	; 0xea0 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e56:	fc 01       	movw	r30, r24
     e58:	44 89       	ldd	r20, Z+20	; 0x14
     e5a:	55 89       	ldd	r21, Z+21	; 0x15
     e5c:	66 89       	ldd	r22, Z+22	; 0x16
     e5e:	77 89       	ldd	r23, Z+23	; 0x17
     e60:	45 2b       	or	r20, r21
     e62:	46 2b       	or	r20, r22
     e64:	47 2b       	or	r20, r23
     e66:	e1 f0       	breq	.+56     	; 0xea0 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e70:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e74:	81 11       	cpse	r24, r1
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e7c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e80:	80 91 e8 00 	lds	r24, 0x00E8
     e84:	8e 77       	andi	r24, 0x7E	; 126
     e86:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e8a:	95 fd       	sbrc	r25, 5
     e8c:	f5 cf       	rjmp	.-22     	; 0xe78 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e8e:	af dc       	rcall	.-1698   	; 0x7ee <Endpoint_WaitUntilReady>
     e90:	81 11       	cpse	r24, r1
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <CDC_Device_Flush+0x54>
     e94:	90 91 e8 00 	lds	r25, 0x00E8
     e98:	9e 77       	andi	r25, 0x7E	; 126
     e9a:	90 93 e8 00 	sts	0x00E8, r25
     e9e:	08 95       	ret
     ea0:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     ea2:	08 95       	ret

00000ea4 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     ea4:	20 91 32 02 	lds	r18, 0x0232
     ea8:	24 30       	cpi	r18, 0x04	; 4
     eaa:	89 f4       	brne	.+34     	; 0xece <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     eac:	fc 01       	movw	r30, r24
     eae:	44 89       	ldd	r20, Z+20	; 0x14
     eb0:	55 89       	ldd	r21, Z+21	; 0x15
     eb2:	66 89       	ldd	r22, Z+22	; 0x16
     eb4:	77 89       	ldd	r23, Z+23	; 0x17
     eb6:	45 2b       	or	r20, r21
     eb8:	46 2b       	or	r20, r22
     eba:	47 2b       	or	r20, r23
     ebc:	41 f0       	breq	.+16     	; 0xece <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ebe:	21 81       	ldd	r18, Z+1	; 0x01
     ec0:	2f 70       	andi	r18, 0x0F	; 15
     ec2:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ec6:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     eca:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     ecc:	c0 cf       	rjmp	.-128    	; 0xe4e <CDC_Device_Flush>
     ece:	08 95       	ret

00000ed0 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ed0:	20 91 32 02 	lds	r18, 0x0232
     ed4:	24 30       	cpi	r18, 0x04	; 4
     ed6:	19 f0       	breq	.+6      	; 0xede <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ede:	fc 01       	movw	r30, r24
     ee0:	44 89       	ldd	r20, Z+20	; 0x14
     ee2:	55 89       	ldd	r21, Z+21	; 0x15
     ee4:	66 89       	ldd	r22, Z+22	; 0x16
     ee6:	77 89       	ldd	r23, Z+23	; 0x17
     ee8:	45 2b       	or	r20, r21
     eea:	46 2b       	or	r20, r22
     eec:	47 2b       	or	r20, r23
     eee:	a1 f3       	breq	.-24     	; 0xed8 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ef0:	86 81       	ldd	r24, Z+6	; 0x06
     ef2:	8f 70       	andi	r24, 0x0F	; 15
     ef4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ef8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     efc:	82 ff       	sbrs	r24, 2
     efe:	ec cf       	rjmp	.-40     	; 0xed8 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f00:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     f04:	88 23       	and	r24, r24
     f06:	21 f0       	breq	.+8      	; 0xf10 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f08:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f14:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     f18:	81 11       	cpse	r24, r1
     f1a:	05 c0       	rjmp	.+10     	; 0xf26 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	8b 77       	andi	r24, 0x7B	; 123
     f22:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     f26:	c9 01       	movw	r24, r18
     f28:	08 95       	ret

00000f2a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     f2a:	08 95       	ret

00000f2c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f32:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f36:	83 ff       	sbrs	r24, 3
     f38:	a7 c0       	rjmp	.+334    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f3a:	88 81       	ld	r24, Y
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	20 91 37 02 	lds	r18, 0x0237
     f42:	30 91 38 02 	lds	r19, 0x0238
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	09 f0       	breq	.+2      	; 0xf4e <CDC_Device_ProcessControlRequest+0x22>
     f4c:	9d c0       	rjmp	.+314    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
     f4e:	80 91 34 02 	lds	r24, 0x0234
     f52:	81 32       	cpi	r24, 0x21	; 33
     f54:	61 f0       	breq	.+24     	; 0xf6e <CDC_Device_ProcessControlRequest+0x42>
     f56:	20 f4       	brcc	.+8      	; 0xf60 <CDC_Device_ProcessControlRequest+0x34>
     f58:	80 32       	cpi	r24, 0x20	; 32
     f5a:	09 f0       	breq	.+2      	; 0xf5e <CDC_Device_ProcessControlRequest+0x32>
     f5c:	95 c0       	rjmp	.+298    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
     f5e:	3d c0       	rjmp	.+122    	; 0xfda <CDC_Device_ProcessControlRequest+0xae>
     f60:	82 32       	cpi	r24, 0x22	; 34
     f62:	09 f4       	brne	.+2      	; 0xf66 <CDC_Device_ProcessControlRequest+0x3a>
     f64:	6d c0       	rjmp	.+218    	; 0x1040 <CDC_Device_ProcessControlRequest+0x114>
     f66:	83 32       	cpi	r24, 0x23	; 35
     f68:	09 f0       	breq	.+2      	; 0xf6c <CDC_Device_ProcessControlRequest+0x40>
     f6a:	8e c0       	rjmp	.+284    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
     f6c:	7d c0       	rjmp	.+250    	; 0x1068 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f6e:	80 91 33 02 	lds	r24, 0x0233
     f72:	81 3a       	cpi	r24, 0xA1	; 161
     f74:	09 f0       	breq	.+2      	; 0xf78 <CDC_Device_ProcessControlRequest+0x4c>
     f76:	88 c0       	rjmp	.+272    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f78:	80 91 e8 00 	lds	r24, 0x00E8
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f82:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f86:	80 ff       	sbrs	r24, 0
     f88:	fc cf       	rjmp	.-8      	; 0xf82 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f8a:	4c 89       	ldd	r20, Y+20	; 0x14
     f8c:	5d 89       	ldd	r21, Y+21	; 0x15
     f8e:	6e 89       	ldd	r22, Y+22	; 0x16
     f90:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f92:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f96:	bb 27       	eor	r27, r27
     f98:	a7 2f       	mov	r26, r23
     f9a:	96 2f       	mov	r25, r22
     f9c:	85 2f       	mov	r24, r21
     f9e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     fa2:	cb 01       	movw	r24, r22
     fa4:	aa 27       	eor	r26, r26
     fa6:	bb 27       	eor	r27, r27
     fa8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     fac:	47 2f       	mov	r20, r23
     fae:	55 27       	eor	r21, r21
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     fb8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fba:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     fbe:	89 8d       	ldd	r24, Y+25	; 0x19
     fc0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fca:	80 91 e8 00 	lds	r24, 0x00E8
     fce:	8e 77       	andi	r24, 0x7E	; 126
     fd0:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     fd8:	e9 cb       	rjmp	.-2094   	; 0x7ac <Endpoint_ClearStatusStage>
     fda:	80 91 33 02 	lds	r24, 0x0233
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fde:	81 32       	cpi	r24, 0x21	; 33
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <CDC_Device_ProcessControlRequest+0xb8>
     fe2:	52 c0       	rjmp	.+164    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
     fe4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	80 93 e8 00 	sts	0x00E8, r24
     fee:	05 c0       	rjmp	.+10     	; 0xffa <CDC_Device_ProcessControlRequest+0xce>
     ff0:	80 91 32 02 	lds	r24, 0x0232
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     ff4:	88 23       	and	r24, r24
     ff6:	09 f4       	brne	.+2      	; 0xffa <CDC_Device_ProcessControlRequest+0xce>
     ff8:	47 c0       	rjmp	.+142    	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
     ffa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ffe:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1000:	f7 cf       	rjmp	.-18     	; 0xff0 <CDC_Device_ProcessControlRequest+0xc4>
    1002:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1006:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    100a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    100e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1012:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1014:	2d 8b       	std	Y+21, r18	; 0x15
    1016:	9e 8b       	std	Y+22, r25	; 0x16
    1018:	8f 8b       	std	Y+23, r24	; 0x17
    101a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    101e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1020:	80 91 f1 00 	lds	r24, 0x00F1
    1024:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1026:	80 91 f1 00 	lds	r24, 0x00F1
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    102c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1030:	8b 77       	andi	r24, 0x7B	; 123
    1032:	80 93 e8 00 	sts	0x00E8, r24
    1036:	ba db       	rcall	.-2188   	; 0x7ac <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1038:	ce 01       	movw	r24, r28
    103a:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    103c:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    103e:	1a ca       	rjmp	.-3020   	; 0x474 <EVENT_CDC_Device_LineEncodingChanged>
    1040:	80 91 33 02 	lds	r24, 0x0233
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1044:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1046:	01 f5       	brne	.+64     	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
    1048:	80 91 e8 00 	lds	r24, 0x00E8
    104c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    104e:	80 93 e8 00 	sts	0x00E8, r24
    1052:	ac db       	rcall	.-2216   	; 0x7ac <Endpoint_ClearStatusStage>
    1054:	80 91 35 02 	lds	r24, 0x0235
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1058:	90 91 36 02 	lds	r25, 0x0236

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    105c:	99 8b       	std	Y+17, r25	; 0x11
    105e:	88 8b       	std	Y+16, r24	; 0x10
    1060:	ce 01       	movw	r24, r28
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	61 ca       	rjmp	.-2878   	; 0x52a <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1068:	80 91 33 02 	lds	r24, 0x0233
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    106c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    106e:	61 f4       	brne	.+24     	; 0x1088 <CDC_Device_ProcessControlRequest+0x15c>
    1070:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1074:	87 7f       	andi	r24, 0xF7	; 247
    1076:	80 93 e8 00 	sts	0x00E8, r24
    107a:	98 db       	rcall	.-2256   	; 0x7ac <Endpoint_ClearStatusStage>
    107c:	60 91 35 02 	lds	r22, 0x0235
    1080:	ce 01       	movw	r24, r28
    1082:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1084:	cf 91       	pop	r28
    1086:	51 cf       	rjmp	.-350    	; 0xf2a <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <__udivmodsi4>:
			}

			break;
	}
}
    108e:	a1 e2       	ldi	r26, 0x21	; 33
    1090:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1092:	aa 1b       	sub	r26, r26
    1094:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
    1096:	fd 01       	movw	r30, r26
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <__udivmodsi4_ep>

0000109a <__udivmodsi4_loop>:
    109a:	aa 1f       	adc	r26, r26
    109c:	bb 1f       	adc	r27, r27
    109e:	ee 1f       	adc	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	a2 17       	cp	r26, r18
    10a4:	b3 07       	cpc	r27, r19
    10a6:	e4 07       	cpc	r30, r20
    10a8:	f5 07       	cpc	r31, r21
    10aa:	20 f0       	brcs	.+8      	; 0x10b4 <__udivmodsi4_ep>
    10ac:	a2 1b       	sub	r26, r18
    10ae:	b3 0b       	sbc	r27, r19
    10b0:	e4 0b       	sbc	r30, r20
    10b2:	f5 0b       	sbc	r31, r21

000010b4 <__udivmodsi4_ep>:
    10b4:	66 1f       	adc	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	1a 94       	dec	r1
    10be:	69 f7       	brne	.-38     	; 0x109a <__udivmodsi4_loop>
    10c0:	60 95       	com	r22
    10c2:	70 95       	com	r23
    10c4:	80 95       	com	r24
    10c6:	90 95       	com	r25
    10c8:	9b 01       	movw	r18, r22
    10ca:	ac 01       	movw	r20, r24
    10cc:	bd 01       	movw	r22, r26
    10ce:	cf 01       	movw	r24, r30
    10d0:	08 95       	ret

000010d2 <memset>:
    10d2:	dc 01       	movw	r26, r24
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <memset+0x6>
    10d6:	6d 93       	st	X+, r22
    10d8:	41 50       	subi	r20, 0x01	; 1
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	e0 f7       	brcc	.-8      	; 0x10d6 <memset+0x4>
    10de:	08 95       	ret

000010e0 <_exit>:
    10e0:	f8 94       	cli

000010e2 <__stop_program>:
    10e2:	ff cf       	rjmp	.-2      	; 0x10e2 <__stop_program>
