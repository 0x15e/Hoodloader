
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001058  000010ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  0080011e  0080011e  0000110a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a8b0  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bdb  00000000  00000000  0000cc34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004650  00000000  00000000  0000f80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fd0  00000000  00000000  00013e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004028  00000000  00000000  00014e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006b66  00000000  00000000  00018e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000850  00000000  00000000  0001f9be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
       e:	00 00       	nop
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
      12:	00 00       	nop
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
	uint16_t CurrentBit   = ReportItem->BitOffset;
      16:	00 00       	nop
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      1a:	00 00       	nop
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
      26:	00 00       	nop
	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;

		ReportData++;
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
	}

	ReportItem->PreviousValue = ReportItem->Value;
      2a:	00 00       	nop
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
      2c:	26 c4       	rjmp	.+2124   	; 0x87a <__vector_11>
      2e:	00 00       	nop

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
      30:	ca c4       	rjmp	.+2452   	; 0x9c6 <__vector_12>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
	{
		ReportData[0] = ReportItem->ReportID;
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
      4e:	00 00       	nop
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
      56:	00 00       	nop
{
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
      5a:	00 00       	nop
	if (ReportItem == NULL)
	  return;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
	uint32_t BitMask      = (1 << 0);
      5c:	6b c1       	rjmp	.+726    	; 0x334 <__vector_23>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
	}

	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      6a:	00 00       	nop
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;

	while (DataBitsRem--)
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
	{
		if (ReportItem->Value & (1 << (CurrentBit % 8)))
      72:	00 00       	nop

00000074 <ProductString>:
      74:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      84:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      94:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000a4 <ManufacturerString>:
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      c2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
      d2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
      e2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
}
      f2:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000100 <DeviceDescriptor>:
     100:	12 01 10 01 02 00 00 08 eb 03 68 6e 01 00 01 02     ..........hn....
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     110:	dc 01                                               ..

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d2 e0       	ldi	r29, 0x02	; 2
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e8 e5       	ldi	r30, 0x58	; 88
     126:	f0 e1       	ldi	r31, 0x10	; 16
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	ae 31       	cpi	r26, 0x1E	; 30
     130:	b1 07       	cpc	r27, r17
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	ae e1       	ldi	r26, 0x1E	; 30
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	b1 e0       	ldi	r27, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a3 34       	cpi	r26, 0x43	; 67
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	39 d0       	rcall	.+114    	; 0x1b8 <main>
     146:	86 c7       	rjmp	.+3852   	; 0x1054 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <SetupHardware>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	84 b7       	in	r24, 0x34	; 52
     150:	87 7f       	andi	r24, 0xF7	; 247
     152:	84 bf       	out	0x34, r24	; 52
     154:	28 e1       	ldi	r18, 0x18	; 24
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	20 93 60 00 	sts	0x0060, r18
     15e:	10 92 60 00 	sts	0x0060, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     162:	0f be       	out	0x3f, r0	; 63
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	85 bd       	out	0x25, r24	; 37
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 cd 00 	sts	0x00CD, r25
     170:	80 93 cc 00 	sts	0x00CC, r24
				ReportData     += 4;
     174:	ca ec       	ldi	r28, 0xCA	; 202
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	96 e0       	ldi	r25, 0x06	; 6
				break;
     17a:	98 83       	st	Y, r25

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     17c:	a8 ec       	ldi	r26, 0xC8	; 200
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	8c 93       	st	X, r24
     184:	e9 ec       	ldi	r30, 0xC9	; 201
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	20 83       	st	Z, r18
     18a:	53 9a       	sbi	0x0a, 3	; 10
     18c:	5a 9a       	sbi	0x0b, 2	; 11
     18e:	5b 9a       	sbi	0x0b, 3	; 11
     190:	10 82       	st	Z, r1
     192:	1c 92       	st	X, r1
     194:	18 82       	st	Y, r1
     196:	98 83       	st	Y, r25
     198:	8c 93       	st	X, r24
     19a:	88 e9       	ldi	r24, 0x98	; 152
     19c:	80 83       	st	Z, r24
     19e:	5b 98       	cbi	0x0b, 3	; 11
     1a0:	8a b1       	in	r24, 0x0a	; 10
     1a2:	80 63       	ori	r24, 0x30	; 48
     1a4:	8a b9       	out	0x0a, r24	; 10
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 63       	ori	r24, 0x30	; 48
     1aa:	8b b9       	out	0x0b, r24	; 11
				ReportSize     -= 2;
     1ac:	57 d3       	rcall	.+1710   	; 0x85c <USB_Init>
     1ae:	5f 9a       	sbi	0x0b, 7	; 11
     1b0:	57 9a       	sbi	0x0a, 7	; 10
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <main>:
     1b8:	c8 df       	rcall	.-112    	; 0x14a <SetupHardware>
     1ba:	ee e1       	ldi	r30, 0x1E	; 30
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	4f b7       	in	r20, 0x3f	; 63
				ReportData     += 2;
     1c0:	f8 94       	cli
     1c2:	8a e2       	ldi	r24, 0x2A	; 42
     1c4:	91 e0       	ldi	r25, 0x01	; 1
				break;
     1c6:	91 83       	std	Z+1, r25	; 0x01

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c8:	80 83       	st	Z, r24
     1ca:	93 83       	std	Z+3, r25	; 0x03
     1cc:	82 83       	std	Z+2, r24	; 0x02
     1ce:	95 83       	std	Z+5, r25	; 0x05
     1d0:	84 83       	std	Z+4, r24	; 0x04
     1d2:	8a ea       	ldi	r24, 0xAA	; 170
				ReportSize     -= 1;
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	97 83       	std	Z+7, r25	; 0x07
     1d8:	86 83       	std	Z+6, r24	; 0x06
     1da:	20 e8       	ldi	r18, 0x80	; 128
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	31 87       	std	Z+9, r19	; 0x09
     1e0:	20 87       	std	Z+8, r18	; 0x08
     1e2:	13 86       	std	Z+11, r1	; 0x0b
     1e4:	12 86       	std	Z+10, r1	; 0x0a
     1e6:	4f bf       	out	0x3f, r20	; 63
				ReportData     += 1;
     1e8:	ea ea       	ldi	r30, 0xAA	; 170
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	4f b7       	in	r20, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	f8 94       	cli
     1f0:	86 eb       	ldi	r24, 0xB6	; 182
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	80 83       	st	Z, r24
     1f8:	93 83       	std	Z+3, r25	; 0x03
     1fa:	82 83       	std	Z+2, r24	; 0x02
     1fc:	95 83       	std	Z+5, r25	; 0x05
     1fe:	84 83       	std	Z+4, r24	; 0x04
     200:	86 e3       	ldi	r24, 0x36	; 54
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	97 83       	std	Z+7, r25	; 0x07
     206:	86 83       	std	Z+6, r24	; 0x06
     208:	31 87       	std	Z+9, r19	; 0x09
     20a:	20 87       	std	Z+8, r18	; 0x08
     20c:	13 86       	std	Z+11, r1	; 0x0b
     20e:	12 86       	std	Z+10, r1	; 0x0a
     210:	4f bf       	out	0x3f, r20	; 63
     212:	8b b1       	in	r24, 0x0b	; 11
     214:	80 63       	ori	r24, 0x30	; 48
     216:	8f 7d       	andi	r24, 0xDF	; 223
     218:	8b b9       	out	0x0b, r24	; 11
     21a:	78 94       	sei
     21c:	0a ea       	ldi	r16, 0xAA	; 170
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	18 d6       	rcall	.+3120   	; 0xe56 <CDC_Device_ReceiveByte>
     226:	97 fd       	sbrc	r25, 7
     228:	0c c0       	rjmp	.+24     	; 0x242 <main+0x8a>
     22a:	5c 98       	cbi	0x0b, 4	; 11
     22c:	90 91 36 02 	lds	r25, 0x0236
     230:	9c 60       	ori	r25, 0x0C	; 12
     232:	90 93 36 02 	sts	0x0236, r25
     236:	90 91 c8 00 	lds	r25, 0x00C8
     23a:	95 ff       	sbrs	r25, 5
     23c:	fc cf       	rjmp	.-8      	; 0x236 <main+0x7e>
     23e:	80 93 ce 00 	sts	0x00CE, r24
     242:	2f b7       	in	r18, 0x3f	; 63
     244:	f8 94       	cli
     246:	80 91 b4 01 	lds	r24, 0x01B4
     24a:	90 91 b5 01 	lds	r25, 0x01B5
     24e:	2f bf       	out	0x3f, r18	; 63
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	19 f4       	brne	.+6      	; 0x25a <main+0xa2>
     254:	a8 99       	sbic	0x15, 0	; 21
     256:	3e c0       	rjmp	.+124    	; 0x2d4 <main+0x11c>
     258:	60 c0       	rjmp	.+192    	; 0x31a <__stack+0x1b>
     25a:	5d 98       	cbi	0x0b, 5	; 11
     25c:	20 91 36 02 	lds	r18, 0x0236
     260:	23 60       	ori	r18, 0x03	; 3
     262:	20 93 36 02 	sts	0x0236, r18
     266:	20 91 01 01 	lds	r18, 0x0101
     26a:	2f 70       	andi	r18, 0x0F	; 15
     26c:	20 93 e9 00 	sts	0x00E9, r18
     270:	20 91 e8 00 	lds	r18, 0x00E8
     274:	20 ff       	sbrs	r18, 0
     276:	ee cf       	rjmp	.-36     	; 0x254 <main+0x9c>
     278:	80 31       	cpi	r24, 0x10	; 16
     27a:	91 05       	cpc	r25, r1
     27c:	10 f0       	brcs	.+4      	; 0x282 <main+0xca>
     27e:	8f e0       	ldi	r24, 0x0F	; 15
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	f8 2e       	mov	r15, r24
     284:	c0 e0       	ldi	r28, 0x00	; 0
     286:	d0 e0       	ldi	r29, 0x00	; 0
     288:	22 c0       	rjmp	.+68     	; 0x2ce <main+0x116>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     28a:	e0 91 ac 01 	lds	r30, 0x01AC
     28e:	f0 91 ad 01 	lds	r31, 0x01AD
     292:	60 81       	ld	r22, Z
     294:	80 e0       	ldi	r24, 0x00	; 0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	79 d5       	rcall	.+2802   	; 0xd8c <CDC_Device_SendByte>
     29a:	81 11       	cpse	r24, r1
     29c:	db cf       	rjmp	.-74     	; 0x254 <main+0x9c>
     29e:	f8 01       	movw	r30, r16
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	93 81       	ldd	r25, Z+3	; 0x03
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	93 83       	std	Z+3, r25	; 0x03
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a8:	82 83       	std	Z+2, r24	; 0x02
				break;
     2aa:	26 81       	ldd	r18, Z+6	; 0x06

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2ac:	37 81       	ldd	r19, Z+7	; 0x07
     2ae:	82 17       	cp	r24, r18
     2b0:	93 07       	cpc	r25, r19
     2b2:	21 f4       	brne	.+8      	; 0x2bc <main+0x104>
     2b4:	24 81       	ldd	r18, Z+4	; 0x04
     2b6:	35 81       	ldd	r19, Z+5	; 0x05
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b8:	33 83       	std	Z+3, r19	; 0x03
     2ba:	22 83       	std	Z+2, r18	; 0x02
				break;
     2bc:	2f b7       	in	r18, 0x3f	; 63

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2be:	f8 94       	cli
     2c0:	82 85       	ldd	r24, Z+10	; 0x0a
     2c2:	93 85       	ldd	r25, Z+11	; 0x0b
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	93 87       	std	Z+11, r25	; 0x0b
				break;
     2c8:	82 87       	std	Z+10, r24	; 0x0a

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2ca:	2f bf       	out	0x3f, r18	; 63
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	fc 12       	cpse	r15, r28
     2d0:	dc cf       	rjmp	.-72     	; 0x28a <main+0xd2>
     2d2:	c0 cf       	rjmp	.-128    	; 0x254 <main+0x9c>
				break;
     2d4:	a8 9a       	sbi	0x15, 0	; 21

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d6:	90 91 36 02 	lds	r25, 0x0236
     2da:	89 2f       	mov	r24, r25
     2dc:	83 70       	andi	r24, 0x03	; 3
     2de:	49 f0       	breq	.+18     	; 0x2f2 <main+0x13a>
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	83 70       	andi	r24, 0x03	; 3
				break;
     2e4:	9c 7f       	andi	r25, 0xFC	; 252

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e6:	98 2b       	or	r25, r24
     2e8:	90 93 36 02 	sts	0x0236, r25
     2ec:	81 11       	cpse	r24, r1
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <main+0x13a>
				break;
     2f0:	5d 9a       	sbi	0x0b, 5	; 11

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2f2:	90 91 36 02 	lds	r25, 0x0236
     2f6:	89 2f       	mov	r24, r25
     2f8:	8c 70       	andi	r24, 0x0C	; 12
     2fa:	79 f0       	breq	.+30     	; 0x31a <__stack+0x1b>
     2fc:	89 2f       	mov	r24, r25
     2fe:	86 95       	lsr	r24
				break;
     300:	86 95       	lsr	r24

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     302:	8d 5f       	subi	r24, 0xFD	; 253
     304:	83 70       	andi	r24, 0x03	; 3
				break;
     306:	28 2f       	mov	r18, r24

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     308:	22 0f       	add	r18, r18
     30a:	22 0f       	add	r18, r18
     30c:	93 7f       	andi	r25, 0xF3	; 243
     30e:	92 2b       	or	r25, r18
     310:	90 93 36 02 	sts	0x0236, r25
     314:	81 11       	cpse	r24, r1
				break;
     316:	01 c0       	rjmp	.+2      	; 0x31a <__stack+0x1b>

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     318:	5c 9a       	sbi	0x0b, 4	; 11
     31a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     31c:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31e:	86 d5       	rcall	.+2828   	; 0xe2c <CDC_Device_USBTask>
     320:	f5 d4       	rcall	.+2538   	; 0xd0c <USB_USBTask>
     322:	7e cf       	rjmp	.-260    	; 0x220 <main+0x68>

00000324 <EVENT_USB_Device_Connect>:
				break;
     324:	08 95       	ret

00000326 <EVENT_USB_Device_Disconnect>:

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     326:	08 95       	ret

00000328 <EVENT_USB_Device_ConfigurationChanged>:
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1

				if (ParserData->UsingReportIDs)
     32c:	0a c5       	rjmp	.+2580   	; 0xd42 <CDC_Device_ConfigureEndpoints>

0000032e <EVENT_USB_Device_ControlRequest>:
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	be c5       	rjmp	.+2940   	; 0xeb0 <CDC_Device_ProcessControlRequest>

00000334 <__vector_23>:
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     348:	bf 93       	push	r27

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
     34e:	80 91 ce 00 	lds	r24, 0x00CE
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     352:	9e b3       	in	r25, 0x1e	; 30
     354:	94 30       	cpi	r25, 0x04	; 4
     356:	d9 f4       	brne	.+54     	; 0x38e <__vector_23+0x5a>
     358:	ea ea       	ldi	r30, 0xAA	; 170
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	a0 81       	ld	r26, Z
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     35e:	b1 81       	ldd	r27, Z+1	; 0x01
     360:	8c 93       	st	X, r24
     362:	80 81       	ld	r24, Z
     364:	91 81       	ldd	r25, Z+1	; 0x01
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	91 83       	std	Z+1, r25	; 0x01
     36a:	80 83       	st	Z, r24
     36c:	26 81       	ldd	r18, Z+6	; 0x06
     36e:	37 81       	ldd	r19, Z+7	; 0x07
     370:	82 17       	cp	r24, r18
     372:	93 07       	cpc	r25, r19
     374:	21 f4       	brne	.+8      	; 0x37e <__vector_23+0x4a>
     376:	84 81       	ldd	r24, Z+4	; 0x04

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     378:	95 81       	ldd	r25, Z+5	; 0x05
     37a:	91 83       	std	Z+1, r25	; 0x01
     37c:	80 83       	st	Z, r24
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     37e:	2f b7       	in	r18, 0x3f	; 63
     380:	f8 94       	cli
     382:	82 85       	ldd	r24, Z+10	; 0x0a
     384:	93 85       	ldd	r25, Z+11	; 0x0b
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	93 87       	std	Z+11, r25	; 0x0b
     38a:	82 87       	std	Z+10, r24	; 0x0a
     38c:	2f bf       	out	0x3f, r18	; 63
     38e:	ff 91       	pop	r31
     390:	ef 91       	pop	r30
     392:	bf 91       	pop	r27
     394:	af 91       	pop	r26
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <EVENT_CDC_Device_LineEncodingChanged>:
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	ec 01       	movw	r28, r24
     3b0:	e9 8d       	ldd	r30, Y+25	; 0x19
     3b2:	e1 50       	subi	r30, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
     3b4:	e2 30       	cpi	r30, 0x02	; 2
     3b6:	28 f4       	brcc	.+10     	; 0x3c2 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	e5 5e       	subi	r30, 0xE5	; 229
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3be:	10 81       	ld	r17, Z
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	88 8d       	ldd	r24, Y+24	; 0x18
     3c6:	82 30       	cpi	r24, 0x02	; 2
     3c8:	09 f4       	brne	.+2      	; 0x3cc <EVENT_CDC_Device_LineEncodingChanged+0x24>
     3ca:	18 60       	ori	r17, 0x08	; 8
				break;
     3cc:	8a 8d       	ldd	r24, Y+26	; 0x1a

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ce:	87 30       	cpi	r24, 0x07	; 7
     3d0:	31 f0       	breq	.+12     	; 0x3de <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3d2:	88 30       	cpi	r24, 0x08	; 8
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     3d6:	86 30       	cpi	r24, 0x06	; 6
     3d8:	29 f4       	brne	.+10     	; 0x3e4 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3da:	12 60       	ori	r17, 0x02	; 2
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     3de:	14 60       	ori	r17, 0x04	; 4
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
     3e2:	16 60       	ori	r17, 0x06	; 6
     3e4:	5b 9a       	sbi	0x0b, 3	; 11
     3e6:	10 92 c9 00 	sts	0x00C9, r1
     3ea:	10 92 c8 00 	sts	0x00C8, r1
     3ee:	10 92 ca 00 	sts	0x00CA, r1
     3f2:	2c 89       	ldd	r18, Y+20	; 0x14
     3f4:	3d 89       	ldd	r19, Y+21	; 0x15
     3f6:	4e 89       	ldd	r20, Y+22	; 0x16
     3f8:	5f 89       	ldd	r21, Y+23	; 0x17
				break;
     3fa:	21 15       	cp	r18, r1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3fc:	81 ee       	ldi	r24, 0xE1	; 225
     3fe:	38 07       	cpc	r19, r24
     400:	41 05       	cpc	r20, r1
     402:	51 05       	cpc	r21, r1
     404:	71 f0       	breq	.+28     	; 0x422 <EVENT_CDC_Device_LineEncodingChanged+0x7a>
     406:	ca 01       	movw	r24, r20
     408:	b9 01       	movw	r22, r18

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	77 95       	ror	r23
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     410:	67 95       	ror	r22
     412:	60 58       	subi	r22, 0x80	; 128
     414:	7b 47       	sbci	r23, 0x7B	; 123
     416:	81 4e       	sbci	r24, 0xE1	; 225
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	fa d5       	rcall	.+3060   	; 0x1010 <__udivmodsi4>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	31 09       	sbc	r19, r1
     420:	02 c0       	rjmp	.+4      	; 0x426 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
     422:	20 e1       	ldi	r18, 0x10	; 16
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	30 93 cd 00 	sts	0x00CD, r19

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     42a:	20 93 cc 00 	sts	0x00CC, r18
     42e:	10 93 ca 00 	sts	0x00CA, r17
     432:	8c 89       	ldd	r24, Y+20	; 0x14
     434:	9d 89       	ldd	r25, Y+21	; 0x15
     436:	ae 89       	ldd	r26, Y+22	; 0x16
     438:	bf 89       	ldd	r27, Y+23	; 0x17
     43a:	81 15       	cp	r24, r1
     43c:	91 4e       	sbci	r25, 0xE1	; 225
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     43e:	a1 05       	cpc	r26, r1
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     440:	b1 05       	cpc	r27, r1
     442:	11 f4       	brne	.+4      	; 0x448 <EVENT_CDC_Device_LineEncodingChanged+0xa0>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	01 c0       	rjmp	.+2      	; 0x44a <EVENT_CDC_Device_LineEncodingChanged+0xa2>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	80 93 c8 00 	sts	0x00C8, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     44e:	88 e9       	ldi	r24, 0x98	; 152
     450:	80 93 c9 00 	sts	0x00C9, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     454:	5b 98       	cbi	0x0b, 3	; 11
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	08 95       	ret

0000045e <EVENT_CDC_Device_ControLineStateChanged>:
     45e:	fc 01       	movw	r30, r24

				if (UsageListSize)
     460:	20 89       	ldd	r18, Z+16	; 0x10
     462:	20 ff       	sbrs	r18, 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <EVENT_CDC_Device_ControLineStateChanged+0xc>
     466:	5f 98       	cbi	0x0b, 7	; 11
     468:	08 95       	ret
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     46a:	5f 9a       	sbi	0x0b, 7	; 11
     46c:	08 95       	ret

0000046e <CALLBACK_USB_GetDescriptor>:
     46e:	29 2f       	mov	r18, r25
     470:	33 27       	eor	r19, r19
     472:	22 30       	cpi	r18, 0x02	; 2
     474:	31 05       	cpc	r19, r1
     476:	39 f0       	breq	.+14     	; 0x486 <CALLBACK_USB_GetDescriptor+0x18>
     478:	23 30       	cpi	r18, 0x03	; 3
     47a:	31 05       	cpc	r19, r1
     47c:	49 f0       	breq	.+18     	; 0x490 <CALLBACK_USB_GetDescriptor+0x22>
     47e:	21 30       	cpi	r18, 0x01	; 1

					for (uint8_t i = 1; i < UsageListSize; i++)
     480:	31 05       	cpc	r19, r1
     482:	21 f1       	breq	.+72     	; 0x4cc <CALLBACK_USB_GetDescriptor+0x5e>
					  UsageList[i - 1] = UsageList[i];
     484:	28 c0       	rjmp	.+80     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x68>
     486:	ee e3       	ldi	r30, 0x3E	; 62
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	82 ec       	ldi	r24, 0xC2	; 194

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	27 c0       	rjmp	.+78     	; 0x4de <CALLBACK_USB_GetDescriptor+0x70>
     490:	99 27       	eor	r25, r25
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	91 05       	cpc	r25, r1
     496:	61 f0       	breq	.+24     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x42>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	91 05       	cpc	r25, r1
     49c:	81 f0       	breq	.+32     	; 0x4be <CALLBACK_USB_GetDescriptor+0x50>
     49e:	89 2b       	or	r24, r25
     4a0:	d1 f4       	brne	.+52     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x68>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a2:	ee eb       	ldi	r30, 0xBE	; 190
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	e4 91       	lpm	r30, Z+
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	8e eb       	ldi	r24, 0xBE	; 190
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	17 c0       	rjmp	.+46     	; 0x4de <CALLBACK_USB_GetDescriptor+0x70>
     4b0:	e4 ea       	ldi	r30, 0xA4	; 164
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	e4 91       	lpm	r30, Z+
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	84 ea       	ldi	r24, 0xA4	; 164
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	10 c0       	rjmp	.+32     	; 0x4de <CALLBACK_USB_GetDescriptor+0x70>
     4be:	e4 e7       	ldi	r30, 0x74	; 116
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e4 91       	lpm	r30, Z+
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	84 e7       	ldi	r24, 0x74	; 116
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	09 c0       	rjmp	.+18     	; 0x4de <CALLBACK_USB_GetDescriptor+0x70>
     4cc:	e2 e1       	ldi	r30, 0x12	; 18
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <CALLBACK_USB_GetDescriptor+0x70>
     4d6:	e0 e0       	ldi	r30, 0x00	; 0
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
				break;
     4de:	da 01       	movw	r26, r20
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e0:	8d 93       	st	X+, r24
     4e2:	9c 93       	st	X, r25
     4e4:	cf 01       	movw	r24, r30
     4e6:	08 95       	ret

000004e8 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4e8:	20 91 41 02 	lds	r18, 0x0241
     4ec:	30 91 42 02 	lds	r19, 0x0242
     4f0:	26 17       	cp	r18, r22
     4f2:	37 07       	cpc	r19, r23
     4f4:	48 f0       	brcs	.+18     	; 0x508 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4f6:	61 15       	cp	r22, r1
     4f8:	71 05       	cpc	r23, r1
     4fa:	39 f4       	brne	.+14     	; 0x50a <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4fc:	20 91 e8 00 	lds	r18, 0x00E8
     500:	2e 77       	andi	r18, 0x7E	; 126
     502:	20 93 e8 00 	sts	0x00E8, r18
     506:	01 c0       	rjmp	.+2      	; 0x50a <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     508:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     50a:	9c 01       	movw	r18, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	33 c0       	rjmp	.+102    	; 0x576 <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     510:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     512:	99 23       	and	r25, r25
     514:	09 f4       	brne	.+2      	; 0x518 <Endpoint_Write_Control_Stream_LE+0x30>
     516:	42 c0       	rjmp	.+132    	; 0x59c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     518:	95 30       	cpi	r25, 0x05	; 5
     51a:	09 f4       	brne	.+2      	; 0x51e <Endpoint_Write_Control_Stream_LE+0x36>
     51c:	41 c0       	rjmp	.+130    	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     51e:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     522:	93 fd       	sbrc	r25, 3
     524:	39 c0       	rjmp	.+114    	; 0x598 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     526:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     52a:	92 fd       	sbrc	r25, 2
     52c:	2f c0       	rjmp	.+94     	; 0x58c <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     52e:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     532:	90 ff       	sbrs	r25, 0
     534:	20 c0       	rjmp	.+64     	; 0x576 <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     536:	80 91 f2 00 	lds	r24, 0x00F2
     53a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     53c:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     53e:	82 1b       	sub	r24, r18
     540:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     542:	05 c0       	rjmp	.+10     	; 0x54e <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     544:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     546:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     54a:	61 50       	subi	r22, 0x01	; 1
     54c:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     54e:	9f 01       	movw	r18, r30
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     554:	61 15       	cp	r22, r1
     556:	71 05       	cpc	r23, r1
     558:	19 f0       	breq	.+6      	; 0x560 <Endpoint_Write_Control_Stream_LE+0x78>
     55a:	28 30       	cpi	r18, 0x08	; 8
     55c:	31 05       	cpc	r19, r1
     55e:	90 f3       	brcs	.-28     	; 0x544 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	28 30       	cpi	r18, 0x08	; 8
     564:	31 05       	cpc	r19, r1
     566:	09 f0       	breq	.+2      	; 0x56a <Endpoint_Write_Control_Stream_LE+0x82>
     568:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     56a:	90 91 e8 00 	lds	r25, 0x00E8
     56e:	9e 77       	andi	r25, 0x7E	; 126
     570:	90 93 e8 00 	sts	0x00E8, r25
     574:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     576:	61 15       	cp	r22, r1
     578:	71 05       	cpc	r23, r1
     57a:	51 f6       	brne	.-108    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x28>
     57c:	81 11       	cpse	r24, r1
     57e:	c8 cf       	rjmp	.-112    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x28>
     580:	05 c0       	rjmp	.+10     	; 0x58c <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     582:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     584:	88 23       	and	r24, r24
     586:	51 f0       	breq	.+20     	; 0x59c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	51 f0       	breq	.+20     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     58c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     590:	82 ff       	sbrs	r24, 2
     592:	f7 cf       	rjmp	.-18     	; 0x582 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5a0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5a2:	08 95       	ret

000005a4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5a4:	20 91 41 02 	lds	r18, 0x0241
     5a8:	30 91 42 02 	lds	r19, 0x0242
     5ac:	26 17       	cp	r18, r22
     5ae:	37 07       	cpc	r19, r23
     5b0:	48 f0       	brcs	.+18     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5b2:	61 15       	cp	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b8:	20 91 e8 00 	lds	r18, 0x00E8
     5bc:	2e 77       	andi	r18, 0x7E	; 126
     5be:	20 93 e8 00 	sts	0x00E8, r18
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5c4:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5c6:	9c 01       	movw	r18, r24
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	34 c0       	rjmp	.+104    	; 0x634 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5cc:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ce:	99 23       	and	r25, r25
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x30>
     5d2:	43 c0       	rjmp	.+134    	; 0x65a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5d4:	95 30       	cpi	r25, 0x05	; 5
     5d6:	09 f4       	brne	.+2      	; 0x5da <Endpoint_Write_Control_PStream_LE+0x36>
     5d8:	42 c0       	rjmp	.+132    	; 0x65e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5da:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5de:	93 fd       	sbrc	r25, 3
     5e0:	3a c0       	rjmp	.+116    	; 0x656 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5e2:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5e6:	92 fd       	sbrc	r25, 2
     5e8:	30 c0       	rjmp	.+96     	; 0x64a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5ea:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5ee:	90 ff       	sbrs	r25, 0
     5f0:	21 c0       	rjmp	.+66     	; 0x634 <Endpoint_Write_Control_PStream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5f2:	80 91 f2 00 	lds	r24, 0x00F2
     5f6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5f8:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     5fa:	82 1b       	sub	r24, r18
     5fc:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     600:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     602:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     606:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     608:	61 50       	subi	r22, 0x01	; 1
     60a:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     60c:	9c 01       	movw	r18, r24
     60e:	2e 0f       	add	r18, r30
     610:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     612:	61 15       	cp	r22, r1
     614:	71 05       	cpc	r23, r1
     616:	19 f0       	breq	.+6      	; 0x61e <Endpoint_Write_Control_PStream_LE+0x7a>
     618:	28 30       	cpi	r18, 0x08	; 8
     61a:	31 05       	cpc	r19, r1
     61c:	88 f3       	brcs	.-30     	; 0x600 <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	28 30       	cpi	r18, 0x08	; 8
     622:	31 05       	cpc	r19, r1
     624:	09 f0       	breq	.+2      	; 0x628 <Endpoint_Write_Control_PStream_LE+0x84>
     626:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     628:	90 91 e8 00 	lds	r25, 0x00E8
     62c:	9e 77       	andi	r25, 0x7E	; 126
     62e:	90 93 e8 00 	sts	0x00E8, r25
     632:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     634:	61 15       	cp	r22, r1
     636:	71 05       	cpc	r23, r1
     638:	49 f6       	brne	.-110    	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x28>
     63a:	81 11       	cpse	r24, r1
     63c:	c7 cf       	rjmp	.-114    	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x28>
     63e:	05 c0       	rjmp	.+10     	; 0x64a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     640:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     642:	88 23       	and	r24, r24
     644:	51 f0       	breq	.+20     	; 0x65a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     646:	85 30       	cpi	r24, 0x05	; 5
     648:	51 f0       	breq	.+20     	; 0x65e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     64a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     64e:	82 ff       	sbrs	r24, 2
     650:	f7 cf       	rjmp	.-18     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     65e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     660:	08 95       	ret

00000662 <Endpoint_ConfigureEndpoint_Prv>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     662:	98 2f       	mov	r25, r24
     664:	2c c0       	rjmp	.+88     	; 0x6be <Endpoint_ConfigureEndpoint_Prv+0x5c>
     666:	90 93 e9 00 	sts	0x00E9, r25
     66a:	98 17       	cp	r25, r24
     66c:	39 f0       	breq	.+14     	; 0x67c <Endpoint_ConfigureEndpoint_Prv+0x1a>
     66e:	70 91 ec 00 	lds	r23, 0x00EC
     672:	20 91 ed 00 	lds	r18, 0x00ED
     676:	50 91 f0 00 	lds	r21, 0x00F0
     67a:	03 c0       	rjmp	.+6      	; 0x682 <Endpoint_ConfigureEndpoint_Prv+0x20>
     67c:	24 2f       	mov	r18, r20
					  ParserData->TotalReportItems++;
     67e:	76 2f       	mov	r23, r22
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	21 fd       	sbrc	r18, 1
     684:	02 c0       	rjmp	.+4      	; 0x68a <Endpoint_ConfigureEndpoint_Prv+0x28>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	1a c0       	rjmp	.+52     	; 0x6be <Endpoint_ConfigureEndpoint_Prv+0x5c>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	30 91 eb 00 	lds	r19, 0x00EB
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	3e 7f       	andi	r19, 0xFE	; 254
     690:	30 93 eb 00 	sts	0x00EB, r19
     694:	30 91 ed 00 	lds	r19, 0x00ED
     698:	3d 7f       	andi	r19, 0xFD	; 253
     69a:	30 93 ed 00 	sts	0x00ED, r19
     69e:	30 91 eb 00 	lds	r19, 0x00EB
     6a2:	31 60       	ori	r19, 0x01	; 1
     6a4:	30 93 eb 00 	sts	0x00EB, r19
     6a8:	70 93 ec 00 	sts	0x00EC, r23
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6ac:	20 93 ed 00 	sts	0x00ED, r18
     6b0:	50 93 f0 00 	sts	0x00F0, r21
     6b4:	20 91 ee 00 	lds	r18, 0x00EE
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	27 fd       	sbrc	r18, 7
     6ba:	e5 cf       	rjmp	.-54     	; 0x686 <Endpoint_ConfigureEndpoint_Prv+0x24>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <Endpoint_ConfigureEndpoint_Prv+0x6a>
     6be:	95 30       	cpi	r25, 0x05	; 5
     6c0:	90 f2       	brcs	.-92     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x4>
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	80 93 e9 00 	sts	0x00E9, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	08 95       	ret
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 95       	ret

000006d0 <Endpoint_ConfigureEndpointTable>:
     6d0:	0f 93       	push	r16
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	06 2f       	mov	r16, r22
     6da:	ec 01       	movw	r28, r24
     6dc:	10 e0       	ldi	r17, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	2e c0       	rjmp	.+92     	; 0x73c <Endpoint_ConfigureEndpointTable+0x6c>
     6e0:	98 81       	ld	r25, Y
     6e2:	91 11       	cpse	r25, r1
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <Endpoint_ConfigureEndpointTable+0x1c>
     6e6:	1f 5f       	subi	r17, 0xFF	; 255
     6e8:	25 96       	adiw	r28, 0x05	; 5
     6ea:	28 c0       	rjmp	.+80     	; 0x73c <Endpoint_ConfigureEndpointTable+0x6c>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	2c 81       	ldd	r18, Y+4	; 0x04
     6ee:	e9 81       	ldd	r30, Y+1	; 0x01
     6f0:	fa 81       	ldd	r31, Y+2	; 0x02
     6f2:	6b 81       	ldd	r22, Y+3	; 0x03
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	89 2f       	mov	r24, r25
     6f6:	8f 70       	andi	r24, 0x0F	; 15

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	85 30       	cpi	r24, 0x05	; 5
     6fa:	10 f0       	brcs	.+4      	; 0x700 <Endpoint_ConfigureEndpointTable+0x30>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	21 c0       	rjmp	.+66     	; 0x742 <Endpoint_ConfigureEndpointTable+0x72>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	22 30       	cpi	r18, 0x02	; 2
     702:	10 f0       	brcs	.+4      	; 0x708 <Endpoint_ConfigureEndpointTable+0x38>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	56 e0       	ldi	r21, 0x06	; 6
     706:	01 c0       	rjmp	.+2      	; 0x70a <Endpoint_ConfigureEndpointTable+0x3a>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	52 e0       	ldi	r21, 0x02	; 2
     70a:	28 e0       	ldi	r18, 0x08	; 8
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	03 c0       	rjmp	.+6      	; 0x718 <Endpoint_ConfigureEndpointTable+0x48>
     712:	4f 5f       	subi	r20, 0xFF	; 255
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	2e 17       	cp	r18, r30
     71a:	3f 07       	cpc	r19, r31

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	d0 f3       	brcs	.-12     	; 0x712 <Endpoint_ConfigureEndpointTable+0x42>
     71e:	42 95       	swap	r20
     720:	40 7f       	andi	r20, 0xF0	; 240
     722:	45 2b       	or	r20, r21
     724:	99 1f       	adc	r25, r25
     726:	99 27       	eor	r25, r25
     728:	99 1f       	adc	r25, r25
     72a:	62 95       	swap	r22
     72c:	66 0f       	add	r22, r22
     72e:	66 0f       	add	r22, r22
     730:	60 7c       	andi	r22, 0xC0	; 192
     732:	69 2b       	or	r22, r25
     734:	96 df       	rcall	.-212    	; 0x662 <Endpoint_ConfigureEndpoint_Prv>
     736:	81 11       	cpse	r24, r1
     738:	d6 cf       	rjmp	.-84     	; 0x6e6 <Endpoint_ConfigureEndpointTable+0x16>
     73a:	e0 cf       	rjmp	.-64     	; 0x6fc <Endpoint_ConfigureEndpointTable+0x2c>
     73c:	10 13       	cpse	r17, r16
     73e:	d0 cf       	rjmp	.-96     	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x10>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <Endpoint_ClearStatusStage>:
     74c:	80 91 3b 02 	lds	r24, 0x023B
     750:	87 fd       	sbrc	r24, 7
     752:	05 c0       	rjmp	.+10     	; 0x75e <Endpoint_ClearStatusStage+0x12>
     754:	80 91 e8 00 	lds	r24, 0x00E8
     758:	80 ff       	sbrs	r24, 0
     75a:	0d c0       	rjmp	.+26     	; 0x776 <Endpoint_ClearStatusStage+0x2a>
     75c:	10 c0       	rjmp	.+32     	; 0x77e <Endpoint_ClearStatusStage+0x32>
     75e:	80 91 e8 00 	lds	r24, 0x00E8
     762:	82 fd       	sbrc	r24, 2
     764:	04 c0       	rjmp	.+8      	; 0x76e <Endpoint_ClearStatusStage+0x22>
     766:	8e b3       	in	r24, 0x1e	; 30
     768:	81 11       	cpse	r24, r1
     76a:	f9 cf       	rjmp	.-14     	; 0x75e <Endpoint_ClearStatusStage+0x12>
     76c:	08 95       	ret
     76e:	80 91 e8 00 	lds	r24, 0x00E8
     772:	8b 77       	andi	r24, 0x7B	; 123
     774:	07 c0       	rjmp	.+14     	; 0x784 <Endpoint_ClearStatusStage+0x38>
     776:	8e b3       	in	r24, 0x1e	; 30
     778:	81 11       	cpse	r24, r1
     77a:	ec cf       	rjmp	.-40     	; 0x754 <Endpoint_ClearStatusStage+0x8>
     77c:	08 95       	ret
     77e:	80 91 e8 00 	lds	r24, 0x00E8
     782:	8e 77       	andi	r24, 0x7E	; 126
     784:	80 93 e8 00 	sts	0x00E8, r24
     788:	08 95       	ret

0000078a <Endpoint_WaitUntilReady>:
     78a:	80 91 e4 00 	lds	r24, 0x00E4
     78e:	90 91 e5 00 	lds	r25, 0x00E5
     792:	45 e6       	ldi	r20, 0x65	; 101
     794:	20 91 ec 00 	lds	r18, 0x00EC
     798:	20 fd       	sbrc	r18, 0
     79a:	1e c0       	rjmp	.+60     	; 0x7d8 <Endpoint_WaitUntilReady+0x4e>
     79c:	22 c0       	rjmp	.+68     	; 0x7e2 <Endpoint_WaitUntilReady+0x58>
     79e:	2e b3       	in	r18, 0x1e	; 30
     7a0:	22 23       	and	r18, r18
     7a2:	91 f0       	breq	.+36     	; 0x7c8 <Endpoint_WaitUntilReady+0x3e>
     7a4:	25 30       	cpi	r18, 0x05	; 5
     7a6:	91 f0       	breq	.+36     	; 0x7cc <Endpoint_WaitUntilReady+0x42>
     7a8:	20 91 eb 00 	lds	r18, 0x00EB
     7ac:	25 fd       	sbrc	r18, 5
     7ae:	10 c0       	rjmp	.+32     	; 0x7d0 <Endpoint_WaitUntilReady+0x46>
     7b0:	20 91 e4 00 	lds	r18, 0x00E4
     7b4:	30 91 e5 00 	lds	r19, 0x00E5
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	59 f3       	breq	.-42     	; 0x794 <Endpoint_WaitUntilReady+0xa>
     7be:	41 50       	subi	r20, 0x01	; 1
     7c0:	c9 01       	movw	r24, r18
     7c2:	41 f7       	brne	.-48     	; 0x794 <Endpoint_WaitUntilReady+0xa>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	08 95       	ret
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	08 95       	ret
     7cc:	83 e0       	ldi	r24, 0x03	; 3
     7ce:	08 95       	ret
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	08 95       	ret
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
     7d8:	20 91 e8 00 	lds	r18, 0x00E8
     7dc:	20 ff       	sbrs	r18, 0
     7de:	df cf       	rjmp	.-66     	; 0x79e <Endpoint_WaitUntilReady+0x14>
     7e0:	f9 cf       	rjmp	.-14     	; 0x7d4 <Endpoint_WaitUntilReady+0x4a>
     7e2:	20 91 e8 00 	lds	r18, 0x00E8
     7e6:	22 ff       	sbrs	r18, 2
     7e8:	da cf       	rjmp	.-76     	; 0x79e <Endpoint_WaitUntilReady+0x14>
     7ea:	f4 cf       	rjmp	.-24     	; 0x7d4 <Endpoint_WaitUntilReady+0x4a>

000007ec <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7ec:	40 d0       	rcall	.+128    	; 0x86e <USB_INT_DisableAllInterrupts>
     7ee:	42 d0       	rcall	.+132    	; 0x874 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7f0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7f4:	8f 77       	andi	r24, 0x7F	; 127
     7f6:	80 93 d8 00 	sts	0x00D8, r24
     7fa:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     7fe:	80 68       	ori	r24, 0x80	; 128
     800:	80 93 d8 00 	sts	0x00D8, r24
     804:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     808:	8f 7d       	andi	r24, 0xDF	; 223
     80a:	80 93 d8 00 	sts	0x00D8, r24
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     816:	09 b4       	in	r0, 0x29	; 41
     818:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     81a:	fd cf       	rjmp	.-6      	; 0x816 <USB_ResetInterface+0x2a>
     81c:	1e ba       	out	0x1e, r1	; 30
     81e:	10 92 37 02 	sts	0x0237, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     822:	10 92 39 02 	sts	0x0239, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     826:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     82a:	42 e0       	ldi	r20, 0x02	; 2
     82c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	18 df       	rcall	.-464    	; 0x662 <Endpoint_ConfigureEndpoint_Prv>
     832:	80 91 e1 00 	lds	r24, 0x00E1
     836:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     838:	80 93 e1 00 	sts	0x00E1, r24
     83c:	80 91 e2 00 	lds	r24, 0x00E2
     840:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     842:	80 93 e2 00 	sts	0x00E2, r24
     846:	80 91 e2 00 	lds	r24, 0x00E2
     84a:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     84c:	80 93 e2 00 	sts	0x00E2, r24
     850:	80 91 e0 00 	lds	r24, 0x00E0
     854:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     856:	80 93 e0 00 	sts	0x00E0, r24
     85a:	08 95       	ret

0000085c <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     85c:	e3 e6       	ldi	r30, 0x63	; 99
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	8e 7f       	andi	r24, 0xFE	; 254
     864:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 3a 02 	sts	0x023A, r24

	USB_ResetInterface();
     86c:	bf cf       	rjmp	.-130    	; 0x7ec <USB_ResetInterface>

0000086e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     86e:	10 92 e2 00 	sts	0x00E2, r1
     872:	08 95       	ret

00000874 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     874:	10 92 e1 00 	sts	0x00E1, r1
     878:	08 95       	ret

0000087a <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     89c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8a0:	82 ff       	sbrs	r24, 2
     8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8a4:	80 91 e2 00 	lds	r24, 0x00E2
     8a8:	82 ff       	sbrs	r24, 2
     8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8ac:	80 91 e1 00 	lds	r24, 0x00E1
     8b0:	8b 7f       	andi	r24, 0xFB	; 251
     8b2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8b6:	29 d2       	rcall	.+1106   	; 0xd0a <USB_Event_Stub>
     8b8:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8bc:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8be:	16 c0       	rjmp	.+44     	; 0x8ec <__vector_11+0x72>
     8c0:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8c4:	80 ff       	sbrs	r24, 0
     8c6:	12 c0       	rjmp	.+36     	; 0x8ec <__vector_11+0x72>
     8c8:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8cc:	8e 7f       	andi	r24, 0xFE	; 254
     8ce:	80 93 e2 00 	sts	0x00E2, r24
     8d2:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8d6:	80 61       	ori	r24, 0x10	; 16
     8d8:	80 93 e2 00 	sts	0x00E2, r24
     8dc:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8e0:	80 62       	ori	r24, 0x20	; 32
     8e2:	80 93 d8 00 	sts	0x00D8, r24
     8e6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8e8:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8ea:	1d dd       	rcall	.-1478   	; 0x326 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     8ec:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8f0:	84 ff       	sbrs	r24, 4
     8f2:	2e c0       	rjmp	.+92     	; 0x950 <__vector_11+0xd6>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8f4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8f8:	84 ff       	sbrs	r24, 4
     8fa:	2a c0       	rjmp	.+84     	; 0x950 <__vector_11+0xd6>
     8fc:	84 e0       	ldi	r24, 0x04	; 4
     8fe:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     900:	86 e0       	ldi	r24, 0x06	; 6
     902:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     904:	09 b4       	in	r0, 0x29	; 41
     906:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     908:	fd cf       	rjmp	.-6      	; 0x904 <__vector_11+0x8a>
     90a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     90e:	8f 7d       	andi	r24, 0xDF	; 223
     910:	80 93 d8 00 	sts	0x00D8, r24
     914:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     918:	8f 7e       	andi	r24, 0xEF	; 239
     91a:	80 93 e1 00 	sts	0x00E1, r24
     91e:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     922:	8f 7e       	andi	r24, 0xEF	; 239
     924:	80 93 e2 00 	sts	0x00E2, r24
     928:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     92c:	81 60       	ori	r24, 0x01	; 1
     92e:	80 93 e2 00 	sts	0x00E2, r24
     932:	80 91 37 02 	lds	r24, 0x0237
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     936:	88 23       	and	r24, r24
     938:	11 f0       	breq	.+4      	; 0x93e <__vector_11+0xc4>
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	07 c0       	rjmp	.+14     	; 0x94c <__vector_11+0xd2>
		  USB_DeviceState = DEVICE_STATE_Configured;
     93e:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     942:	87 ff       	sbrs	r24, 7
     944:	02 c0       	rjmp	.+4      	; 0x94a <__vector_11+0xd0>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	01 c0       	rjmp	.+2      	; 0x94c <__vector_11+0xd2>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	8e bb       	out	0x1e, r24	; 30
     94e:	ea dc       	rcall	.-1580   	; 0x324 <EVENT_USB_Device_Connect>
     950:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     954:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     956:	26 c0       	rjmp	.+76     	; 0x9a4 <__vector_11+0x12a>
     958:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     95c:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     95e:	22 c0       	rjmp	.+68     	; 0x9a4 <__vector_11+0x12a>
     960:	80 91 e1 00 	lds	r24, 0x00E1
     964:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     966:	80 93 e1 00 	sts	0x00E1, r24
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	8e bb       	out	0x1e, r24	; 30
     96e:	10 92 37 02 	sts	0x0237, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     972:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     976:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     978:	80 93 e1 00 	sts	0x00E1, r24
     97c:	80 91 e2 00 	lds	r24, 0x00E2
     980:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     982:	80 93 e2 00 	sts	0x00E2, r24
     986:	80 91 e2 00 	lds	r24, 0x00E2
     98a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     98c:	80 93 e2 00 	sts	0x00E2, r24
     990:	42 e0       	ldi	r20, 0x02	; 2
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     996:	65 de       	rcall	.-822    	; 0x662 <Endpoint_ConfigureEndpoint_Prv>
     998:	80 91 f0 00 	lds	r24, 0x00F0
     99c:	88 60       	ori	r24, 0x08	; 8
     99e:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9a2:	b3 d1       	rcall	.+870    	; 0xd0a <USB_Event_Stub>
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	cf 93       	push	r28
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9ea:	80 91 e9 00 	lds	r24, 0x00E9
     9ee:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9f0:	90 91 ec 00 	lds	r25, 0x00EC
     9f4:	90 ff       	sbrs	r25, 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__vector_12+0x36>
     9f8:	90 e8       	ldi	r25, 0x80	; 128
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <__vector_12+0x38>
     9fc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9fe:	c9 2f       	mov	r28, r25
     a00:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a02:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a06:	80 91 f0 00 	lds	r24, 0x00F0
     a0a:	87 7f       	andi	r24, 0xF7	; 247
     a0c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a10:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a12:	1c d0       	rcall	.+56     	; 0xa4c <USB_Device_ProcessControlRequest>
     a14:	10 92 e9 00 	sts	0x00E9, r1
     a18:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a1c:	88 60       	ori	r24, 0x08	; 8
     a1e:	80 93 f0 00 	sts	0x00F0, r24
     a22:	cf 70       	andi	r28, 0x0F	; 15
     a24:	c0 93 e9 00 	sts	0x00E9, r28
     a28:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a2a:	ef 91       	pop	r30
     a2c:	cf 91       	pop	r28
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	ac 97       	sbiw	r28, 0x2c	; 44
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a62:	eb e3       	ldi	r30, 0x3B	; 59
     a64:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a66:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a6a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a6c:	22 e0       	ldi	r18, 0x02	; 2
     a6e:	e3 34       	cpi	r30, 0x43	; 67
     a70:	f2 07       	cpc	r31, r18
     a72:	c9 f7       	brne	.-14     	; 0xa66 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a74:	5c dc       	rcall	.-1864   	; 0x32e <EVENT_USB_Device_ControlRequest>
     a76:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a7a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a7c:	2e c1       	rjmp	.+604    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     a7e:	80 91 3b 02 	lds	r24, 0x023B
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a82:	90 91 3c 02 	lds	r25, 0x023C

		switch (USB_ControlRequest.bRequest)
     a86:	95 30       	cpi	r25, 0x05	; 5
     a88:	09 f4       	brne	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0x40>
     a8a:	87 c0       	rjmp	.+270    	; 0xb9a <USB_Device_ProcessControlRequest+0x14e>
     a8c:	38 f4       	brcc	.+14     	; 0xa9c <USB_Device_ProcessControlRequest+0x50>
     a8e:	91 30       	cpi	r25, 0x01	; 1
     a90:	b1 f1       	breq	.+108    	; 0xafe <USB_Device_ProcessControlRequest+0xb2>
     a92:	70 f0       	brcs	.+28     	; 0xab0 <USB_Device_ProcessControlRequest+0x64>
     a94:	93 30       	cpi	r25, 0x03	; 3
     a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x4e>
     a98:	20 c1       	rjmp	.+576    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     a9a:	31 c0       	rjmp	.+98     	; 0xafe <USB_Device_ProcessControlRequest+0xb2>
     a9c:	98 30       	cpi	r25, 0x08	; 8
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x56>
     aa0:	f2 c0       	rjmp	.+484    	; 0xc86 <USB_Device_ProcessControlRequest+0x23a>
     aa2:	99 30       	cpi	r25, 0x09	; 9
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0x5c>
     aa6:	fe c0       	rjmp	.+508    	; 0xca4 <USB_Device_ProcessControlRequest+0x258>
     aa8:	96 30       	cpi	r25, 0x06	; 6
     aaa:	09 f0       	breq	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0x62>
     aac:	16 c1       	rjmp	.+556    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     aae:	9a c0       	rjmp	.+308    	; 0xbe4 <USB_Device_ProcessControlRequest+0x198>
     ab0:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ab2:	21 f0       	breq	.+8      	; 0xabc <USB_Device_ProcessControlRequest+0x70>
     ab4:	82 38       	cpi	r24, 0x82	; 130
     ab6:	09 f0       	breq	.+2      	; 0xaba <USB_Device_ProcessControlRequest+0x6e>
     ab8:	10 c1       	rjmp	.+544    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     aba:	08 c0       	rjmp	.+16     	; 0xacc <USB_Device_ProcessControlRequest+0x80>
     abc:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ac0:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ac4:	99 23       	and	r25, r25
     ac6:	89 f0       	breq	.+34     	; 0xaea <USB_Device_ProcessControlRequest+0x9e>
     ac8:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     aca:	0f c0       	rjmp	.+30     	; 0xaea <USB_Device_ProcessControlRequest+0x9e>
     acc:	80 91 3f 02 	lds	r24, 0x023F
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ad0:	90 91 40 02 	lds	r25, 0x0240
     ad4:	8f 70       	andi	r24, 0x0F	; 15
     ad6:	99 27       	eor	r25, r25
     ad8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     adc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ae0:	85 fb       	bst	r24, 5
     ae2:	88 27       	eor	r24, r24
     ae4:	80 f9       	bld	r24, 0
     ae6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aea:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aee:	97 7f       	andi	r25, 0xF7	; 247
     af0:	90 93 e8 00 	sts	0x00E8, r25
     af4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     af8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     afc:	cf c0       	rjmp	.+414    	; 0xc9c <USB_Device_ProcessControlRequest+0x250>
     afe:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b00:	19 f0       	breq	.+6      	; 0xb08 <USB_Device_ProcessControlRequest+0xbc>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Device_ProcessControlRequest+0xbc>
     b06:	e9 c0       	rjmp	.+466    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     b08:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b0a:	21 f0       	breq	.+8      	; 0xb14 <USB_Device_ProcessControlRequest+0xc8>
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	09 f0       	breq	.+2      	; 0xb12 <USB_Device_ProcessControlRequest+0xc6>
     b10:	e4 c0       	rjmp	.+456    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     b12:	0b c0       	rjmp	.+22     	; 0xb2a <USB_Device_ProcessControlRequest+0xde>
     b14:	80 91 3d 02 	lds	r24, 0x023D
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0xd2>
     b1c:	de c0       	rjmp	.+444    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     b1e:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b20:	09 f0       	breq	.+2      	; 0xb24 <USB_Device_ProcessControlRequest+0xd8>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	80 93 39 02 	sts	0x0239, r24
     b28:	2f c0       	rjmp	.+94     	; 0xb88 <USB_Device_ProcessControlRequest+0x13c>
     b2a:	80 91 3d 02 	lds	r24, 0x023D

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b2e:	81 11       	cpse	r24, r1
     b30:	2b c0       	rjmp	.+86     	; 0xb88 <USB_Device_ProcessControlRequest+0x13c>
     b32:	80 91 3f 02 	lds	r24, 0x023F
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b36:	90 91 40 02 	lds	r25, 0x0240
     b3a:	8f 70       	andi	r24, 0x0F	; 15
     b3c:	99 27       	eor	r25, r25
     b3e:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b40:	09 f4       	brne	.+2      	; 0xb44 <USB_Device_ProcessControlRequest+0xf8>
     b42:	cb c0       	rjmp	.+406    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     b44:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b48:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b4c:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b4e:	1c c0       	rjmp	.+56     	; 0xb88 <USB_Device_ProcessControlRequest+0x13c>
     b50:	20 91 3c 02 	lds	r18, 0x023C
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b54:	23 30       	cpi	r18, 0x03	; 3
     b56:	21 f4       	brne	.+8      	; 0xb60 <USB_Device_ProcessControlRequest+0x114>
     b58:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b5c:	80 62       	ori	r24, 0x20	; 32
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <USB_Device_ProcessControlRequest+0x138>
     b60:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b64:	90 61       	ori	r25, 0x10	; 16
     b66:	90 93 eb 00 	sts	0x00EB, r25
     b6a:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <USB_Device_ProcessControlRequest+0x126>
     b70:	22 0f       	add	r18, r18
     b72:	8a 95       	dec	r24
     b74:	ea f7       	brpl	.-6      	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
     b76:	20 93 ea 00 	sts	0x00EA, r18
     b7a:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b7e:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 93 eb 00 	sts	0x00EB, r24
     b88:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b8c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	80 93 e8 00 	sts	0x00E8, r24
     b96:	da dd       	rcall	.-1100   	; 0x74c <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b98:	a0 c0       	rjmp	.+320    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     b9a:	81 11       	cpse	r24, r1
     b9c:	9e c0       	rjmp	.+316    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b9e:	80 91 3d 02 	lds	r24, 0x023D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ba2:	90 91 3e 02 	lds	r25, 0x023E
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	99 27       	eor	r25, r25
     baa:	18 2f       	mov	r17, r24
     bac:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bb0:	90 78       	andi	r25, 0x80	; 128
     bb2:	98 2b       	or	r25, r24
     bb4:	90 93 e3 00 	sts	0x00E3, r25
     bb8:	80 91 e8 00 	lds	r24, 0x00E8
     bbc:	87 7f       	andi	r24, 0xF7	; 247
     bbe:	80 93 e8 00 	sts	0x00E8, r24
     bc2:	c4 dd       	rcall	.-1144   	; 0x74c <Endpoint_ClearStatusStage>
     bc4:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bc8:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bca:	fc cf       	rjmp	.-8      	; 0xbc4 <USB_Device_ProcessControlRequest+0x178>
     bcc:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     bd0:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bd2:	80 93 e3 00 	sts	0x00E3, r24
     bd6:	11 23       	and	r17, r17
     bd8:	11 f0       	breq	.+4      	; 0xbde <USB_Device_ProcessControlRequest+0x192>
     bda:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x194>
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	8e bb       	out	0x1e, r24	; 30
     be2:	7b c0       	rjmp	.+246    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     be4:	80 58       	subi	r24, 0x80	; 128
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	08 f0       	brcs	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x1a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bea:	77 c0       	rjmp	.+238    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     bec:	80 91 3d 02 	lds	r24, 0x023D
     bf0:	90 91 3e 02 	lds	r25, 0x023E
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bf4:	8c 3d       	cpi	r24, 0xDC	; 220
     bf6:	23 e0       	ldi	r18, 0x03	; 3
     bf8:	92 07       	cpc	r25, r18
     bfa:	71 f5       	brne	.+92     	; 0xc58 <USB_Device_ProcessControlRequest+0x20c>
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	8a 83       	std	Y+2, r24	; 0x02
     c00:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c06:	f8 94       	cli
     c08:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c0a:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c0c:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     c0e:	3e e0       	ldi	r19, 0x0E	; 14
     c10:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c12:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c14:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c16:	50 93 57 00 	sts	0x0057, r21
     c1a:	e4 91       	lpm	r30, Z+
     c1c:	20 ff       	sbrs	r18, 0
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <USB_Device_ProcessControlRequest+0x1da>
     c20:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     c22:	ef 70       	andi	r30, 0x0F	; 15
     c24:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     c26:	ef 70       	andi	r30, 0x0F	; 15
     c28:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     c2a:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     c2c:	ea 30       	cpi	r30, 0x0A	; 10
     c2e:	10 f0       	brcs	.+4      	; 0xc34 <USB_Device_ProcessControlRequest+0x1e8>
     c30:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <USB_Device_ProcessControlRequest+0x1ea>
     c34:	c0 96       	adiw	r24, 0x30	; 48
     c36:	8d 93       	st	X+, r24
     c38:	9d 93       	st	X+, r25
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	24 31       	cpi	r18, 0x14	; 20
     c3e:	49 f7       	brne	.-46     	; 0xc12 <USB_Device_ProcessControlRequest+0x1c6>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c40:	4f bf       	out	0x3f, r20	; 63
     c42:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c46:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c48:	80 93 e8 00 	sts	0x00E8, r24
     c4c:	6a e2       	ldi	r22, 0x2A	; 42
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	49 dc       	rcall	.-1902   	; 0x4e8 <Endpoint_Write_Control_Stream_LE>
     c56:	11 c0       	rjmp	.+34     	; 0xc7a <USB_Device_ProcessControlRequest+0x22e>
     c58:	ae 01       	movw	r20, r28
     c5a:	45 5d       	subi	r20, 0xD5	; 213
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	60 91 3f 02 	lds	r22, 0x023F
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c62:	05 dc       	rcall	.-2038   	; 0x46e <CALLBACK_USB_GetDescriptor>
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	c9 f1       	breq	.+114    	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     c68:	20 91 e8 00 	lds	r18, 0x00E8
     c6c:	27 7f       	andi	r18, 0xF7	; 247
     c6e:	20 93 e8 00 	sts	0x00E8, r18
     c72:	bc 01       	movw	r22, r24
     c74:	8b a5       	ldd	r24, Y+43	; 0x2b
     c76:	9c a5       	ldd	r25, Y+44	; 0x2c
     c78:	95 dc       	rcall	.-1750   	; 0x5a4 <Endpoint_Write_Control_PStream_LE>
     c7a:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c7e:	8b 77       	andi	r24, 0x7B	; 123
     c80:	80 93 e8 00 	sts	0x00E8, r24
     c84:	2a c0       	rjmp	.+84     	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c86:	80 38       	cpi	r24, 0x80	; 128
     c88:	41 f5       	brne	.+80     	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	87 7f       	andi	r24, 0xF7	; 247
     c90:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c94:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c98:	80 93 f1 00 	sts	0x00F1, r24
     c9c:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ca0:	8e 77       	andi	r24, 0x7E	; 126
     ca2:	77 cf       	rjmp	.-274    	; 0xb92 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ca4:	81 11       	cpse	r24, r1
     ca6:	19 c0       	rjmp	.+50     	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ca8:	90 91 3d 02 	lds	r25, 0x023D
     cac:	92 30       	cpi	r25, 0x02	; 2
     cae:	a8 f4       	brcc	.+42     	; 0xcda <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cb0:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	80 93 e8 00 	sts	0x00E8, r24
     cba:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cbe:	46 dd       	rcall	.-1396   	; 0x74c <Endpoint_ClearStatusStage>
     cc0:	80 91 37 02 	lds	r24, 0x0237
     cc4:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <USB_Device_ProcessControlRequest+0x284>
     cc8:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     ccc:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <USB_Device_ProcessControlRequest+0x288>
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <USB_Device_ProcessControlRequest+0x28a>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cd6:	8e bb       	out	0x1e, r24	; 30
     cd8:	27 db       	rcall	.-2482   	; 0x328 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cda:	80 91 e8 00 	lds	r24, 0x00E8
     cde:	83 ff       	sbrs	r24, 3
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <USB_Device_ProcessControlRequest+0x2aa>
     ce2:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cec:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cf0:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf2:	80 93 eb 00 	sts	0x00EB, r24
     cf6:	ac 96       	adiw	r28, 0x2c	; 44
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret

00000d0a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d0a:	08 95       	ret

00000d0c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d0c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d0e:	8e b3       	in	r24, 0x1e	; 30
     d10:	88 23       	and	r24, r24
     d12:	a9 f0       	breq	.+42     	; 0xd3e <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d14:	80 91 e9 00 	lds	r24, 0x00E9
     d18:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d1a:	90 91 ec 00 	lds	r25, 0x00EC
     d1e:	90 ff       	sbrs	r25, 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <USB_USBTask+0x1a>
     d22:	90 e8       	ldi	r25, 0x80	; 128
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <USB_USBTask+0x1c>
     d26:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d28:	c9 2f       	mov	r28, r25
     d2a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d34:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d36:	8a de       	rcall	.-748    	; 0xa4c <USB_Device_ProcessControlRequest>
     d38:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3a:	c0 93 e9 00 	sts	0x00E9, r28
     d3e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d40:	08 95       	ret

00000d42 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     d48:	40 96       	adiw	r24, 0x10	; 16
     d4a:	fc 01       	movw	r30, r24
     d4c:	8b e0       	ldi	r24, 0x0B	; 11
     d4e:	df 01       	movw	r26, r30
     d50:	1d 92       	st	X+, r1
     d52:	8a 95       	dec	r24
     d54:	e9 f7       	brne	.-6      	; 0xd50 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     d5a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	b4 dc       	rcall	.-1688   	; 0x6d0 <Endpoint_ConfigureEndpointTable>
     d68:	88 23       	and	r24, r24
     d6a:	61 f0       	breq	.+24     	; 0xd84 <CDC_Device_ConfigureEndpoints+0x42>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     d6e:	ce 01       	movw	r24, r28
     d70:	06 96       	adiw	r24, 0x06	; 6
     d72:	ae dc       	rcall	.-1700   	; 0x6d0 <Endpoint_ConfigureEndpointTable>
     d74:	88 23       	and	r24, r24
     d76:	31 f0       	breq	.+12     	; 0xd84 <CDC_Device_ConfigureEndpoints+0x42>
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d7c:	0b 96       	adiw	r24, 0x0b	; 11
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
	  return false;

	return true;
}
     d82:	a6 cc       	rjmp	.-1716   	; 0x6d0 <Endpoint_ConfigureEndpointTable>
     d84:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
	  return false;

	return true;
}
     d8a:	08 95       	ret

00000d8c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     d8c:	cf 93       	push	r28
     d8e:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d90:	2e b3       	in	r18, 0x1e	; 30
     d92:	24 30       	cpi	r18, 0x04	; 4
     d94:	f1 f4       	brne	.+60     	; 0xdd2 <CDC_Device_SendByte+0x46>
     d96:	fc 01       	movw	r30, r24
     d98:	44 89       	ldd	r20, Z+20	; 0x14
     d9a:	55 89       	ldd	r21, Z+21	; 0x15
     d9c:	66 89       	ldd	r22, Z+22	; 0x16
     d9e:	77 89       	ldd	r23, Z+23	; 0x17
     da0:	45 2b       	or	r20, r21
     da2:	46 2b       	or	r20, r22
     da4:	47 2b       	or	r20, r23
     da6:	a9 f0       	breq	.+42     	; 0xdd2 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	8f 70       	andi	r24, 0x0F	; 15
     dac:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     db0:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     db4:	85 ff       	sbrs	r24, 5
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     db8:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0a c0       	rjmp	.+20     	; 0xdd4 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dc0:	80 91 e8 00 	lds	r24, 0x00E8
     dc4:	8e 77       	andi	r24, 0x7E	; 126
     dc6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     dca:	df dc       	rcall	.-1602   	; 0x78a <Endpoint_WaitUntilReady>
     dcc:	88 23       	and	r24, r24
     dce:	a1 f3       	breq	.-24     	; 0xdb8 <CDC_Device_SendByte+0x2c>
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <CDC_Device_SendByte+0x48>
     dd2:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     dd4:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     dd6:	08 95       	ret

00000dd8 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dd8:	2e b3       	in	r18, 0x1e	; 30
     dda:	24 30       	cpi	r18, 0x04	; 4
     ddc:	29 f5       	brne	.+74     	; 0xe28 <CDC_Device_Flush+0x50>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     dde:	fc 01       	movw	r30, r24
     de0:	44 89       	ldd	r20, Z+20	; 0x14
     de2:	55 89       	ldd	r21, Z+21	; 0x15
     de4:	66 89       	ldd	r22, Z+22	; 0x16
     de6:	77 89       	ldd	r23, Z+23	; 0x17
     de8:	45 2b       	or	r20, r21
     dea:	46 2b       	or	r20, r22
     dec:	47 2b       	or	r20, r23
     dee:	e1 f0       	breq	.+56     	; 0xe28 <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     df0:	81 81       	ldd	r24, Z+1	; 0x01
     df2:	8f 70       	andi	r24, 0x0F	; 15
     df4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     df8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     dfc:	81 11       	cpse	r24, r1
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <CDC_Device_Flush+0x2c>
	  return ENDPOINT_READYWAIT_NoError;
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e04:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e08:	80 91 e8 00 	lds	r24, 0x00E8
     e0c:	8e 77       	andi	r24, 0x7E	; 126
     e0e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e12:	95 fd       	sbrc	r25, 5
     e14:	f5 cf       	rjmp	.-22     	; 0xe00 <CDC_Device_Flush+0x28>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e16:	b9 dc       	rcall	.-1678   	; 0x78a <Endpoint_WaitUntilReady>
     e18:	81 11       	cpse	r24, r1
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <CDC_Device_Flush+0x52>
     e1c:	90 91 e8 00 	lds	r25, 0x00E8
     e20:	9e 77       	andi	r25, 0x7E	; 126
     e22:	90 93 e8 00 	sts	0x00E8, r25
     e26:	08 95       	ret
     e28:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e2a:	08 95       	ret

00000e2c <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e2c:	2e b3       	in	r18, 0x1e	; 30
     e2e:	24 30       	cpi	r18, 0x04	; 4
     e30:	89 f4       	brne	.+34     	; 0xe54 <CDC_Device_USBTask+0x28>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e32:	fc 01       	movw	r30, r24
     e34:	44 89       	ldd	r20, Z+20	; 0x14
     e36:	55 89       	ldd	r21, Z+21	; 0x15
     e38:	66 89       	ldd	r22, Z+22	; 0x16
     e3a:	77 89       	ldd	r23, Z+23	; 0x17
     e3c:	45 2b       	or	r20, r21
     e3e:	46 2b       	or	r20, r22
     e40:	47 2b       	or	r20, r23
     e42:	41 f0       	breq	.+16     	; 0xe54 <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e44:	21 81       	ldd	r18, Z+1	; 0x01
     e46:	2f 70       	andi	r18, 0x0F	; 15
     e48:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e4c:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     e50:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     e52:	c2 cf       	rjmp	.-124    	; 0xdd8 <CDC_Device_Flush>
     e54:	08 95       	ret

00000e56 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e56:	2e b3       	in	r18, 0x1e	; 30
     e58:	24 30       	cpi	r18, 0x04	; 4
     e5a:	19 f0       	breq	.+6      	; 0xe62 <CDC_Device_ReceiveByte+0xc>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	24 c0       	rjmp	.+72     	; 0xeaa <CDC_Device_ReceiveByte+0x54>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e62:	fc 01       	movw	r30, r24
     e64:	44 89       	ldd	r20, Z+20	; 0x14
     e66:	55 89       	ldd	r21, Z+21	; 0x15
     e68:	66 89       	ldd	r22, Z+22	; 0x16
     e6a:	77 89       	ldd	r23, Z+23	; 0x17
     e6c:	45 2b       	or	r20, r21
     e6e:	46 2b       	or	r20, r22
     e70:	47 2b       	or	r20, r23
     e72:	a1 f3       	breq	.-24     	; 0xe5c <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e74:	86 81       	ldd	r24, Z+6	; 0x06
     e76:	8f 70       	andi	r24, 0x0F	; 15
     e78:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e7c:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     e80:	82 ff       	sbrs	r24, 2
     e82:	ec cf       	rjmp	.-40     	; 0xe5c <CDC_Device_ReceiveByte+0x6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e84:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     e88:	88 23       	and	r24, r24
     e8a:	21 f0       	breq	.+8      	; 0xe94 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e8c:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e98:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     e9c:	81 11       	cpse	r24, r1
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ea0:	80 91 e8 00 	lds	r24, 0x00E8
     ea4:	8b 77       	andi	r24, 0x7B	; 123
     ea6:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     eaa:	c9 01       	movw	r24, r18
     eac:	08 95       	ret

00000eae <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     eae:	08 95       	ret

00000eb0 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb6:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     eba:	83 ff       	sbrs	r24, 3
     ebc:	a6 c0       	rjmp	.+332    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     ebe:	88 81       	ld	r24, Y
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	20 91 3f 02 	lds	r18, 0x023F
     ec6:	30 91 40 02 	lds	r19, 0x0240
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	09 f0       	breq	.+2      	; 0xed2 <CDC_Device_ProcessControlRequest+0x22>
     ed0:	9c c0       	rjmp	.+312    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     ed2:	80 91 3c 02 	lds	r24, 0x023C
     ed6:	81 32       	cpi	r24, 0x21	; 33
     ed8:	61 f0       	breq	.+24     	; 0xef2 <CDC_Device_ProcessControlRequest+0x42>
     eda:	20 f4       	brcc	.+8      	; 0xee4 <CDC_Device_ProcessControlRequest+0x34>
     edc:	80 32       	cpi	r24, 0x20	; 32
     ede:	09 f0       	breq	.+2      	; 0xee2 <CDC_Device_ProcessControlRequest+0x32>
     ee0:	94 c0       	rjmp	.+296    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     ee2:	3d c0       	rjmp	.+122    	; 0xf5e <CDC_Device_ProcessControlRequest+0xae>
     ee4:	82 32       	cpi	r24, 0x22	; 34
     ee6:	09 f4       	brne	.+2      	; 0xeea <CDC_Device_ProcessControlRequest+0x3a>
     ee8:	6c c0       	rjmp	.+216    	; 0xfc2 <CDC_Device_ProcessControlRequest+0x112>
     eea:	83 32       	cpi	r24, 0x23	; 35
     eec:	09 f0       	breq	.+2      	; 0xef0 <CDC_Device_ProcessControlRequest+0x40>
     eee:	8d c0       	rjmp	.+282    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     ef0:	7c c0       	rjmp	.+248    	; 0xfea <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ef2:	80 91 3b 02 	lds	r24, 0x023B
     ef6:	81 3a       	cpi	r24, 0xA1	; 161
     ef8:	09 f0       	breq	.+2      	; 0xefc <CDC_Device_ProcessControlRequest+0x4c>
     efa:	87 c0       	rjmp	.+270    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     efc:	80 91 e8 00 	lds	r24, 0x00E8
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f06:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	fc cf       	rjmp	.-8      	; 0xf06 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f0e:	4c 89       	ldd	r20, Y+20	; 0x14
     f10:	5d 89       	ldd	r21, Y+21	; 0x15
     f12:	6e 89       	ldd	r22, Y+22	; 0x16
     f14:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f16:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f1a:	bb 27       	eor	r27, r27
     f1c:	a7 2f       	mov	r26, r23
     f1e:	96 2f       	mov	r25, r22
     f20:	85 2f       	mov	r24, r21
     f22:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     f26:	cb 01       	movw	r24, r22
     f28:	aa 27       	eor	r26, r26
     f2a:	bb 27       	eor	r27, r27
     f2c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     f30:	47 2f       	mov	r20, r23
     f32:	55 27       	eor	r21, r21
     f34:	66 27       	eor	r22, r22
     f36:	77 27       	eor	r23, r23
     f38:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     f3c:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f3e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     f42:	89 8d       	ldd	r24, Y+25	; 0x19
     f44:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     f48:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f4a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
     f52:	8e 77       	andi	r24, 0x7E	; 126
     f54:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f5c:	f7 cb       	rjmp	.-2066   	; 0x74c <Endpoint_ClearStatusStage>
     f5e:	80 91 3b 02 	lds	r24, 0x023B
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f62:	81 32       	cpi	r24, 0x21	; 33
     f64:	09 f0       	breq	.+2      	; 0xf68 <CDC_Device_ProcessControlRequest+0xb8>
     f66:	51 c0       	rjmp	.+162    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     f68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6c:	87 7f       	andi	r24, 0xF7	; 247
     f6e:	80 93 e8 00 	sts	0x00E8, r24
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <CDC_Device_ProcessControlRequest+0xcc>
     f74:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <CDC_Device_ProcessControlRequest+0xcc>
     f7a:	47 c0       	rjmp	.+142    	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     f7c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f80:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f82:	f8 cf       	rjmp	.-16     	; 0xf74 <CDC_Device_ProcessControlRequest+0xc4>
     f84:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f88:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     f8c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     f90:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     f94:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f96:	2d 8b       	std	Y+21, r18	; 0x15
     f98:	9e 8b       	std	Y+22, r25	; 0x16
     f9a:	8f 8b       	std	Y+23, r24	; 0x17
     f9c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fa0:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     fa2:	80 91 f1 00 	lds	r24, 0x00F1
     fa6:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     fa8:	80 91 f1 00 	lds	r24, 0x00F1
     fac:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     fae:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fb2:	8b 77       	andi	r24, 0x7B	; 123
     fb4:	80 93 e8 00 	sts	0x00E8, r24
     fb8:	c9 db       	rcall	.-2158   	; 0x74c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     fba:	ce 01       	movw	r24, r28
     fbc:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fbe:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fc0:	f3 c9       	rjmp	.-3098   	; 0x3a8 <EVENT_CDC_Device_LineEncodingChanged>
     fc2:	80 91 3b 02 	lds	r24, 0x023B
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fc6:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fc8:	01 f5       	brne	.+64     	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     fca:	80 91 e8 00 	lds	r24, 0x00E8
     fce:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd0:	80 93 e8 00 	sts	0x00E8, r24
     fd4:	bb db       	rcall	.-2186   	; 0x74c <Endpoint_ClearStatusStage>
     fd6:	80 91 3d 02 	lds	r24, 0x023D
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fda:	90 91 3e 02 	lds	r25, 0x023E

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     fde:	99 8b       	std	Y+17, r25	; 0x11
     fe0:	88 8b       	std	Y+16, r24	; 0x10
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	3a ca       	rjmp	.-2956   	; 0x45e <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     fea:	80 91 3b 02 	lds	r24, 0x023B
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fee:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     ff0:	61 f4       	brne	.+24     	; 0x100a <CDC_Device_ProcessControlRequest+0x15a>
     ff2:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	80 93 e8 00 	sts	0x00E8, r24
     ffc:	a7 db       	rcall	.-2226   	; 0x74c <Endpoint_ClearStatusStage>
     ffe:	60 91 3d 02 	lds	r22, 0x023D
    1002:	ce 01       	movw	r24, r28
    1004:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1006:	cf 91       	pop	r28
    1008:	52 cf       	rjmp	.-348    	; 0xeae <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <__udivmodsi4>:
			}

			break;
	}
}
    1010:	a1 e2       	ldi	r26, 0x21	; 33
    1012:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1014:	aa 1b       	sub	r26, r26
    1016:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
    1018:	fd 01       	movw	r30, r26
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <__udivmodsi4_ep>

0000101c <__udivmodsi4_loop>:
    101c:	aa 1f       	adc	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	ee 1f       	adc	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	a2 17       	cp	r26, r18
    1026:	b3 07       	cpc	r27, r19
    1028:	e4 07       	cpc	r30, r20
    102a:	f5 07       	cpc	r31, r21
    102c:	20 f0       	brcs	.+8      	; 0x1036 <__udivmodsi4_ep>
    102e:	a2 1b       	sub	r26, r18
    1030:	b3 0b       	sbc	r27, r19
    1032:	e4 0b       	sbc	r30, r20
    1034:	f5 0b       	sbc	r31, r21

00001036 <__udivmodsi4_ep>:
    1036:	66 1f       	adc	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	1a 94       	dec	r1
    1040:	69 f7       	brne	.-38     	; 0x101c <__udivmodsi4_loop>
    1042:	60 95       	com	r22
    1044:	70 95       	com	r23
    1046:	80 95       	com	r24
    1048:	90 95       	com	r25
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
    104e:	bd 01       	movw	r22, r26
    1050:	cf 01       	movw	r24, r30
    1052:	08 95       	ret

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>
