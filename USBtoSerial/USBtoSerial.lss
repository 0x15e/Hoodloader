
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001086  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000126  0080011e  0080011e  00001138  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000091f  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008b0  00000000  00000000  00002811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dcfe  00000000  00000000  000030c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a5f  00000000  00000000  00010dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005904  00000000  00000000  0001481e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015a4  00000000  00000000  0001a124  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004708  00000000  00000000  0001b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000864b  00000000  00000000  0001fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  0002841b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>

void flushHID(void){
	// TODO timeout? <--
	// try to send until its done
	while (ram.HID.ID && ram.HID.length == ram.HID.recvlength)
		HID_Device_USBTask(&Device_HID_Interface);
       2:	00 00       	nop
}

void HIDreset(void){
	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
       4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
	const uint16_t ReportSize)
{
	// Unused in this demo, since there are no Host->Device reports
	//	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (ReportID == HID_REPORTID_RawKeyboardReport){
       6:	00 00       	nop
	ram.HID.isEmpty[HID_REPORTID_NotAReport] = true;
}

void clearHIDReport(uint8_t ID){
	// return if already cleared, RAW HID cannot be cleared
	if (ram.HID.isEmpty[ID] || ID == HID_REPORTID_RawKeyboardReport) return;
       8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
       a:	00 00       	nop
		//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
		//while (1); //TODO remove <--

		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
       c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
       e:	00 00       	nop
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
      10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
	// only send report if there is actually a new report
	//if (ram.HID.ID){
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
      12:	00 00       	nop
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
      14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
      16:	00 00       	nop
	}
}
      18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
		SetGlobalInterruptMask(CurrentGlobalInt);
	}

	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
      1a:	00 00       	nop
		// Turn on RX LED
		LEDs_TurnOnLEDs(LEDMASK_RX);
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
	//TODO remove this

	// set a general and specific flag that a report was made, ignore rawHID
	if (ram.HID.ID != HID_REPORTID_RawKeyboardReport){
		ram.HID.isEmpty[HID_REPORTID_NotAReport] = false;
		ram.HID.isEmpty[ram.HID.ID] = false;
      1e:	00 00       	nop
		ram.PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;

		// Send bytes
		Serial_SendData(ReportData, ReportSize);
	}
}
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
			LRingBuffer_Append(Buffer, DataPtr[Size - i - 1]);
      22:	00 00       	nop
	}

	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
	static inline void LRingBuffer_Append(LRingBuffer_t* Buffer, const uint8_t Data)
	{
		GCC_FORCE_POINTER_ACCESS(Buffer);
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
      26:	00 00       	nop
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>

		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// check if buffer is disabled
		if ((!Buffer->Base)){
      2a:	00 00       	nop
	uint8_t length = getHIDReportLength(ID);
	if (!length) return;

	// save new values and prepare for sending
	ram.HID.length = ram.HID.recvlength = length;
	ram.HID.ID = ID;
      2c:	32 c4       	rjmp	.+2148   	; 0x892 <__vector_11>
      2e:	00 00       	nop
	memset(&ram.HID.buffer, 0x00, length);
      30:	d9 c4       	rjmp	.+2482   	; 0x9e4 <__vector_12>
		// write the cached buffer (recreate protocol)
		uint8_t buff[6];
		uint8_t length = NHPwriteChecksum(NHP_ADDRESS_CONTROL, (NHP_USAGE_ARDUINOHID << 8) | ram.HID.ID, buff);

		// Writes the NHP read buffer with the given length
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
      32:	00 00       	nop
			SetGlobalInterruptMask(CurrentGlobalInt);
			return;
		}

		// save new data before the first item
		int pos = Buffer->Index - Buffer->Count - 1;
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
		ram.HID.isEmpty[ram.HID.ID] = false;
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
      36:	00 00       	nop
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();

		// error while reading, write down current buffer (except possible new leads)
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, ram.NHP.readbuffer, ram.NHP.readlength);
		ram.skipNHP += ram.NHP.readlength;
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
	}

	//write report
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
	*ReportSize = ram.HID.length;
      3e:	00 00       	nop
		if (pos < 0)
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
	ram.HID.length = ram.HID.recvlength = length;
	ram.HID.ID = ID;
	memset(&ram.HID.buffer, 0x00, length);

	// flush HID
	flushHID();
      42:	00 00       	nop
			pos = Buffer->Size + pos;
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
	memcpy(ReportData, ram.HID.buffer, ram.HID.length);
	*ReportID = ram.HID.ID;
	*ReportSize = ram.HID.length;

	// reset ID
	ram.HID.ID = 0;
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
		Buffer->Base[pos] = Data;
      4a:	00 00       	nop
		LRingBuffer_Append_Buffer(&ram.USARTtoUSB_Buffer, buff, length);
		ram.skipNHP += length;
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
	*ReportSize = ram.HID.length;

	// reset ID
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; //just to be sure if you call HID_Task by accident again
	ram.HID.length = 0; //just to be sure if you call HID_Task by accident again
      4e:	00 00       	nop

		// correct index position if its full 
		if (Buffer->Count == Buffer->Size){
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
	// this will forcewrite the report every time
	return true;

	//}
	//else return false;
}
      52:	00 00       	nop
	}

	// reset any pending HID reports
	ram.HID.ID = 0;
	ram.HID.recvlength = 0; // just to be sure
	ram.HID.length = 0; // just to be sure
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
			if (Buffer->Index == 0)
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
	}

	// nearly the same priciple like the Protocol itself: check for control address
	if ((address == NHP_ADDRESS_CONTROL) && (((ram.NHP.mWorkData >> 8) & 0xFF) == NHP_USAGE_ARDUINOHID)){
		// check if previous reading was a valid Control Address and write it down
		checkNHPControlAddressError();
      5c:	6b c1       	rjmp	.+726    	; 0x334 <__vector_23>
				Buffer->Index = Buffer->Size;
      5e:	00 00       	nop
			Buffer->Index--;
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
	return;
}
      62:	00 00       	nop
		spi_transaction(0xC0, (addr >> 8) & 0xFF, addr & 0xFF, ram.ispBuffer[x]);
		_delay_ms(45);
	}
	LEDs_TurnOnLEDs(LEDS_PMODE);
	return STK_OK;
}
      64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
			commit(page);
			page = current_page();
		}
		flash(LOW, ram.isp._addr, ram.ispBuffer[x++]);
		flash(HIGH, ram.isp._addr, ram.ispBuffer[x++]);
		ram.isp._addr++;
      66:	00 00       	nop
		return;
	}
	sendCDCbyte(STK_INSYNC);
	if (memtype == 'F') result = flash_read_page(length);
	if (memtype == 'E') result = eeprom_read_page(length);
	sendCDCbyte(result);
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
		uint8_t* const DataPtr, const uint8_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
	static inline void LRingBuffer_Append_Buffer(LRingBuffer_t* Buffer,
		uint8_t* const DataPtr, const uint8_t Size)
	{
		// append all bytes, last byte first
		for (int i = 0; i < Size; i++)
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:

		// Determine which interface must have its report generated
		ram.HID.length = getHIDReportLength(ram.HID.ID);

		// error, write down this wrong ID report
		if (!ram.HID.length)
      74:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
			ram.isp.error++;
			sendCDCbyte(STK_NOSYNC);
		}
		return;
	}
	sendCDCbyte(STK_FAILED);
      84:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
		if (blocks == 0 || blocks == 1){
			// save command in data variable
			//protocol->mWorkData = (input & NHP_MASK_COMMAND) + 1;

			// ignore command
			protocol->readlength += protocol->leadError;
      94:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000a4 <ManufacturerString>:
      a4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
			protocol->leadError = false;
      b4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000be <LanguageString>:
			break;
		}

		else if (blocks == 7){
			// save block length + first 4 data bits (special 32 bit case)
			protocol->mWorkData = input & NHP_MASK_DATA_4BIT;
      be:	04 03 09 04                                         ....

000000c2 <ConfigurationDescriptor>:
      c2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
			blocks -= 2;
      d2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		}
		else{
			// save block length + first 3 data bits
			protocol->mWorkData = input & NHP_MASK_DATA_3BIT;
      e2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
	}
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
      f2:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000100 <DeviceDescriptor>:

	case NHP_HEADER_DATA_A:
	case NHP_HEADER_DATA_B:
	default:
	{
		if (protocol->mBlocks >= 2){
     100:	12 01 10 01 02 00 00 08 eb 03 68 6e 01 00 01 02     ..........hn....
			// get next 7 bits of data
			protocol->mBlocks--;
			protocol->mWorkData <<= 7;
     110:	dc 01                                               ..

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d2 e0       	ldi	r29, 0x02	; 2
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	a0 e0       	ldi	r26, 0x00	; 0
			// dont need &NHP_MASK_DATA_7BIT because first MSB bit is zero!
			protocol->mWorkData |= input;
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e6 e8       	ldi	r30, 0x86	; 134
     126:	f0 e1       	ldi	r31, 0x10	; 16
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
	}
		break;

	case(NHP_HEADER_END) :
	{
		if (protocol->mBlocks == 1){
     12e:	ae 31       	cpi	r26, 0x1E	; 30
     130:	b1 07       	cpc	r27, r17
			// return the address
			uint8_t address = (input & 0x3F) + 1;
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	ae e1       	ldi	r26, 0x1E	; 30
						 break;
	} // end switch

	// reset next reading on valid input/error/command
	if (errorLevel != NHP_NO_ERR)
		protocol->reset = true;
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a4 34       	cpi	r26, 0x44	; 68
	// ignore in progress reading
	else
		protocol->reset = false;
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	39 d0       	rcall	.+114    	; 0x1b8 <main>
     146:	9d c7       	rjmp	.+3898   	; 0x1082 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <SetupHardware>:
			protocol->mWorkData |= input;
			errorLevel = NHP_NO_ERR;
		}
		else
			// log an error, expecting a lead or end byte
			errorLevel = NHP_ERR_DATA;
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
			// return the address
			uint8_t address = (input & 0x3F) + 1;
			errorLevel = address;
		}
		else
			errorLevel = NHP_ERR_END;
     14e:	84 b7       	in	r24, 0x34	; 52
     150:	87 7f       	andi	r24, 0xF7	; 247
	else
		protocol->reset = false;

	// return the errors
	return errorLevel;
}
     152:	84 bf       	out	0x34, r24	; 52
     154:	28 e1       	ldi	r18, 0x18	; 24
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
     15a:	20 93 60 00 	sts	0x0060, r18
			getch();
			replyOK();
			break;

		case STK_PROG_PAGE:
			program_page();
     15e:	10 92 60 00 	sts	0x0060, r1
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
     162:	0f be       	out	0x3f, r0	; 63
     164:	84 e0       	ldi	r24, 0x04	; 4
		case STK_PROG_PAGE:
			program_page();
			break;

		case STK_READ_PAGE:
			read_page();
     166:	85 bd       	out	0x25, r24	; 37
     168:	80 e1       	ldi	r24, 0x10	; 16
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 cd 00 	sts	0x00CD, r25
		case STK_READ_PAGE:
			read_page();
			break;

		case STK_UNIVERSAL:
			universal();
     170:	80 93 cc 00 	sts	0x00CC, r24
			break;
		case STK_PMODE_END:
			ram.isp.error = 0;
     174:	ca ec       	ldi	r28, 0xCA	; 202
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	96 e0       	ldi	r25, 0x06	; 6
			end_pmode();
     17a:	98 83       	st	Y, r25
     17c:	a8 ec       	ldi	r26, 0xC8	; 200
     17e:	b0 e0       	ldi	r27, 0x00	; 0
			else
				sendCDCbyte(STK_NOSYNC);
		}
	}

}
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	8c 93       	st	X, r24
			end_pmode();
			replyOK();
			break;

		case STK_READ_SIGN:
			read_signature();
     184:	e9 ec       	ldi	r30, 0xC9	; 201
     186:	f0 e0       	ldi	r31, 0x00	; 0
			break;

			// expecting a command, not CRC_EOP
			// this is how we can get back in sync
		case CRC_EOP:
			ram.isp.error++;
     188:	20 83       	st	Z, r18
     18a:	53 9a       	sbi	0x0a, 3	; 10
     18c:	5a 9a       	sbi	0x0b, 2	; 11
     18e:	5b 9a       	sbi	0x0b, 3	; 11
     190:	10 82       	st	Z, r1
     192:	1c 92       	st	X, r1
     194:	18 82       	st	Y, r1
     196:	98 83       	st	Y, r25
     198:	8c 93       	st	X, r24
     19a:	88 e9       	ldi	r24, 0x98	; 152
			sendCDCbyte(STK_NOSYNC);
			break;

			// anything else we will return STK_UNKNOWN
		default:
			ram.isp.error++;
     19c:	80 83       	st	Z, r24
     19e:	5b 98       	cbi	0x0b, 3	; 11
     1a0:	8a b1       	in	r24, 0x0a	; 10
     1a2:	80 63       	ori	r24, 0x30	; 48
     1a4:	8a b9       	out	0x0a, r24	; 10
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 63       	ori	r24, 0x30	; 48
     1aa:	8b b9       	out	0x0b, r24	; 11
     1ac:	63 d3       	rcall	.+1734   	; 0x874 <USB_Init>
			if (CRC_EOP == getch())
     1ae:	5f 9a       	sbi	0x0b, 7	; 11
     1b0:	57 9a       	sbi	0x0a, 7	; 10
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
				sendCDCbyte(STK_UNKNOWN);
     1b6:	08 95       	ret

000001b8 <main>:
     1b8:	c8 df       	rcall	.-112    	; 0x14a <SetupHardware>
			else
				sendCDCbyte(STK_NOSYNC);
     1ba:	ee e1       	ldi	r30, 0x1E	; 30
		}
	}

}
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	4f b7       	in	r20, 0x3f	; 63
		default:
			ram.isp.error++;
			if (CRC_EOP == getch())
				sendCDCbyte(STK_UNKNOWN);
			else
				sendCDCbyte(STK_NOSYNC);
     1c0:	f8 94       	cli
     1c2:	8a e2       	ldi	r24, 0x2A	; 42
		}
	}

}
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	91 83       	std	Z+1, r25	; 0x01
     1c8:	80 83       	st	Z, r24
			GCC_FORCE_POINTER_ACCESS(Buffer);

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1ca:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     1cc:	82 83       	std	Z+2, r24	; 0x02
     1ce:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     1d0:	84 83       	std	Z+4, r24	; 0x04
     1d2:	8a ea       	ldi	r24, 0xAA	; 170
			Buffer->End    = &DataPtr[Size];
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	97 83       	std	Z+7, r25	; 0x07
     1d8:	86 83       	std	Z+6, r24	; 0x06
     1da:	20 e8       	ldi	r18, 0x80	; 128
			Buffer->Size   = Size;
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	31 87       	std	Z+9, r19	; 0x09
     1e0:	20 87       	std	Z+8, r18	; 0x08
     1e2:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     1e4:	12 86       	std	Z+10, r1	; 0x0a
     1e6:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e8:	ea ea       	ldi	r30, 0xAA	; 170
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1ee:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1f0:	86 eb       	ldi	r24, 0xB6	; 182

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	80 83       	st	Z, r24
     1f8:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     1fa:	82 83       	std	Z+2, r24	; 0x02
     1fc:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     1fe:	84 83       	std	Z+4, r24	; 0x04
     200:	86 e3       	ldi	r24, 0x36	; 54
			Buffer->End    = &DataPtr[Size];
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	97 83       	std	Z+7, r25	; 0x07
     206:	86 83       	std	Z+6, r24	; 0x06
     208:	31 87       	std	Z+9, r19	; 0x09
			Buffer->Size   = Size;
     20a:	20 87       	std	Z+8, r18	; 0x08
     20c:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     20e:	12 86       	std	Z+10, r1	; 0x0a
     210:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     212:	8b b1       	in	r24, 0x0b	; 11
		PORTD |= LEDMask;
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     214:	80 63       	ori	r24, 0x30	; 48
     216:	8f 7d       	andi	r24, 0xDF	; 223
     218:	8b b9       	out	0x0b, r24	; 11
     21a:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     21c:	0a ea       	ldi	r16, 0xAA	; 170
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	80 e0       	ldi	r24, 0x00	; 0
		
		//================================================================================
		// CDC: read in bytes from the CDC interface
		//================================================================================

		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	2d d6       	rcall	.+3162   	; 0xe80 <CDC_Device_ReceiveByte>
     226:	97 fd       	sbrc	r25, 7
     228:	0c c0       	rjmp	.+24     	; 0x242 <main+0x8a>
		if (!(ReceivedByte < 0)){
     22a:	5c 98       	cbi	0x0b, 4	; 11
     22c:	90 91 36 02 	lds	r25, 0x0236
				// Turn on RX LED
				LEDs_TurnOnLEDs(LEDMASK_RX);
				PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     230:	9c 60       	ori	r25, 0x0C	; 12
     232:	90 93 36 02 	sts	0x0236, r25
     236:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     23a:	95 ff       	sbrs	r25, 5
     23c:	fc cf       	rjmp	.-8      	; 0x236 <main+0x7e>
     23e:	80 93 ce 00 	sts	0x00CE, r24
				UDR1 = DataByte;
     242:	2f b7       	in	r18, 0x3f	; 63
     244:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     246:	80 91 b4 01 	lds	r24, 0x01B4
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     24a:	90 91 b5 01 	lds	r25, 0x01B5
     24e:	2f bf       	out	0x3f, r18	; 63
     250:	00 97       	sbiw	r24, 0x00	; 0
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     252:	19 f4       	brne	.+6      	; 0x25a <main+0xa2>
		}



		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
     254:	a8 99       	sbic	0x15, 0	; 21
     256:	3e c0       	rjmp	.+124    	; 0x2d4 <main+0x11c>
				}
			}
		}


		if (TIFR0 & (1 << TOV0)){
     258:	60 c0       	rjmp	.+192    	; 0x31a <__stack+0x1b>
     25a:	5d 98       	cbi	0x0b, 5	; 11
     25c:	20 91 36 02 	lds	r18, 0x0236
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
		{
			// Turn on TX LED
			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     260:	23 60       	ori	r18, 0x03	; 3
     262:	20 93 36 02 	sts	0x0236, r18
     266:	20 91 01 01 	lds	r18, 0x0101
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     26a:	2f 70       	andi	r18, 0x0F	; 15
     26c:	20 93 e9 00 	sts	0x00E9, r18
     270:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     274:	20 ff       	sbrs	r18, 0
     276:	ee cf       	rjmp	.-36     	; 0x254 <main+0x9c>

			Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

			/* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
			 * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
			if (Endpoint_IsINReady())
     278:	80 31       	cpi	r24, 0x10	; 16
     27a:	91 05       	cpc	r25, r1
			{
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     27c:	10 f0       	brcs	.+4      	; 0x282 <main+0xca>
     27e:	8f e0       	ldi	r24, 0x0F	; 15
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	f8 2e       	mov	r15, r24
     284:	c0 e0       	ldi	r28, 0x00	; 0
     286:	d0 e0       	ldi	r29, 0x00	; 0

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     288:	22 c0       	rjmp	.+68     	; 0x2ce <main+0x116>
     28a:	e0 91 ac 01 	lds	r30, 0x01AC
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     28e:	f0 91 ad 01 	lds	r31, 0x01AD
     292:	60 81       	ld	r22, Z
     294:	80 e0       	ldi	r24, 0x00	; 0
				{
			
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	8b d5       	rcall	.+2838   	; 0xdb0 <CDC_Device_SendByte>
     29a:	81 11       	cpse	r24, r1
     29c:	db cf       	rjmp	.-74     	; 0x254 <main+0x9c>
     29e:	f8 01       	movw	r30, r16
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	93 81       	ldd	r25, Z+3	; 0x03
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2a4:	01 96       	adiw	r24, 0x01	; 1

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     2a6:	93 83       	std	Z+3, r25	; 0x03
     2a8:	82 83       	std	Z+2, r24	; 0x02
     2aa:	26 81       	ldd	r18, Z+6	; 0x06
     2ac:	37 81       	ldd	r19, Z+7	; 0x07
     2ae:	82 17       	cp	r24, r18
     2b0:	93 07       	cpc	r25, r19
     2b2:	21 f4       	brne	.+8      	; 0x2bc <main+0x104>
     2b4:	24 81       	ldd	r18, Z+4	; 0x04
     2b6:	35 81       	ldd	r19, Z+5	; 0x05
     2b8:	33 83       	std	Z+3, r19	; 0x03
			  Buffer->Out = Buffer->Start;
     2ba:	22 83       	std	Z+2, r18	; 0x02
     2bc:	2f b7       	in	r18, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	82 85       	ldd	r24, Z+10	; 0x0a
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2c2:	93 85       	ldd	r25, Z+11	; 0x0b
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2c4:	01 97       	sbiw	r24, 0x01	; 1

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2c6:	93 87       	std	Z+11, r25	; 0x0b
     2c8:	82 87       	std	Z+10, r24	; 0x0a
     2ca:	2f bf       	out	0x3f, r18	; 63
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	fc 12       	cpse	r15, r28
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2d0:	dc cf       	rjmp	.-72     	; 0x28a <main+0xd2>
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     2d2:	c0 cf       	rjmp	.-128    	; 0x254 <main+0x9c>
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     2d4:	a8 9a       	sbi	0x15, 0	; 21
     2d6:	90 91 36 02 	lds	r25, 0x0236
		}


		if (TIFR0 & (1 << TOV0)){
			// reset the timer
			TIFR0 |= (1 << TOV0);
     2da:	89 2f       	mov	r24, r25

			// Turn off TX LED(s) once the TX pulse period has elapsed
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     2dc:	83 70       	andi	r24, 0x03	; 3
     2de:	49 f0       	breq	.+18     	; 0x2f2 <main+0x13a>
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	83 70       	andi	r24, 0x03	; 3
     2e4:	9c 7f       	andi	r25, 0xFC	; 252
     2e6:	98 2b       	or	r25, r24
     2e8:	90 93 36 02 	sts	0x0236, r25
     2ec:	81 11       	cpse	r24, r1
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <main+0x13a>
     2f0:	5d 9a       	sbi	0x0b, 5	; 11
     2f2:	90 91 36 02 	lds	r25, 0x0236
		PORTD &= ~LEDMask;
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
     2f6:	89 2f       	mov	r24, r25
				LEDs_TurnOffLEDs(LEDMASK_TX);

			// Turn off RX LED(s) once the RX pulse period has elapsed
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     2f8:	8c 70       	andi	r24, 0x0C	; 12
     2fa:	79 f0       	breq	.+30     	; 0x31a <__stack+0x1b>
     2fc:	89 2f       	mov	r24, r25
     2fe:	86 95       	lsr	r24
     300:	86 95       	lsr	r24
     302:	8d 5f       	subi	r24, 0xFD	; 253
     304:	83 70       	andi	r24, 0x03	; 3
     306:	28 2f       	mov	r18, r24
     308:	22 0f       	add	r18, r18
     30a:	22 0f       	add	r18, r18
     30c:	93 7f       	andi	r25, 0xF3	; 243
     30e:	92 2b       	or	r25, r18
     310:	90 93 36 02 	sts	0x0236, r25
     314:	81 11       	cpse	r24, r1
     316:	01 c0       	rjmp	.+2      	; 0x31a <__stack+0x1b>
     318:	5c 9a       	sbi	0x0b, 4	; 11
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	9a d5       	rcall	.+2868   	; 0xe54 <CDC_Device_USBTask>
				LEDs_TurnOffLEDs(LEDMASK_RX);
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     320:	06 d5       	rcall	.+2572   	; 0xd2e <USB_USBTask>
     322:	7e cf       	rjmp	.-260    	; 0x220 <main+0x68>

00000324 <EVENT_USB_Device_Connect>:
	AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     324:	08 95       	ret

00000326 <EVENT_USB_Device_Disconnect>:
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     326:	08 95       	ret

00000328 <EVENT_USB_Device_ConfigurationChanged>:
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
				LEDs_TurnOffLEDs(LEDMASK_RX);
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
		USB_USBTask();
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1
	}
     32c:	1c c5       	rjmp	.+2616   	; 0xd66 <CDC_Device_ConfigureEndpoints>

0000032e <EVENT_USB_Device_ControlRequest>:
	//LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	d4 c5       	rjmp	.+2984   	; 0xedc <CDC_Device_ProcessControlRequest>

00000334 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     34e:	80 91 ce 00 	lds	r24, 0x00CE
	//LEDs_TurnOnLEDs(LEDMASK_TX);
	if (USB_DeviceState == DEVICE_STATE_Configured)
     352:	90 91 3b 02 	lds	r25, 0x023B
     356:	94 30       	cpi	r25, 0x04	; 4
     358:	d9 f4       	brne	.+54     	; 0x390 <__vector_23+0x5c>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     35a:	ea ea       	ldi	r30, 0xAA	; 170
     35c:	f1 e0       	ldi	r31, 0x01	; 1

			*Buffer->In = Data;
     35e:	a0 81       	ld	r26, Z
     360:	b1 81       	ldd	r27, Z+1	; 0x01
     362:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	91 83       	std	Z+1, r25	; 0x01
     36c:	80 83       	st	Z, r24
     36e:	26 81       	ldd	r18, Z+6	; 0x06
     370:	37 81       	ldd	r19, Z+7	; 0x07
     372:	82 17       	cp	r24, r18
     374:	93 07       	cpc	r25, r19
     376:	21 f4       	brne	.+8      	; 0x380 <__vector_23+0x4c>
			  Buffer->In = Buffer->Start;
     378:	84 81       	ldd	r24, Z+4	; 0x04
     37a:	95 81       	ldd	r25, Z+5	; 0x05
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     380:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     382:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     384:	82 85       	ldd	r24, Z+10	; 0x0a
     386:	93 85       	ldd	r25, Z+11	; 0x0b
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	93 87       	std	Z+11, r25	; 0x0b
     38c:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     38e:	2f bf       	out	0x3f, r18	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     390:	ff 91       	pop	r31
     392:	ef 91       	pop	r30
     394:	bf 91       	pop	r27
     396:	af 91       	pop	r26
     398:	9f 91       	pop	r25
     39a:	8f 91       	pop	r24
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     3aa:	29 2f       	mov	r18, r25
     3ac:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ae:	22 30       	cpi	r18, 0x02	; 2
     3b0:	31 05       	cpc	r19, r1
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x18>
     3b4:	23 30       	cpi	r18, 0x03	; 3
     3b6:	31 05       	cpc	r19, r1
     3b8:	49 f0       	breq	.+18     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x22>
     3ba:	21 30       	cpi	r18, 0x01	; 1
     3bc:	31 05       	cpc	r19, r1
     3be:	21 f1       	breq	.+72     	; 0x408 <CALLBACK_USB_GetDescriptor+0x5e>
     3c0:	28 c0       	rjmp	.+80     	; 0x412 <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3c2:	ee e3       	ldi	r30, 0x3E	; 62
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3c6:	82 ec       	ldi	r24, 0xC2	; 194
     3c8:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3ca:	27 c0       	rjmp	.+78     	; 0x41a <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     3cc:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	91 05       	cpc	r25, r1
     3d2:	61 f0       	breq	.+24     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x42>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	91 05       	cpc	r25, r1
     3d8:	81 f0       	breq	.+32     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x50>
     3da:	89 2b       	or	r24, r25
     3dc:	d1 f4       	brne	.+52     	; 0x412 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3de:	ee eb       	ldi	r30, 0xBE	; 190
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	e4 91       	lpm	r30, Z+
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     3e6:	8e eb       	ldi	r24, 0xBE	; 190
     3e8:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     3ea:	17 c0       	rjmp	.+46     	; 0x41a <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3ec:	e4 ea       	ldi	r30, 0xA4	; 164
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	e4 91       	lpm	r30, Z+
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     3f4:	84 ea       	ldi	r24, 0xA4	; 164
     3f6:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     3f8:	10 c0       	rjmp	.+32     	; 0x41a <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3fa:	e4 e7       	ldi	r30, 0x74	; 116
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	e4 91       	lpm	r30, Z+
     400:	f0 e0       	ldi	r31, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     402:	84 e7       	ldi	r24, 0x74	; 116
     404:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     406:	09 c0       	rjmp	.+18     	; 0x41a <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     408:	e2 e1       	ldi	r30, 0x12	; 18
     40a:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	04 c0       	rjmp	.+8      	; 0x41a <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     412:	e0 e0       	ldi	r30, 0x00	; 0
     414:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     41a:	da 01       	movw	r26, r20
     41c:	8d 93       	st	X+, r24
     41e:	9c 93       	st	X, r25
	return Size;
}
     420:	cf 01       	movw	r24, r30
     422:	08 95       	ret

00000424 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	e9 8d       	ldd	r30, Y+25	; 0x19
     42e:	e1 50       	subi	r30, 0x01	; 1
     430:	e2 30       	cpi	r30, 0x02	; 2
     432:	28 f4       	brcc	.+10     	; 0x43e <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	e5 5e       	subi	r30, 0xE5	; 229
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	10 81       	ld	r17, Z
     43c:	01 c0       	rjmp	.+2      	; 0x440 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     43e:	10 e0       	ldi	r17, 0x00	; 0
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     440:	88 8d       	ldd	r24, Y+24	; 0x18
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	09 f4       	brne	.+2      	; 0x448 <EVENT_CDC_Device_LineEncodingChanged+0x24>
		ConfigMask |= (1 << USBS1);
     446:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     448:	8a 8d       	ldd	r24, Y+26	; 0x1a
     44a:	87 30       	cpi	r24, 0x07	; 7
     44c:	31 f0       	breq	.+12     	; 0x45a <EVENT_CDC_Device_LineEncodingChanged+0x36>
     44e:	88 30       	cpi	r24, 0x08	; 8
     450:	31 f0       	breq	.+12     	; 0x45e <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     452:	86 30       	cpi	r24, 0x06	; 6
     454:	29 f4       	brne	.+10     	; 0x460 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
     456:	12 60       	ori	r17, 0x02	; 2
		break;
     458:	03 c0       	rjmp	.+6      	; 0x460 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 7:
		ConfigMask |= (1 << UCSZ11);
     45a:	14 60       	ori	r17, 0x04	; 4
		break;
     45c:	01 c0       	rjmp	.+2      	; 0x460 <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     45e:	16 60       	ori	r17, 0x06	; 6
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	PORTD |= (1 << PD3); // Turn ON Tx while USART is being reconfigured
     460:	5b 9a       	sbi	0x0b, 3	; 11
	UCSR1B = 0;
     462:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     466:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     46a:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     46e:	2c 89       	ldd	r18, Y+20	; 0x14
     470:	3d 89       	ldd	r19, Y+21	; 0x15
     472:	4e 89       	ldd	r20, Y+22	; 0x16
     474:	5f 89       	ldd	r21, Y+23	; 0x17
     476:	21 15       	cp	r18, r1
     478:	81 ee       	ldi	r24, 0xE1	; 225
     47a:	38 07       	cpc	r19, r24
     47c:	41 05       	cpc	r20, r1
     47e:	51 05       	cpc	r21, r1
     480:	71 f0       	breq	.+28     	; 0x49e <EVENT_CDC_Device_LineEncodingChanged+0x7a>
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     482:	ca 01       	movw	r24, r20
     484:	b9 01       	movw	r22, r18
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	77 95       	ror	r23
     48c:	67 95       	ror	r22
     48e:	60 58       	subi	r22, 0x80	; 128
     490:	7b 47       	sbci	r23, 0x7B	; 123
     492:	81 4e       	sbci	r24, 0xE1	; 225
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	d3 d5       	rcall	.+2982   	; 0x103e <__udivmodsi4>
     498:	21 50       	subi	r18, 0x01	; 1
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     49a:	31 09       	sbc	r19, r1
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <EVENT_CDC_Device_LineEncodingChanged+0x7e>
     49e:	20 e1       	ldi	r18, 0x10	; 16
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	30 93 cd 00 	sts	0x00CD, r19
     4a6:	20 93 cc 00 	sts	0x00CC, r18
     4aa:	10 93 ca 00 	sts	0x00CA, r17
		? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
		: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
     4ae:	8c 89       	ldd	r24, Y+20	; 0x14
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     4b0:	9d 89       	ldd	r25, Y+21	; 0x15
     4b2:	ae 89       	ldd	r26, Y+22	; 0x16
     4b4:	bf 89       	ldd	r27, Y+23	; 0x17
     4b6:	81 15       	cp	r24, r1
     4b8:	91 4e       	sbci	r25, 0xE1	; 225
     4ba:	a1 05       	cpc	r26, r1
     4bc:	b1 05       	cpc	r27, r1
     4be:	11 f4       	brne	.+4      	; 0x4c4 <EVENT_CDC_Device_LineEncodingChanged+0xa0>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <EVENT_CDC_Device_LineEncodingChanged+0xa2>
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 c8 00 	sts	0x00C8, r24
     4ca:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     4cc:	80 93 c9 00 	sts	0x00C9, r24
     4d0:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << PD3); // And turn OFF Tx once USART has been reconfigured (this is overridden by TXEN)
     4d2:	df 91       	pop	r29
	//	//TODO pmode break to get out of this loop
	//	end_pmode();
	//// clear HID reports if chip gets restarted
	//else
	//clearHIDReports();
}
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	08 95       	ret

000004da <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
*
*  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
*/
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     4da:	fc 01       	movw	r30, r24
     4dc:	20 89       	ldd	r18, Z+16	; 0x10
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState){
     4de:	20 ff       	sbrs	r18, 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <EVENT_CDC_Device_ControLineStateChanged+0xc>
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     4e2:	5f 98       	cbi	0x0b, 7	; 11
     4e4:	08 95       	ret
	}
	else{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     4e6:	5f 9a       	sbi	0x0b, 7	; 11
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
		PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     4e8:	8b b1       	in	r24, 0x0b	; 11
     4ea:	80 63       	ori	r24, 0x30	; 48
     4ec:	8b b9       	out	0x0b, r24	; 11
     4ee:	08 95       	ret

000004f0 <Endpoint_Write_Control_Stream_LE>:
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	20 91 42 02 	lds	r18, 0x0242
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f4:	30 91 43 02 	lds	r19, 0x0243
					NewReportItem.CollectionPath = CurrCollectionPath;
     4f8:	26 17       	cp	r18, r22
     4fa:	37 07       	cpc	r19, r23
     4fc:	48 f0       	brcs	.+18     	; 0x510 <Endpoint_Write_Control_Stream_LE+0x20>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4fe:	61 15       	cp	r22, r1
     500:	71 05       	cpc	r23, r1
     502:	39 f4       	brne	.+14     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x22>
     504:	20 91 e8 00 	lds	r18, 0x00E8

					if (UsageListSize)
     508:	2e 77       	andi	r18, 0x7E	; 126
     50a:	20 93 e8 00 	sts	0x00E8, r18
     50e:	01 c0       	rjmp	.+2      	; 0x512 <Endpoint_Write_Control_Stream_LE+0x22>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     510:	b9 01       	movw	r22, r18
     512:	9c 01       	movw	r18, r24
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	34 c0       	rjmp	.+104    	; 0x580 <Endpoint_Write_Control_Stream_LE+0x90>
     518:	90 91 3b 02 	lds	r25, 0x023B
     51c:	99 23       	and	r25, r25
     51e:	09 f4       	brne	.+2      	; 0x522 <Endpoint_Write_Control_Stream_LE+0x32>
     520:	43 c0       	rjmp	.+134    	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0xb8>
     522:	95 30       	cpi	r25, 0x05	; 5
     524:	09 f4       	brne	.+2      	; 0x528 <Endpoint_Write_Control_Stream_LE+0x38>

						for (uint8_t i = 1; i < UsageListSize; i++)
     526:	42 c0       	rjmp	.+132    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xbc>
     528:	90 91 e8 00 	lds	r25, 0x00E8
						  UsageList[i - 1] = UsageList[i];
     52c:	93 fd       	sbrc	r25, 3
     52e:	3a c0       	rjmp	.+116    	; 0x5a4 <Endpoint_Write_Control_Stream_LE+0xb4>
     530:	90 91 e8 00 	lds	r25, 0x00E8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     534:	92 fd       	sbrc	r25, 2
     536:	30 c0       	rjmp	.+96     	; 0x598 <Endpoint_Write_Control_Stream_LE+0xa8>
     538:	90 91 e8 00 	lds	r25, 0x00E8
     53c:	90 ff       	sbrs	r25, 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     53e:	20 c0       	rjmp	.+64     	; 0x580 <Endpoint_Write_Control_Stream_LE+0x90>
     540:	80 91 f2 00 	lds	r24, 0x00F2
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	f9 01       	movw	r30, r18
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     548:	82 1b       	sub	r24, r18
     54a:	93 0b       	sbc	r25, r19
     54c:	05 c0       	rjmp	.+10     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x68>
     54e:	21 91       	ld	r18, Z+
     550:	20 93 f1 00 	sts	0x00F1, r18
     554:	61 50       	subi	r22, 0x01	; 1
     556:	71 09       	sbc	r23, r1
     558:	9f 01       	movw	r18, r30
     55a:	28 0f       	add	r18, r24
     55c:	39 1f       	adc	r19, r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	61 15       	cp	r22, r1
     560:	71 05       	cpc	r23, r1
     562:	19 f0       	breq	.+6      	; 0x56a <Endpoint_Write_Control_Stream_LE+0x7a>
     564:	28 30       	cpi	r18, 0x08	; 8
     566:	31 05       	cpc	r19, r1
     568:	90 f3       	brcs	.-28     	; 0x54e <Endpoint_Write_Control_Stream_LE+0x5e>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	28 30       	cpi	r18, 0x08	; 8
     56e:	31 05       	cpc	r19, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	09 f0       	breq	.+2      	; 0x574 <Endpoint_Write_Control_Stream_LE+0x84>
     572:	80 e0       	ldi	r24, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	90 91 e8 00 	lds	r25, 0x00E8
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	9e 77       	andi	r25, 0x7E	; 126
     57a:	90 93 e8 00 	sts	0x00E8, r25
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57e:	9f 01       	movw	r18, r30
     580:	61 15       	cp	r22, r1
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	71 05       	cpc	r23, r1
     584:	49 f6       	brne	.-110    	; 0x518 <Endpoint_Write_Control_Stream_LE+0x28>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	81 11       	cpse	r24, r1
     588:	c7 cf       	rjmp	.-114    	; 0x518 <Endpoint_Write_Control_Stream_LE+0x28>
     58a:	06 c0       	rjmp	.+12     	; 0x598 <Endpoint_Write_Control_Stream_LE+0xa8>
     58c:	80 91 3b 02 	lds	r24, 0x023B
     590:	88 23       	and	r24, r24
     592:	51 f0       	breq	.+20     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0xb8>
     594:	85 30       	cpi	r24, 0x05	; 5
     596:	51 f0       	breq	.+20     	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xbc>
     598:	80 91 e8 00 	lds	r24, 0x00E8
     59c:	82 ff       	sbrs	r24, 2
     59e:	f6 cf       	rjmp	.-20     	; 0x58c <Endpoint_Write_Control_Stream_LE+0x9c>
     5a0:	80 e0       	ldi	r24, 0x00	; 0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a2:	08 95       	ret
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	08 95       	ret
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	08 95       	ret
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	08 95       	ret

000005b0 <Endpoint_Write_Control_PStream_LE>:
     5b0:	20 91 42 02 	lds	r18, 0x0242

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b4:	30 91 43 02 	lds	r19, 0x0243
     5b8:	26 17       	cp	r18, r22
     5ba:	37 07       	cpc	r19, r23
     5bc:	48 f0       	brcs	.+18     	; 0x5d0 <Endpoint_Write_Control_PStream_LE+0x20>
     5be:	61 15       	cp	r22, r1
     5c0:	71 05       	cpc	r23, r1
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x22>
     5c4:	20 91 e8 00 	lds	r18, 0x00E8
     5c8:	2e 77       	andi	r18, 0x7E	; 126
     5ca:	20 93 e8 00 	sts	0x00E8, r18
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x22>
     5d0:	b9 01       	movw	r22, r18
     5d2:	9c 01       	movw	r18, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	35 c0       	rjmp	.+106    	; 0x642 <Endpoint_Write_Control_PStream_LE+0x92>
     5d8:	90 91 3b 02 	lds	r25, 0x023B
     5dc:	99 23       	and	r25, r25
     5de:	09 f4       	brne	.+2      	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x32>
     5e0:	44 c0       	rjmp	.+136    	; 0x66a <Endpoint_Write_Control_PStream_LE+0xba>
     5e2:	95 30       	cpi	r25, 0x05	; 5
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x38>
     5e6:	43 c0       	rjmp	.+134    	; 0x66e <Endpoint_Write_Control_PStream_LE+0xbe>
     5e8:	90 91 e8 00 	lds	r25, 0x00E8
     5ec:	93 fd       	sbrc	r25, 3
     5ee:	3b c0       	rjmp	.+118    	; 0x666 <Endpoint_Write_Control_PStream_LE+0xb6>
     5f0:	90 91 e8 00 	lds	r25, 0x00E8

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	92 fd       	sbrc	r25, 2
     5f6:	31 c0       	rjmp	.+98     	; 0x65a <Endpoint_Write_Control_PStream_LE+0xaa>
     5f8:	90 91 e8 00 	lds	r25, 0x00E8
					  return HID_PARSE_InsufficientReportItems;
     5fc:	90 ff       	sbrs	r25, 0

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5fe:	21 c0       	rjmp	.+66     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x92>
     600:	80 91 f2 00 	lds	r24, 0x00F2
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	f9 01       	movw	r30, r18
     608:	82 1b       	sub	r24, r18
     60a:	93 0b       	sbc	r25, r19
     60c:	06 c0       	rjmp	.+12     	; 0x61a <Endpoint_Write_Control_PStream_LE+0x6a>
     60e:	24 91       	lpm	r18, Z+
     610:	20 93 f1 00 	sts	0x00F1, r18
     614:	31 96       	adiw	r30, 0x01	; 1
     616:	61 50       	subi	r22, 0x01	; 1
     618:	71 09       	sbc	r23, r1
     61a:	9c 01       	movw	r18, r24
     61c:	2e 0f       	add	r18, r30
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     61e:	3f 1f       	adc	r19, r31
     620:	61 15       	cp	r22, r1
     622:	71 05       	cpc	r23, r1
     624:	19 f0       	breq	.+6      	; 0x62c <Endpoint_Write_Control_PStream_LE+0x7c>
     626:	28 30       	cpi	r18, 0x08	; 8
     628:	31 05       	cpc	r19, r1
     62a:	88 f3       	brcs	.-30     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x5e>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	28 30       	cpi	r18, 0x08	; 8
     630:	31 05       	cpc	r19, r1
     632:	09 f0       	breq	.+2      	; 0x636 <Endpoint_Write_Control_PStream_LE+0x86>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 91 e8 00 	lds	r25, 0x00E8
     63a:	9e 77       	andi	r25, 0x7E	; 126
     63c:	90 93 e8 00 	sts	0x00E8, r25
     640:	9f 01       	movw	r18, r30
     642:	61 15       	cp	r22, r1
     644:	71 05       	cpc	r23, r1
     646:	41 f6       	brne	.-112    	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x28>
     648:	81 11       	cpse	r24, r1
     64a:	c6 cf       	rjmp	.-116    	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x28>
     64c:	06 c0       	rjmp	.+12     	; 0x65a <Endpoint_Write_Control_PStream_LE+0xaa>
     64e:	80 91 3b 02 	lds	r24, 0x023B
     652:	88 23       	and	r24, r24
     654:	51 f0       	breq	.+20     	; 0x66a <Endpoint_Write_Control_PStream_LE+0xba>
     656:	85 30       	cpi	r24, 0x05	; 5
     658:	51 f0       	breq	.+20     	; 0x66e <Endpoint_Write_Control_PStream_LE+0xbe>
     65a:	80 91 e8 00 	lds	r24, 0x00E8
     65e:	82 ff       	sbrs	r24, 2
     660:	f6 cf       	rjmp	.-20     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x9e>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	08 95       	ret
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	08 95       	ret
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	08 95       	ret
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	08 95       	ret

00000672 <Endpoint_ConfigureEndpoint_Prv>:
     672:	98 2f       	mov	r25, r24
     674:	2c c0       	rjmp	.+88     	; 0x6ce <Endpoint_ConfigureEndpoint_Prv+0x5c>
     676:	90 93 e9 00 	sts	0x00E9, r25
     67a:	98 17       	cp	r25, r24
     67c:	39 f0       	breq	.+14     	; 0x68c <Endpoint_ConfigureEndpoint_Prv+0x1a>
					  ParserData->TotalReportItems++;
     67e:	70 91 ec 00 	lds	r23, 0x00EC
     682:	20 91 ed 00 	lds	r18, 0x00ED
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     686:	50 91 f0 00 	lds	r21, 0x00F0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     68a:	03 c0       	rjmp	.+6      	; 0x692 <Endpoint_ConfigureEndpoint_Prv+0x20>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     68c:	24 2f       	mov	r18, r20
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     68e:	76 2f       	mov	r23, r22
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	21 fd       	sbrc	r18, 1
     694:	02 c0       	rjmp	.+4      	; 0x69a <Endpoint_ConfigureEndpoint_Prv+0x28>
     696:	9f 5f       	subi	r25, 0xFF	; 255
     698:	1a c0       	rjmp	.+52     	; 0x6ce <Endpoint_ConfigureEndpoint_Prv+0x5c>
     69a:	30 91 eb 00 	lds	r19, 0x00EB
     69e:	3e 7f       	andi	r19, 0xFE	; 254
     6a0:	30 93 eb 00 	sts	0x00EB, r19
     6a4:	30 91 ed 00 	lds	r19, 0x00ED
     6a8:	3d 7f       	andi	r19, 0xFD	; 253
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6aa:	30 93 ed 00 	sts	0x00ED, r19
     6ae:	30 91 eb 00 	lds	r19, 0x00EB
     6b2:	31 60       	ori	r19, 0x01	; 1
     6b4:	30 93 eb 00 	sts	0x00EB, r19
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6b8:	70 93 ec 00 	sts	0x00EC, r23

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6bc:	20 93 ed 00 	sts	0x00ED, r18
     6c0:	50 93 f0 00 	sts	0x00F0, r21
     6c4:	20 91 ee 00 	lds	r18, 0x00EE
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6c8:	27 fd       	sbrc	r18, 7
     6ca:	e5 cf       	rjmp	.-54     	; 0x696 <Endpoint_ConfigureEndpoint_Prv+0x24>
     6cc:	07 c0       	rjmp	.+14     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x6a>
     6ce:	95 30       	cpi	r25, 0x05	; 5
     6d0:	90 f2       	brcs	.-92     	; 0x676 <Endpoint_ConfigureEndpoint_Prv+0x4>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6d2:	8f 70       	andi	r24, 0x0F	; 15
     6d4:	80 93 e9 00 	sts	0x00E9, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	08 95       	ret
     6dc:	80 e0       	ldi	r24, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6de:	08 95       	ret

000006e0 <Endpoint_ConfigureEndpointTable>:
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	06 2f       	mov	r16, r22
     6ea:	ec 01       	movw	r28, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	2e c0       	rjmp	.+92     	; 0x74c <Endpoint_ConfigureEndpointTable+0x6c>
     6f0:	98 81       	ld	r25, Y
     6f2:	91 11       	cpse	r25, r1
	  return HID_PARSE_NoUnfilteredReportItems;
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <Endpoint_ConfigureEndpointTable+0x1c>
     6f6:	1f 5f       	subi	r17, 0xFF	; 255

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6f8:	25 96       	adiw	r28, 0x05	; 5
     6fa:	28 c0       	rjmp	.+80     	; 0x74c <Endpoint_ConfigureEndpointTable+0x6c>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6fc:	2c 81       	ldd	r18, Y+4	; 0x04
     6fe:	e9 81       	ldd	r30, Y+1	; 0x01
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     700:	fa 81       	ldd	r31, Y+2	; 0x02
     702:	6b 81       	ldd	r22, Y+3	; 0x03
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     704:	89 2f       	mov	r24, r25
     706:	8f 70       	andi	r24, 0x0F	; 15

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     708:	85 30       	cpi	r24, 0x05	; 5
     70a:	10 f0       	brcs	.+4      	; 0x710 <Endpoint_ConfigureEndpointTable+0x30>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	21 c0       	rjmp	.+66     	; 0x752 <Endpoint_ConfigureEndpointTable+0x72>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     710:	22 30       	cpi	r18, 0x02	; 2
     712:	10 f0       	brcs	.+4      	; 0x718 <Endpoint_ConfigureEndpointTable+0x38>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     714:	56 e0       	ldi	r21, 0x06	; 6
     716:	01 c0       	rjmp	.+2      	; 0x71a <Endpoint_ConfigureEndpointTable+0x3a>
     718:	52 e0       	ldi	r21, 0x02	; 2
     71a:	28 e0       	ldi	r18, 0x08	; 8

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	03 c0       	rjmp	.+6      	; 0x728 <Endpoint_ConfigureEndpointTable+0x48>
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	2e 17       	cp	r18, r30
     72a:	3f 07       	cpc	r19, r31
     72c:	d0 f3       	brcs	.-12     	; 0x722 <Endpoint_ConfigureEndpointTable+0x42>
     72e:	42 95       	swap	r20
     730:	40 7f       	andi	r20, 0xF0	; 240
     732:	45 2b       	or	r20, r21
     734:	99 1f       	adc	r25, r25
     736:	99 27       	eor	r25, r25
     738:	99 1f       	adc	r25, r25
     73a:	62 95       	swap	r22
     73c:	66 0f       	add	r22, r22
     73e:	66 0f       	add	r22, r22
     740:	60 7c       	andi	r22, 0xC0	; 192
     742:	69 2b       	or	r22, r25
     744:	96 df       	rcall	.-212    	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
     746:	81 11       	cpse	r24, r1
     748:	d6 cf       	rjmp	.-84     	; 0x6f6 <Endpoint_ConfigureEndpointTable+0x16>
     74a:	e0 cf       	rjmp	.-64     	; 0x70c <Endpoint_ConfigureEndpointTable+0x2c>
     74c:	10 13       	cpse	r17, r16
     74e:	d0 cf       	rjmp	.-96     	; 0x6f0 <Endpoint_ConfigureEndpointTable+0x10>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     750:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     752:	df 91       	pop	r29
}
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <Endpoint_ClearStatusStage>:
		Endpoint_DisableEndpoint();
	}
}

void Endpoint_ClearStatusStage(void)
{
     75c:	80 91 3c 02 	lds	r24, 0x023C
     760:	87 fd       	sbrc	r24, 7
     762:	05 c0       	rjmp	.+10     	; 0x76e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     764:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     768:	80 ff       	sbrs	r24, 0
     76a:	0e c0       	rjmp	.+28     	; 0x788 <Endpoint_ClearStatusStage+0x2c>
     76c:	12 c0       	rjmp	.+36     	; 0x792 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     772:	82 fd       	sbrc	r24, 2
     774:	05 c0       	rjmp	.+10     	; 0x780 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     776:	80 91 3b 02 	lds	r24, 0x023B
     77a:	81 11       	cpse	r24, r1
     77c:	f8 cf       	rjmp	.-16     	; 0x76e <Endpoint_ClearStatusStage+0x12>
     77e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     780:	80 91 e8 00 	lds	r24, 0x00E8
     784:	8b 77       	andi	r24, 0x7B	; 123
     786:	08 c0       	rjmp	.+16     	; 0x798 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     788:	80 91 3b 02 	lds	r24, 0x023B
     78c:	81 11       	cpse	r24, r1
     78e:	ea cf       	rjmp	.-44     	; 0x764 <Endpoint_ClearStatusStage+0x8>
     790:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     792:	80 91 e8 00 	lds	r24, 0x00E8
     796:	8e 77       	andi	r24, 0x7E	; 126
     798:	80 93 e8 00 	sts	0x00E8, r24
     79c:	08 95       	ret

0000079e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     79e:	80 91 e4 00 	lds	r24, 0x00E4
     7a2:	90 91 e5 00 	lds	r25, 0x00E5
     7a6:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7a8:	20 91 ec 00 	lds	r18, 0x00EC
     7ac:	20 fd       	sbrc	r18, 0
     7ae:	1f c0       	rjmp	.+62     	; 0x7ee <Endpoint_WaitUntilReady+0x50>
     7b0:	23 c0       	rjmp	.+70     	; 0x7f8 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7b2:	20 91 3b 02 	lds	r18, 0x023B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7b6:	22 23       	and	r18, r18
     7b8:	91 f0       	breq	.+36     	; 0x7de <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7ba:	25 30       	cpi	r18, 0x05	; 5
     7bc:	91 f0       	breq	.+36     	; 0x7e2 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7be:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7c2:	25 fd       	sbrc	r18, 5
     7c4:	10 c0       	rjmp	.+32     	; 0x7e6 <Endpoint_WaitUntilReady+0x48>
     7c6:	20 91 e4 00 	lds	r18, 0x00E4
     7ca:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7ce:	28 17       	cp	r18, r24
     7d0:	39 07       	cpc	r19, r25
     7d2:	51 f3       	breq	.-44     	; 0x7a8 <Endpoint_WaitUntilReady+0xa>
     7d4:	41 50       	subi	r20, 0x01	; 1
     7d6:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7d8:	39 f7       	brne	.-50     	; 0x7a8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ee:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7f2:	20 ff       	sbrs	r18, 0
     7f4:	de cf       	rjmp	.-68     	; 0x7b2 <Endpoint_WaitUntilReady+0x14>
     7f6:	f9 cf       	rjmp	.-14     	; 0x7ea <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7f8:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7fc:	22 ff       	sbrs	r18, 2
     7fe:	d9 cf       	rjmp	.-78     	; 0x7b2 <Endpoint_WaitUntilReady+0x14>
     800:	f4 cf       	rjmp	.-24     	; 0x7ea <Endpoint_WaitUntilReady+0x4c>

00000802 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     802:	41 d0       	rcall	.+130    	; 0x886 <USB_INT_DisableAllInterrupts>
     804:	43 d0       	rcall	.+134    	; 0x88c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     806:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     80a:	8f 77       	andi	r24, 0x7F	; 127
     80c:	80 93 d8 00 	sts	0x00D8, r24
     810:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     814:	80 68       	ori	r24, 0x80	; 128
     816:	80 93 d8 00 	sts	0x00D8, r24
     81a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     81e:	8f 7d       	andi	r24, 0xDF	; 223
     820:	80 93 d8 00 	sts	0x00D8, r24
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     828:	86 e0       	ldi	r24, 0x06	; 6
     82a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     82c:	09 b4       	in	r0, 0x29	; 41
     82e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     830:	fd cf       	rjmp	.-6      	; 0x82c <USB_ResetInterface+0x2a>
     832:	10 92 3b 02 	sts	0x023B, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     836:	10 92 37 02 	sts	0x0237, r1
	USB_Device_ConfigurationNumber  = 0;
     83a:	10 92 39 02 	sts	0x0239, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     83e:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	14 df       	rcall	.-472    	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
     84a:	80 91 e1 00 	lds	r24, 0x00E1
     84e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     850:	80 93 e1 00 	sts	0x00E1, r24
     854:	80 91 e2 00 	lds	r24, 0x00E2
     858:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     85a:	80 93 e2 00 	sts	0x00E2, r24
     85e:	80 91 e2 00 	lds	r24, 0x00E2
     862:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     864:	80 93 e2 00 	sts	0x00E2, r24
     868:	80 91 e0 00 	lds	r24, 0x00E0
     86c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     86e:	80 93 e0 00 	sts	0x00E0, r24
     872:	08 95       	ret

00000874 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     874:	e3 e6       	ldi	r30, 0x63	; 99
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	8e 7f       	andi	r24, 0xFE	; 254
     87c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 3a 02 	sts	0x023A, r24

	USB_ResetInterface();
     884:	be cf       	rjmp	.-132    	; 0x802 <USB_ResetInterface>

00000886 <USB_INT_DisableAllInterrupts>:
     886:	10 92 e2 00 	sts	0x00E2, r1
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     88a:	08 95       	ret

0000088c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     88c:	10 92 e1 00 	sts	0x00E1, r1
     890:	08 95       	ret

00000892 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8b4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8b8:	82 ff       	sbrs	r24, 2
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8bc:	80 91 e2 00 	lds	r24, 0x00E2
     8c0:	82 ff       	sbrs	r24, 2
     8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8c4:	80 91 e1 00 	lds	r24, 0x00E1
     8c8:	8b 7f       	andi	r24, 0xFB	; 251
     8ca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8ce:	2e d2       	rcall	.+1116   	; 0xd2c <USB_Event_Stub>
     8d0:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8d4:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <__vector_11+0x74>
     8d8:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8dc:	80 ff       	sbrs	r24, 0
     8de:	13 c0       	rjmp	.+38     	; 0x906 <__vector_11+0x74>
     8e0:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
     8e6:	80 93 e2 00 	sts	0x00E2, r24
     8ea:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8ee:	80 61       	ori	r24, 0x10	; 16
     8f0:	80 93 e2 00 	sts	0x00E2, r24
     8f4:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8f8:	80 62       	ori	r24, 0x20	; 32
     8fa:	80 93 d8 00 	sts	0x00D8, r24
     8fe:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     900:	10 92 3b 02 	sts	0x023B, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     904:	10 dd       	rcall	.-1504   	; 0x326 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     906:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     90a:	84 ff       	sbrs	r24, 4
     90c:	2f c0       	rjmp	.+94     	; 0x96c <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     90e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     912:	84 ff       	sbrs	r24, 4
     914:	2b c0       	rjmp	.+86     	; 0x96c <__vector_11+0xda>
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     91e:	09 b4       	in	r0, 0x29	; 41
     920:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     922:	fd cf       	rjmp	.-6      	; 0x91e <__vector_11+0x8c>
     924:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     928:	8f 7d       	andi	r24, 0xDF	; 223
     92a:	80 93 d8 00 	sts	0x00D8, r24
     92e:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     932:	8f 7e       	andi	r24, 0xEF	; 239
     934:	80 93 e1 00 	sts	0x00E1, r24
     938:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     93c:	8f 7e       	andi	r24, 0xEF	; 239
     93e:	80 93 e2 00 	sts	0x00E2, r24
     942:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 93 e2 00 	sts	0x00E2, r24
     94c:	80 91 37 02 	lds	r24, 0x0237
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     950:	88 23       	and	r24, r24
     952:	11 f0       	breq	.+4      	; 0x958 <__vector_11+0xc6>
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	07 c0       	rjmp	.+14     	; 0x966 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     958:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     95c:	87 ff       	sbrs	r24, 7
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	01 c0       	rjmp	.+2      	; 0x966 <__vector_11+0xd4>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 3b 02 	sts	0x023B, r24
     96a:	dc dc       	rcall	.-1608   	; 0x324 <EVENT_USB_Device_Connect>
     96c:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     970:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     972:	27 c0       	rjmp	.+78     	; 0x9c2 <__vector_11+0x130>
     974:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     978:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     97a:	23 c0       	rjmp	.+70     	; 0x9c2 <__vector_11+0x130>
     97c:	80 91 e1 00 	lds	r24, 0x00E1
     980:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     982:	80 93 e1 00 	sts	0x00E1, r24
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	80 93 3b 02 	sts	0x023B, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     98c:	10 92 37 02 	sts	0x0237, r1
     990:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     994:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     996:	80 93 e1 00 	sts	0x00E1, r24
     99a:	80 91 e2 00 	lds	r24, 0x00E2
     99e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9a0:	80 93 e2 00 	sts	0x00E2, r24
     9a4:	80 91 e2 00 	lds	r24, 0x00E2
     9a8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9aa:	80 93 e2 00 	sts	0x00E2, r24
     9ae:	42 e0       	ldi	r20, 0x02	; 2
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9b4:	5e de       	rcall	.-836    	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
     9b6:	80 91 f0 00 	lds	r24, 0x00F0
     9ba:	88 60       	ori	r24, 0x08	; 8
     9bc:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9c0:	b5 d1       	rcall	.+874    	; 0xd2c <USB_Event_Stub>
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	cf 93       	push	r28
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a08:	80 91 e9 00 	lds	r24, 0x00E9
     a0c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a0e:	90 91 ec 00 	lds	r25, 0x00EC
     a12:	90 ff       	sbrs	r25, 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <__vector_12+0x36>
     a16:	90 e8       	ldi	r25, 0x80	; 128
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <__vector_12+0x38>
     a1a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a1c:	c9 2f       	mov	r28, r25
     a1e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a20:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a24:	80 91 f0 00 	lds	r24, 0x00F0
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a2e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a30:	1c d0       	rcall	.+56     	; 0xa6a <USB_Device_ProcessControlRequest>
     a32:	10 92 e9 00 	sts	0x00E9, r1
     a36:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a3a:	88 60       	ori	r24, 0x08	; 8
     a3c:	80 93 f0 00 	sts	0x00F0, r24
     a40:	cf 70       	andi	r28, 0x0F	; 15
     a42:	c0 93 e9 00 	sts	0x00E9, r28
     a46:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a48:	ef 91       	pop	r30
     a4a:	cf 91       	pop	r28
     a4c:	bf 91       	pop	r27
     a4e:	af 91       	pop	r26
     a50:	9f 91       	pop	r25
     a52:	8f 91       	pop	r24
     a54:	7f 91       	pop	r23
     a56:	6f 91       	pop	r22
     a58:	5f 91       	pop	r21
     a5a:	4f 91       	pop	r20
     a5c:	3f 91       	pop	r19
     a5e:	2f 91       	pop	r18
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <USB_Device_ProcessControlRequest>:
     a6a:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	ac 97       	sbiw	r28, 0x2c	; 44
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a80:	ec e3       	ldi	r30, 0x3C	; 60
     a82:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a84:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a88:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a8a:	22 e0       	ldi	r18, 0x02	; 2
     a8c:	e4 34       	cpi	r30, 0x44	; 68
     a8e:	f2 07       	cpc	r31, r18
     a90:	c9 f7       	brne	.-14     	; 0xa84 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a92:	4d dc       	rcall	.-1894   	; 0x32e <EVENT_USB_Device_ControlRequest>
     a94:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a98:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a9a:	30 c1       	rjmp	.+608    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     a9c:	80 91 3c 02 	lds	r24, 0x023C
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     aa0:	90 91 3d 02 	lds	r25, 0x023D

		switch (USB_ControlRequest.bRequest)
     aa4:	95 30       	cpi	r25, 0x05	; 5
     aa6:	09 f4       	brne	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x40>
     aa8:	87 c0       	rjmp	.+270    	; 0xbb8 <USB_Device_ProcessControlRequest+0x14e>
     aaa:	38 f4       	brcc	.+14     	; 0xaba <USB_Device_ProcessControlRequest+0x50>
     aac:	91 30       	cpi	r25, 0x01	; 1
     aae:	b1 f1       	breq	.+108    	; 0xb1c <USB_Device_ProcessControlRequest+0xb2>
     ab0:	70 f0       	brcs	.+28     	; 0xace <USB_Device_ProcessControlRequest+0x64>
     ab2:	93 30       	cpi	r25, 0x03	; 3
     ab4:	09 f0       	breq	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0x4e>
     ab6:	22 c1       	rjmp	.+580    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     ab8:	31 c0       	rjmp	.+98     	; 0xb1c <USB_Device_ProcessControlRequest+0xb2>
     aba:	98 30       	cpi	r25, 0x08	; 8
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x56>
     abe:	f3 c0       	rjmp	.+486    	; 0xca6 <USB_Device_ProcessControlRequest+0x23c>
     ac0:	99 30       	cpi	r25, 0x09	; 9
     ac2:	09 f4       	brne	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x5c>
     ac4:	ff c0       	rjmp	.+510    	; 0xcc4 <USB_Device_ProcessControlRequest+0x25a>
     ac6:	96 30       	cpi	r25, 0x06	; 6
     ac8:	09 f0       	breq	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x62>
     aca:	18 c1       	rjmp	.+560    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     acc:	9b c0       	rjmp	.+310    	; 0xc04 <USB_Device_ProcessControlRequest+0x19a>
     ace:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ad0:	21 f0       	breq	.+8      	; 0xada <USB_Device_ProcessControlRequest+0x70>
     ad2:	82 38       	cpi	r24, 0x82	; 130
     ad4:	09 f0       	breq	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x6e>
     ad6:	12 c1       	rjmp	.+548    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <USB_Device_ProcessControlRequest+0x80>
     ada:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ade:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ae2:	99 23       	and	r25, r25
     ae4:	89 f0       	breq	.+34     	; 0xb08 <USB_Device_ProcessControlRequest+0x9e>
     ae6:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ae8:	0f c0       	rjmp	.+30     	; 0xb08 <USB_Device_ProcessControlRequest+0x9e>
     aea:	80 91 40 02 	lds	r24, 0x0240
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aee:	90 91 41 02 	lds	r25, 0x0241
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	99 27       	eor	r25, r25
     af6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     afa:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     afe:	85 fb       	bst	r24, 5
     b00:	88 27       	eor	r24, r24
     b02:	80 f9       	bld	r24, 0
     b04:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b08:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b0c:	97 7f       	andi	r25, 0xF7	; 247
     b0e:	90 93 e8 00 	sts	0x00E8, r25
     b12:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b16:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b1a:	d0 c0       	rjmp	.+416    	; 0xcbc <USB_Device_ProcessControlRequest+0x252>
     b1c:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b1e:	19 f0       	breq	.+6      	; 0xb26 <USB_Device_ProcessControlRequest+0xbc>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0xbc>
     b24:	eb c0       	rjmp	.+470    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     b26:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b28:	21 f0       	breq	.+8      	; 0xb32 <USB_Device_ProcessControlRequest+0xc8>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	09 f0       	breq	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0xc6>
     b2e:	e6 c0       	rjmp	.+460    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     b30:	0b c0       	rjmp	.+22     	; 0xb48 <USB_Device_ProcessControlRequest+0xde>
     b32:	80 91 3e 02 	lds	r24, 0x023E
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0xd2>
     b3a:	e0 c0       	rjmp	.+448    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     b3c:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0xd8>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	80 93 39 02 	sts	0x0239, r24
     b46:	2f c0       	rjmp	.+94     	; 0xba6 <USB_Device_ProcessControlRequest+0x13c>
     b48:	80 91 3e 02 	lds	r24, 0x023E

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b4c:	81 11       	cpse	r24, r1
     b4e:	2b c0       	rjmp	.+86     	; 0xba6 <USB_Device_ProcessControlRequest+0x13c>
     b50:	80 91 40 02 	lds	r24, 0x0240
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b54:	90 91 41 02 	lds	r25, 0x0241
     b58:	8f 70       	andi	r24, 0x0F	; 15
     b5a:	99 27       	eor	r25, r25
     b5c:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b5e:	09 f4       	brne	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0xf8>
     b60:	cd c0       	rjmp	.+410    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     b62:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b66:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b6a:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b6c:	1c c0       	rjmp	.+56     	; 0xba6 <USB_Device_ProcessControlRequest+0x13c>
     b6e:	20 91 3d 02 	lds	r18, 0x023D
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b72:	23 30       	cpi	r18, 0x03	; 3
     b74:	21 f4       	brne	.+8      	; 0xb7e <USB_Device_ProcessControlRequest+0x114>
     b76:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b7a:	80 62       	ori	r24, 0x20	; 32
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <USB_Device_ProcessControlRequest+0x138>
     b7e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b82:	90 61       	ori	r25, 0x10	; 16
     b84:	90 93 eb 00 	sts	0x00EB, r25
     b88:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0x126>
     b8e:	22 0f       	add	r18, r18
     b90:	8a 95       	dec	r24
     b92:	ea f7       	brpl	.-6      	; 0xb8e <USB_Device_ProcessControlRequest+0x124>
     b94:	20 93 ea 00 	sts	0x00EA, r18
     b98:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b9c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	80 93 eb 00 	sts	0x00EB, r24
     ba6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     baa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	80 93 e8 00 	sts	0x00E8, r24
     bb4:	d3 dd       	rcall	.-1114   	; 0x75c <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bb6:	a2 c0       	rjmp	.+324    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     bb8:	81 11       	cpse	r24, r1
     bba:	a0 c0       	rjmp	.+320    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bbc:	80 91 3e 02 	lds	r24, 0x023E
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bc0:	90 91 3f 02 	lds	r25, 0x023F
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	99 27       	eor	r25, r25
     bc8:	18 2f       	mov	r17, r24
     bca:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bce:	90 78       	andi	r25, 0x80	; 128
     bd0:	98 2b       	or	r25, r24
     bd2:	90 93 e3 00 	sts	0x00E3, r25
     bd6:	80 91 e8 00 	lds	r24, 0x00E8
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	80 93 e8 00 	sts	0x00E8, r24
     be0:	bd dd       	rcall	.-1158   	; 0x75c <Endpoint_ClearStatusStage>
     be2:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     be6:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     be8:	fc cf       	rjmp	.-8      	; 0xbe2 <USB_Device_ProcessControlRequest+0x178>
     bea:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     bee:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bf0:	80 93 e3 00 	sts	0x00E3, r24
     bf4:	11 23       	and	r17, r17
     bf6:	11 f0       	breq	.+4      	; 0xbfc <USB_Device_ProcessControlRequest+0x192>
     bf8:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <USB_Device_ProcessControlRequest+0x194>
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	80 93 3b 02 	sts	0x023B, r24
     c02:	7c c0       	rjmp	.+248    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     c04:	80 58       	subi	r24, 0x80	; 128
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	08 f0       	brcs	.+2      	; 0xc0c <USB_Device_ProcessControlRequest+0x1a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c0a:	78 c0       	rjmp	.+240    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     c0c:	80 91 3e 02 	lds	r24, 0x023E
     c10:	90 91 3f 02 	lds	r25, 0x023F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c14:	8c 3d       	cpi	r24, 0xDC	; 220
     c16:	23 e0       	ldi	r18, 0x03	; 3
     c18:	92 07       	cpc	r25, r18
     c1a:	71 f5       	brne	.+92     	; 0xc78 <USB_Device_ProcessControlRequest+0x20e>
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	8a 83       	std	Y+2, r24	; 0x02
     c20:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c26:	f8 94       	cli
     c28:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c2a:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c2c:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     c2e:	3e e0       	ldi	r19, 0x0E	; 14
     c30:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c32:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c34:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c36:	50 93 57 00 	sts	0x0057, r21
     c3a:	e4 91       	lpm	r30, Z+
     c3c:	20 ff       	sbrs	r18, 0
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <USB_Device_ProcessControlRequest+0x1dc>
     c40:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     c42:	ef 70       	andi	r30, 0x0F	; 15
     c44:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     c46:	ef 70       	andi	r30, 0x0F	; 15
     c48:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     c4a:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     c4c:	ea 30       	cpi	r30, 0x0A	; 10
     c4e:	10 f0       	brcs	.+4      	; 0xc54 <USB_Device_ProcessControlRequest+0x1ea>
     c50:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0x1ec>
     c54:	c0 96       	adiw	r24, 0x30	; 48
     c56:	8d 93       	st	X+, r24
     c58:	9d 93       	st	X+, r25
     c5a:	2f 5f       	subi	r18, 0xFF	; 255
     c5c:	24 31       	cpi	r18, 0x14	; 20
     c5e:	49 f7       	brne	.-46     	; 0xc32 <USB_Device_ProcessControlRequest+0x1c8>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c60:	4f bf       	out	0x3f, r20	; 63
     c62:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c66:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c68:	80 93 e8 00 	sts	0x00E8, r24
     c6c:	6a e2       	ldi	r22, 0x2A	; 42
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	3d dc       	rcall	.-1926   	; 0x4f0 <Endpoint_Write_Control_Stream_LE>
     c76:	11 c0       	rjmp	.+34     	; 0xc9a <USB_Device_ProcessControlRequest+0x230>
     c78:	ae 01       	movw	r20, r28
     c7a:	45 5d       	subi	r20, 0xD5	; 213
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	60 91 40 02 	lds	r22, 0x0240
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c82:	93 db       	rcall	.-2266   	; 0x3aa <CALLBACK_USB_GetDescriptor>
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	d1 f1       	breq	.+116    	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     c88:	20 91 e8 00 	lds	r18, 0x00E8
     c8c:	27 7f       	andi	r18, 0xF7	; 247
     c8e:	20 93 e8 00 	sts	0x00E8, r18
     c92:	bc 01       	movw	r22, r24
     c94:	8b a5       	ldd	r24, Y+43	; 0x2b
     c96:	9c a5       	ldd	r25, Y+44	; 0x2c
     c98:	8b dc       	rcall	.-1770   	; 0x5b0 <Endpoint_Write_Control_PStream_LE>
     c9a:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c9e:	8b 77       	andi	r24, 0x7B	; 123
     ca0:	80 93 e8 00 	sts	0x00E8, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ca6:	80 38       	cpi	r24, 0x80	; 128
     ca8:	49 f5       	brne	.+82     	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
     caa:	80 91 e8 00 	lds	r24, 0x00E8
     cae:	87 7f       	andi	r24, 0xF7	; 247
     cb0:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cb4:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cb8:	80 93 f1 00 	sts	0x00F1, r24
     cbc:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cc0:	8e 77       	andi	r24, 0x7E	; 126
     cc2:	76 cf       	rjmp	.-276    	; 0xbb0 <USB_Device_ProcessControlRequest+0x146>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc4:	81 11       	cpse	r24, r1
     cc6:	1a c0       	rjmp	.+52     	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc8:	90 91 3e 02 	lds	r25, 0x023E
     ccc:	92 30       	cpi	r25, 0x02	; 2
     cce:	b0 f4       	brcc	.+44     	; 0xcfc <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cd0:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	80 93 e8 00 	sts	0x00E8, r24
     cda:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cde:	3e dd       	rcall	.-1412   	; 0x75c <Endpoint_ClearStatusStage>
     ce0:	80 91 37 02 	lds	r24, 0x0237
     ce4:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <USB_Device_ProcessControlRequest+0x286>
     ce8:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cec:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USB_Device_ProcessControlRequest+0x28a>
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <USB_Device_ProcessControlRequest+0x28c>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cf6:	80 93 3b 02 	sts	0x023B, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cfa:	16 db       	rcall	.-2516   	; 0x328 <EVENT_USB_Device_ConfigurationChanged>
     cfc:	80 91 e8 00 	lds	r24, 0x00E8
     d00:	83 ff       	sbrs	r24, 3
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <USB_Device_ProcessControlRequest+0x2ae>
     d04:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d08:	87 7f       	andi	r24, 0xF7	; 247
     d0a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d0e:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d12:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d14:	80 93 eb 00 	sts	0x00EB, r24
     d18:	ac 96       	adiw	r28, 0x2c	; 44
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d28:	1f 91       	pop	r17
     d2a:	08 95       	ret

00000d2c <USB_Event_Stub>:
     d2c:	08 95       	ret

00000d2e <USB_USBTask>:
     d2e:	cf 93       	push	r28
     d30:	80 91 3b 02 	lds	r24, 0x023B
     d34:	88 23       	and	r24, r24
     d36:	a9 f0       	breq	.+42     	; 0xd62 <USB_USBTask+0x34>
     d38:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d3c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d3e:	90 91 ec 00 	lds	r25, 0x00EC
     d42:	90 ff       	sbrs	r25, 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <USB_USBTask+0x1c>
     d46:	90 e8       	ldi	r25, 0x80	; 128
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <USB_USBTask+0x1e>
     d4a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d4c:	c9 2f       	mov	r28, r25
     d4e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d50:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d54:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d58:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d5a:	87 de       	rcall	.-754    	; 0xa6a <USB_Device_ProcessControlRequest>
     d5c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d5e:	c0 93 e9 00 	sts	0x00E9, r28
     d62:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d64:	08 95       	ret

00000d66 <CDC_Device_ConfigureEndpoints>:
     d66:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     d6c:	40 96       	adiw	r24, 0x10	; 16
     d6e:	fc 01       	movw	r30, r24
     d70:	8b e0       	ldi	r24, 0x0B	; 11
     d72:	df 01       	movw	r26, r30
     d74:	1d 92       	st	X+, r1
     d76:	8a 95       	dec	r24
     d78:	e9 f7       	brne	.-6      	; 0xd74 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     d7e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	aa dc       	rcall	.-1708   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     d8c:	88 23       	and	r24, r24
     d8e:	61 f0       	breq	.+24     	; 0xda8 <CDC_Device_ConfigureEndpoints+0x42>
     d90:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     d92:	ce 01       	movw	r24, r28
     d94:	06 96       	adiw	r24, 0x06	; 6
     d96:	a4 dc       	rcall	.-1720   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     d98:	88 23       	and	r24, r24
     d9a:	31 f0       	breq	.+12     	; 0xda8 <CDC_Device_ConfigureEndpoints+0x42>
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     da0:	0b 96       	adiw	r24, 0x0b	; 11
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
	  return false;

	return true;
}
     da6:	9c cc       	rjmp	.-1736   	; 0x6e0 <Endpoint_ConfigureEndpointTable>
     da8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
	  return false;

	return true;
}
     dae:	08 95       	ret

00000db0 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     db0:	cf 93       	push	r28
     db2:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     db4:	20 91 3b 02 	lds	r18, 0x023B
     db8:	24 30       	cpi	r18, 0x04	; 4
     dba:	f1 f4       	brne	.+60     	; 0xdf8 <CDC_Device_SendByte+0x48>
     dbc:	fc 01       	movw	r30, r24
     dbe:	44 89       	ldd	r20, Z+20	; 0x14
     dc0:	55 89       	ldd	r21, Z+21	; 0x15
     dc2:	66 89       	ldd	r22, Z+22	; 0x16
     dc4:	77 89       	ldd	r23, Z+23	; 0x17
     dc6:	45 2b       	or	r20, r21
     dc8:	46 2b       	or	r20, r22
     dca:	47 2b       	or	r20, r23
     dcc:	a9 f0       	breq	.+42     	; 0xdf8 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dce:	81 81       	ldd	r24, Z+1	; 0x01
     dd0:	8f 70       	andi	r24, 0x0F	; 15
     dd2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     dda:	85 ff       	sbrs	r24, 5
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dde:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de6:	80 91 e8 00 	lds	r24, 0x00E8
     dea:	8e 77       	andi	r24, 0x7E	; 126
     dec:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     df0:	d6 dc       	rcall	.-1620   	; 0x79e <Endpoint_WaitUntilReady>
     df2:	88 23       	and	r24, r24
     df4:	a1 f3       	breq	.-24     	; 0xdde <CDC_Device_SendByte+0x2e>
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <CDC_Device_SendByte+0x4a>
     df8:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     dfa:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     dfc:	08 95       	ret

00000dfe <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dfe:	20 91 3b 02 	lds	r18, 0x023B
     e02:	24 30       	cpi	r18, 0x04	; 4
     e04:	29 f5       	brne	.+74     	; 0xe50 <CDC_Device_Flush+0x52>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e06:	fc 01       	movw	r30, r24
     e08:	44 89       	ldd	r20, Z+20	; 0x14
     e0a:	55 89       	ldd	r21, Z+21	; 0x15
     e0c:	66 89       	ldd	r22, Z+22	; 0x16
     e0e:	77 89       	ldd	r23, Z+23	; 0x17
     e10:	45 2b       	or	r20, r21
     e12:	46 2b       	or	r20, r22
     e14:	47 2b       	or	r20, r23
     e16:	e1 f0       	breq	.+56     	; 0xe50 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	8f 70       	andi	r24, 0x0F	; 15
     e1c:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     e20:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e24:	81 11       	cpse	r24, r1
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <CDC_Device_Flush+0x2e>
	  return ENDPOINT_READYWAIT_NoError;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e2c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e30:	80 91 e8 00 	lds	r24, 0x00E8
     e34:	8e 77       	andi	r24, 0x7E	; 126
     e36:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e3a:	95 fd       	sbrc	r25, 5
     e3c:	f5 cf       	rjmp	.-22     	; 0xe28 <CDC_Device_Flush+0x2a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e3e:	af dc       	rcall	.-1698   	; 0x79e <Endpoint_WaitUntilReady>
     e40:	81 11       	cpse	r24, r1
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <CDC_Device_Flush+0x54>
     e44:	90 91 e8 00 	lds	r25, 0x00E8
     e48:	9e 77       	andi	r25, 0x7E	; 126
     e4a:	90 93 e8 00 	sts	0x00E8, r25
     e4e:	08 95       	ret
     e50:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e52:	08 95       	ret

00000e54 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e54:	20 91 3b 02 	lds	r18, 0x023B
     e58:	24 30       	cpi	r18, 0x04	; 4
     e5a:	89 f4       	brne	.+34     	; 0xe7e <CDC_Device_USBTask+0x2a>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e5c:	fc 01       	movw	r30, r24
     e5e:	44 89       	ldd	r20, Z+20	; 0x14
     e60:	55 89       	ldd	r21, Z+21	; 0x15
     e62:	66 89       	ldd	r22, Z+22	; 0x16
     e64:	77 89       	ldd	r23, Z+23	; 0x17
     e66:	45 2b       	or	r20, r21
     e68:	46 2b       	or	r20, r22
     e6a:	47 2b       	or	r20, r23
     e6c:	41 f0       	breq	.+16     	; 0xe7e <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e6e:	21 81       	ldd	r18, Z+1	; 0x01
     e70:	2f 70       	andi	r18, 0x0F	; 15
     e72:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e76:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     e7a:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     e7c:	c0 cf       	rjmp	.-128    	; 0xdfe <CDC_Device_Flush>
     e7e:	08 95       	ret

00000e80 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e80:	20 91 3b 02 	lds	r18, 0x023B
     e84:	24 30       	cpi	r18, 0x04	; 4
     e86:	19 f0       	breq	.+6      	; 0xe8e <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	24 c0       	rjmp	.+72     	; 0xed6 <CDC_Device_ReceiveByte+0x56>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e8e:	fc 01       	movw	r30, r24
     e90:	44 89       	ldd	r20, Z+20	; 0x14
     e92:	55 89       	ldd	r21, Z+21	; 0x15
     e94:	66 89       	ldd	r22, Z+22	; 0x16
     e96:	77 89       	ldd	r23, Z+23	; 0x17
     e98:	45 2b       	or	r20, r21
     e9a:	46 2b       	or	r20, r22
     e9c:	47 2b       	or	r20, r23
     e9e:	a1 f3       	breq	.-24     	; 0xe88 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea0:	86 81       	ldd	r24, Z+6	; 0x06
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ea8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     eac:	82 ff       	sbrs	r24, 2
     eae:	ec cf       	rjmp	.-40     	; 0xe88 <CDC_Device_ReceiveByte+0x8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     eb0:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     eb4:	88 23       	and	r24, r24
     eb6:	21 f0       	breq	.+8      	; 0xec0 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eb8:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ec0:	2f ef       	ldi	r18, 0xFF	; 255
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ec4:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     ec8:	81 11       	cpse	r24, r1
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ecc:	80 91 e8 00 	lds	r24, 0x00E8
     ed0:	8b 77       	andi	r24, 0x7B	; 123
     ed2:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     ed6:	c9 01       	movw	r24, r18
     ed8:	08 95       	ret

00000eda <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     eda:	08 95       	ret

00000edc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ee2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ee6:	83 ff       	sbrs	r24, 3
     ee8:	a7 c0       	rjmp	.+334    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     eea:	88 81       	ld	r24, Y
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	20 91 40 02 	lds	r18, 0x0240
     ef2:	30 91 41 02 	lds	r19, 0x0241
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	09 f0       	breq	.+2      	; 0xefe <CDC_Device_ProcessControlRequest+0x22>
     efc:	9d c0       	rjmp	.+314    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
     efe:	80 91 3d 02 	lds	r24, 0x023D
     f02:	81 32       	cpi	r24, 0x21	; 33
     f04:	61 f0       	breq	.+24     	; 0xf1e <CDC_Device_ProcessControlRequest+0x42>
     f06:	20 f4       	brcc	.+8      	; 0xf10 <CDC_Device_ProcessControlRequest+0x34>
     f08:	80 32       	cpi	r24, 0x20	; 32
     f0a:	09 f0       	breq	.+2      	; 0xf0e <CDC_Device_ProcessControlRequest+0x32>
     f0c:	95 c0       	rjmp	.+298    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
     f0e:	3d c0       	rjmp	.+122    	; 0xf8a <CDC_Device_ProcessControlRequest+0xae>
     f10:	82 32       	cpi	r24, 0x22	; 34
     f12:	09 f4       	brne	.+2      	; 0xf16 <CDC_Device_ProcessControlRequest+0x3a>
     f14:	6d c0       	rjmp	.+218    	; 0xff0 <CDC_Device_ProcessControlRequest+0x114>
     f16:	83 32       	cpi	r24, 0x23	; 35
     f18:	09 f0       	breq	.+2      	; 0xf1c <CDC_Device_ProcessControlRequest+0x40>
     f1a:	8e c0       	rjmp	.+284    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
     f1c:	7d c0       	rjmp	.+250    	; 0x1018 <CDC_Device_ProcessControlRequest+0x13c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f1e:	80 91 3c 02 	lds	r24, 0x023C
     f22:	81 3a       	cpi	r24, 0xA1	; 161
     f24:	09 f0       	breq	.+2      	; 0xf28 <CDC_Device_ProcessControlRequest+0x4c>
     f26:	88 c0       	rjmp	.+272    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f28:	80 91 e8 00 	lds	r24, 0x00E8
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f32:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f36:	80 ff       	sbrs	r24, 0
     f38:	fc cf       	rjmp	.-8      	; 0xf32 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f3a:	4c 89       	ldd	r20, Y+20	; 0x14
     f3c:	5d 89       	ldd	r21, Y+21	; 0x15
     f3e:	6e 89       	ldd	r22, Y+22	; 0x16
     f40:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f42:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f46:	bb 27       	eor	r27, r27
     f48:	a7 2f       	mov	r26, r23
     f4a:	96 2f       	mov	r25, r22
     f4c:	85 2f       	mov	r24, r21
     f4e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     f52:	cb 01       	movw	r24, r22
     f54:	aa 27       	eor	r26, r26
     f56:	bb 27       	eor	r27, r27
     f58:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     f5c:	47 2f       	mov	r20, r23
     f5e:	55 27       	eor	r21, r21
     f60:	66 27       	eor	r22, r22
     f62:	77 27       	eor	r23, r23
     f64:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     f68:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f6a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     f6e:	89 8d       	ldd	r24, Y+25	; 0x19
     f70:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     f74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f76:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
     f7e:	8e 77       	andi	r24, 0x7E	; 126
     f80:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f88:	e9 cb       	rjmp	.-2094   	; 0x75c <Endpoint_ClearStatusStage>
     f8a:	80 91 3c 02 	lds	r24, 0x023C
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f8e:	81 32       	cpi	r24, 0x21	; 33
     f90:	09 f0       	breq	.+2      	; 0xf94 <CDC_Device_ProcessControlRequest+0xb8>
     f92:	52 c0       	rjmp	.+164    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
     f94:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f98:	87 7f       	andi	r24, 0xF7	; 247
     f9a:	80 93 e8 00 	sts	0x00E8, r24
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <CDC_Device_ProcessControlRequest+0xce>
     fa0:	80 91 3b 02 	lds	r24, 0x023B
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <CDC_Device_ProcessControlRequest+0xce>
     fa8:	47 c0       	rjmp	.+142    	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
     faa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fae:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <CDC_Device_ProcessControlRequest+0xc4>
     fb2:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     fb6:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     fba:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     fbe:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     fc2:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     fc4:	2d 8b       	std	Y+21, r18	; 0x15
     fc6:	9e 8b       	std	Y+22, r25	; 0x16
     fc8:	8f 8b       	std	Y+23, r24	; 0x17
     fca:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fce:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     fd0:	80 91 f1 00 	lds	r24, 0x00F1
     fd4:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     fd6:	80 91 f1 00 	lds	r24, 0x00F1
     fda:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     fdc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fe0:	8b 77       	andi	r24, 0x7B	; 123
     fe2:	80 93 e8 00 	sts	0x00E8, r24
     fe6:	ba db       	rcall	.-2188   	; 0x75c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     fe8:	ce 01       	movw	r24, r28
     fea:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fec:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fee:	1a ca       	rjmp	.-3020   	; 0x424 <EVENT_CDC_Device_LineEncodingChanged>
     ff0:	80 91 3c 02 	lds	r24, 0x023C
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     ff4:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ff6:	01 f5       	brne	.+64     	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
     ff8:	80 91 e8 00 	lds	r24, 0x00E8
     ffc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ffe:	80 93 e8 00 	sts	0x00E8, r24
    1002:	ac db       	rcall	.-2216   	; 0x75c <Endpoint_ClearStatusStage>
    1004:	80 91 3e 02 	lds	r24, 0x023E
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1008:	90 91 3f 02 	lds	r25, 0x023F

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    100c:	99 8b       	std	Y+17, r25	; 0x11
    100e:	88 8b       	std	Y+16, r24	; 0x10
    1010:	ce 01       	movw	r24, r28
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	61 ca       	rjmp	.-2878   	; 0x4da <EVENT_CDC_Device_ControLineStateChanged>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1018:	80 91 3c 02 	lds	r24, 0x023C
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    101c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    101e:	61 f4       	brne	.+24     	; 0x1038 <CDC_Device_ProcessControlRequest+0x15c>
    1020:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	80 93 e8 00 	sts	0x00E8, r24
    102a:	98 db       	rcall	.-2256   	; 0x75c <Endpoint_ClearStatusStage>
    102c:	60 91 3e 02 	lds	r22, 0x023E
    1030:	ce 01       	movw	r24, r28
    1032:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1034:	cf 91       	pop	r28
    1036:	51 cf       	rjmp	.-350    	; 0xeda <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <__udivmodsi4>:
			}

			break;
	}
}
    103e:	a1 e2       	ldi	r26, 0x21	; 33
    1040:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1042:	aa 1b       	sub	r26, r26
    1044:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
    1046:	fd 01       	movw	r30, r26
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <__udivmodsi4_ep>

0000104a <__udivmodsi4_loop>:
    104a:	aa 1f       	adc	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	ee 1f       	adc	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	a2 17       	cp	r26, r18
    1054:	b3 07       	cpc	r27, r19
    1056:	e4 07       	cpc	r30, r20
    1058:	f5 07       	cpc	r31, r21
    105a:	20 f0       	brcs	.+8      	; 0x1064 <__udivmodsi4_ep>
    105c:	a2 1b       	sub	r26, r18
    105e:	b3 0b       	sbc	r27, r19
    1060:	e4 0b       	sbc	r30, r20
    1062:	f5 0b       	sbc	r31, r21

00001064 <__udivmodsi4_ep>:
    1064:	66 1f       	adc	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	1a 94       	dec	r1
    106e:	69 f7       	brne	.-38     	; 0x104a <__udivmodsi4_loop>
    1070:	60 95       	com	r22
    1072:	70 95       	com	r23
    1074:	80 95       	com	r24
    1076:	90 95       	com	r25
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	bd 01       	movw	r22, r26
    107e:	cf 01       	movw	r24, r30
    1080:	08 95       	ret

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
